[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMDl = Package['zodiase:mdl'].MDl;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nprocess = Package.modules.process;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\nSymbol = Package['ecmascript-runtime-client'].Symbol;\nMap = Package['ecmascript-runtime-client'].Map;\nSet = Package['ecmascript-runtime-client'].Set;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"templates\":{\"template.header.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/templates/template.header.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"hello\");                                                                                         // 2\nTemplate[\"hello\"] = new Template(\"Template.hello\", (function() {                                                       // 3\n  var view = this;                                                                                                     // 4\n  return [ HTML.Raw(\"<!-- Simple header with scrollable tabs. -->\\n  \"), HTML.DIV({                                    // 5\n    class: \"mdl-layout mdl-js-layout mdl-layout--fixed-header\"                                                         // 6\n  }, \"\\n    \", HTML.Raw('<header class=\"mdl-layout__header\">\\n      <div class=\"mdl-layout__header-row\">\\n        <!-- Title -->\\n        <span class=\"mdl-layout-title\">Computer Graphics Simulator</span>\\n      </div>\\n      <!-- Tabs -->\\n      <div class=\"mdl-layout__tab-bar mdl-js-ripple-effect\">\\n        <a href=\"#scroll-tab-1\" class=\"mdl-layout__tab is-active\">DDA</a>\\n        <a href=\"#scroll-tab-2\" class=\"mdl-layout__tab\">Bersenham\\'s</a>\\n        <a href=\"#scroll-tab-3\" class=\"mdl-layout__tab\">Midpoint</a>\\n      </div>\\n    </header>'), \"\\n    \", HTML.Raw('<div class=\"mdl-layout__drawer\">\\n      <span class=\"mdl-layout-title\">Computer Graphics Simulator</span>\\n    </div>'), \"\\n    \", HTML.MAIN({\n    class: \"mdl-layout__content\"                                                                                       // 8\n  }, \"\\n      \", HTML.Raw('<section class=\"mdl-layout__tab-panel is-active\" id=\"scroll-tab-1\">\\n        <div class=\"page-content\">\\n          <form action=\"#\">\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n  <input class=\"mdl-textfield__input\" type=\"text\" id=\"x0\">\\n  <label class=\"mdl-textfield__label\" for=\"x0\">Enter X0</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"y0\">\\n<label class=\"mdl-textfield__label\" for=\"y0\">Enter Y0</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"x1\">\\n<label class=\"mdl-textfield__label\" for=\"x1\">Enter X1</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"y1\">\\n<label class=\"mdl-textfield__label\" for=\"y1\">Enter Y1</label>\\n</div>\\n</form>\\n\\n        </div>\\n      </section>'), \"\\n      \", HTML.Raw('<section class=\"mdl-layout__tab-panel\" id=\"scroll-tab-2\">\\n        <div class=\"page-content\"><!-- Your content goes here --></div>\\n      </section>'), \"\\n      \", HTML.SECTION({\n    class: \"mdl-layout__tab-panel\",                                                                                    // 10\n    id: \"scroll-tab-3\"                                                                                                 // 11\n  }, \"\\n        \", HTML.DIV({                                                                                          // 12\n    class: \"page-content\"                                                                                              // 13\n  }, \"\\n          \", HTML.Raw('<div class=\"mdl-textfield mdl-js-textfield\">\\n            <input class=\"mdl-textfield__input\" type=\"text\" id=\"radius\">\\n            <label class=\"mdl-textfield__label\" for=\"radius\">Enter the radius</label>\\n          </div>'), \"\\n\", HTML.Raw('<button id=\"midpointgo\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\">\\n      <span class=\"mdl-chip__contact mdl-color--teal mdl-color-text--white\">GO</span>\\n      Calculate first octant\\n</button>'), \"\\n\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"circlego\"));                                                                    // 15\n  }, function() {                                                                                                      // 16\n    return \"\\ntest\\n\";                                                                                                 // 17\n  }), \"\\n        \"), \"\\n      \"), \"\\n\\n    \"), \"\\n  \") ];                                                              // 18\n}));                                                                                                                   // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.html\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/main.html                                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"./template.main.js\");                                                                        // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.main.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template.main.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.body.addContent((function() {                                                                                 // 2\n  var view = this;                                                                                                     // 3\n  return Spacebars.include(view.lookupTemplate(\"hello\"));                                                              // 4\n}));                                                                                                                   // 5\nMeteor.startup(Template.body.renderToDocument);                                                                        // 6\n                                                                                                                       // 7\nTemplate.__checkName(\"hello\");                                                                                         // 8\nTemplate[\"hello\"] = new Template(\"Template.hello\", (function() {                                                       // 9\n  var view = this;                                                                                                     // 10\n  return [ HTML.Raw(\"<!-- Simple header with scrollable tabs. -->\\n  \"), HTML.DIV({                                    // 11\n    class: \"mdl-layout mdl-js-layout mdl-layout--fixed-header\"                                                         // 12\n  }, \"\\n    \", HTML.Raw('<header class=\"mdl-layout__header\">\\n      <div class=\"mdl-layout__header-row\">\\n        <!-- Title -->\\n        <span class=\"mdl-layout-title\">Computer Graphics Simulator</span>\\n      </div>\\n      <!-- Tabs -->\\n      <div class=\"mdl-layout__tab-bar mdl-js-ripple-effect\">\\n        <a href=\"#scroll-tab-1\" class=\"mdl-layout__tab is-active\">DDA</a>\\n        <a href=\"#scroll-tab-2\" class=\"mdl-layout__tab\">Bersenham\\'s</a>\\n        <a href=\"#scroll-tab-3\" class=\"mdl-layout__tab\">Midpoint</a>\\n      </div>\\n    </header>'), \"\\n    \", HTML.Raw('<div class=\"mdl-layout__drawer\">\\n      <span class=\"mdl-layout-title\">Computer Graphics Simulator</span>\\n    </div>'), \"\\n    \", HTML.MAIN({\n    class: \"mdl-layout__content\"                                                                                       // 14\n  }, \"\\n      \", HTML.Raw('<section class=\"mdl-layout__tab-panel is-active\" id=\"scroll-tab-1\">\\n        <div class=\"page-content\">\\n          <form action=\"#\">\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n  <input class=\"mdl-textfield__input\" type=\"text\" id=\"x0\">\\n  <label class=\"mdl-textfield__label\" for=\"x0\">Enter X0</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"y0\">\\n<label class=\"mdl-textfield__label\" for=\"y0\">Enter Y0</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"x1\">\\n<label class=\"mdl-textfield__label\" for=\"x1\">Enter X1</label>\\n</div>\\n<div class=\"mdl-textfield mdl-js-textfield\">\\n<input class=\"mdl-textfield__input\" type=\"text\" id=\"y1\">\\n<label class=\"mdl-textfield__label\" for=\"y1\">Enter Y1</label>\\n</div>\\n</form>\\n\\n        </div>\\n      </section>'), \"\\n      \", HTML.Raw('<section class=\"mdl-layout__tab-panel\" id=\"scroll-tab-2\">\\n        <div class=\"page-content\"><!-- Your content goes here --></div>\\n      </section>'), \"\\n      \", HTML.SECTION({\n    class: \"mdl-layout__tab-panel\",                                                                                    // 16\n    id: \"scroll-tab-3\"                                                                                                 // 17\n  }, \"\\n        \", HTML.DIV({                                                                                          // 18\n    class: \"page-content\"                                                                                              // 19\n  }, \"\\n          \", HTML.Raw('<div class=\"mdl-textfield mdl-js-textfield\">\\n            <input class=\"mdl-textfield__input\" type=\"text\" id=\"radius\">\\n            <label class=\"mdl-textfield__label\" for=\"radius\">Enter the radius</label>\\n          </div>'), \"\\n\", HTML.Raw('<button id=\"midpointgo\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\">\\n      <span class=\"mdl-chip__contact mdl-color--teal mdl-color-text--white\">GO</span>\\n      Calculate first octant\\n</button>'), \"\\n\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"circlego\"));                                                                    // 21\n  }, function() {                                                                                                      // 22\n    return \"\\ntest\\n\";                                                                                                 // 23\n  }), \"\\n        \"), \"\\n      \"), \"\\n\\n    \"), \"\\n  \") ];                                                              // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Template = void 0;                                                                                                 // 1\nmodule.watch(require(\"meteor/templating\"), {                                                                           // 1\n  Template: function (v) {                                                                                             // 1\n    Template = v;                                                                                                      // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ReactiveVar = void 0;                                                                                              // 1\nmodule.watch(require(\"meteor/reactive-var\"), {                                                                         // 1\n  ReactiveVar: function (v) {                                                                                          // 1\n    ReactiveVar = v;                                                                                                   // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nmodule.watch(require(\"./main.html\"));                                                                                  // 1\nTemplate.hello.onCreated(function () {                                                                                 // 6\n  function helloOnCreated() {                                                                                          // 6\n    // counter starts at 0                                                                                             // 7\n    this.counter = new ReactiveVar(0);                                                                                 // 8\n  }                                                                                                                    // 9\n                                                                                                                       //\n  return helloOnCreated;                                                                                               // 6\n}());                                                                                                                  // 6\nTemplate.hello.helpers({                                                                                               // 11\n  counter: function () {                                                                                               // 12\n    return Template.instance().counter.get();                                                                          // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 11\nTemplate.hello.events({                                                                                                // 17\n  'click button': function (event, instance) {                                                                         // 18\n    cosole.log(\"click\");                                                                                               // 19\n    instance.counter.set(instance.counter.get() + 1);                                                                  // 20\n  }                                                                                                                    // 21\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".css\",\n    \".scss\"\n  ]\n});\nrequire(\"./client/templates/template.header.js\");\nrequire(\"./client/template.main.js\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/settings-file-checked.generated.js                                                                       //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMDl.settings = JSON.parse(decodeURI(\"%7B%22jsLib%22:%7B%22minified%22:false%7D,%22theme%22:%7B%22primary%22:%22indigo%22,%22accent%22:%22pink%22%7D,%22patches%22:%7B%22autoUpgrade%22:%22fullUpgrade%22%7D,%22verbose%22:false%7D\"));\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/dist/material.js                                                                                         //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function() {                                                                                                         // 1\n\"use strict\";                                                                                                          // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * @license                                                                                                            // 5\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 6\n *                                                                                                                     // 7\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 8\n * you may not use this file except in compliance with the License.                                                    // 9\n * You may obtain a copy of the License at                                                                             // 10\n *                                                                                                                     // 11\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 12\n *                                                                                                                     // 13\n * Unless required by applicable law or agreed to in writing, software                                                 // 14\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 15\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16\n * See the License for the specific language governing permissions and                                                 // 17\n * limitations under the License.                                                                                      // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * A component handler interface using the revealing module design pattern.                                            // 22\n * More details on this design pattern here:                                                                           // 23\n * https://github.com/jasonmayes/mdl-component-design-pattern                                                          // 24\n *                                                                                                                     // 25\n * @author Jason Mayes.                                                                                                // 26\n */                                                                                                                    // 27\n/* exported componentHandler */                                                                                        // 28\n                                                                                                                       // 29\n// Pre-defining the componentHandler interface, for closure documentation and                                          // 30\n// static verification.                                                                                                // 31\nvar componentHandler = {                                                                                               // 32\n  /**                                                                                                                  // 33\n   * Searches existing DOM for elements of our component type and upgrades them                                        // 34\n   * if they have not already been upgraded.                                                                           // 35\n   *                                                                                                                   // 36\n   * @param {string=} optJsClass the programatic name of the element class we                                          // 37\n   * need to create a new instance of.                                                                                 // 38\n   * @param {string=} optCssClass the name of the CSS class elements of this                                           // 39\n   * type will have.                                                                                                   // 40\n   */                                                                                                                  // 41\n  upgradeDom: function(optJsClass, optCssClass) {},                                                                    // 42\n  /**                                                                                                                  // 43\n   * Upgrades a specific element rather than all in the DOM.                                                           // 44\n   *                                                                                                                   // 45\n   * @param {!Element} element The element we wish to upgrade.                                                         // 46\n   * @param {string=} optJsClass Optional name of the class we want to upgrade                                         // 47\n   * the element to.                                                                                                   // 48\n   */                                                                                                                  // 49\n  upgradeElement: function(element, optJsClass) {},                                                                    // 50\n  /**                                                                                                                  // 51\n   * Upgrades a specific list of elements rather than all in the DOM.                                                  // 52\n   *                                                                                                                   // 53\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements                                             // 54\n   * The elements we wish to upgrade.                                                                                  // 55\n   */                                                                                                                  // 56\n  upgradeElements: function(elements) {},                                                                              // 57\n  /**                                                                                                                  // 58\n   * Upgrades all registered components found in the current DOM. This is                                              // 59\n   * automatically called on window load.                                                                              // 60\n   */                                                                                                                  // 61\n  upgradeAllRegistered: function() {},                                                                                 // 62\n  /**                                                                                                                  // 63\n   * Allows user to be alerted to any upgrades that are performed for a given                                          // 64\n   * component type                                                                                                    // 65\n   *                                                                                                                   // 66\n   * @param {string} jsClass The class name of the MDL component we wish                                               // 67\n   * to hook into for any upgrades performed.                                                                          // 68\n   * @param {function(!HTMLElement)} callback The function to call upon an                                             // 69\n   * upgrade. This function should expect 1 parameter - the HTMLElement which                                          // 70\n   * got upgraded.                                                                                                     // 71\n   */                                                                                                                  // 72\n  registerUpgradedCallback: function(jsClass, callback) {},                                                            // 73\n  /**                                                                                                                  // 74\n   * Registers a class for future use and attempts to upgrade existing DOM.                                            // 75\n   *                                                                                                                   // 76\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration                             // 77\n   */                                                                                                                  // 78\n  register: function(config) {},                                                                                       // 79\n  /**                                                                                                                  // 80\n   * Downgrade either a given node, an array of nodes, or a NodeList.                                                  // 81\n   *                                                                                                                   // 82\n   * @param {!Node|!Array<!Node>|!NodeList} nodes                                                                      // 83\n   */                                                                                                                  // 84\n  downgradeElements: function(nodes) {}                                                                                // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\ncomponentHandler = (function() {                                                                                       // 88\n  'use strict';                                                                                                        // 89\n                                                                                                                       // 90\n  /** @type {!Array<componentHandler.ComponentConfig>} */                                                              // 91\n  var registeredComponents_ = [];                                                                                      // 92\n                                                                                                                       // 93\n  /** @type {!Array<componentHandler.Component>} */                                                                    // 94\n  var createdComponents_ = [];                                                                                         // 95\n                                                                                                                       // 96\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';                                                        // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Searches registered components for a class we are interested in using.                                            // 100\n   * Optionally replaces a match with passed object if specified.                                                      // 101\n   *                                                                                                                   // 102\n   * @param {string} name The name of a class we want to use.                                                          // 103\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.                      // 104\n   * @return {!Object|boolean}                                                                                         // 105\n   * @private                                                                                                          // 106\n   */                                                                                                                  // 107\n  function findRegisteredClass_(name, optReplace) {                                                                    // 108\n    for (var i = 0; i < registeredComponents_.length; i++) {                                                           // 109\n      if (registeredComponents_[i].className === name) {                                                               // 110\n        if (typeof optReplace !== 'undefined') {                                                                       // 111\n          registeredComponents_[i] = optReplace;                                                                       // 112\n        }                                                                                                              // 113\n        return registeredComponents_[i];                                                                               // 114\n      }                                                                                                                // 115\n    }                                                                                                                  // 116\n    return false;                                                                                                      // 117\n  }                                                                                                                    // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * Returns an array of the classNames of the upgraded classes on the element.                                        // 121\n   *                                                                                                                   // 122\n   * @param {!Element} element The element to fetch data from.                                                         // 123\n   * @return {!Array<string>}                                                                                          // 124\n   * @private                                                                                                          // 125\n   */                                                                                                                  // 126\n  function getUpgradedListOfElement_(element) {                                                                        // 127\n    var dataUpgraded = element.getAttribute('data-upgraded');                                                          // 128\n    // Use `['']` as default value to conform the `,name,name...` style.                                               // 129\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');                                                     // 130\n  }                                                                                                                    // 131\n                                                                                                                       // 132\n  /**                                                                                                                  // 133\n   * Returns true if the given element has already been upgraded for the given                                         // 134\n   * class.                                                                                                            // 135\n   *                                                                                                                   // 136\n   * @param {!Element} element The element we want to check.                                                           // 137\n   * @param {string} jsClass The class to check for.                                                                   // 138\n   * @returns {boolean}                                                                                                // 139\n   * @private                                                                                                          // 140\n   */                                                                                                                  // 141\n  function isElementUpgraded_(element, jsClass) {                                                                      // 142\n    var upgradedList = getUpgradedListOfElement_(element);                                                             // 143\n    return upgradedList.indexOf(jsClass) !== -1;                                                                       // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  /**                                                                                                                  // 147\n   * Searches existing DOM for elements of our component type and upgrades them                                        // 148\n   * if they have not already been upgraded.                                                                           // 149\n   *                                                                                                                   // 150\n   * @param {string=} optJsClass the programatic name of the element class we                                          // 151\n   * need to create a new instance of.                                                                                 // 152\n   * @param {string=} optCssClass the name of the CSS class elements of this                                           // 153\n   * type will have.                                                                                                   // 154\n   */                                                                                                                  // 155\n  function upgradeDomInternal(optJsClass, optCssClass) {                                                               // 156\n    if (typeof optJsClass === 'undefined' &&                                                                           // 157\n        typeof optCssClass === 'undefined') {                                                                          // 158\n      for (var i = 0; i < registeredComponents_.length; i++) {                                                         // 159\n        upgradeDomInternal(registeredComponents_[i].className,                                                         // 160\n            registeredComponents_[i].cssClass);                                                                        // 161\n      }                                                                                                                // 162\n    } else {                                                                                                           // 163\n      var jsClass = /** @type {string} */ (optJsClass);                                                                // 164\n      if (typeof optCssClass === 'undefined') {                                                                        // 165\n        var registeredClass = findRegisteredClass_(jsClass);                                                           // 166\n        if (registeredClass) {                                                                                         // 167\n          optCssClass = registeredClass.cssClass;                                                                      // 168\n        }                                                                                                              // 169\n      }                                                                                                                // 170\n                                                                                                                       // 171\n      var elements = document.querySelectorAll('.' + optCssClass);                                                     // 172\n      for (var n = 0; n < elements.length; n++) {                                                                      // 173\n        upgradeElementInternal(elements[n], jsClass);                                                                  // 174\n      }                                                                                                                // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n                                                                                                                       // 178\n  /**                                                                                                                  // 179\n   * Upgrades a specific element rather than all in the DOM.                                                           // 180\n   *                                                                                                                   // 181\n   * @param {!Element} element The element we wish to upgrade.                                                         // 182\n   * @param {string=} optJsClass Optional name of the class we want to upgrade                                         // 183\n   * the element to.                                                                                                   // 184\n   */                                                                                                                  // 185\n  function upgradeElementInternal(element, optJsClass) {                                                               // 186\n    // Verify argument type.                                                                                           // 187\n    if (!(typeof element === 'object' && element instanceof Element)) {                                                // 188\n      throw new Error('Invalid argument provided to upgrade MDL element.');                                            // 189\n    }                                                                                                                  // 190\n    var upgradedList = getUpgradedListOfElement_(element);                                                             // 191\n    var classesToUpgrade = [];                                                                                         // 192\n    // If jsClass is not provided scan the registered components to find the                                           // 193\n    // ones matching the element's CSS classList.                                                                      // 194\n    if (!optJsClass) {                                                                                                 // 195\n      var classList = element.classList;                                                                               // 196\n      registeredComponents_.forEach(function(component) {                                                              // 197\n        // Match CSS & Not to be upgraded & Not upgraded.                                                              // 198\n        if (classList.contains(component.cssClass) &&                                                                  // 199\n            classesToUpgrade.indexOf(component) === -1 &&                                                              // 200\n            !isElementUpgraded_(element, component.className)) {                                                       // 201\n          classesToUpgrade.push(component);                                                                            // 202\n        }                                                                                                              // 203\n      });                                                                                                              // 204\n    } else if (!isElementUpgraded_(element, optJsClass)) {                                                             // 205\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));                                                         // 206\n    }                                                                                                                  // 207\n                                                                                                                       // 208\n    // Upgrade the element for each classes.                                                                           // 209\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {                                        // 210\n      registeredClass = classesToUpgrade[i];                                                                           // 211\n      if (registeredClass) {                                                                                           // 212\n        // Mark element as upgraded.                                                                                   // 213\n        upgradedList.push(registeredClass.className);                                                                  // 214\n        element.setAttribute('data-upgraded', upgradedList.join(','));                                                 // 215\n        var instance = new registeredClass.classConstructor(element);                                                  // 216\n        instance[componentConfigProperty_] = registeredClass;                                                          // 217\n        createdComponents_.push(instance);                                                                             // 218\n        // Call any callbacks the user has registered with this component type.                                        // 219\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {                                            // 220\n          registeredClass.callbacks[j](element);                                                                       // 221\n        }                                                                                                              // 222\n                                                                                                                       // 223\n        if (registeredClass.widget) {                                                                                  // 224\n          // Assign per element instance for control over API                                                          // 225\n          element[registeredClass.className] = instance;                                                               // 226\n        }                                                                                                              // 227\n      } else {                                                                                                         // 228\n        throw new Error(                                                                                               // 229\n          'Unable to find a registered component for the given class.');                                               // 230\n      }                                                                                                                // 231\n                                                                                                                       // 232\n      var ev;                                                                                                          // 233\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {                                       // 234\n        ev = new Event('mdl-componentupgraded', {                                                                      // 235\n          'bubbles': true, 'cancelable': false                                                                         // 236\n        });                                                                                                            // 237\n      } else {                                                                                                         // 238\n        ev = document.createEvent('Events');                                                                           // 239\n        ev.initEvent('mdl-componentupgraded', true, true);                                                             // 240\n      }                                                                                                                // 241\n      element.dispatchEvent(ev);                                                                                       // 242\n    }                                                                                                                  // 243\n  }                                                                                                                    // 244\n                                                                                                                       // 245\n  /**                                                                                                                  // 246\n   * Upgrades a specific list of elements rather than all in the DOM.                                                  // 247\n   *                                                                                                                   // 248\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements                                             // 249\n   * The elements we wish to upgrade.                                                                                  // 250\n   */                                                                                                                  // 251\n  function upgradeElementsInternal(elements) {                                                                         // 252\n    if (!Array.isArray(elements)) {                                                                                    // 253\n      if (typeof elements.item === 'function') {                                                                       // 254\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));                                        // 255\n      } else {                                                                                                         // 256\n        elements = [elements];                                                                                         // 257\n      }                                                                                                                // 258\n    }                                                                                                                  // 259\n    for (var i = 0, n = elements.length, element; i < n; i++) {                                                        // 260\n      element = elements[i];                                                                                           // 261\n      if (element instanceof HTMLElement) {                                                                            // 262\n        upgradeElementInternal(element);                                                                               // 263\n        if (element.children.length > 0) {                                                                             // 264\n          upgradeElementsInternal(element.children);                                                                   // 265\n        }                                                                                                              // 266\n      }                                                                                                                // 267\n    }                                                                                                                  // 268\n  }                                                                                                                    // 269\n                                                                                                                       // 270\n  /**                                                                                                                  // 271\n   * Registers a class for future use and attempts to upgrade existing DOM.                                            // 272\n   *                                                                                                                   // 273\n   * @param {componentHandler.ComponentConfigPublic} config                                                            // 274\n   */                                                                                                                  // 275\n  function registerInternal(config) {                                                                                  // 276\n    // In order to support both Closure-compiled and uncompiled code accessing                                         // 277\n    // this method, we need to allow for both the dot and array syntax for                                             // 278\n    // property access. You'll therefore see the `foo.bar || foo['bar']`                                               // 279\n    // pattern repeated across this method.                                                                            // 280\n    var widgetMissing = (typeof config.widget === 'undefined' &&                                                       // 281\n        typeof config['widget'] === 'undefined');                                                                      // 282\n    var widget = true;                                                                                                 // 283\n                                                                                                                       // 284\n    if (!widgetMissing) {                                                                                              // 285\n      widget = config.widget || config['widget'];                                                                      // 286\n    }                                                                                                                  // 287\n                                                                                                                       // 288\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({                                                 // 289\n      classConstructor: config.constructor || config['constructor'],                                                   // 290\n      className: config.classAsString || config['classAsString'],                                                      // 291\n      cssClass: config.cssClass || config['cssClass'],                                                                 // 292\n      widget: widget,                                                                                                  // 293\n      callbacks: []                                                                                                    // 294\n    });                                                                                                                // 295\n                                                                                                                       // 296\n    registeredComponents_.forEach(function(item) {                                                                     // 297\n      if (item.cssClass === newConfig.cssClass) {                                                                      // 298\n        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);                        // 299\n      }                                                                                                                // 300\n      if (item.className === newConfig.className) {                                                                    // 301\n        throw new Error('The provided className has already been registered');                                         // 302\n      }                                                                                                                // 303\n    });                                                                                                                // 304\n                                                                                                                       // 305\n    if (config.constructor.prototype                                                                                   // 306\n        .hasOwnProperty(componentConfigProperty_)) {                                                                   // 307\n      throw new Error(                                                                                                 // 308\n          'MDL component classes must not have ' + componentConfigProperty_ +                                          // 309\n          ' defined as a property.');                                                                                  // 310\n    }                                                                                                                  // 311\n                                                                                                                       // 312\n    var found = findRegisteredClass_(config.classAsString, newConfig);                                                 // 313\n                                                                                                                       // 314\n    if (!found) {                                                                                                      // 315\n      registeredComponents_.push(newConfig);                                                                           // 316\n    }                                                                                                                  // 317\n  }                                                                                                                    // 318\n                                                                                                                       // 319\n  /**                                                                                                                  // 320\n   * Allows user to be alerted to any upgrades that are performed for a given                                          // 321\n   * component type                                                                                                    // 322\n   *                                                                                                                   // 323\n   * @param {string} jsClass The class name of the MDL component we wish                                               // 324\n   * to hook into for any upgrades performed.                                                                          // 325\n   * @param {function(!HTMLElement)} callback The function to call upon an                                             // 326\n   * upgrade. This function should expect 1 parameter - the HTMLElement which                                          // 327\n   * got upgraded.                                                                                                     // 328\n   */                                                                                                                  // 329\n  function registerUpgradedCallbackInternal(jsClass, callback) {                                                       // 330\n    var regClass = findRegisteredClass_(jsClass);                                                                      // 331\n    if (regClass) {                                                                                                    // 332\n      regClass.callbacks.push(callback);                                                                               // 333\n    }                                                                                                                  // 334\n  }                                                                                                                    // 335\n                                                                                                                       // 336\n  /**                                                                                                                  // 337\n   * Upgrades all registered components found in the current DOM. This is                                              // 338\n   * automatically called on window load.                                                                              // 339\n   */                                                                                                                  // 340\n  function upgradeAllRegisteredInternal() {                                                                            // 341\n    for (var n = 0; n < registeredComponents_.length; n++) {                                                           // 342\n      upgradeDomInternal(registeredComponents_[n].className);                                                          // 343\n    }                                                                                                                  // 344\n  }                                                                                                                    // 345\n                                                                                                                       // 346\n  /**                                                                                                                  // 347\n   * Check the component for the downgrade method.                                                                     // 348\n   * Execute if found.                                                                                                 // 349\n   * Remove component from createdComponents list.                                                                     // 350\n   *                                                                                                                   // 351\n   * @param {?componentHandler.Component} component                                                                    // 352\n   */                                                                                                                  // 353\n  function deconstructComponentInternal(component) {                                                                   // 354\n    if (component) {                                                                                                   // 355\n      var componentIndex = createdComponents_.indexOf(component);                                                      // 356\n      createdComponents_.splice(componentIndex, 1);                                                                    // 357\n                                                                                                                       // 358\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');                                      // 359\n      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);                        // 360\n      upgrades.splice(componentPlace, 1);                                                                              // 361\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));                                            // 362\n                                                                                                                       // 363\n      var ev;                                                                                                          // 364\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {                                       // 365\n        ev = new Event('mdl-componentdowngraded', {                                                                    // 366\n          'bubbles': true, 'cancelable': false                                                                         // 367\n        });                                                                                                            // 368\n      } else {                                                                                                         // 369\n        ev = document.createEvent('Events');                                                                           // 370\n        ev.initEvent('mdl-componentdowngraded', true, true);                                                           // 371\n      }                                                                                                                // 372\n    }                                                                                                                  // 373\n  }                                                                                                                    // 374\n                                                                                                                       // 375\n  /**                                                                                                                  // 376\n   * Downgrade either a given node, an array of nodes, or a NodeList.                                                  // 377\n   *                                                                                                                   // 378\n   * @param {!Node|!Array<!Node>|!NodeList} nodes                                                                      // 379\n   */                                                                                                                  // 380\n  function downgradeNodesInternal(nodes) {                                                                             // 381\n    /**                                                                                                                // 382\n     * Auxiliary function to downgrade a single node.                                                                  // 383\n     * @param  {!Node} node the node to be downgraded                                                                  // 384\n     */                                                                                                                // 385\n    var downgradeNode = function(node) {                                                                               // 386\n      createdComponents_.filter(function(item) {                                                                       // 387\n        return item.element_ === node;                                                                                 // 388\n      }).forEach(deconstructComponentInternal);                                                                        // 389\n    };                                                                                                                 // 390\n    if (nodes instanceof Array || nodes instanceof NodeList) {                                                         // 391\n      for (var n = 0; n < nodes.length; n++) {                                                                         // 392\n        downgradeNode(nodes[n]);                                                                                       // 393\n      }                                                                                                                // 394\n    } else if (nodes instanceof Node) {                                                                                // 395\n      downgradeNode(nodes);                                                                                            // 396\n    } else {                                                                                                           // 397\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');                                            // 398\n    }                                                                                                                  // 399\n  }                                                                                                                    // 400\n                                                                                                                       // 401\n  // Now return the functions that should be made public with their publicly                                           // 402\n  // facing names...                                                                                                   // 403\n  return {                                                                                                             // 404\n    upgradeDom: upgradeDomInternal,                                                                                    // 405\n    upgradeElement: upgradeElementInternal,                                                                            // 406\n    upgradeElements: upgradeElementsInternal,                                                                          // 407\n    upgradeAllRegistered: upgradeAllRegisteredInternal,                                                                // 408\n    registerUpgradedCallback: registerUpgradedCallbackInternal,                                                        // 409\n    register: registerInternal,                                                                                        // 410\n    downgradeElements: downgradeNodesInternal                                                                          // 411\n  };                                                                                                                   // 412\n})();                                                                                                                  // 413\n                                                                                                                       // 414\n/**                                                                                                                    // 415\n * Describes the type of a registered component type managed by                                                        // 416\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 417\n *                                                                                                                     // 418\n * @typedef {{                                                                                                         // 419\n *   constructor: Function,                                                                                            // 420\n *   classAsString: string,                                                                                            // 421\n *   cssClass: string,                                                                                                 // 422\n *   widget: (string|boolean|undefined)                                                                                // 423\n * }}                                                                                                                  // 424\n */                                                                                                                    // 425\ncomponentHandler.ComponentConfigPublic;  // jshint ignore:line                                                         // 426\n                                                                                                                       // 427\n/**                                                                                                                    // 428\n * Describes the type of a registered component type managed by                                                        // 429\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 430\n *                                                                                                                     // 431\n * @typedef {{                                                                                                         // 432\n *   constructor: !Function,                                                                                           // 433\n *   className: string,                                                                                                // 434\n *   cssClass: string,                                                                                                 // 435\n *   widget: (string|boolean),                                                                                         // 436\n *   callbacks: !Array<function(!HTMLElement)>                                                                         // 437\n * }}                                                                                                                  // 438\n */                                                                                                                    // 439\ncomponentHandler.ComponentConfig;  // jshint ignore:line                                                               // 440\n                                                                                                                       // 441\n/**                                                                                                                    // 442\n * Created component (i.e., upgraded element) type as managed by                                                       // 443\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 444\n *                                                                                                                     // 445\n * @typedef {{                                                                                                         // 446\n *   element_: !HTMLElement,                                                                                           // 447\n *   className: string,                                                                                                // 448\n *   classAsString: string,                                                                                            // 449\n *   cssClass: string,                                                                                                 // 450\n *   widget: string                                                                                                    // 451\n * }}                                                                                                                  // 452\n */                                                                                                                    // 453\ncomponentHandler.Component;  // jshint ignore:line                                                                     // 454\n                                                                                                                       // 455\n// Export all symbols, for the benefit of Closure compiler.                                                            // 456\n// No effect on uncompiled code.                                                                                       // 457\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;                                                          // 458\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;                                                  // 459\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;                                                // 460\ncomponentHandler['upgradeAllRegistered'] =                                                                             // 461\n    componentHandler.upgradeAllRegistered;                                                                             // 462\ncomponentHandler['registerUpgradedCallback'] =                                                                         // 463\n    componentHandler.registerUpgradedCallback;                                                                         // 464\ncomponentHandler['register'] = componentHandler.register;                                                              // 465\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;                                            // 466\nwindow.componentHandler = componentHandler;                                                                            // 467\nwindow['componentHandler'] = componentHandler;                                                                         // 468\n                                                                                                                       // 469\nwindow.addEventListener('load', function() {                                                                           // 470\n  'use strict';                                                                                                        // 471\n                                                                                                                       // 472\n  /**                                                                                                                  // 473\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features                                       // 474\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL                                       // 475\n   * components requiring JavaScript.                                                                                  // 476\n   */                                                                                                                  // 477\n  if ('classList' in document.createElement('div') &&                                                                  // 478\n      'querySelector' in document &&                                                                                   // 479\n      'addEventListener' in window && Array.prototype.forEach) {                                                       // 480\n    document.documentElement.classList.add('mdl-js');                                                                  // 481\n    componentHandler.upgradeAllRegistered();                                                                           // 482\n  } else {                                                                                                             // 483\n    /**                                                                                                                // 484\n     * Dummy function to avoid JS errors.                                                                              // 485\n     */                                                                                                                // 486\n    componentHandler.upgradeElement = function() {};                                                                   // 487\n    /**                                                                                                                // 488\n     * Dummy function to avoid JS errors.                                                                              // 489\n     */                                                                                                                // 490\n    componentHandler.register = function() {};                                                                         // 491\n  }                                                                                                                    // 492\n});                                                                                                                    // 493\n                                                                                                                       // 494\n// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js                        // 495\n// Adapted from https://gist.github.com/paulirish/1579671 which derived from                                           // 496\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/                                                // 497\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating                            // 498\n// requestAnimationFrame polyfill by Erik Möller.                                                                      // 499\n// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon                                         // 500\n// MIT license                                                                                                         // 501\nif (!Date.now) {                                                                                                       // 502\n    /**                                                                                                                // 503\n   * Date.now polyfill.                                                                                                // 504\n   * @return {number} the current Date                                                                                 // 505\n   */                                                                                                                  // 506\n    Date.now = function () {                                                                                           // 507\n        return new Date().getTime();                                                                                   // 508\n    };                                                                                                                 // 509\n    Date['now'] = Date.now;                                                                                            // 510\n}                                                                                                                      // 511\nvar vendors = [                                                                                                        // 512\n    'webkit',                                                                                                          // 513\n    'moz'                                                                                                              // 514\n];                                                                                                                     // 515\nfor (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {                                            // 516\n    var vp = vendors[i];                                                                                               // 517\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];                                               // 518\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];   // 519\n    window['requestAnimationFrame'] = window.requestAnimationFrame;                                                    // 520\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;                                                      // 521\n}                                                                                                                      // 522\nif (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n    var lastTime = 0;                                                                                                  // 524\n    /**                                                                                                                // 525\n   * requestAnimationFrame polyfill.                                                                                   // 526\n   * @param  {!Function} callback the callback function.                                                               // 527\n   */                                                                                                                  // 528\n    window.requestAnimationFrame = function (callback) {                                                               // 529\n        var now = Date.now();                                                                                          // 530\n        var nextTime = Math.max(lastTime + 16, now);                                                                   // 531\n        return setTimeout(function () {                                                                                // 532\n            callback(lastTime = nextTime);                                                                             // 533\n        }, nextTime - now);                                                                                            // 534\n    };                                                                                                                 // 535\n    window.cancelAnimationFrame = clearTimeout;                                                                        // 536\n    window['requestAnimationFrame'] = window.requestAnimationFrame;                                                    // 537\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;                                                      // 538\n}                                                                                                                      // 539\n/**                                                                                                                    // 540\n * @license                                                                                                            // 541\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 542\n *                                                                                                                     // 543\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 544\n * you may not use this file except in compliance with the License.                                                    // 545\n * You may obtain a copy of the License at                                                                             // 546\n *                                                                                                                     // 547\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 548\n *                                                                                                                     // 549\n * Unless required by applicable law or agreed to in writing, software                                                 // 550\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 551\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 552\n * See the License for the specific language governing permissions and                                                 // 553\n * limitations under the License.                                                                                      // 554\n */                                                                                                                    // 555\n/**                                                                                                                    // 556\n   * Class constructor for Button MDL component.                                                                       // 557\n   * Implements MDL component design pattern defined at:                                                               // 558\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 559\n   *                                                                                                                   // 560\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 561\n   */                                                                                                                  // 562\nvar MaterialButton = function MaterialButton(element) {                                                                // 563\n    this.element_ = element;                                                                                           // 564\n    // Initialize instance.                                                                                            // 565\n    this.init();                                                                                                       // 566\n};                                                                                                                     // 567\nwindow['MaterialButton'] = MaterialButton;                                                                             // 568\n/**                                                                                                                    // 569\n   * Store constants in one place so they can be updated easily.                                                       // 570\n   *                                                                                                                   // 571\n   * @enum {string | number}                                                                                           // 572\n   * @private                                                                                                          // 573\n   */                                                                                                                  // 574\nMaterialButton.prototype.Constant_ = {};                                                                               // 575\n/**                                                                                                                    // 576\n   * Store strings for class names defined by this component that are used in                                          // 577\n   * JavaScript. This allows us to simply change it in one place should we                                             // 578\n   * decide to modify at a later date.                                                                                 // 579\n   *                                                                                                                   // 580\n   * @enum {string}                                                                                                    // 581\n   * @private                                                                                                          // 582\n   */                                                                                                                  // 583\nMaterialButton.prototype.CssClasses_ = {                                                                               // 584\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 585\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',                                                                  // 586\n    RIPPLE: 'mdl-ripple'                                                                                               // 587\n};                                                                                                                     // 588\n/**                                                                                                                    // 589\n   * Handle blur of element.                                                                                           // 590\n   *                                                                                                                   // 591\n   * @param {Event} event The event that fired.                                                                        // 592\n   * @private                                                                                                          // 593\n   */                                                                                                                  // 594\nMaterialButton.prototype.blurHandler_ = function (event) {                                                             // 595\n    if (event) {                                                                                                       // 596\n        this.element_.blur();                                                                                          // 597\n    }                                                                                                                  // 598\n};                                                                                                                     // 599\n// Public methods.                                                                                                     // 600\n/**                                                                                                                    // 601\n   * Disable button.                                                                                                   // 602\n   *                                                                                                                   // 603\n   * @public                                                                                                           // 604\n   */                                                                                                                  // 605\nMaterialButton.prototype.disable = function () {                                                                       // 606\n    this.element_.disabled = true;                                                                                     // 607\n};                                                                                                                     // 608\nMaterialButton.prototype['disable'] = MaterialButton.prototype.disable;                                                // 609\n/**                                                                                                                    // 610\n   * Enable button.                                                                                                    // 611\n   *                                                                                                                   // 612\n   * @public                                                                                                           // 613\n   */                                                                                                                  // 614\nMaterialButton.prototype.enable = function () {                                                                        // 615\n    this.element_.disabled = false;                                                                                    // 616\n};                                                                                                                     // 617\nMaterialButton.prototype['enable'] = MaterialButton.prototype.enable;                                                  // 618\n/**                                                                                                                    // 619\n   * Initialize element.                                                                                               // 620\n   */                                                                                                                  // 621\nMaterialButton.prototype.init = function () {                                                                          // 622\n    if (this.element_) {                                                                                               // 623\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 624\n            var rippleContainer = document.createElement('span');                                                      // 625\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                                          // 626\n            this.rippleElement_ = document.createElement('span');                                                      // 627\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);                                                // 628\n            rippleContainer.appendChild(this.rippleElement_);                                                          // 629\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);                                                // 630\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);                              // 631\n            this.element_.appendChild(rippleContainer);                                                                // 632\n        }                                                                                                              // 633\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);                                                    // 634\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);                                        // 635\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);                                     // 636\n    }                                                                                                                  // 637\n};                                                                                                                     // 638\n// The component registers itself. It can assume componentHandler is available                                         // 639\n// in the global scope.                                                                                                // 640\ncomponentHandler.register({                                                                                            // 641\n    constructor: MaterialButton,                                                                                       // 642\n    classAsString: 'MaterialButton',                                                                                   // 643\n    cssClass: 'mdl-js-button',                                                                                         // 644\n    widget: true                                                                                                       // 645\n});                                                                                                                    // 646\n/**                                                                                                                    // 647\n * @license                                                                                                            // 648\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 649\n *                                                                                                                     // 650\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 651\n * you may not use this file except in compliance with the License.                                                    // 652\n * You may obtain a copy of the License at                                                                             // 653\n *                                                                                                                     // 654\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 655\n *                                                                                                                     // 656\n * Unless required by applicable law or agreed to in writing, software                                                 // 657\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 658\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 659\n * See the License for the specific language governing permissions and                                                 // 660\n * limitations under the License.                                                                                      // 661\n */                                                                                                                    // 662\n/**                                                                                                                    // 663\n   * Class constructor for Checkbox MDL component.                                                                     // 664\n   * Implements MDL component design pattern defined at:                                                               // 665\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 666\n   *                                                                                                                   // 667\n   * @constructor                                                                                                      // 668\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 669\n   */                                                                                                                  // 670\nvar MaterialCheckbox = function MaterialCheckbox(element) {                                                            // 671\n    this.element_ = element;                                                                                           // 672\n    // Initialize instance.                                                                                            // 673\n    this.init();                                                                                                       // 674\n};                                                                                                                     // 675\nwindow['MaterialCheckbox'] = MaterialCheckbox;                                                                         // 676\n/**                                                                                                                    // 677\n   * Store constants in one place so they can be updated easily.                                                       // 678\n   *                                                                                                                   // 679\n   * @enum {string | number}                                                                                           // 680\n   * @private                                                                                                          // 681\n   */                                                                                                                  // 682\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                        // 683\n/**                                                                                                                    // 684\n   * Store strings for class names defined by this component that are used in                                          // 685\n   * JavaScript. This allows us to simply change it in one place should we                                             // 686\n   * decide to modify at a later date.                                                                                 // 687\n   *                                                                                                                   // 688\n   * @enum {string}                                                                                                    // 689\n   * @private                                                                                                          // 690\n   */                                                                                                                  // 691\nMaterialCheckbox.prototype.CssClasses_ = {                                                                             // 692\n    INPUT: 'mdl-checkbox__input',                                                                                      // 693\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',                                                                          // 694\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',                                                                        // 695\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',                                                                        // 696\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 697\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 698\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',                                                                // 699\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 700\n    RIPPLE: 'mdl-ripple',                                                                                              // 701\n    IS_FOCUSED: 'is-focused',                                                                                          // 702\n    IS_DISABLED: 'is-disabled',                                                                                        // 703\n    IS_CHECKED: 'is-checked',                                                                                          // 704\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 705\n};                                                                                                                     // 706\n/**                                                                                                                    // 707\n   * Handle change of state.                                                                                           // 708\n   *                                                                                                                   // 709\n   * @param {Event} event The event that fired.                                                                        // 710\n   * @private                                                                                                          // 711\n   */                                                                                                                  // 712\nMaterialCheckbox.prototype.onChange_ = function (event) {                                                              // 713\n    this.updateClasses_();                                                                                             // 714\n};                                                                                                                     // 715\n/**                                                                                                                    // 716\n   * Handle focus of element.                                                                                          // 717\n   *                                                                                                                   // 718\n   * @param {Event} event The event that fired.                                                                        // 719\n   * @private                                                                                                          // 720\n   */                                                                                                                  // 721\nMaterialCheckbox.prototype.onFocus_ = function (event) {                                                               // 722\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 723\n};                                                                                                                     // 724\n/**                                                                                                                    // 725\n   * Handle lost focus of element.                                                                                     // 726\n   *                                                                                                                   // 727\n   * @param {Event} event The event that fired.                                                                        // 728\n   * @private                                                                                                          // 729\n   */                                                                                                                  // 730\nMaterialCheckbox.prototype.onBlur_ = function (event) {                                                                // 731\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 732\n};                                                                                                                     // 733\n/**                                                                                                                    // 734\n   * Handle mouseup.                                                                                                   // 735\n   *                                                                                                                   // 736\n   * @param {Event} event The event that fired.                                                                        // 737\n   * @private                                                                                                          // 738\n   */                                                                                                                  // 739\nMaterialCheckbox.prototype.onMouseUp_ = function (event) {                                                             // 740\n    this.blur_();                                                                                                      // 741\n};                                                                                                                     // 742\n/**                                                                                                                    // 743\n   * Handle class updates.                                                                                             // 744\n   *                                                                                                                   // 745\n   * @private                                                                                                          // 746\n   */                                                                                                                  // 747\nMaterialCheckbox.prototype.updateClasses_ = function () {                                                              // 748\n    this.checkDisabled();                                                                                              // 749\n    this.checkToggleState();                                                                                           // 750\n};                                                                                                                     // 751\n/**                                                                                                                    // 752\n   * Add blur.                                                                                                         // 753\n   *                                                                                                                   // 754\n   * @private                                                                                                          // 755\n   */                                                                                                                  // 756\nMaterialCheckbox.prototype.blur_ = function () {                                                                       // 757\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 758\n    // so that we can avoid this hack.                                                                                 // 759\n    window.setTimeout(function () {                                                                                    // 760\n        this.inputElement_.blur();                                                                                     // 761\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 762\n};                                                                                                                     // 763\n// Public methods.                                                                                                     // 764\n/**                                                                                                                    // 765\n   * Check the inputs toggle state and update display.                                                                 // 766\n   *                                                                                                                   // 767\n   * @public                                                                                                           // 768\n   */                                                                                                                  // 769\nMaterialCheckbox.prototype.checkToggleState = function () {                                                            // 770\n    if (this.inputElement_.checked) {                                                                                  // 771\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 772\n    } else {                                                                                                           // 773\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 774\n    }                                                                                                                  // 775\n};                                                                                                                     // 776\nMaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;                          // 777\n/**                                                                                                                    // 778\n   * Check the inputs disabled state and update display.                                                               // 779\n   *                                                                                                                   // 780\n   * @public                                                                                                           // 781\n   */                                                                                                                  // 782\nMaterialCheckbox.prototype.checkDisabled = function () {                                                               // 783\n    if (this.inputElement_.disabled) {                                                                                 // 784\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 785\n    } else {                                                                                                           // 786\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 787\n    }                                                                                                                  // 788\n};                                                                                                                     // 789\nMaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;                                // 790\n/**                                                                                                                    // 791\n   * Disable checkbox.                                                                                                 // 792\n   *                                                                                                                   // 793\n   * @public                                                                                                           // 794\n   */                                                                                                                  // 795\nMaterialCheckbox.prototype.disable = function () {                                                                     // 796\n    this.inputElement_.disabled = true;                                                                                // 797\n    this.updateClasses_();                                                                                             // 798\n};                                                                                                                     // 799\nMaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;                                            // 800\n/**                                                                                                                    // 801\n   * Enable checkbox.                                                                                                  // 802\n   *                                                                                                                   // 803\n   * @public                                                                                                           // 804\n   */                                                                                                                  // 805\nMaterialCheckbox.prototype.enable = function () {                                                                      // 806\n    this.inputElement_.disabled = false;                                                                               // 807\n    this.updateClasses_();                                                                                             // 808\n};                                                                                                                     // 809\nMaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;                                              // 810\n/**                                                                                                                    // 811\n   * Check checkbox.                                                                                                   // 812\n   *                                                                                                                   // 813\n   * @public                                                                                                           // 814\n   */                                                                                                                  // 815\nMaterialCheckbox.prototype.check = function () {                                                                       // 816\n    this.inputElement_.checked = true;                                                                                 // 817\n    this.updateClasses_();                                                                                             // 818\n};                                                                                                                     // 819\nMaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;                                                // 820\n/**                                                                                                                    // 821\n   * Uncheck checkbox.                                                                                                 // 822\n   *                                                                                                                   // 823\n   * @public                                                                                                           // 824\n   */                                                                                                                  // 825\nMaterialCheckbox.prototype.uncheck = function () {                                                                     // 826\n    this.inputElement_.checked = false;                                                                                // 827\n    this.updateClasses_();                                                                                             // 828\n};                                                                                                                     // 829\nMaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;                                            // 830\n/**                                                                                                                    // 831\n   * Initialize element.                                                                                               // 832\n   */                                                                                                                  // 833\nMaterialCheckbox.prototype.init = function () {                                                                        // 834\n    if (this.element_) {                                                                                               // 835\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 836\n        var boxOutline = document.createElement('span');                                                               // 837\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);                                                        // 838\n        var tickContainer = document.createElement('span');                                                            // 839\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);                                                    // 840\n        var tickOutline = document.createElement('span');                                                              // 841\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);                                                      // 842\n        boxOutline.appendChild(tickOutline);                                                                           // 843\n        this.element_.appendChild(tickContainer);                                                                      // 844\n        this.element_.appendChild(boxOutline);                                                                         // 845\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 846\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 847\n            this.rippleContainerElement_ = document.createElement('span');                                             // 848\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 849\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                // 850\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 851\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);                                                      // 852\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);                         // 853\n            var ripple = document.createElement('span');                                                               // 854\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 855\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 856\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 857\n        }                                                                                                              // 858\n        this.boundInputOnChange = this.onChange_.bind(this);                                                           // 859\n        this.boundInputOnFocus = this.onFocus_.bind(this);                                                             // 860\n        this.boundInputOnBlur = this.onBlur_.bind(this);                                                               // 861\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);                                                         // 862\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);                                        // 863\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);                                          // 864\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);                                            // 865\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);                                           // 866\n        this.updateClasses_();                                                                                         // 867\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 868\n    }                                                                                                                  // 869\n};                                                                                                                     // 870\n// The component registers itself. It can assume componentHandler is available                                         // 871\n// in the global scope.                                                                                                // 872\ncomponentHandler.register({                                                                                            // 873\n    constructor: MaterialCheckbox,                                                                                     // 874\n    classAsString: 'MaterialCheckbox',                                                                                 // 875\n    cssClass: 'mdl-js-checkbox',                                                                                       // 876\n    widget: true                                                                                                       // 877\n});                                                                                                                    // 878\n/**                                                                                                                    // 879\n * @license                                                                                                            // 880\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 881\n *                                                                                                                     // 882\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 883\n * you may not use this file except in compliance with the License.                                                    // 884\n * You may obtain a copy of the License at                                                                             // 885\n *                                                                                                                     // 886\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 887\n *                                                                                                                     // 888\n * Unless required by applicable law or agreed to in writing, software                                                 // 889\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 890\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 891\n * See the License for the specific language governing permissions and                                                 // 892\n * limitations under the License.                                                                                      // 893\n */                                                                                                                    // 894\n/**                                                                                                                    // 895\n   * Class constructor for icon toggle MDL component.                                                                  // 896\n   * Implements MDL component design pattern defined at:                                                               // 897\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 898\n   *                                                                                                                   // 899\n   * @constructor                                                                                                      // 900\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 901\n   */                                                                                                                  // 902\nvar MaterialIconToggle = function MaterialIconToggle(element) {                                                        // 903\n    this.element_ = element;                                                                                           // 904\n    // Initialize instance.                                                                                            // 905\n    this.init();                                                                                                       // 906\n};                                                                                                                     // 907\nwindow['MaterialIconToggle'] = MaterialIconToggle;                                                                     // 908\n/**                                                                                                                    // 909\n   * Store constants in one place so they can be updated easily.                                                       // 910\n   *                                                                                                                   // 911\n   * @enum {string | number}                                                                                           // 912\n   * @private                                                                                                          // 913\n   */                                                                                                                  // 914\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                      // 915\n/**                                                                                                                    // 916\n   * Store strings for class names defined by this component that are used in                                          // 917\n   * JavaScript. This allows us to simply change it in one place should we                                             // 918\n   * decide to modify at a later date.                                                                                 // 919\n   *                                                                                                                   // 920\n   * @enum {string}                                                                                                    // 921\n   * @private                                                                                                          // 922\n   */                                                                                                                  // 923\nMaterialIconToggle.prototype.CssClasses_ = {                                                                           // 924\n    INPUT: 'mdl-icon-toggle__input',                                                                                   // 925\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                          // 926\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 927\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',                                                             // 928\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 929\n    RIPPLE: 'mdl-ripple',                                                                                              // 930\n    IS_FOCUSED: 'is-focused',                                                                                          // 931\n    IS_DISABLED: 'is-disabled',                                                                                        // 932\n    IS_CHECKED: 'is-checked'                                                                                           // 933\n};                                                                                                                     // 934\n/**                                                                                                                    // 935\n   * Handle change of state.                                                                                           // 936\n   *                                                                                                                   // 937\n   * @param {Event} event The event that fired.                                                                        // 938\n   * @private                                                                                                          // 939\n   */                                                                                                                  // 940\nMaterialIconToggle.prototype.onChange_ = function (event) {                                                            // 941\n    this.updateClasses_();                                                                                             // 942\n};                                                                                                                     // 943\n/**                                                                                                                    // 944\n   * Handle focus of element.                                                                                          // 945\n   *                                                                                                                   // 946\n   * @param {Event} event The event that fired.                                                                        // 947\n   * @private                                                                                                          // 948\n   */                                                                                                                  // 949\nMaterialIconToggle.prototype.onFocus_ = function (event) {                                                             // 950\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 951\n};                                                                                                                     // 952\n/**                                                                                                                    // 953\n   * Handle lost focus of element.                                                                                     // 954\n   *                                                                                                                   // 955\n   * @param {Event} event The event that fired.                                                                        // 956\n   * @private                                                                                                          // 957\n   */                                                                                                                  // 958\nMaterialIconToggle.prototype.onBlur_ = function (event) {                                                              // 959\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 960\n};                                                                                                                     // 961\n/**                                                                                                                    // 962\n   * Handle mouseup.                                                                                                   // 963\n   *                                                                                                                   // 964\n   * @param {Event} event The event that fired.                                                                        // 965\n   * @private                                                                                                          // 966\n   */                                                                                                                  // 967\nMaterialIconToggle.prototype.onMouseUp_ = function (event) {                                                           // 968\n    this.blur_();                                                                                                      // 969\n};                                                                                                                     // 970\n/**                                                                                                                    // 971\n   * Handle class updates.                                                                                             // 972\n   *                                                                                                                   // 973\n   * @private                                                                                                          // 974\n   */                                                                                                                  // 975\nMaterialIconToggle.prototype.updateClasses_ = function () {                                                            // 976\n    this.checkDisabled();                                                                                              // 977\n    this.checkToggleState();                                                                                           // 978\n};                                                                                                                     // 979\n/**                                                                                                                    // 980\n   * Add blur.                                                                                                         // 981\n   *                                                                                                                   // 982\n   * @private                                                                                                          // 983\n   */                                                                                                                  // 984\nMaterialIconToggle.prototype.blur_ = function () {                                                                     // 985\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 986\n    // so that we can avoid this hack.                                                                                 // 987\n    window.setTimeout(function () {                                                                                    // 988\n        this.inputElement_.blur();                                                                                     // 989\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 990\n};                                                                                                                     // 991\n// Public methods.                                                                                                     // 992\n/**                                                                                                                    // 993\n   * Check the inputs toggle state and update display.                                                                 // 994\n   *                                                                                                                   // 995\n   * @public                                                                                                           // 996\n   */                                                                                                                  // 997\nMaterialIconToggle.prototype.checkToggleState = function () {                                                          // 998\n    if (this.inputElement_.checked) {                                                                                  // 999\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 1000\n    } else {                                                                                                           // 1001\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 1002\n    }                                                                                                                  // 1003\n};                                                                                                                     // 1004\nMaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;                      // 1005\n/**                                                                                                                    // 1006\n   * Check the inputs disabled state and update display.                                                               // 1007\n   *                                                                                                                   // 1008\n   * @public                                                                                                           // 1009\n   */                                                                                                                  // 1010\nMaterialIconToggle.prototype.checkDisabled = function () {                                                             // 1011\n    if (this.inputElement_.disabled) {                                                                                 // 1012\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 1013\n    } else {                                                                                                           // 1014\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 1015\n    }                                                                                                                  // 1016\n};                                                                                                                     // 1017\nMaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;                            // 1018\n/**                                                                                                                    // 1019\n   * Disable icon toggle.                                                                                              // 1020\n   *                                                                                                                   // 1021\n   * @public                                                                                                           // 1022\n   */                                                                                                                  // 1023\nMaterialIconToggle.prototype.disable = function () {                                                                   // 1024\n    this.inputElement_.disabled = true;                                                                                // 1025\n    this.updateClasses_();                                                                                             // 1026\n};                                                                                                                     // 1027\nMaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;                                        // 1028\n/**                                                                                                                    // 1029\n   * Enable icon toggle.                                                                                               // 1030\n   *                                                                                                                   // 1031\n   * @public                                                                                                           // 1032\n   */                                                                                                                  // 1033\nMaterialIconToggle.prototype.enable = function () {                                                                    // 1034\n    this.inputElement_.disabled = false;                                                                               // 1035\n    this.updateClasses_();                                                                                             // 1036\n};                                                                                                                     // 1037\nMaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;                                          // 1038\n/**                                                                                                                    // 1039\n   * Check icon toggle.                                                                                                // 1040\n   *                                                                                                                   // 1041\n   * @public                                                                                                           // 1042\n   */                                                                                                                  // 1043\nMaterialIconToggle.prototype.check = function () {                                                                     // 1044\n    this.inputElement_.checked = true;                                                                                 // 1045\n    this.updateClasses_();                                                                                             // 1046\n};                                                                                                                     // 1047\nMaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;                                            // 1048\n/**                                                                                                                    // 1049\n   * Uncheck icon toggle.                                                                                              // 1050\n   *                                                                                                                   // 1051\n   * @public                                                                                                           // 1052\n   */                                                                                                                  // 1053\nMaterialIconToggle.prototype.uncheck = function () {                                                                   // 1054\n    this.inputElement_.checked = false;                                                                                // 1055\n    this.updateClasses_();                                                                                             // 1056\n};                                                                                                                     // 1057\nMaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;                                        // 1058\n/**                                                                                                                    // 1059\n   * Initialize element.                                                                                               // 1060\n   */                                                                                                                  // 1061\nMaterialIconToggle.prototype.init = function () {                                                                      // 1062\n    if (this.element_) {                                                                                               // 1063\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 1064\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {                                     // 1065\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1066\n            this.rippleContainerElement_ = document.createElement('span');                                             // 1067\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 1068\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);                             // 1069\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 1070\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);                                                      // 1071\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);                         // 1072\n            var ripple = document.createElement('span');                                                               // 1073\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 1074\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 1075\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 1076\n        }                                                                                                              // 1077\n        this.boundInputOnChange = this.onChange_.bind(this);                                                           // 1078\n        this.boundInputOnFocus = this.onFocus_.bind(this);                                                             // 1079\n        this.boundInputOnBlur = this.onBlur_.bind(this);                                                               // 1080\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);                                                       // 1081\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);                                        // 1082\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);                                          // 1083\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);                                            // 1084\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);                                         // 1085\n        this.updateClasses_();                                                                                         // 1086\n        this.element_.classList.add('is-upgraded');                                                                    // 1087\n    }                                                                                                                  // 1088\n};                                                                                                                     // 1089\n// The component registers itself. It can assume componentHandler is available                                         // 1090\n// in the global scope.                                                                                                // 1091\ncomponentHandler.register({                                                                                            // 1092\n    constructor: MaterialIconToggle,                                                                                   // 1093\n    classAsString: 'MaterialIconToggle',                                                                               // 1094\n    cssClass: 'mdl-js-icon-toggle',                                                                                    // 1095\n    widget: true                                                                                                       // 1096\n});                                                                                                                    // 1097\n/**                                                                                                                    // 1098\n * @license                                                                                                            // 1099\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1100\n *                                                                                                                     // 1101\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1102\n * you may not use this file except in compliance with the License.                                                    // 1103\n * You may obtain a copy of the License at                                                                             // 1104\n *                                                                                                                     // 1105\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1106\n *                                                                                                                     // 1107\n * Unless required by applicable law or agreed to in writing, software                                                 // 1108\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1109\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1110\n * See the License for the specific language governing permissions and                                                 // 1111\n * limitations under the License.                                                                                      // 1112\n */                                                                                                                    // 1113\n/**                                                                                                                    // 1114\n   * Class constructor for dropdown MDL component.                                                                     // 1115\n   * Implements MDL component design pattern defined at:                                                               // 1116\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1117\n   *                                                                                                                   // 1118\n   * @constructor                                                                                                      // 1119\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1120\n   */                                                                                                                  // 1121\nvar MaterialMenu = function MaterialMenu(element) {                                                                    // 1122\n    this.element_ = element;                                                                                           // 1123\n    // Initialize instance.                                                                                            // 1124\n    this.init();                                                                                                       // 1125\n};                                                                                                                     // 1126\nwindow['MaterialMenu'] = MaterialMenu;                                                                                 // 1127\n/**                                                                                                                    // 1128\n   * Store constants in one place so they can be updated easily.                                                       // 1129\n   *                                                                                                                   // 1130\n   * @enum {string | number}                                                                                           // 1131\n   * @private                                                                                                          // 1132\n   */                                                                                                                  // 1133\nMaterialMenu.prototype.Constant_ = {                                                                                   // 1134\n    // Total duration of the menu animation.                                                                           // 1135\n    TRANSITION_DURATION_SECONDS: 0.3,                                                                                  // 1136\n    // The fraction of the total duration we want to use for menu item animations.                                     // 1137\n    TRANSITION_DURATION_FRACTION: 0.8,                                                                                 // 1138\n    // How long the menu stays open after choosing an option (so the user can see                                      // 1139\n    // the ripple).                                                                                                    // 1140\n    CLOSE_TIMEOUT: 150                                                                                                 // 1141\n};                                                                                                                     // 1142\n/**                                                                                                                    // 1143\n   * Keycodes, for code readability.                                                                                   // 1144\n   *                                                                                                                   // 1145\n   * @enum {number}                                                                                                    // 1146\n   * @private                                                                                                          // 1147\n   */                                                                                                                  // 1148\nMaterialMenu.prototype.Keycodes_ = {                                                                                   // 1149\n    ENTER: 13,                                                                                                         // 1150\n    ESCAPE: 27,                                                                                                        // 1151\n    SPACE: 32,                                                                                                         // 1152\n    UP_ARROW: 38,                                                                                                      // 1153\n    DOWN_ARROW: 40                                                                                                     // 1154\n};                                                                                                                     // 1155\n/**                                                                                                                    // 1156\n   * Store strings for class names defined by this component that are used in                                          // 1157\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1158\n   * decide to modify at a later date.                                                                                 // 1159\n   *                                                                                                                   // 1160\n   * @enum {string}                                                                                                    // 1161\n   * @private                                                                                                          // 1162\n   */                                                                                                                  // 1163\nMaterialMenu.prototype.CssClasses_ = {                                                                                 // 1164\n    CONTAINER: 'mdl-menu__container',                                                                                  // 1165\n    OUTLINE: 'mdl-menu__outline',                                                                                      // 1166\n    ITEM: 'mdl-menu__item',                                                                                            // 1167\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',                                                          // 1168\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 1169\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 1170\n    RIPPLE: 'mdl-ripple',                                                                                              // 1171\n    // Statuses                                                                                                        // 1172\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 1173\n    IS_VISIBLE: 'is-visible',                                                                                          // 1174\n    IS_ANIMATING: 'is-animating',                                                                                      // 1175\n    // Alignment options                                                                                               // 1176\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',                                                                              // 1177\n    // This is the default.                                                                                            // 1178\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',                                                                            // 1179\n    TOP_LEFT: 'mdl-menu--top-left',                                                                                    // 1180\n    TOP_RIGHT: 'mdl-menu--top-right',                                                                                  // 1181\n    UNALIGNED: 'mdl-menu--unaligned'                                                                                   // 1182\n};                                                                                                                     // 1183\n/**                                                                                                                    // 1184\n   * Initialize element.                                                                                               // 1185\n   */                                                                                                                  // 1186\nMaterialMenu.prototype.init = function () {                                                                            // 1187\n    if (this.element_) {                                                                                               // 1188\n        // Create container for the menu.                                                                              // 1189\n        var container = document.createElement('div');                                                                 // 1190\n        container.classList.add(this.CssClasses_.CONTAINER);                                                           // 1191\n        this.element_.parentElement.insertBefore(container, this.element_);                                            // 1192\n        this.element_.parentElement.removeChild(this.element_);                                                        // 1193\n        container.appendChild(this.element_);                                                                          // 1194\n        this.container_ = container;                                                                                   // 1195\n        // Create outline for the menu (shadow and background).                                                        // 1196\n        var outline = document.createElement('div');                                                                   // 1197\n        outline.classList.add(this.CssClasses_.OUTLINE);                                                               // 1198\n        this.outline_ = outline;                                                                                       // 1199\n        container.insertBefore(outline, this.element_);                                                                // 1200\n        // Find the \"for\" element and bind events to it.                                                               // 1201\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');                 // 1202\n        var forEl = null;                                                                                              // 1203\n        if (forElId) {                                                                                                 // 1204\n            forEl = document.getElementById(forElId);                                                                  // 1205\n            if (forEl) {                                                                                               // 1206\n                this.forElement_ = forEl;                                                                              // 1207\n                forEl.addEventListener('click', this.handleForClick_.bind(this));                                      // 1208\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));                            // 1209\n            }                                                                                                          // 1210\n        }                                                                                                              // 1211\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1212\n        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);                                             // 1213\n        this.boundItemClick_ = this.handleItemClick_.bind(this);                                                       // 1214\n        for (var i = 0; i < items.length; i++) {                                                                       // 1215\n            // Add a listener to each menu item.                                                                       // 1216\n            items[i].addEventListener('click', this.boundItemClick_);                                                  // 1217\n            // Add a tab index to each menu item.                                                                      // 1218\n            items[i].tabIndex = '-1';                                                                                  // 1219\n            // Add a keyboard listener to each menu item.                                                              // 1220\n            items[i].addEventListener('keydown', this.boundItemKeydown_);                                              // 1221\n        }                                                                                                              // 1222\n        // Add ripple classes to each item, if the user has enabled ripples.                                           // 1223\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 1224\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1225\n            for (i = 0; i < items.length; i++) {                                                                       // 1226\n                var item = items[i];                                                                                   // 1227\n                var rippleContainer = document.createElement('span');                                                  // 1228\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);                                 // 1229\n                var ripple = document.createElement('span');                                                           // 1230\n                ripple.classList.add(this.CssClasses_.RIPPLE);                                                         // 1231\n                rippleContainer.appendChild(ripple);                                                                   // 1232\n                item.appendChild(rippleContainer);                                                                     // 1233\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                                    // 1234\n            }                                                                                                          // 1235\n        }                                                                                                              // 1236\n        // Copy alignment classes to the container, so the outline can use them.                                       // 1237\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {                                          // 1238\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);                                                 // 1239\n        }                                                                                                              // 1240\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                         // 1241\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);                                                // 1242\n        }                                                                                                              // 1243\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                             // 1244\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);                                                    // 1245\n        }                                                                                                              // 1246\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                            // 1247\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);                                                   // 1248\n        }                                                                                                              // 1249\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                            // 1250\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);                                                   // 1251\n        }                                                                                                              // 1252\n        container.classList.add(this.CssClasses_.IS_UPGRADED);                                                         // 1253\n    }                                                                                                                  // 1254\n};                                                                                                                     // 1255\n/**                                                                                                                    // 1256\n   * Handles a click on the \"for\" element, by positioning the menu and then                                            // 1257\n   * toggling it.                                                                                                      // 1258\n   *                                                                                                                   // 1259\n   * @param {Event} evt The event that fired.                                                                          // 1260\n   * @private                                                                                                          // 1261\n   */                                                                                                                  // 1262\nMaterialMenu.prototype.handleForClick_ = function (evt) {                                                              // 1263\n    if (this.element_ && this.forElement_) {                                                                           // 1264\n        var rect = this.forElement_.getBoundingClientRect();                                                           // 1265\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();                                          // 1266\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                            // 1267\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                  // 1268\n            // Position below the \"for\" element, aligned to its right.                                                 // 1269\n            this.container_.style.right = forRect.right - rect.right + 'px';                                           // 1270\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';             // 1271\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                      // 1272\n            // Position above the \"for\" element, aligned to its left.                                                  // 1273\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';                                           // 1274\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';                                           // 1275\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                     // 1276\n            // Position above the \"for\" element, aligned to its right.                                                 // 1277\n            this.container_.style.right = forRect.right - rect.right + 'px';                                           // 1278\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';                                           // 1279\n        } else {                                                                                                       // 1280\n            // Default: position below the \"for\" element, aligned to its left.                                         // 1281\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';                                           // 1282\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';             // 1283\n        }                                                                                                              // 1284\n    }                                                                                                                  // 1285\n    this.toggle(evt);                                                                                                  // 1286\n};                                                                                                                     // 1287\n/**                                                                                                                    // 1288\n   * Handles a keyboard event on the \"for\" element.                                                                    // 1289\n   *                                                                                                                   // 1290\n   * @param {Event} evt The event that fired.                                                                          // 1291\n   * @private                                                                                                          // 1292\n   */                                                                                                                  // 1293\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {                                                      // 1294\n    if (this.element_ && this.container_ && this.forElement_) {                                                        // 1295\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');                  // 1296\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {            // 1297\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {                                                             // 1298\n                evt.preventDefault();                                                                                  // 1299\n                items[items.length - 1].focus();                                                                       // 1300\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {                                                    // 1301\n                evt.preventDefault();                                                                                  // 1302\n                items[0].focus();                                                                                      // 1303\n            }                                                                                                          // 1304\n        }                                                                                                              // 1305\n    }                                                                                                                  // 1306\n};                                                                                                                     // 1307\n/**                                                                                                                    // 1308\n   * Handles a keyboard event on an item.                                                                              // 1309\n   *                                                                                                                   // 1310\n   * @param {Event} evt The event that fired.                                                                          // 1311\n   * @private                                                                                                          // 1312\n   */                                                                                                                  // 1313\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {                                                     // 1314\n    if (this.element_ && this.container_) {                                                                            // 1315\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');                  // 1316\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {            // 1317\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);                                  // 1318\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {                                                             // 1319\n                evt.preventDefault();                                                                                  // 1320\n                if (currentIndex > 0) {                                                                                // 1321\n                    items[currentIndex - 1].focus();                                                                   // 1322\n                } else {                                                                                               // 1323\n                    items[items.length - 1].focus();                                                                   // 1324\n                }                                                                                                      // 1325\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {                                                    // 1326\n                evt.preventDefault();                                                                                  // 1327\n                if (items.length > currentIndex + 1) {                                                                 // 1328\n                    items[currentIndex + 1].focus();                                                                   // 1329\n                } else {                                                                                               // 1330\n                    items[0].focus();                                                                                  // 1331\n                }                                                                                                      // 1332\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {                 // 1333\n                evt.preventDefault();                                                                                  // 1334\n                // Send mousedown and mouseup to trigger ripple.                                                       // 1335\n                var e = new MouseEvent('mousedown');                                                                   // 1336\n                evt.target.dispatchEvent(e);                                                                           // 1337\n                e = new MouseEvent('mouseup');                                                                         // 1338\n                evt.target.dispatchEvent(e);                                                                           // 1339\n                // Send click.                                                                                         // 1340\n                evt.target.click();                                                                                    // 1341\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {                                                        // 1342\n                evt.preventDefault();                                                                                  // 1343\n                this.hide();                                                                                           // 1344\n            }                                                                                                          // 1345\n        }                                                                                                              // 1346\n    }                                                                                                                  // 1347\n};                                                                                                                     // 1348\n/**                                                                                                                    // 1349\n   * Handles a click event on an item.                                                                                 // 1350\n   *                                                                                                                   // 1351\n   * @param {Event} evt The event that fired.                                                                          // 1352\n   * @private                                                                                                          // 1353\n   */                                                                                                                  // 1354\nMaterialMenu.prototype.handleItemClick_ = function (evt) {                                                             // 1355\n    if (evt.target.hasAttribute('disabled')) {                                                                         // 1356\n        evt.stopPropagation();                                                                                         // 1357\n    } else {                                                                                                           // 1358\n        // Wait some time before closing menu, so the user can see the ripple.                                         // 1359\n        this.closing_ = true;                                                                                          // 1360\n        window.setTimeout(function (evt) {                                                                             // 1361\n            this.hide();                                                                                               // 1362\n            this.closing_ = false;                                                                                     // 1363\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);                                                                   // 1364\n    }                                                                                                                  // 1365\n};                                                                                                                     // 1366\n/**                                                                                                                    // 1367\n   * Calculates the initial clip (for opening the menu) or final clip (for closing                                     // 1368\n   * it), and applies it. This allows us to animate from or to the correct point,                                      // 1369\n   * that is, the point it's aligned to in the \"for\" element.                                                          // 1370\n   *                                                                                                                   // 1371\n   * @param {number} height Height of the clip rectangle                                                               // 1372\n   * @param {number} width Width of the clip rectangle                                                                 // 1373\n   * @private                                                                                                          // 1374\n   */                                                                                                                  // 1375\nMaterialMenu.prototype.applyClip_ = function (height, width) {                                                         // 1376\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                                // 1377\n        // Do not clip.                                                                                                // 1378\n        this.element_.style.clip = '';                                                                                 // 1379\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                      // 1380\n        // Clip to the top right corner of the menu.                                                                   // 1381\n        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';                                   // 1382\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                          // 1383\n        // Clip to the bottom left corner of the menu.                                                                 // 1384\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';                                      // 1385\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                         // 1386\n        // Clip to the bottom right corner of the menu.                                                                // 1387\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';          // 1388\n    } else {                                                                                                           // 1389\n        // Default: do not clip (same as clipping to the top left corner).                                             // 1390\n        this.element_.style.clip = '';                                                                                 // 1391\n    }                                                                                                                  // 1392\n};                                                                                                                     // 1393\n/**                                                                                                                    // 1394\n   * Cleanup function to remove animation listeners.                                                                   // 1395\n   *                                                                                                                   // 1396\n   * @param {Event} evt                                                                                                // 1397\n   * @private                                                                                                          // 1398\n   */                                                                                                                  // 1399\nMaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {                                                  // 1400\n    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);                                      // 1401\n};                                                                                                                     // 1402\n/**                                                                                                                    // 1403\n   * Adds an event listener to clean up after the animation ends.                                                      // 1404\n   *                                                                                                                   // 1405\n   * @private                                                                                                          // 1406\n   */                                                                                                                  // 1407\nMaterialMenu.prototype.addAnimationEndListener_ = function () {                                                        // 1408\n    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);                                 // 1409\n    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);                           // 1410\n};                                                                                                                     // 1411\n/**                                                                                                                    // 1412\n   * Displays the menu.                                                                                                // 1413\n   *                                                                                                                   // 1414\n   * @public                                                                                                           // 1415\n   */                                                                                                                  // 1416\nMaterialMenu.prototype.show = function (evt) {                                                                         // 1417\n    if (this.element_ && this.container_ && this.outline_) {                                                           // 1418\n        // Measure the inner element.                                                                                  // 1419\n        var height = this.element_.getBoundingClientRect().height;                                                     // 1420\n        var width = this.element_.getBoundingClientRect().width;                                                       // 1421\n        // Apply the inner element's size to the container and outline.                                                // 1422\n        this.container_.style.width = width + 'px';                                                                    // 1423\n        this.container_.style.height = height + 'px';                                                                  // 1424\n        this.outline_.style.width = width + 'px';                                                                      // 1425\n        this.outline_.style.height = height + 'px';                                                                    // 1426\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade                                    // 1428\n        // in one at a time.                                                                                           // 1429\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1430\n        for (var i = 0; i < items.length; i++) {                                                                       // 1431\n            var itemDelay = null;                                                                                      // 1432\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {                                                                                                   // 1435\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';                                    // 1436\n            }                                                                                                          // 1437\n            items[i].style.transitionDelay = itemDelay;                                                                // 1438\n        }                                                                                                              // 1439\n        // Apply the initial clip to the text before we start animating.                                               // 1440\n        this.applyClip_(height, width);                                                                                // 1441\n        // Wait for the next frame, turn on animation, and apply the final clip.                                       // 1442\n        // Also make it visible. This triggers the transitions.                                                        // 1443\n        window.requestAnimationFrame(function () {                                                                     // 1444\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);                                                // 1445\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';                                   // 1446\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);                                                // 1447\n        }.bind(this));                                                                                                 // 1448\n        // Clean up after the animation is complete.                                                                   // 1449\n        this.addAnimationEndListener_();                                                                               // 1450\n        // Add a click listener to the document, to close the menu.                                                    // 1451\n        var callback = function (e) {                                                                                  // 1452\n            // Check to see if the document is processing the same event that                                          // 1453\n            // displayed the menu in the first place. If so, do nothing.                                               // 1454\n            // Also check to see if the menu is in the process of closing itself, and                                  // 1455\n            // do nothing in that case.                                                                                // 1456\n            // Also check if the clicked element is a menu item                                                        // 1457\n            // if so, do nothing.                                                                                      // 1458\n            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {                                // 1459\n                document.removeEventListener('click', callback);                                                       // 1460\n                this.hide();                                                                                           // 1461\n            }                                                                                                          // 1462\n        }.bind(this);                                                                                                  // 1463\n        document.addEventListener('click', callback);                                                                  // 1464\n    }                                                                                                                  // 1465\n};                                                                                                                     // 1466\nMaterialMenu.prototype['show'] = MaterialMenu.prototype.show;                                                          // 1467\n/**                                                                                                                    // 1468\n   * Hides the menu.                                                                                                   // 1469\n   *                                                                                                                   // 1470\n   * @public                                                                                                           // 1471\n   */                                                                                                                  // 1472\nMaterialMenu.prototype.hide = function () {                                                                            // 1473\n    if (this.element_ && this.container_ && this.outline_) {                                                           // 1474\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1475\n        // Remove all transition delays; menu items fade out concurrently.                                             // 1476\n        for (var i = 0; i < items.length; i++) {                                                                       // 1477\n            items[i].style.removeProperty('transition-delay');                                                         // 1478\n        }                                                                                                              // 1479\n        // Measure the inner element.                                                                                  // 1480\n        var rect = this.element_.getBoundingClientRect();                                                              // 1481\n        var height = rect.height;                                                                                      // 1482\n        var width = rect.width;                                                                                        // 1483\n        // Turn on animation, and apply the final clip. Also make invisible.                                           // 1484\n        // This triggers the transitions.                                                                              // 1485\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);                                                    // 1486\n        this.applyClip_(height, width);                                                                                // 1487\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);                                                 // 1488\n        // Clean up after the animation is complete.                                                                   // 1489\n        this.addAnimationEndListener_();                                                                               // 1490\n    }                                                                                                                  // 1491\n};                                                                                                                     // 1492\nMaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;                                                          // 1493\n/**                                                                                                                    // 1494\n   * Displays or hides the menu, depending on current state.                                                           // 1495\n   *                                                                                                                   // 1496\n   * @public                                                                                                           // 1497\n   */                                                                                                                  // 1498\nMaterialMenu.prototype.toggle = function (evt) {                                                                       // 1499\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {                                             // 1500\n        this.hide();                                                                                                   // 1501\n    } else {                                                                                                           // 1502\n        this.show(evt);                                                                                                // 1503\n    }                                                                                                                  // 1504\n};                                                                                                                     // 1505\nMaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;                                                      // 1506\n// The component registers itself. It can assume componentHandler is available                                         // 1507\n// in the global scope.                                                                                                // 1508\ncomponentHandler.register({                                                                                            // 1509\n    constructor: MaterialMenu,                                                                                         // 1510\n    classAsString: 'MaterialMenu',                                                                                     // 1511\n    cssClass: 'mdl-js-menu',                                                                                           // 1512\n    widget: true                                                                                                       // 1513\n});                                                                                                                    // 1514\n/**                                                                                                                    // 1515\n * @license                                                                                                            // 1516\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1517\n *                                                                                                                     // 1518\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1519\n * you may not use this file except in compliance with the License.                                                    // 1520\n * You may obtain a copy of the License at                                                                             // 1521\n *                                                                                                                     // 1522\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1523\n *                                                                                                                     // 1524\n * Unless required by applicable law or agreed to in writing, software                                                 // 1525\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1526\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1527\n * See the License for the specific language governing permissions and                                                 // 1528\n * limitations under the License.                                                                                      // 1529\n */                                                                                                                    // 1530\n/**                                                                                                                    // 1531\n   * Class constructor for Progress MDL component.                                                                     // 1532\n   * Implements MDL component design pattern defined at:                                                               // 1533\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1534\n   *                                                                                                                   // 1535\n   * @constructor                                                                                                      // 1536\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1537\n   */                                                                                                                  // 1538\nvar MaterialProgress = function MaterialProgress(element) {                                                            // 1539\n    this.element_ = element;                                                                                           // 1540\n    // Initialize instance.                                                                                            // 1541\n    this.init();                                                                                                       // 1542\n};                                                                                                                     // 1543\nwindow['MaterialProgress'] = MaterialProgress;                                                                         // 1544\n/**                                                                                                                    // 1545\n   * Store constants in one place so they can be updated easily.                                                       // 1546\n   *                                                                                                                   // 1547\n   * @enum {string | number}                                                                                           // 1548\n   * @private                                                                                                          // 1549\n   */                                                                                                                  // 1550\nMaterialProgress.prototype.Constant_ = {};                                                                             // 1551\n/**                                                                                                                    // 1552\n   * Store strings for class names defined by this component that are used in                                          // 1553\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1554\n   * decide to modify at a later date.                                                                                 // 1555\n   *                                                                                                                   // 1556\n   * @enum {string}                                                                                                    // 1557\n   * @private                                                                                                          // 1558\n   */                                                                                                                  // 1559\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };                       // 1560\n/**                                                                                                                    // 1561\n   * Set the current progress of the progressbar.                                                                      // 1562\n   *                                                                                                                   // 1563\n   * @param {number} p Percentage of the progress (0-100)                                                              // 1564\n   * @public                                                                                                           // 1565\n   */                                                                                                                  // 1566\nMaterialProgress.prototype.setProgress = function (p) {                                                                // 1567\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {                                      // 1568\n        return;                                                                                                        // 1569\n    }                                                                                                                  // 1570\n    this.progressbar_.style.width = p + '%';                                                                           // 1571\n};                                                                                                                     // 1572\nMaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;                                    // 1573\n/**                                                                                                                    // 1574\n   * Set the current progress of the buffer.                                                                           // 1575\n   *                                                                                                                   // 1576\n   * @param {number} p Percentage of the buffer (0-100)                                                                // 1577\n   * @public                                                                                                           // 1578\n   */                                                                                                                  // 1579\nMaterialProgress.prototype.setBuffer = function (p) {                                                                  // 1580\n    this.bufferbar_.style.width = p + '%';                                                                             // 1581\n    this.auxbar_.style.width = 100 - p + '%';                                                                          // 1582\n};                                                                                                                     // 1583\nMaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;                                        // 1584\n/**                                                                                                                    // 1585\n   * Initialize element.                                                                                               // 1586\n   */                                                                                                                  // 1587\nMaterialProgress.prototype.init = function () {                                                                        // 1588\n    if (this.element_) {                                                                                               // 1589\n        var el = document.createElement('div');                                                                        // 1590\n        el.className = 'progressbar bar bar1';                                                                         // 1591\n        this.element_.appendChild(el);                                                                                 // 1592\n        this.progressbar_ = el;                                                                                        // 1593\n        el = document.createElement('div');                                                                            // 1594\n        el.className = 'bufferbar bar bar2';                                                                           // 1595\n        this.element_.appendChild(el);                                                                                 // 1596\n        this.bufferbar_ = el;                                                                                          // 1597\n        el = document.createElement('div');                                                                            // 1598\n        el.className = 'auxbar bar bar3';                                                                              // 1599\n        this.element_.appendChild(el);                                                                                 // 1600\n        this.auxbar_ = el;                                                                                             // 1601\n        this.progressbar_.style.width = '0%';                                                                          // 1602\n        this.bufferbar_.style.width = '100%';                                                                          // 1603\n        this.auxbar_.style.width = '0%';                                                                               // 1604\n        this.element_.classList.add('is-upgraded');                                                                    // 1605\n    }                                                                                                                  // 1606\n};                                                                                                                     // 1607\n// The component registers itself. It can assume componentHandler is available                                         // 1608\n// in the global scope.                                                                                                // 1609\ncomponentHandler.register({                                                                                            // 1610\n    constructor: MaterialProgress,                                                                                     // 1611\n    classAsString: 'MaterialProgress',                                                                                 // 1612\n    cssClass: 'mdl-js-progress',                                                                                       // 1613\n    widget: true                                                                                                       // 1614\n});                                                                                                                    // 1615\n/**                                                                                                                    // 1616\n * @license                                                                                                            // 1617\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1618\n *                                                                                                                     // 1619\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1620\n * you may not use this file except in compliance with the License.                                                    // 1621\n * You may obtain a copy of the License at                                                                             // 1622\n *                                                                                                                     // 1623\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1624\n *                                                                                                                     // 1625\n * Unless required by applicable law or agreed to in writing, software                                                 // 1626\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1627\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1628\n * See the License for the specific language governing permissions and                                                 // 1629\n * limitations under the License.                                                                                      // 1630\n */                                                                                                                    // 1631\n/**                                                                                                                    // 1632\n   * Class constructor for Radio MDL component.                                                                        // 1633\n   * Implements MDL component design pattern defined at:                                                               // 1634\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1635\n   *                                                                                                                   // 1636\n   * @constructor                                                                                                      // 1637\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1638\n   */                                                                                                                  // 1639\nvar MaterialRadio = function MaterialRadio(element) {                                                                  // 1640\n    this.element_ = element;                                                                                           // 1641\n    // Initialize instance.                                                                                            // 1642\n    this.init();                                                                                                       // 1643\n};                                                                                                                     // 1644\nwindow['MaterialRadio'] = MaterialRadio;                                                                               // 1645\n/**                                                                                                                    // 1646\n   * Store constants in one place so they can be updated easily.                                                       // 1647\n   *                                                                                                                   // 1648\n   * @enum {string | number}                                                                                           // 1649\n   * @private                                                                                                          // 1650\n   */                                                                                                                  // 1651\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                           // 1652\n/**                                                                                                                    // 1653\n   * Store strings for class names defined by this component that are used in                                          // 1654\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1655\n   * decide to modify at a later date.                                                                                 // 1656\n   *                                                                                                                   // 1657\n   * @enum {string}                                                                                                    // 1658\n   * @private                                                                                                          // 1659\n   */                                                                                                                  // 1660\nMaterialRadio.prototype.CssClasses_ = {                                                                                // 1661\n    IS_FOCUSED: 'is-focused',                                                                                          // 1662\n    IS_DISABLED: 'is-disabled',                                                                                        // 1663\n    IS_CHECKED: 'is-checked',                                                                                          // 1664\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 1665\n    JS_RADIO: 'mdl-js-radio',                                                                                          // 1666\n    RADIO_BTN: 'mdl-radio__button',                                                                                    // 1667\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',                                                                     // 1668\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',                                                                     // 1669\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 1670\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 1671\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',                                                                   // 1672\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 1673\n    RIPPLE: 'mdl-ripple'                                                                                               // 1674\n};                                                                                                                     // 1675\n/**                                                                                                                    // 1676\n   * Handle change of state.                                                                                           // 1677\n   *                                                                                                                   // 1678\n   * @param {Event} event The event that fired.                                                                        // 1679\n   * @private                                                                                                          // 1680\n   */                                                                                                                  // 1681\nMaterialRadio.prototype.onChange_ = function (event) {                                                                 // 1682\n    // Since other radio buttons don't get change events, we need to look for                                          // 1683\n    // them to update their classes.                                                                                   // 1684\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);                                           // 1685\n    for (var i = 0; i < radios.length; i++) {                                                                          // 1686\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);                                        // 1687\n        // Different name == different group, so no point updating those.                                              // 1688\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {                                   // 1689\n            radios[i]['MaterialRadio'].updateClasses_();                                                               // 1690\n        }                                                                                                              // 1691\n    }                                                                                                                  // 1692\n};                                                                                                                     // 1693\n/**                                                                                                                    // 1694\n   * Handle focus.                                                                                                     // 1695\n   *                                                                                                                   // 1696\n   * @param {Event} event The event that fired.                                                                        // 1697\n   * @private                                                                                                          // 1698\n   */                                                                                                                  // 1699\nMaterialRadio.prototype.onFocus_ = function (event) {                                                                  // 1700\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 1701\n};                                                                                                                     // 1702\n/**                                                                                                                    // 1703\n   * Handle lost focus.                                                                                                // 1704\n   *                                                                                                                   // 1705\n   * @param {Event} event The event that fired.                                                                        // 1706\n   * @private                                                                                                          // 1707\n   */                                                                                                                  // 1708\nMaterialRadio.prototype.onBlur_ = function (event) {                                                                   // 1709\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 1710\n};                                                                                                                     // 1711\n/**                                                                                                                    // 1712\n   * Handle mouseup.                                                                                                   // 1713\n   *                                                                                                                   // 1714\n   * @param {Event} event The event that fired.                                                                        // 1715\n   * @private                                                                                                          // 1716\n   */                                                                                                                  // 1717\nMaterialRadio.prototype.onMouseup_ = function (event) {                                                                // 1718\n    this.blur_();                                                                                                      // 1719\n};                                                                                                                     // 1720\n/**                                                                                                                    // 1721\n   * Update classes.                                                                                                   // 1722\n   *                                                                                                                   // 1723\n   * @private                                                                                                          // 1724\n   */                                                                                                                  // 1725\nMaterialRadio.prototype.updateClasses_ = function () {                                                                 // 1726\n    this.checkDisabled();                                                                                              // 1727\n    this.checkToggleState();                                                                                           // 1728\n};                                                                                                                     // 1729\n/**                                                                                                                    // 1730\n   * Add blur.                                                                                                         // 1731\n   *                                                                                                                   // 1732\n   * @private                                                                                                          // 1733\n   */                                                                                                                  // 1734\nMaterialRadio.prototype.blur_ = function () {                                                                          // 1735\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 1736\n    // so that we can avoid this hack.                                                                                 // 1737\n    window.setTimeout(function () {                                                                                    // 1738\n        this.btnElement_.blur();                                                                                       // 1739\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 1740\n};                                                                                                                     // 1741\n// Public methods.                                                                                                     // 1742\n/**                                                                                                                    // 1743\n   * Check the components disabled state.                                                                              // 1744\n   *                                                                                                                   // 1745\n   * @public                                                                                                           // 1746\n   */                                                                                                                  // 1747\nMaterialRadio.prototype.checkDisabled = function () {                                                                  // 1748\n    if (this.btnElement_.disabled) {                                                                                   // 1749\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 1750\n    } else {                                                                                                           // 1751\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 1752\n    }                                                                                                                  // 1753\n};                                                                                                                     // 1754\nMaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;                                      // 1755\n/**                                                                                                                    // 1756\n   * Check the components toggled state.                                                                               // 1757\n   *                                                                                                                   // 1758\n   * @public                                                                                                           // 1759\n   */                                                                                                                  // 1760\nMaterialRadio.prototype.checkToggleState = function () {                                                               // 1761\n    if (this.btnElement_.checked) {                                                                                    // 1762\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 1763\n    } else {                                                                                                           // 1764\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 1765\n    }                                                                                                                  // 1766\n};                                                                                                                     // 1767\nMaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;                                // 1768\n/**                                                                                                                    // 1769\n   * Disable radio.                                                                                                    // 1770\n   *                                                                                                                   // 1771\n   * @public                                                                                                           // 1772\n   */                                                                                                                  // 1773\nMaterialRadio.prototype.disable = function () {                                                                        // 1774\n    this.btnElement_.disabled = true;                                                                                  // 1775\n    this.updateClasses_();                                                                                             // 1776\n};                                                                                                                     // 1777\nMaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;                                                  // 1778\n/**                                                                                                                    // 1779\n   * Enable radio.                                                                                                     // 1780\n   *                                                                                                                   // 1781\n   * @public                                                                                                           // 1782\n   */                                                                                                                  // 1783\nMaterialRadio.prototype.enable = function () {                                                                         // 1784\n    this.btnElement_.disabled = false;                                                                                 // 1785\n    this.updateClasses_();                                                                                             // 1786\n};                                                                                                                     // 1787\nMaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;                                                    // 1788\n/**                                                                                                                    // 1789\n   * Check radio.                                                                                                      // 1790\n   *                                                                                                                   // 1791\n   * @public                                                                                                           // 1792\n   */                                                                                                                  // 1793\nMaterialRadio.prototype.check = function () {                                                                          // 1794\n    this.btnElement_.checked = true;                                                                                   // 1795\n    this.updateClasses_();                                                                                             // 1796\n};                                                                                                                     // 1797\nMaterialRadio.prototype['check'] = MaterialRadio.prototype.check;                                                      // 1798\n/**                                                                                                                    // 1799\n   * Uncheck radio.                                                                                                    // 1800\n   *                                                                                                                   // 1801\n   * @public                                                                                                           // 1802\n   */                                                                                                                  // 1803\nMaterialRadio.prototype.uncheck = function () {                                                                        // 1804\n    this.btnElement_.checked = false;                                                                                  // 1805\n    this.updateClasses_();                                                                                             // 1806\n};                                                                                                                     // 1807\nMaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;                                                  // 1808\n/**                                                                                                                    // 1809\n   * Initialize element.                                                                                               // 1810\n   */                                                                                                                  // 1811\nMaterialRadio.prototype.init = function () {                                                                           // 1812\n    if (this.element_) {                                                                                               // 1813\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);                              // 1814\n        this.boundChangeHandler_ = this.onChange_.bind(this);                                                          // 1815\n        this.boundFocusHandler_ = this.onChange_.bind(this);                                                           // 1816\n        this.boundBlurHandler_ = this.onBlur_.bind(this);                                                              // 1817\n        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);                                                        // 1818\n        var outerCircle = document.createElement('span');                                                              // 1819\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);                                                // 1820\n        var innerCircle = document.createElement('span');                                                              // 1821\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);                                                // 1822\n        this.element_.appendChild(outerCircle);                                                                        // 1823\n        this.element_.appendChild(innerCircle);                                                                        // 1824\n        var rippleContainer;                                                                                           // 1825\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 1826\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1827\n            rippleContainer = document.createElement('span');                                                          // 1828\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                                          // 1829\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                             // 1830\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);                                             // 1831\n            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);                                    // 1832\n            var ripple = document.createElement('span');                                                               // 1833\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 1834\n            rippleContainer.appendChild(ripple);                                                                       // 1835\n            this.element_.appendChild(rippleContainer);                                                                // 1836\n        }                                                                                                              // 1837\n        this.btnElement_.addEventListener('change', this.boundChangeHandler_);                                         // 1838\n        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);                                           // 1839\n        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);                                             // 1840\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);                                          // 1841\n        this.updateClasses_();                                                                                         // 1842\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 1843\n    }                                                                                                                  // 1844\n};                                                                                                                     // 1845\n// The component registers itself. It can assume componentHandler is available                                         // 1846\n// in the global scope.                                                                                                // 1847\ncomponentHandler.register({                                                                                            // 1848\n    constructor: MaterialRadio,                                                                                        // 1849\n    classAsString: 'MaterialRadio',                                                                                    // 1850\n    cssClass: 'mdl-js-radio',                                                                                          // 1851\n    widget: true                                                                                                       // 1852\n});                                                                                                                    // 1853\n/**                                                                                                                    // 1854\n * @license                                                                                                            // 1855\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1856\n *                                                                                                                     // 1857\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1858\n * you may not use this file except in compliance with the License.                                                    // 1859\n * You may obtain a copy of the License at                                                                             // 1860\n *                                                                                                                     // 1861\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1862\n *                                                                                                                     // 1863\n * Unless required by applicable law or agreed to in writing, software                                                 // 1864\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1865\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1866\n * See the License for the specific language governing permissions and                                                 // 1867\n * limitations under the License.                                                                                      // 1868\n */                                                                                                                    // 1869\n/**                                                                                                                    // 1870\n   * Class constructor for Slider MDL component.                                                                       // 1871\n   * Implements MDL component design pattern defined at:                                                               // 1872\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1873\n   *                                                                                                                   // 1874\n   * @constructor                                                                                                      // 1875\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1876\n   */                                                                                                                  // 1877\nvar MaterialSlider = function MaterialSlider(element) {                                                                // 1878\n    this.element_ = element;                                                                                           // 1879\n    // Browser feature detection.                                                                                      // 1880\n    this.isIE_ = window.navigator.msPointerEnabled;                                                                    // 1881\n    // Initialize instance.                                                                                            // 1882\n    this.init();                                                                                                       // 1883\n};                                                                                                                     // 1884\nwindow['MaterialSlider'] = MaterialSlider;                                                                             // 1885\n/**                                                                                                                    // 1886\n   * Store constants in one place so they can be updated easily.                                                       // 1887\n   *                                                                                                                   // 1888\n   * @enum {string | number}                                                                                           // 1889\n   * @private                                                                                                          // 1890\n   */                                                                                                                  // 1891\nMaterialSlider.prototype.Constant_ = {};                                                                               // 1892\n/**                                                                                                                    // 1893\n   * Store strings for class names defined by this component that are used in                                          // 1894\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1895\n   * decide to modify at a later date.                                                                                 // 1896\n   *                                                                                                                   // 1897\n   * @enum {string}                                                                                                    // 1898\n   * @private                                                                                                          // 1899\n   */                                                                                                                  // 1900\nMaterialSlider.prototype.CssClasses_ = {                                                                               // 1901\n    IE_CONTAINER: 'mdl-slider__ie-container',                                                                          // 1902\n    SLIDER_CONTAINER: 'mdl-slider__container',                                                                         // 1903\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',                                                                    // 1904\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',                                                                  // 1905\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',                                                                  // 1906\n    IS_LOWEST_VALUE: 'is-lowest-value',                                                                                // 1907\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 1908\n};                                                                                                                     // 1909\n/**                                                                                                                    // 1910\n   * Handle input on element.                                                                                          // 1911\n   *                                                                                                                   // 1912\n   * @param {Event} event The event that fired.                                                                        // 1913\n   * @private                                                                                                          // 1914\n   */                                                                                                                  // 1915\nMaterialSlider.prototype.onInput_ = function (event) {                                                                 // 1916\n    this.updateValueStyles_();                                                                                         // 1917\n};                                                                                                                     // 1918\n/**                                                                                                                    // 1919\n   * Handle change on element.                                                                                         // 1920\n   *                                                                                                                   // 1921\n   * @param {Event} event The event that fired.                                                                        // 1922\n   * @private                                                                                                          // 1923\n   */                                                                                                                  // 1924\nMaterialSlider.prototype.onChange_ = function (event) {                                                                // 1925\n    this.updateValueStyles_();                                                                                         // 1926\n};                                                                                                                     // 1927\n/**                                                                                                                    // 1928\n   * Handle mouseup on element.                                                                                        // 1929\n   *                                                                                                                   // 1930\n   * @param {Event} event The event that fired.                                                                        // 1931\n   * @private                                                                                                          // 1932\n   */                                                                                                                  // 1933\nMaterialSlider.prototype.onMouseUp_ = function (event) {                                                               // 1934\n    event.target.blur();                                                                                               // 1935\n};                                                                                                                     // 1936\n/**                                                                                                                    // 1937\n   * Handle mousedown on container element.                                                                            // 1938\n   * This handler is purpose is to not require the use to click                                                        // 1939\n   * exactly on the 2px slider element, as FireFox seems to be very                                                    // 1940\n   * strict about this.                                                                                                // 1941\n   *                                                                                                                   // 1942\n   * @param {Event} event The event that fired.                                                                        // 1943\n   * @private                                                                                                          // 1944\n   * @suppress {missingProperties}                                                                                     // 1945\n   */                                                                                                                  // 1946\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {                                                    // 1947\n    // If this click is not on the parent element (but rather some child)                                              // 1948\n    // ignore. It may still bubble up.                                                                                 // 1949\n    if (event.target !== this.element_.parentElement) {                                                                // 1950\n        return;                                                                                                        // 1951\n    }                                                                                                                  // 1952\n    // Discard the original event and create a new event that                                                          // 1953\n    // is on the slider element.                                                                                       // 1954\n    event.preventDefault();                                                                                            // 1955\n    var newEvent = new MouseEvent('mousedown', {                                                                       // 1956\n        target: event.target,                                                                                          // 1957\n        buttons: event.buttons,                                                                                        // 1958\n        clientX: event.clientX,                                                                                        // 1959\n        clientY: this.element_.getBoundingClientRect().y                                                               // 1960\n    });                                                                                                                // 1961\n    this.element_.dispatchEvent(newEvent);                                                                             // 1962\n};                                                                                                                     // 1963\n/**                                                                                                                    // 1964\n   * Handle updating of values.                                                                                        // 1965\n   *                                                                                                                   // 1966\n   * @private                                                                                                          // 1967\n   */                                                                                                                  // 1968\nMaterialSlider.prototype.updateValueStyles_ = function () {                                                            // 1969\n    // Calculate and apply percentages to div structure behind slider.                                                 // 1970\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);                // 1971\n    if (fraction === 0) {                                                                                              // 1972\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);                                                 // 1973\n    } else {                                                                                                           // 1974\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);                                              // 1975\n    }                                                                                                                  // 1976\n    if (!this.isIE_) {                                                                                                 // 1977\n        this.backgroundLower_.style.flex = fraction;                                                                   // 1978\n        this.backgroundLower_.style.webkitFlex = fraction;                                                             // 1979\n        this.backgroundUpper_.style.flex = 1 - fraction;                                                               // 1980\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;                                                         // 1981\n    }                                                                                                                  // 1982\n};                                                                                                                     // 1983\n// Public methods.                                                                                                     // 1984\n/**                                                                                                                    // 1985\n   * Disable slider.                                                                                                   // 1986\n   *                                                                                                                   // 1987\n   * @public                                                                                                           // 1988\n   */                                                                                                                  // 1989\nMaterialSlider.prototype.disable = function () {                                                                       // 1990\n    this.element_.disabled = true;                                                                                     // 1991\n};                                                                                                                     // 1992\nMaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;                                                // 1993\n/**                                                                                                                    // 1994\n   * Enable slider.                                                                                                    // 1995\n   *                                                                                                                   // 1996\n   * @public                                                                                                           // 1997\n   */                                                                                                                  // 1998\nMaterialSlider.prototype.enable = function () {                                                                        // 1999\n    this.element_.disabled = false;                                                                                    // 2000\n};                                                                                                                     // 2001\nMaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;                                                  // 2002\n/**                                                                                                                    // 2003\n   * Update slider value.                                                                                              // 2004\n   *                                                                                                                   // 2005\n   * @param {number} value The value to which to set the control (optional).                                           // 2006\n   * @public                                                                                                           // 2007\n   */                                                                                                                  // 2008\nMaterialSlider.prototype.change = function (value) {                                                                   // 2009\n    if (typeof value !== 'undefined') {                                                                                // 2010\n        this.element_.value = value;                                                                                   // 2011\n    }                                                                                                                  // 2012\n    this.updateValueStyles_();                                                                                         // 2013\n};                                                                                                                     // 2014\nMaterialSlider.prototype['change'] = MaterialSlider.prototype.change;                                                  // 2015\n/**                                                                                                                    // 2016\n   * Initialize element.                                                                                               // 2017\n   */                                                                                                                  // 2018\nMaterialSlider.prototype.init = function () {                                                                          // 2019\n    if (this.element_) {                                                                                               // 2020\n        if (this.isIE_) {                                                                                              // 2021\n            // Since we need to specify a very large height in IE due to                                               // 2022\n            // implementation limitations, we add a parent here that trims it down to                                  // 2023\n            // a reasonable size.                                                                                      // 2024\n            var containerIE = document.createElement('div');                                                           // 2025\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);                                                  // 2026\n            this.element_.parentElement.insertBefore(containerIE, this.element_);                                      // 2027\n            this.element_.parentElement.removeChild(this.element_);                                                    // 2028\n            containerIE.appendChild(this.element_);                                                                    // 2029\n        } else {                                                                                                       // 2030\n            // For non-IE browsers, we need a div structure that sits behind the                                       // 2031\n            // slider and allows us to style the left and right sides of it with                                       // 2032\n            // different colors.                                                                                       // 2033\n            var container = document.createElement('div');                                                             // 2034\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);                                                // 2035\n            this.element_.parentElement.insertBefore(container, this.element_);                                        // 2036\n            this.element_.parentElement.removeChild(this.element_);                                                    // 2037\n            container.appendChild(this.element_);                                                                      // 2038\n            var backgroundFlex = document.createElement('div');                                                        // 2039\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);                                            // 2040\n            container.appendChild(backgroundFlex);                                                                     // 2041\n            this.backgroundLower_ = document.createElement('div');                                                     // 2042\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);                                    // 2043\n            backgroundFlex.appendChild(this.backgroundLower_);                                                         // 2044\n            this.backgroundUpper_ = document.createElement('div');                                                     // 2045\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);                                    // 2046\n            backgroundFlex.appendChild(this.backgroundUpper_);                                                         // 2047\n        }                                                                                                              // 2048\n        this.boundInputHandler = this.onInput_.bind(this);                                                             // 2049\n        this.boundChangeHandler = this.onChange_.bind(this);                                                           // 2050\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);                                                         // 2051\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);                                   // 2052\n        this.element_.addEventListener('input', this.boundInputHandler);                                               // 2053\n        this.element_.addEventListener('change', this.boundChangeHandler);                                             // 2054\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);                                           // 2055\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);                // 2056\n        this.updateValueStyles_();                                                                                     // 2057\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 2058\n    }                                                                                                                  // 2059\n};                                                                                                                     // 2060\n// The component registers itself. It can assume componentHandler is available                                         // 2061\n// in the global scope.                                                                                                // 2062\ncomponentHandler.register({                                                                                            // 2063\n    constructor: MaterialSlider,                                                                                       // 2064\n    classAsString: 'MaterialSlider',                                                                                   // 2065\n    cssClass: 'mdl-js-slider',                                                                                         // 2066\n    widget: true                                                                                                       // 2067\n});                                                                                                                    // 2068\n/**                                                                                                                    // 2069\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2070\n *                                                                                                                     // 2071\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2072\n * you may not use this file except in compliance with the License.                                                    // 2073\n * You may obtain a copy of the License at                                                                             // 2074\n *                                                                                                                     // 2075\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2076\n *                                                                                                                     // 2077\n * Unless required by applicable law or agreed to in writing, software                                                 // 2078\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2079\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2080\n * See the License for the specific language governing permissions and                                                 // 2081\n * limitations under the License.                                                                                      // 2082\n */                                                                                                                    // 2083\n/**                                                                                                                    // 2084\n   * Class constructor for Snackbar MDL component.                                                                     // 2085\n   * Implements MDL component design pattern defined at:                                                               // 2086\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2087\n   *                                                                                                                   // 2088\n   * @constructor                                                                                                      // 2089\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2090\n   */                                                                                                                  // 2091\nvar MaterialSnackbar = function MaterialSnackbar(element) {                                                            // 2092\n    this.element_ = element;                                                                                           // 2093\n    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);                                   // 2094\n    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);                                  // 2095\n    if (!this.textElement_) {                                                                                          // 2096\n        throw new Error('There must be a message element for a snackbar.');                                            // 2097\n    }                                                                                                                  // 2098\n    if (!this.actionElement_) {                                                                                        // 2099\n        throw new Error('There must be an action element for a snackbar.');                                            // 2100\n    }                                                                                                                  // 2101\n    this.active = false;                                                                                               // 2102\n    this.actionHandler_ = undefined;                                                                                   // 2103\n    this.message_ = undefined;                                                                                         // 2104\n    this.actionText_ = undefined;                                                                                      // 2105\n    this.queuedNotifications_ = [];                                                                                    // 2106\n    this.setActionHidden_(true);                                                                                       // 2107\n};                                                                                                                     // 2108\nwindow['MaterialSnackbar'] = MaterialSnackbar;                                                                         // 2109\n/**                                                                                                                    // 2110\n   * Store constants in one place so they can be updated easily.                                                       // 2111\n   *                                                                                                                   // 2112\n   * @enum {string | number}                                                                                           // 2113\n   * @private                                                                                                          // 2114\n   */                                                                                                                  // 2115\nMaterialSnackbar.prototype.Constant_ = {                                                                               // 2116\n    // The duration of the snackbar show/hide animation, in ms.                                                        // 2117\n    ANIMATION_LENGTH: 250                                                                                              // 2118\n};                                                                                                                     // 2119\n/**                                                                                                                    // 2120\n   * Store strings for class names defined by this component that are used in                                          // 2121\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2122\n   * decide to modify at a later date.                                                                                 // 2123\n   *                                                                                                                   // 2124\n   * @enum {string}                                                                                                    // 2125\n   * @private                                                                                                          // 2126\n   */                                                                                                                  // 2127\nMaterialSnackbar.prototype.cssClasses_ = {                                                                             // 2128\n    SNACKBAR: 'mdl-snackbar',                                                                                          // 2129\n    MESSAGE: 'mdl-snackbar__text',                                                                                     // 2130\n    ACTION: 'mdl-snackbar__action',                                                                                    // 2131\n    ACTIVE: 'mdl-snackbar--active'                                                                                     // 2132\n};                                                                                                                     // 2133\n/**                                                                                                                    // 2134\n   * Display the snackbar.                                                                                             // 2135\n   *                                                                                                                   // 2136\n   * @private                                                                                                          // 2137\n   */                                                                                                                  // 2138\nMaterialSnackbar.prototype.displaySnackbar_ = function () {                                                            // 2139\n    this.element_.setAttribute('aria-hidden', 'true');                                                                 // 2140\n    if (this.actionHandler_) {                                                                                         // 2141\n        this.actionElement_.textContent = this.actionText_;                                                            // 2142\n        this.actionElement_.addEventListener('click', this.actionHandler_);                                            // 2143\n        this.setActionHidden_(false);                                                                                  // 2144\n    }                                                                                                                  // 2145\n    this.textElement_.textContent = this.message_;                                                                     // 2146\n    this.element_.classList.add(this.cssClasses_.ACTIVE);                                                              // 2147\n    this.element_.setAttribute('aria-hidden', 'false');                                                                // 2148\n    setTimeout(this.cleanup_.bind(this), this.timeout_);                                                               // 2149\n};                                                                                                                     // 2150\n/**                                                                                                                    // 2151\n   * Show the snackbar.                                                                                                // 2152\n   *                                                                                                                   // 2153\n   * @param {Object} data The data for the notification.                                                               // 2154\n   * @public                                                                                                           // 2155\n   */                                                                                                                  // 2156\nMaterialSnackbar.prototype.showSnackbar = function (data) {                                                            // 2157\n    if (data === undefined) {                                                                                          // 2158\n        throw new Error('Please provide a data object with at least a message to display.');                           // 2159\n    }                                                                                                                  // 2160\n    if (data['message'] === undefined) {                                                                               // 2161\n        throw new Error('Please provide a message to be displayed.');                                                  // 2162\n    }                                                                                                                  // 2163\n    if (data['actionHandler'] && !data['actionText']) {                                                                // 2164\n        throw new Error('Please provide action text with the handler.');                                               // 2165\n    }                                                                                                                  // 2166\n    if (this.active) {                                                                                                 // 2167\n        this.queuedNotifications_.push(data);                                                                          // 2168\n    } else {                                                                                                           // 2169\n        this.active = true;                                                                                            // 2170\n        this.message_ = data['message'];                                                                               // 2171\n        if (data['timeout']) {                                                                                         // 2172\n            this.timeout_ = data['timeout'];                                                                           // 2173\n        } else {                                                                                                       // 2174\n            this.timeout_ = 2750;                                                                                      // 2175\n        }                                                                                                              // 2176\n        if (data['actionHandler']) {                                                                                   // 2177\n            this.actionHandler_ = data['actionHandler'];                                                               // 2178\n        }                                                                                                              // 2179\n        if (data['actionText']) {                                                                                      // 2180\n            this.actionText_ = data['actionText'];                                                                     // 2181\n        }                                                                                                              // 2182\n        this.displaySnackbar_();                                                                                       // 2183\n    }                                                                                                                  // 2184\n};                                                                                                                     // 2185\nMaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;                                  // 2186\n/**                                                                                                                    // 2187\n   * Check if the queue has items within it.                                                                           // 2188\n   * If it does, display the next entry.                                                                               // 2189\n   *                                                                                                                   // 2190\n   * @private                                                                                                          // 2191\n   */                                                                                                                  // 2192\nMaterialSnackbar.prototype.checkQueue_ = function () {                                                                 // 2193\n    if (this.queuedNotifications_.length > 0) {                                                                        // 2194\n        this.showSnackbar(this.queuedNotifications_.shift());                                                          // 2195\n    }                                                                                                                  // 2196\n};                                                                                                                     // 2197\n/**                                                                                                                    // 2198\n   * Cleanup the snackbar event listeners and accessiblity attributes.                                                 // 2199\n   *                                                                                                                   // 2200\n   * @private                                                                                                          // 2201\n   */                                                                                                                  // 2202\nMaterialSnackbar.prototype.cleanup_ = function () {                                                                    // 2203\n    this.element_.classList.remove(this.cssClasses_.ACTIVE);                                                           // 2204\n    setTimeout(function () {                                                                                           // 2205\n        this.element_.setAttribute('aria-hidden', 'true');                                                             // 2206\n        this.textElement_.textContent = '';                                                                            // 2207\n        if (!Boolean(this.actionElement_.getAttribute('aria-hidden'))) {                                               // 2208\n            this.setActionHidden_(true);                                                                               // 2209\n            this.actionElement_.textContent = '';                                                                      // 2210\n            this.actionElement_.removeEventListener('click', this.actionHandler_);                                     // 2211\n        }                                                                                                              // 2212\n        this.actionHandler_ = undefined;                                                                               // 2213\n        this.message_ = undefined;                                                                                     // 2214\n        this.actionText_ = undefined;                                                                                  // 2215\n        this.active = false;                                                                                           // 2216\n        this.checkQueue_();                                                                                            // 2217\n    }.bind(this), this.Constant_.ANIMATION_LENGTH);                                                                    // 2218\n};                                                                                                                     // 2219\n/**                                                                                                                    // 2220\n   * Set the action handler hidden state.                                                                              // 2221\n   *                                                                                                                   // 2222\n   * @param {boolean} value                                                                                            // 2223\n   * @private                                                                                                          // 2224\n   */                                                                                                                  // 2225\nMaterialSnackbar.prototype.setActionHidden_ = function (value) {                                                       // 2226\n    if (value) {                                                                                                       // 2227\n        this.actionElement_.setAttribute('aria-hidden', 'true');                                                       // 2228\n    } else {                                                                                                           // 2229\n        this.actionElement_.removeAttribute('aria-hidden');                                                            // 2230\n    }                                                                                                                  // 2231\n};                                                                                                                     // 2232\n// The component registers itself. It can assume componentHandler is available                                         // 2233\n// in the global scope.                                                                                                // 2234\ncomponentHandler.register({                                                                                            // 2235\n    constructor: MaterialSnackbar,                                                                                     // 2236\n    classAsString: 'MaterialSnackbar',                                                                                 // 2237\n    cssClass: 'mdl-js-snackbar',                                                                                       // 2238\n    widget: true                                                                                                       // 2239\n});                                                                                                                    // 2240\n/**                                                                                                                    // 2241\n * @license                                                                                                            // 2242\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2243\n *                                                                                                                     // 2244\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2245\n * you may not use this file except in compliance with the License.                                                    // 2246\n * You may obtain a copy of the License at                                                                             // 2247\n *                                                                                                                     // 2248\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2249\n *                                                                                                                     // 2250\n * Unless required by applicable law or agreed to in writing, software                                                 // 2251\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2252\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2253\n * See the License for the specific language governing permissions and                                                 // 2254\n * limitations under the License.                                                                                      // 2255\n */                                                                                                                    // 2256\n/**                                                                                                                    // 2257\n   * Class constructor for Spinner MDL component.                                                                      // 2258\n   * Implements MDL component design pattern defined at:                                                               // 2259\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2260\n   *                                                                                                                   // 2261\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2262\n   * @constructor                                                                                                      // 2263\n   */                                                                                                                  // 2264\nvar MaterialSpinner = function MaterialSpinner(element) {                                                              // 2265\n    this.element_ = element;                                                                                           // 2266\n    // Initialize instance.                                                                                            // 2267\n    this.init();                                                                                                       // 2268\n};                                                                                                                     // 2269\nwindow['MaterialSpinner'] = MaterialSpinner;                                                                           // 2270\n/**                                                                                                                    // 2271\n   * Store constants in one place so they can be updated easily.                                                       // 2272\n   *                                                                                                                   // 2273\n   * @enum {string | number}                                                                                           // 2274\n   * @private                                                                                                          // 2275\n   */                                                                                                                  // 2276\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };                                                  // 2277\n/**                                                                                                                    // 2278\n   * Store strings for class names defined by this component that are used in                                          // 2279\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2280\n   * decide to modify at a later date.                                                                                 // 2281\n   *                                                                                                                   // 2282\n   * @enum {string}                                                                                                    // 2283\n   * @private                                                                                                          // 2284\n   */                                                                                                                  // 2285\nMaterialSpinner.prototype.CssClasses_ = {                                                                              // 2286\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',                                                                           // 2287\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',                                                         // 2288\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',                                                                         // 2289\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',                                                                   // 2290\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',                                                                             // 2291\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'                                                                            // 2292\n};                                                                                                                     // 2293\n/**                                                                                                                    // 2294\n   * Auxiliary method to create a spinner layer.                                                                       // 2295\n   *                                                                                                                   // 2296\n   * @param {number} index Index of the layer to be created.                                                           // 2297\n   * @public                                                                                                           // 2298\n   */                                                                                                                  // 2299\nMaterialSpinner.prototype.createLayer = function (index) {                                                             // 2300\n    var layer = document.createElement('div');                                                                         // 2301\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);                                                           // 2302\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);                                             // 2303\n    var leftClipper = document.createElement('div');                                                                   // 2304\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);                                            // 2305\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);                                                      // 2306\n    var gapPatch = document.createElement('div');                                                                      // 2307\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);                                                    // 2308\n    var rightClipper = document.createElement('div');                                                                  // 2309\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);                                           // 2310\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);                                                    // 2311\n    var circleOwners = [                                                                                               // 2312\n        leftClipper,                                                                                                   // 2313\n        gapPatch,                                                                                                      // 2314\n        rightClipper                                                                                                   // 2315\n    ];                                                                                                                 // 2316\n    for (var i = 0; i < circleOwners.length; i++) {                                                                    // 2317\n        var circle = document.createElement('div');                                                                    // 2318\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);                                                     // 2319\n        circleOwners[i].appendChild(circle);                                                                           // 2320\n    }                                                                                                                  // 2321\n    layer.appendChild(leftClipper);                                                                                    // 2322\n    layer.appendChild(gapPatch);                                                                                       // 2323\n    layer.appendChild(rightClipper);                                                                                   // 2324\n    this.element_.appendChild(layer);                                                                                  // 2325\n};                                                                                                                     // 2326\nMaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;                                      // 2327\n/**                                                                                                                    // 2328\n   * Stops the spinner animation.                                                                                      // 2329\n   * Public method for users who need to stop the spinner for any reason.                                              // 2330\n   *                                                                                                                   // 2331\n   * @public                                                                                                           // 2332\n   */                                                                                                                  // 2333\nMaterialSpinner.prototype.stop = function () {                                                                         // 2334\n    this.element_.classList.remove('is-active');                                                                       // 2335\n};                                                                                                                     // 2336\nMaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;                                                    // 2337\n/**                                                                                                                    // 2338\n   * Starts the spinner animation.                                                                                     // 2339\n   * Public method for users who need to manually start the spinner for any reason                                     // 2340\n   * (instead of just adding the 'is-active' class to their markup).                                                   // 2341\n   *                                                                                                                   // 2342\n   * @public                                                                                                           // 2343\n   */                                                                                                                  // 2344\nMaterialSpinner.prototype.start = function () {                                                                        // 2345\n    this.element_.classList.add('is-active');                                                                          // 2346\n};                                                                                                                     // 2347\nMaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;                                                  // 2348\n/**                                                                                                                    // 2349\n   * Initialize element.                                                                                               // 2350\n   */                                                                                                                  // 2351\nMaterialSpinner.prototype.init = function () {                                                                         // 2352\n    if (this.element_) {                                                                                               // 2353\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {                                            // 2354\n            this.createLayer(i);                                                                                       // 2355\n        }                                                                                                              // 2356\n        this.element_.classList.add('is-upgraded');                                                                    // 2357\n    }                                                                                                                  // 2358\n};                                                                                                                     // 2359\n// The component registers itself. It can assume componentHandler is available                                         // 2360\n// in the global scope.                                                                                                // 2361\ncomponentHandler.register({                                                                                            // 2362\n    constructor: MaterialSpinner,                                                                                      // 2363\n    classAsString: 'MaterialSpinner',                                                                                  // 2364\n    cssClass: 'mdl-js-spinner',                                                                                        // 2365\n    widget: true                                                                                                       // 2366\n});                                                                                                                    // 2367\n/**                                                                                                                    // 2368\n * @license                                                                                                            // 2369\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2370\n *                                                                                                                     // 2371\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2372\n * you may not use this file except in compliance with the License.                                                    // 2373\n * You may obtain a copy of the License at                                                                             // 2374\n *                                                                                                                     // 2375\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2376\n *                                                                                                                     // 2377\n * Unless required by applicable law or agreed to in writing, software                                                 // 2378\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2379\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2380\n * See the License for the specific language governing permissions and                                                 // 2381\n * limitations under the License.                                                                                      // 2382\n */                                                                                                                    // 2383\n/**                                                                                                                    // 2384\n   * Class constructor for Checkbox MDL component.                                                                     // 2385\n   * Implements MDL component design pattern defined at:                                                               // 2386\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2387\n   *                                                                                                                   // 2388\n   * @constructor                                                                                                      // 2389\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2390\n   */                                                                                                                  // 2391\nvar MaterialSwitch = function MaterialSwitch(element) {                                                                // 2392\n    this.element_ = element;                                                                                           // 2393\n    // Initialize instance.                                                                                            // 2394\n    this.init();                                                                                                       // 2395\n};                                                                                                                     // 2396\nwindow['MaterialSwitch'] = MaterialSwitch;                                                                             // 2397\n/**                                                                                                                    // 2398\n   * Store constants in one place so they can be updated easily.                                                       // 2399\n   *                                                                                                                   // 2400\n   * @enum {string | number}                                                                                           // 2401\n   * @private                                                                                                          // 2402\n   */                                                                                                                  // 2403\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                          // 2404\n/**                                                                                                                    // 2405\n   * Store strings for class names defined by this component that are used in                                          // 2406\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2407\n   * decide to modify at a later date.                                                                                 // 2408\n   *                                                                                                                   // 2409\n   * @enum {string}                                                                                                    // 2410\n   * @private                                                                                                          // 2411\n   */                                                                                                                  // 2412\nMaterialSwitch.prototype.CssClasses_ = {                                                                               // 2413\n    INPUT: 'mdl-switch__input',                                                                                        // 2414\n    TRACK: 'mdl-switch__track',                                                                                        // 2415\n    THUMB: 'mdl-switch__thumb',                                                                                        // 2416\n    FOCUS_HELPER: 'mdl-switch__focus-helper',                                                                          // 2417\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 2418\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 2419\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',                                                                  // 2420\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 2421\n    RIPPLE: 'mdl-ripple',                                                                                              // 2422\n    IS_FOCUSED: 'is-focused',                                                                                          // 2423\n    IS_DISABLED: 'is-disabled',                                                                                        // 2424\n    IS_CHECKED: 'is-checked'                                                                                           // 2425\n};                                                                                                                     // 2426\n/**                                                                                                                    // 2427\n   * Handle change of state.                                                                                           // 2428\n   *                                                                                                                   // 2429\n   * @param {Event} event The event that fired.                                                                        // 2430\n   * @private                                                                                                          // 2431\n   */                                                                                                                  // 2432\nMaterialSwitch.prototype.onChange_ = function (event) {                                                                // 2433\n    this.updateClasses_();                                                                                             // 2434\n};                                                                                                                     // 2435\n/**                                                                                                                    // 2436\n   * Handle focus of element.                                                                                          // 2437\n   *                                                                                                                   // 2438\n   * @param {Event} event The event that fired.                                                                        // 2439\n   * @private                                                                                                          // 2440\n   */                                                                                                                  // 2441\nMaterialSwitch.prototype.onFocus_ = function (event) {                                                                 // 2442\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 2443\n};                                                                                                                     // 2444\n/**                                                                                                                    // 2445\n   * Handle lost focus of element.                                                                                     // 2446\n   *                                                                                                                   // 2447\n   * @param {Event} event The event that fired.                                                                        // 2448\n   * @private                                                                                                          // 2449\n   */                                                                                                                  // 2450\nMaterialSwitch.prototype.onBlur_ = function (event) {                                                                  // 2451\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 2452\n};                                                                                                                     // 2453\n/**                                                                                                                    // 2454\n   * Handle mouseup.                                                                                                   // 2455\n   *                                                                                                                   // 2456\n   * @param {Event} event The event that fired.                                                                        // 2457\n   * @private                                                                                                          // 2458\n   */                                                                                                                  // 2459\nMaterialSwitch.prototype.onMouseUp_ = function (event) {                                                               // 2460\n    this.blur_();                                                                                                      // 2461\n};                                                                                                                     // 2462\n/**                                                                                                                    // 2463\n   * Handle class updates.                                                                                             // 2464\n   *                                                                                                                   // 2465\n   * @private                                                                                                          // 2466\n   */                                                                                                                  // 2467\nMaterialSwitch.prototype.updateClasses_ = function () {                                                                // 2468\n    this.checkDisabled();                                                                                              // 2469\n    this.checkToggleState();                                                                                           // 2470\n};                                                                                                                     // 2471\n/**                                                                                                                    // 2472\n   * Add blur.                                                                                                         // 2473\n   *                                                                                                                   // 2474\n   * @private                                                                                                          // 2475\n   */                                                                                                                  // 2476\nMaterialSwitch.prototype.blur_ = function () {                                                                         // 2477\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 2478\n    // so that we can avoid this hack.                                                                                 // 2479\n    window.setTimeout(function () {                                                                                    // 2480\n        this.inputElement_.blur();                                                                                     // 2481\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 2482\n};                                                                                                                     // 2483\n// Public methods.                                                                                                     // 2484\n/**                                                                                                                    // 2485\n   * Check the components disabled state.                                                                              // 2486\n   *                                                                                                                   // 2487\n   * @public                                                                                                           // 2488\n   */                                                                                                                  // 2489\nMaterialSwitch.prototype.checkDisabled = function () {                                                                 // 2490\n    if (this.inputElement_.disabled) {                                                                                 // 2491\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 2492\n    } else {                                                                                                           // 2493\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 2494\n    }                                                                                                                  // 2495\n};                                                                                                                     // 2496\nMaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;                                    // 2497\n/**                                                                                                                    // 2498\n   * Check the components toggled state.                                                                               // 2499\n   *                                                                                                                   // 2500\n   * @public                                                                                                           // 2501\n   */                                                                                                                  // 2502\nMaterialSwitch.prototype.checkToggleState = function () {                                                              // 2503\n    if (this.inputElement_.checked) {                                                                                  // 2504\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 2505\n    } else {                                                                                                           // 2506\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 2507\n    }                                                                                                                  // 2508\n};                                                                                                                     // 2509\nMaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;                              // 2510\n/**                                                                                                                    // 2511\n   * Disable switch.                                                                                                   // 2512\n   *                                                                                                                   // 2513\n   * @public                                                                                                           // 2514\n   */                                                                                                                  // 2515\nMaterialSwitch.prototype.disable = function () {                                                                       // 2516\n    this.inputElement_.disabled = true;                                                                                // 2517\n    this.updateClasses_();                                                                                             // 2518\n};                                                                                                                     // 2519\nMaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;                                                // 2520\n/**                                                                                                                    // 2521\n   * Enable switch.                                                                                                    // 2522\n   *                                                                                                                   // 2523\n   * @public                                                                                                           // 2524\n   */                                                                                                                  // 2525\nMaterialSwitch.prototype.enable = function () {                                                                        // 2526\n    this.inputElement_.disabled = false;                                                                               // 2527\n    this.updateClasses_();                                                                                             // 2528\n};                                                                                                                     // 2529\nMaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;                                                  // 2530\n/**                                                                                                                    // 2531\n   * Activate switch.                                                                                                  // 2532\n   *                                                                                                                   // 2533\n   * @public                                                                                                           // 2534\n   */                                                                                                                  // 2535\nMaterialSwitch.prototype.on = function () {                                                                            // 2536\n    this.inputElement_.checked = true;                                                                                 // 2537\n    this.updateClasses_();                                                                                             // 2538\n};                                                                                                                     // 2539\nMaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;                                                          // 2540\n/**                                                                                                                    // 2541\n   * Deactivate switch.                                                                                                // 2542\n   *                                                                                                                   // 2543\n   * @public                                                                                                           // 2544\n   */                                                                                                                  // 2545\nMaterialSwitch.prototype.off = function () {                                                                           // 2546\n    this.inputElement_.checked = false;                                                                                // 2547\n    this.updateClasses_();                                                                                             // 2548\n};                                                                                                                     // 2549\nMaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;                                                        // 2550\n/**                                                                                                                    // 2551\n   * Initialize element.                                                                                               // 2552\n   */                                                                                                                  // 2553\nMaterialSwitch.prototype.init = function () {                                                                          // 2554\n    if (this.element_) {                                                                                               // 2555\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 2556\n        var track = document.createElement('div');                                                                     // 2557\n        track.classList.add(this.CssClasses_.TRACK);                                                                   // 2558\n        var thumb = document.createElement('div');                                                                     // 2559\n        thumb.classList.add(this.CssClasses_.THUMB);                                                                   // 2560\n        var focusHelper = document.createElement('span');                                                              // 2561\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);                                                      // 2562\n        thumb.appendChild(focusHelper);                                                                                // 2563\n        this.element_.appendChild(track);                                                                              // 2564\n        this.element_.appendChild(thumb);                                                                              // 2565\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);                                                         // 2566\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 2567\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 2568\n            this.rippleContainerElement_ = document.createElement('span');                                             // 2569\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 2570\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                // 2571\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 2572\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);                        // 2573\n            var ripple = document.createElement('span');                                                               // 2574\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 2575\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 2576\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 2577\n        }                                                                                                              // 2578\n        this.boundChangeHandler = this.onChange_.bind(this);                                                           // 2579\n        this.boundFocusHandler = this.onFocus_.bind(this);                                                             // 2580\n        this.boundBlurHandler = this.onBlur_.bind(this);                                                               // 2581\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);                                        // 2582\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);                                          // 2583\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);                                            // 2584\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);                                           // 2585\n        this.updateClasses_();                                                                                         // 2586\n        this.element_.classList.add('is-upgraded');                                                                    // 2587\n    }                                                                                                                  // 2588\n};                                                                                                                     // 2589\n// The component registers itself. It can assume componentHandler is available                                         // 2590\n// in the global scope.                                                                                                // 2591\ncomponentHandler.register({                                                                                            // 2592\n    constructor: MaterialSwitch,                                                                                       // 2593\n    classAsString: 'MaterialSwitch',                                                                                   // 2594\n    cssClass: 'mdl-js-switch',                                                                                         // 2595\n    widget: true                                                                                                       // 2596\n});                                                                                                                    // 2597\n/**                                                                                                                    // 2598\n * @license                                                                                                            // 2599\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2600\n *                                                                                                                     // 2601\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2602\n * you may not use this file except in compliance with the License.                                                    // 2603\n * You may obtain a copy of the License at                                                                             // 2604\n *                                                                                                                     // 2605\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2606\n *                                                                                                                     // 2607\n * Unless required by applicable law or agreed to in writing, software                                                 // 2608\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2609\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2610\n * See the License for the specific language governing permissions and                                                 // 2611\n * limitations under the License.                                                                                      // 2612\n */                                                                                                                    // 2613\n/**                                                                                                                    // 2614\n   * Class constructor for Tabs MDL component.                                                                         // 2615\n   * Implements MDL component design pattern defined at:                                                               // 2616\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2617\n   *                                                                                                                   // 2618\n   * @constructor                                                                                                      // 2619\n   * @param {Element} element The element that will be upgraded.                                                       // 2620\n   */                                                                                                                  // 2621\nvar MaterialTabs = function MaterialTabs(element) {                                                                    // 2622\n    // Stores the HTML element.                                                                                        // 2623\n    this.element_ = element;                                                                                           // 2624\n    // Initialize instance.                                                                                            // 2625\n    this.init();                                                                                                       // 2626\n};                                                                                                                     // 2627\nwindow['MaterialTabs'] = MaterialTabs;                                                                                 // 2628\n/**                                                                                                                    // 2629\n   * Store constants in one place so they can be updated easily.                                                       // 2630\n   *                                                                                                                   // 2631\n   * @enum {string}                                                                                                    // 2632\n   * @private                                                                                                          // 2633\n   */                                                                                                                  // 2634\nMaterialTabs.prototype.Constant_ = {};                                                                                 // 2635\n/**                                                                                                                    // 2636\n   * Store strings for class names defined by this component that are used in                                          // 2637\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2638\n   * decide to modify at a later date.                                                                                 // 2639\n   *                                                                                                                   // 2640\n   * @enum {string}                                                                                                    // 2641\n   * @private                                                                                                          // 2642\n   */                                                                                                                  // 2643\nMaterialTabs.prototype.CssClasses_ = {                                                                                 // 2644\n    TAB_CLASS: 'mdl-tabs__tab',                                                                                        // 2645\n    PANEL_CLASS: 'mdl-tabs__panel',                                                                                    // 2646\n    ACTIVE_CLASS: 'is-active',                                                                                         // 2647\n    UPGRADED_CLASS: 'is-upgraded',                                                                                     // 2648\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                      // 2649\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',                                                                // 2650\n    MDL_RIPPLE: 'mdl-ripple',                                                                                          // 2651\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'                                          // 2652\n};                                                                                                                     // 2653\n/**                                                                                                                    // 2654\n   * Handle clicks to a tabs component                                                                                 // 2655\n   *                                                                                                                   // 2656\n   * @private                                                                                                          // 2657\n   */                                                                                                                  // 2658\nMaterialTabs.prototype.initTabs_ = function () {                                                                       // 2659\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {                                     // 2660\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);                              // 2661\n    }                                                                                                                  // 2662\n    // Select element tabs, document panels                                                                            // 2663\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);                                     // 2664\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);                                 // 2665\n    // Create new tabs for each tab element                                                                            // 2666\n    for (var i = 0; i < this.tabs_.length; i++) {                                                                      // 2667\n        new MaterialTab(this.tabs_[i], this);                                                                          // 2668\n    }                                                                                                                  // 2669\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);                                                      // 2670\n};                                                                                                                     // 2671\n/**                                                                                                                    // 2672\n   * Reset tab state, dropping active classes                                                                          // 2673\n   *                                                                                                                   // 2674\n   * @private                                                                                                          // 2675\n   */                                                                                                                  // 2676\nMaterialTabs.prototype.resetTabState_ = function () {                                                                  // 2677\n    for (var k = 0; k < this.tabs_.length; k++) {                                                                      // 2678\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);                                                 // 2679\n    }                                                                                                                  // 2680\n};                                                                                                                     // 2681\n/**                                                                                                                    // 2682\n   * Reset panel state, droping active classes                                                                         // 2683\n   *                                                                                                                   // 2684\n   * @private                                                                                                          // 2685\n   */                                                                                                                  // 2686\nMaterialTabs.prototype.resetPanelState_ = function () {                                                                // 2687\n    for (var j = 0; j < this.panels_.length; j++) {                                                                    // 2688\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);                                               // 2689\n    }                                                                                                                  // 2690\n};                                                                                                                     // 2691\n/**                                                                                                                    // 2692\n   * Initialize element.                                                                                               // 2693\n   */                                                                                                                  // 2694\nMaterialTabs.prototype.init = function () {                                                                            // 2695\n    if (this.element_) {                                                                                               // 2696\n        this.initTabs_();                                                                                              // 2697\n    }                                                                                                                  // 2698\n};                                                                                                                     // 2699\n/**                                                                                                                    // 2700\n   * Constructor for an individual tab.                                                                                // 2701\n   *                                                                                                                   // 2702\n   * @constructor                                                                                                      // 2703\n   * @param {Element} tab The HTML element for the tab.                                                                // 2704\n   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.                                              // 2705\n   */                                                                                                                  // 2706\nfunction MaterialTab(tab, ctx) {                                                                                       // 2707\n    if (tab) {                                                                                                         // 2708\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {                                   // 2709\n            var rippleContainer = document.createElement('span');                                                      // 2710\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);                                       // 2711\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);                                       // 2712\n            var ripple = document.createElement('span');                                                               // 2713\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);                                                          // 2714\n            rippleContainer.appendChild(ripple);                                                                       // 2715\n            tab.appendChild(rippleContainer);                                                                          // 2716\n        }                                                                                                              // 2717\n        tab.addEventListener('click', function (e) {                                                                   // 2718\n            e.preventDefault();                                                                                        // 2719\n            var href = tab.href.split('#')[1];                                                                         // 2720\n            var panel = ctx.element_.querySelector('#' + href);                                                        // 2721\n            ctx.resetTabState_();                                                                                      // 2722\n            ctx.resetPanelState_();                                                                                    // 2723\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);                                                           // 2724\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);                                                         // 2725\n        });                                                                                                            // 2726\n    }                                                                                                                  // 2727\n}                                                                                                                      // 2728\n// The component registers itself. It can assume componentHandler is available                                         // 2729\n// in the global scope.                                                                                                // 2730\ncomponentHandler.register({                                                                                            // 2731\n    constructor: MaterialTabs,                                                                                         // 2732\n    classAsString: 'MaterialTabs',                                                                                     // 2733\n    cssClass: 'mdl-js-tabs'                                                                                            // 2734\n});                                                                                                                    // 2735\n/**                                                                                                                    // 2736\n * @license                                                                                                            // 2737\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2738\n *                                                                                                                     // 2739\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2740\n * you may not use this file except in compliance with the License.                                                    // 2741\n * You may obtain a copy of the License at                                                                             // 2742\n *                                                                                                                     // 2743\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2744\n *                                                                                                                     // 2745\n * Unless required by applicable law or agreed to in writing, software                                                 // 2746\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2747\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2748\n * See the License for the specific language governing permissions and                                                 // 2749\n * limitations under the License.                                                                                      // 2750\n */                                                                                                                    // 2751\n/**                                                                                                                    // 2752\n   * Class constructor for Textfield MDL component.                                                                    // 2753\n   * Implements MDL component design pattern defined at:                                                               // 2754\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2755\n   *                                                                                                                   // 2756\n   * @constructor                                                                                                      // 2757\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2758\n   */                                                                                                                  // 2759\nvar MaterialTextfield = function MaterialTextfield(element) {                                                          // 2760\n    this.element_ = element;                                                                                           // 2761\n    this.maxRows = this.Constant_.NO_MAX_ROWS;                                                                         // 2762\n    // Initialize instance.                                                                                            // 2763\n    this.init();                                                                                                       // 2764\n};                                                                                                                     // 2765\nwindow['MaterialTextfield'] = MaterialTextfield;                                                                       // 2766\n/**                                                                                                                    // 2767\n   * Store constants in one place so they can be updated easily.                                                       // 2768\n   *                                                                                                                   // 2769\n   * @enum {string | number}                                                                                           // 2770\n   * @private                                                                                                          // 2771\n   */                                                                                                                  // 2772\nMaterialTextfield.prototype.Constant_ = {                                                                              // 2773\n    NO_MAX_ROWS: -1,                                                                                                   // 2774\n    MAX_ROWS_ATTRIBUTE: 'maxrows'                                                                                      // 2775\n};                                                                                                                     // 2776\n/**                                                                                                                    // 2777\n   * Store strings for class names defined by this component that are used in                                          // 2778\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2779\n   * decide to modify at a later date.                                                                                 // 2780\n   *                                                                                                                   // 2781\n   * @enum {string}                                                                                                    // 2782\n   * @private                                                                                                          // 2783\n   */                                                                                                                  // 2784\nMaterialTextfield.prototype.CssClasses_ = {                                                                            // 2785\n    LABEL: 'mdl-textfield__label',                                                                                     // 2786\n    INPUT: 'mdl-textfield__input',                                                                                     // 2787\n    IS_DIRTY: 'is-dirty',                                                                                              // 2788\n    IS_FOCUSED: 'is-focused',                                                                                          // 2789\n    IS_DISABLED: 'is-disabled',                                                                                        // 2790\n    IS_INVALID: 'is-invalid',                                                                                          // 2791\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 2792\n    HAS_PLACEHOLDER: 'has-placeholder'                                                                                 // 2793\n};                                                                                                                     // 2794\n/**                                                                                                                    // 2795\n   * Handle input being entered.                                                                                       // 2796\n   *                                                                                                                   // 2797\n   * @param {Event} event The event that fired.                                                                        // 2798\n   * @private                                                                                                          // 2799\n   */                                                                                                                  // 2800\nMaterialTextfield.prototype.onKeyDown_ = function (event) {                                                            // 2801\n    var currentRowCount = event.target.value.split('\\n').length;                                                       // 2802\n    if (event.keyCode === 13) {                                                                                        // 2803\n        if (currentRowCount >= this.maxRows) {                                                                         // 2804\n            event.preventDefault();                                                                                    // 2805\n        }                                                                                                              // 2806\n    }                                                                                                                  // 2807\n};                                                                                                                     // 2808\n/**                                                                                                                    // 2809\n   * Handle focus.                                                                                                     // 2810\n   *                                                                                                                   // 2811\n   * @param {Event} event The event that fired.                                                                        // 2812\n   * @private                                                                                                          // 2813\n   */                                                                                                                  // 2814\nMaterialTextfield.prototype.onFocus_ = function (event) {                                                              // 2815\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 2816\n};                                                                                                                     // 2817\n/**                                                                                                                    // 2818\n   * Handle lost focus.                                                                                                // 2819\n   *                                                                                                                   // 2820\n   * @param {Event} event The event that fired.                                                                        // 2821\n   * @private                                                                                                          // 2822\n   */                                                                                                                  // 2823\nMaterialTextfield.prototype.onBlur_ = function (event) {                                                               // 2824\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 2825\n};                                                                                                                     // 2826\n/**                                                                                                                    // 2827\n   * Handle reset event from out side.                                                                                 // 2828\n   *                                                                                                                   // 2829\n   * @param {Event} event The event that fired.                                                                        // 2830\n   * @private                                                                                                          // 2831\n   */                                                                                                                  // 2832\nMaterialTextfield.prototype.onReset_ = function (event) {                                                              // 2833\n    this.updateClasses_();                                                                                             // 2834\n};                                                                                                                     // 2835\n/**                                                                                                                    // 2836\n   * Handle class updates.                                                                                             // 2837\n   *                                                                                                                   // 2838\n   * @private                                                                                                          // 2839\n   */                                                                                                                  // 2840\nMaterialTextfield.prototype.updateClasses_ = function () {                                                             // 2841\n    this.checkDisabled();                                                                                              // 2842\n    this.checkValidity();                                                                                              // 2843\n    this.checkDirty();                                                                                                 // 2844\n    this.checkFocus();                                                                                                 // 2845\n};                                                                                                                     // 2846\n// Public methods.                                                                                                     // 2847\n/**                                                                                                                    // 2848\n   * Check the disabled state and update field accordingly.                                                            // 2849\n   *                                                                                                                   // 2850\n   * @public                                                                                                           // 2851\n   */                                                                                                                  // 2852\nMaterialTextfield.prototype.checkDisabled = function () {                                                              // 2853\n    if (this.input_.disabled) {                                                                                        // 2854\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 2855\n    } else {                                                                                                           // 2856\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 2857\n    }                                                                                                                  // 2858\n};                                                                                                                     // 2859\nMaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;                              // 2860\n/**                                                                                                                    // 2861\n  * Check the focus state and update field accordingly.                                                                // 2862\n  *                                                                                                                    // 2863\n  * @public                                                                                                            // 2864\n  */                                                                                                                   // 2865\nMaterialTextfield.prototype.checkFocus = function () {                                                                 // 2866\n    if (Boolean(this.element_.querySelector(':focus'))) {                                                              // 2867\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                      // 2868\n    } else {                                                                                                           // 2869\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                   // 2870\n    }                                                                                                                  // 2871\n};                                                                                                                     // 2872\nMaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;                                    // 2873\n/**                                                                                                                    // 2874\n   * Check the validity state and update field accordingly.                                                            // 2875\n   *                                                                                                                   // 2876\n   * @public                                                                                                           // 2877\n   */                                                                                                                  // 2878\nMaterialTextfield.prototype.checkValidity = function () {                                                              // 2879\n    if (this.input_.validity) {                                                                                        // 2880\n        if (this.input_.validity.valid) {                                                                              // 2881\n            this.element_.classList.remove(this.CssClasses_.IS_INVALID);                                               // 2882\n        } else {                                                                                                       // 2883\n            this.element_.classList.add(this.CssClasses_.IS_INVALID);                                                  // 2884\n        }                                                                                                              // 2885\n    }                                                                                                                  // 2886\n};                                                                                                                     // 2887\nMaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;                              // 2888\n/**                                                                                                                    // 2889\n   * Check the dirty state and update field accordingly.                                                               // 2890\n   *                                                                                                                   // 2891\n   * @public                                                                                                           // 2892\n   */                                                                                                                  // 2893\nMaterialTextfield.prototype.checkDirty = function () {                                                                 // 2894\n    if (this.input_.value && this.input_.value.length > 0) {                                                           // 2895\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);                                                        // 2896\n    } else {                                                                                                           // 2897\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);                                                     // 2898\n    }                                                                                                                  // 2899\n};                                                                                                                     // 2900\nMaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;                                    // 2901\n/**                                                                                                                    // 2902\n   * Disable text field.                                                                                               // 2903\n   *                                                                                                                   // 2904\n   * @public                                                                                                           // 2905\n   */                                                                                                                  // 2906\nMaterialTextfield.prototype.disable = function () {                                                                    // 2907\n    this.input_.disabled = true;                                                                                       // 2908\n    this.updateClasses_();                                                                                             // 2909\n};                                                                                                                     // 2910\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;                                          // 2911\n/**                                                                                                                    // 2912\n   * Enable text field.                                                                                                // 2913\n   *                                                                                                                   // 2914\n   * @public                                                                                                           // 2915\n   */                                                                                                                  // 2916\nMaterialTextfield.prototype.enable = function () {                                                                     // 2917\n    this.input_.disabled = false;                                                                                      // 2918\n    this.updateClasses_();                                                                                             // 2919\n};                                                                                                                     // 2920\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;                                            // 2921\n/**                                                                                                                    // 2922\n   * Update text field value.                                                                                          // 2923\n   *                                                                                                                   // 2924\n   * @param {string} value The value to which to set the control (optional).                                           // 2925\n   * @public                                                                                                           // 2926\n   */                                                                                                                  // 2927\nMaterialTextfield.prototype.change = function (value) {                                                                // 2928\n    this.input_.value = value || '';                                                                                   // 2929\n    this.updateClasses_();                                                                                             // 2930\n};                                                                                                                     // 2931\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;                                            // 2932\n/**                                                                                                                    // 2933\n   * Initialize element.                                                                                               // 2934\n   */                                                                                                                  // 2935\nMaterialTextfield.prototype.init = function () {                                                                       // 2936\n    if (this.element_) {                                                                                               // 2937\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);                                       // 2938\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                       // 2939\n        if (this.input_) {                                                                                             // 2940\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {                                         // 2941\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);              // 2942\n                if (isNaN(this.maxRows)) {                                                                             // 2943\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;                                                         // 2944\n                }                                                                                                      // 2945\n            }                                                                                                          // 2946\n            if (this.input_.hasAttribute('placeholder')) {                                                             // 2947\n                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);                                         // 2948\n            }                                                                                                          // 2949\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);                                           // 2950\n            this.boundFocusHandler = this.onFocus_.bind(this);                                                         // 2951\n            this.boundBlurHandler = this.onBlur_.bind(this);                                                           // 2952\n            this.boundResetHandler = this.onReset_.bind(this);                                                         // 2953\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);                                     // 2954\n            this.input_.addEventListener('focus', this.boundFocusHandler);                                             // 2955\n            this.input_.addEventListener('blur', this.boundBlurHandler);                                               // 2956\n            this.input_.addEventListener('reset', this.boundResetHandler);                                             // 2957\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {                                                         // 2958\n                // TODO: This should handle pasting multi line text.                                                   // 2959\n                // Currently doesn't.                                                                                  // 2960\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);                                                 // 2961\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);                                     // 2962\n            }                                                                                                          // 2963\n            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);                               // 2964\n            this.updateClasses_();                                                                                     // 2965\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                 // 2966\n            if (invalid) {                                                                                             // 2967\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);                                              // 2968\n            }                                                                                                          // 2969\n            if (this.input_.hasAttribute('autofocus')) {                                                               // 2970\n                this.element_.focus();                                                                                 // 2971\n                this.checkFocus();                                                                                     // 2972\n            }                                                                                                          // 2973\n        }                                                                                                              // 2974\n    }                                                                                                                  // 2975\n};                                                                                                                     // 2976\n// The component registers itself. It can assume componentHandler is available                                         // 2977\n// in the global scope.                                                                                                // 2978\ncomponentHandler.register({                                                                                            // 2979\n    constructor: MaterialTextfield,                                                                                    // 2980\n    classAsString: 'MaterialTextfield',                                                                                // 2981\n    cssClass: 'mdl-js-textfield',                                                                                      // 2982\n    widget: true                                                                                                       // 2983\n});                                                                                                                    // 2984\n/**                                                                                                                    // 2985\n * @license                                                                                                            // 2986\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2987\n *                                                                                                                     // 2988\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2989\n * you may not use this file except in compliance with the License.                                                    // 2990\n * You may obtain a copy of the License at                                                                             // 2991\n *                                                                                                                     // 2992\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2993\n *                                                                                                                     // 2994\n * Unless required by applicable law or agreed to in writing, software                                                 // 2995\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2996\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2997\n * See the License for the specific language governing permissions and                                                 // 2998\n * limitations under the License.                                                                                      // 2999\n */                                                                                                                    // 3000\n/**                                                                                                                    // 3001\n   * Class constructor for Tooltip MDL component.                                                                      // 3002\n   * Implements MDL component design pattern defined at:                                                               // 3003\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3004\n   *                                                                                                                   // 3005\n   * @constructor                                                                                                      // 3006\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3007\n   */                                                                                                                  // 3008\nvar MaterialTooltip = function MaterialTooltip(element) {                                                              // 3009\n    this.element_ = element;                                                                                           // 3010\n    // Initialize instance.                                                                                            // 3011\n    this.init();                                                                                                       // 3012\n};                                                                                                                     // 3013\nwindow['MaterialTooltip'] = MaterialTooltip;                                                                           // 3014\n/**                                                                                                                    // 3015\n   * Store constants in one place so they can be updated easily.                                                       // 3016\n   *                                                                                                                   // 3017\n   * @enum {string | number}                                                                                           // 3018\n   * @private                                                                                                          // 3019\n   */                                                                                                                  // 3020\nMaterialTooltip.prototype.Constant_ = {};                                                                              // 3021\n/**                                                                                                                    // 3022\n   * Store strings for class names defined by this component that are used in                                          // 3023\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3024\n   * decide to modify at a later date.                                                                                 // 3025\n   *                                                                                                                   // 3026\n   * @enum {string}                                                                                                    // 3027\n   * @private                                                                                                          // 3028\n   */                                                                                                                  // 3029\nMaterialTooltip.prototype.CssClasses_ = {                                                                              // 3030\n    IS_ACTIVE: 'is-active',                                                                                            // 3031\n    BOTTOM: 'mdl-tooltip--bottom',                                                                                     // 3032\n    LEFT: 'mdl-tooltip--left',                                                                                         // 3033\n    RIGHT: 'mdl-tooltip--right',                                                                                       // 3034\n    TOP: 'mdl-tooltip--top'                                                                                            // 3035\n};                                                                                                                     // 3036\n/**                                                                                                                    // 3037\n   * Handle mouseenter for tooltip.                                                                                    // 3038\n   *                                                                                                                   // 3039\n   * @param {Event} event The event that fired.                                                                        // 3040\n   * @private                                                                                                          // 3041\n   */                                                                                                                  // 3042\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {                                                       // 3043\n    var props = event.target.getBoundingClientRect();                                                                  // 3044\n    var left = props.left + props.width / 2;                                                                           // 3045\n    var top = props.top + props.height / 2;                                                                            // 3046\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);                                                             // 3047\n    var marginTop = -1 * (this.element_.offsetHeight / 2);                                                             // 3048\n    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        left = props.width / 2;                                                                                        // 3050\n        if (top + marginTop < 0) {                                                                                     // 3051\n            this.element_.style.top = 0;                                                                               // 3052\n            this.element_.style.marginTop = 0;                                                                         // 3053\n        } else {                                                                                                       // 3054\n            this.element_.style.top = top + 'px';                                                                      // 3055\n            this.element_.style.marginTop = marginTop + 'px';                                                          // 3056\n        }                                                                                                              // 3057\n    } else {                                                                                                           // 3058\n        if (left + marginLeft < 0) {                                                                                   // 3059\n            this.element_.style.left = 0;                                                                              // 3060\n            this.element_.style.marginLeft = 0;                                                                        // 3061\n        } else {                                                                                                       // 3062\n            this.element_.style.left = left + 'px';                                                                    // 3063\n            this.element_.style.marginLeft = marginLeft + 'px';                                                        // 3064\n        }                                                                                                              // 3065\n    }                                                                                                                  // 3066\n    if (this.element_.classList.contains(this.CssClasses_.TOP)) {                                                      // 3067\n        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';                                  // 3068\n    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {                                             // 3069\n        this.element_.style.left = props.left + props.width + 10 + 'px';                                               // 3070\n    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {                                              // 3071\n        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';                                 // 3072\n    } else {                                                                                                           // 3073\n        this.element_.style.top = props.top + props.height + 10 + 'px';                                                // 3074\n    }                                                                                                                  // 3075\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);                                                           // 3076\n};                                                                                                                     // 3077\n/**                                                                                                                    // 3078\n   * Handle mouseleave for tooltip.                                                                                    // 3079\n   *                                                                                                                   // 3080\n   * @private                                                                                                          // 3081\n   */                                                                                                                  // 3082\nMaterialTooltip.prototype.handleMouseLeave_ = function () {                                                            // 3083\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3084\n};                                                                                                                     // 3085\n/**                                                                                                                    // 3086\n   * Initialize element.                                                                                               // 3087\n   */                                                                                                                  // 3088\nMaterialTooltip.prototype.init = function () {                                                                         // 3089\n    if (this.element_) {                                                                                               // 3090\n        var forElId = this.element_.getAttribute('for');                                                               // 3091\n        if (forElId) {                                                                                                 // 3092\n            this.forElement_ = document.getElementById(forElId);                                                       // 3093\n        }                                                                                                              // 3094\n        if (this.forElement_) {                                                                                        // 3095\n            // It's left here because it prevents accidental text selection on Android                                 // 3096\n            if (!this.forElement_.hasAttribute('tabindex')) {                                                          // 3097\n                this.forElement_.setAttribute('tabindex', '0');                                                        // 3098\n            }                                                                                                          // 3099\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);                                           // 3100\n            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);                                           // 3101\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);                       // 3102\n            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);                         // 3103\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler, false);                       // 3104\n            window.addEventListener('touchstart', this.boundMouseLeaveHandler);                                        // 3105\n        }                                                                                                              // 3106\n    }                                                                                                                  // 3107\n};                                                                                                                     // 3108\n// The component registers itself. It can assume componentHandler is available                                         // 3109\n// in the global scope.                                                                                                // 3110\ncomponentHandler.register({                                                                                            // 3111\n    constructor: MaterialTooltip,                                                                                      // 3112\n    classAsString: 'MaterialTooltip',                                                                                  // 3113\n    cssClass: 'mdl-tooltip'                                                                                            // 3114\n});                                                                                                                    // 3115\n/**                                                                                                                    // 3116\n * @license                                                                                                            // 3117\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3118\n *                                                                                                                     // 3119\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3120\n * you may not use this file except in compliance with the License.                                                    // 3121\n * You may obtain a copy of the License at                                                                             // 3122\n *                                                                                                                     // 3123\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3124\n *                                                                                                                     // 3125\n * Unless required by applicable law or agreed to in writing, software                                                 // 3126\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3127\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3128\n * See the License for the specific language governing permissions and                                                 // 3129\n * limitations under the License.                                                                                      // 3130\n */                                                                                                                    // 3131\n/**                                                                                                                    // 3132\n   * Class constructor for Layout MDL component.                                                                       // 3133\n   * Implements MDL component design pattern defined at:                                                               // 3134\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3135\n   *                                                                                                                   // 3136\n   * @constructor                                                                                                      // 3137\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3138\n   */                                                                                                                  // 3139\nvar MaterialLayout = function MaterialLayout(element) {                                                                // 3140\n    this.element_ = element;                                                                                           // 3141\n    // Initialize instance.                                                                                            // 3142\n    this.init();                                                                                                       // 3143\n};                                                                                                                     // 3144\nwindow['MaterialLayout'] = MaterialLayout;                                                                             // 3145\n/**                                                                                                                    // 3146\n   * Store constants in one place so they can be updated easily.                                                       // 3147\n   *                                                                                                                   // 3148\n   * @enum {string | number}                                                                                           // 3149\n   * @private                                                                                                          // 3150\n   */                                                                                                                  // 3151\nMaterialLayout.prototype.Constant_ = {                                                                                 // 3152\n    MAX_WIDTH: '(max-width: 1024px)',                                                                                  // 3153\n    TAB_SCROLL_PIXELS: 100,                                                                                            // 3154\n    RESIZE_TIMEOUT: 100,                                                                                               // 3155\n    MENU_ICON: '&#xE5D2;',                                                                                             // 3156\n    CHEVRON_LEFT: 'chevron_left',                                                                                      // 3157\n    CHEVRON_RIGHT: 'chevron_right'                                                                                     // 3158\n};                                                                                                                     // 3159\n/**                                                                                                                    // 3160\n   * Keycodes, for code readability.                                                                                   // 3161\n   *                                                                                                                   // 3162\n   * @enum {number}                                                                                                    // 3163\n   * @private                                                                                                          // 3164\n   */                                                                                                                  // 3165\nMaterialLayout.prototype.Keycodes_ = {                                                                                 // 3166\n    ENTER: 13,                                                                                                         // 3167\n    ESCAPE: 27,                                                                                                        // 3168\n    SPACE: 32                                                                                                          // 3169\n};                                                                                                                     // 3170\n/**                                                                                                                    // 3171\n   * Modes.                                                                                                            // 3172\n   *                                                                                                                   // 3173\n   * @enum {number}                                                                                                    // 3174\n   * @private                                                                                                          // 3175\n   */                                                                                                                  // 3176\nMaterialLayout.prototype.Mode_ = {                                                                                     // 3177\n    STANDARD: 0,                                                                                                       // 3178\n    SEAMED: 1,                                                                                                         // 3179\n    WATERFALL: 2,                                                                                                      // 3180\n    SCROLL: 3                                                                                                          // 3181\n};                                                                                                                     // 3182\n/**                                                                                                                    // 3183\n   * Store strings for class names defined by this component that are used in                                          // 3184\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3185\n   * decide to modify at a later date.                                                                                 // 3186\n   *                                                                                                                   // 3187\n   * @enum {string}                                                                                                    // 3188\n   * @private                                                                                                          // 3189\n   */                                                                                                                  // 3190\nMaterialLayout.prototype.CssClasses_ = {                                                                               // 3191\n    CONTAINER: 'mdl-layout__container',                                                                                // 3192\n    HEADER: 'mdl-layout__header',                                                                                      // 3193\n    DRAWER: 'mdl-layout__drawer',                                                                                      // 3194\n    CONTENT: 'mdl-layout__content',                                                                                    // 3195\n    DRAWER_BTN: 'mdl-layout__drawer-button',                                                                           // 3196\n    ICON: 'material-icons',                                                                                            // 3197\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                          // 3198\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',                                                              // 3199\n    RIPPLE: 'mdl-ripple',                                                                                              // 3200\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 3201\n    HEADER_SEAMED: 'mdl-layout__header--seamed',                                                                       // 3202\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',                                                                 // 3203\n    HEADER_SCROLL: 'mdl-layout__header--scroll',                                                                       // 3204\n    FIXED_HEADER: 'mdl-layout--fixed-header',                                                                          // 3205\n    OBFUSCATOR: 'mdl-layout__obfuscator',                                                                              // 3206\n    TAB_BAR: 'mdl-layout__tab-bar',                                                                                    // 3207\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',                                                                    // 3208\n    TAB: 'mdl-layout__tab',                                                                                            // 3209\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',                                                                      // 3210\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',                                                            // 3211\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',                                                          // 3212\n    PANEL: 'mdl-layout__tab-panel',                                                                                    // 3213\n    HAS_DRAWER: 'has-drawer',                                                                                          // 3214\n    HAS_TABS: 'has-tabs',                                                                                              // 3215\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',                                                                      // 3216\n    CASTING_SHADOW: 'is-casting-shadow',                                                                               // 3217\n    IS_COMPACT: 'is-compact',                                                                                          // 3218\n    IS_SMALL_SCREEN: 'is-small-screen',                                                                                // 3219\n    IS_DRAWER_OPEN: 'is-visible',                                                                                      // 3220\n    IS_ACTIVE: 'is-active',                                                                                            // 3221\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 3222\n    IS_ANIMATING: 'is-animating',                                                                                      // 3223\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',                                                                  // 3224\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'                                                                   // 3225\n};                                                                                                                     // 3226\n/**                                                                                                                    // 3227\n   * Handles scrolling on the content.                                                                                 // 3228\n   *                                                                                                                   // 3229\n   * @private                                                                                                          // 3230\n   */                                                                                                                  // 3231\nMaterialLayout.prototype.contentScrollHandler_ = function () {                                                         // 3232\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {                                              // 3233\n        return;                                                                                                        // 3234\n    }                                                                                                                  // 3235\n    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {                // 3237\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);                                                   // 3238\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);                                                       // 3239\n        if (headerVisible) {                                                                                           // 3240\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                 // 3241\n        }                                                                                                              // 3242\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {         // 3243\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                                // 3244\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);                                                    // 3245\n        if (headerVisible) {                                                                                           // 3246\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                 // 3247\n        }                                                                                                              // 3248\n    }                                                                                                                  // 3249\n};                                                                                                                     // 3250\n/**                                                                                                                    // 3251\n   * Handles a keyboard event on the drawer.                                                                           // 3252\n   *                                                                                                                   // 3253\n   * @param {Event} evt The event that fired.                                                                          // 3254\n   * @private                                                                                                          // 3255\n   */                                                                                                                  // 3256\nMaterialLayout.prototype.keyboardEventHandler_ = function (evt) {                                                      // 3257\n    // Only react when the drawer is open.                                                                             // 3258\n    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {   // 3259\n        this.toggleDrawer();                                                                                           // 3260\n    }                                                                                                                  // 3261\n};                                                                                                                     // 3262\n/**                                                                                                                    // 3263\n   * Handles changes in screen size.                                                                                   // 3264\n   *                                                                                                                   // 3265\n   * @private                                                                                                          // 3266\n   */                                                                                                                  // 3267\nMaterialLayout.prototype.screenSizeHandler_ = function () {                                                            // 3268\n    if (this.screenSizeMediaQuery_.matches) {                                                                          // 3269\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);                                                 // 3270\n    } else {                                                                                                           // 3271\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);                                              // 3272\n        // Collapse drawer (if any) when moving to a large screen size.                                                // 3273\n        if (this.drawer_) {                                                                                            // 3274\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);                                            // 3275\n            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);                                        // 3276\n        }                                                                                                              // 3277\n    }                                                                                                                  // 3278\n};                                                                                                                     // 3279\n/**                                                                                                                    // 3280\n   * Handles events of drawer button.                                                                                  // 3281\n   *                                                                                                                   // 3282\n   * @param {Event} evt The event that fired.                                                                          // 3283\n   * @private                                                                                                          // 3284\n   */                                                                                                                  // 3285\nMaterialLayout.prototype.drawerToggleHandler_ = function (evt) {                                                       // 3286\n    if (evt && evt.type === 'keydown') {                                                                               // 3287\n        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {                            // 3288\n            // prevent scrolling in drawer nav                                                                         // 3289\n            evt.preventDefault();                                                                                      // 3290\n        } else {                                                                                                       // 3291\n            // prevent other keys                                                                                      // 3292\n            return;                                                                                                    // 3293\n        }                                                                                                              // 3294\n    }                                                                                                                  // 3295\n    this.toggleDrawer();                                                                                               // 3296\n};                                                                                                                     // 3297\n/**                                                                                                                    // 3298\n   * Handles (un)setting the `is-animating` class                                                                      // 3299\n   *                                                                                                                   // 3300\n   * @private                                                                                                          // 3301\n   */                                                                                                                  // 3302\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {                                                   // 3303\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);                                                      // 3304\n};                                                                                                                     // 3305\n/**                                                                                                                    // 3306\n   * Handles expanding the header on click                                                                             // 3307\n   *                                                                                                                   // 3308\n   * @private                                                                                                          // 3309\n   */                                                                                                                  // 3310\nMaterialLayout.prototype.headerClickHandler_ = function () {                                                           // 3311\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {                                                // 3312\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);                                                    // 3313\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                     // 3314\n    }                                                                                                                  // 3315\n};                                                                                                                     // 3316\n/**                                                                                                                    // 3317\n   * Reset tab state, dropping active classes                                                                          // 3318\n   *                                                                                                                   // 3319\n   * @private                                                                                                          // 3320\n   */                                                                                                                  // 3321\nMaterialLayout.prototype.resetTabState_ = function (tabBar) {                                                          // 3322\n    for (var k = 0; k < tabBar.length; k++) {                                                                          // 3323\n        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3324\n    }                                                                                                                  // 3325\n};                                                                                                                     // 3326\n/**                                                                                                                    // 3327\n   * Reset panel state, droping active classes                                                                         // 3328\n   *                                                                                                                   // 3329\n   * @private                                                                                                          // 3330\n   */                                                                                                                  // 3331\nMaterialLayout.prototype.resetPanelState_ = function (panels) {                                                        // 3332\n    for (var j = 0; j < panels.length; j++) {                                                                          // 3333\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3334\n    }                                                                                                                  // 3335\n};                                                                                                                     // 3336\n/**                                                                                                                    // 3337\n  * Toggle drawer state                                                                                                // 3338\n  *                                                                                                                    // 3339\n  * @public                                                                                                            // 3340\n  */                                                                                                                   // 3341\nMaterialLayout.prototype.toggleDrawer = function () {                                                                  // 3342\n    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);                                 // 3343\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);                                                    // 3344\n    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);                                                // 3345\n    // Set accessibility properties.                                                                                   // 3346\n    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {                                            // 3347\n        this.drawer_.setAttribute('aria-hidden', 'false');                                                             // 3348\n        drawerButton.setAttribute('aria-expanded', 'true');                                                            // 3349\n    } else {                                                                                                           // 3350\n        this.drawer_.setAttribute('aria-hidden', 'true');                                                              // 3351\n        drawerButton.setAttribute('aria-expanded', 'false');                                                           // 3352\n    }                                                                                                                  // 3353\n};                                                                                                                     // 3354\nMaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;                                      // 3355\n/**                                                                                                                    // 3356\n   * Initialize element.                                                                                               // 3357\n   */                                                                                                                  // 3358\nMaterialLayout.prototype.init = function () {                                                                          // 3359\n    if (this.element_) {                                                                                               // 3360\n        var container = document.createElement('div');                                                                 // 3361\n        container.classList.add(this.CssClasses_.CONTAINER);                                                           // 3362\n        var focusedElement = this.element_.querySelector(':focus');                                                    // 3363\n        this.element_.parentElement.insertBefore(container, this.element_);                                            // 3364\n        this.element_.parentElement.removeChild(this.element_);                                                        // 3365\n        container.appendChild(this.element_);                                                                          // 3366\n        if (focusedElement) {                                                                                          // 3367\n            focusedElement.focus();                                                                                    // 3368\n        }                                                                                                              // 3369\n        var directChildren = this.element_.childNodes;                                                                 // 3370\n        var numChildren = directChildren.length;                                                                       // 3371\n        for (var c = 0; c < numChildren; c++) {                                                                        // 3372\n            var child = directChildren[c];                                                                             // 3373\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {                                // 3374\n                this.header_ = child;                                                                                  // 3375\n            }                                                                                                          // 3376\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {                                // 3377\n                this.drawer_ = child;                                                                                  // 3378\n            }                                                                                                          // 3379\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {                               // 3380\n                this.content_ = child;                                                                                 // 3381\n            }                                                                                                          // 3382\n        }                                                                                                              // 3383\n        window.addEventListener('pageshow', function (e) {                                                             // 3384\n            if (e.persisted) {                                                                                         // 3385\n                // when page is loaded from back/forward cache                                                         // 3386\n                // trigger repaint to let layout scroll in safari                                                      // 3387\n                this.element_.style.overflowY = 'hidden';                                                              // 3388\n                requestAnimationFrame(function () {                                                                    // 3389\n                    this.element_.style.overflowY = '';                                                                // 3390\n                }.bind(this));                                                                                         // 3391\n            }                                                                                                          // 3392\n        }.bind(this), false);                                                                                          // 3393\n        if (this.header_) {                                                                                            // 3394\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);                                 // 3395\n        }                                                                                                              // 3396\n        var mode = this.Mode_.STANDARD;                                                                                // 3397\n        if (this.header_) {                                                                                            // 3398\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {                                     // 3399\n                mode = this.Mode_.SEAMED;                                                                              // 3400\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {                           // 3401\n                mode = this.Mode_.WATERFALL;                                                                           // 3402\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));           // 3403\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));                           // 3404\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {                              // 3405\n                mode = this.Mode_.SCROLL;                                                                              // 3406\n                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);                                        // 3407\n            }                                                                                                          // 3408\n            if (mode === this.Mode_.STANDARD) {                                                                        // 3409\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);                                           // 3410\n                if (this.tabBar_) {                                                                                    // 3411\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);                                       // 3412\n                }                                                                                                      // 3413\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {                                     // 3414\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                        // 3415\n                if (this.tabBar_) {                                                                                    // 3416\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                    // 3417\n                }                                                                                                      // 3418\n            } else if (mode === this.Mode_.WATERFALL) {                                                                // 3419\n                // Add and remove shadows depending on scroll position.                                                // 3420\n                // Also add/remove auxiliary class for styling of the compact version of                               // 3421\n                // the header.                                                                                         // 3422\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));                       // 3423\n                this.contentScrollHandler_();                                                                          // 3424\n            }                                                                                                          // 3425\n        }                                                                                                              // 3426\n        // Add drawer toggling button to our layout, if we have an openable drawer.                                    // 3427\n        if (this.drawer_) {                                                                                            // 3428\n            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);                         // 3429\n            if (!drawerButton) {                                                                                       // 3430\n                drawerButton = document.createElement('div');                                                          // 3431\n                drawerButton.setAttribute('aria-expanded', 'false');                                                   // 3432\n                drawerButton.setAttribute('role', 'button');                                                           // 3433\n                drawerButton.setAttribute('tabindex', '0');                                                            // 3434\n                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);                                               // 3435\n                var drawerButtonIcon = document.createElement('i');                                                    // 3436\n                drawerButtonIcon.classList.add(this.CssClasses_.ICON);                                                 // 3437\n                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;                                                 // 3438\n                drawerButton.appendChild(drawerButtonIcon);                                                            // 3439\n            }                                                                                                          // 3440\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {                                   // 3441\n                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.                 // 3442\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);                                          // 3443\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {                            // 3444\n                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.                 // 3445\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);                                          // 3446\n            }                                                                                                          // 3447\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));                              // 3448\n            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));                            // 3449\n            // Add a class if the layout has a drawer, for altering the left padding.                                  // 3450\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may                                       // 3451\n            // not be present.                                                                                         // 3452\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);                                                  // 3453\n            // If we have a fixed header, add the button to the header rather than                                     // 3454\n            // the layout.                                                                                             // 3455\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {                                     // 3456\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);                                      // 3457\n            } else {                                                                                                   // 3458\n                this.element_.insertBefore(drawerButton, this.content_);                                               // 3459\n            }                                                                                                          // 3460\n            var obfuscator = document.createElement('div');                                                            // 3461\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);                                                     // 3462\n            this.element_.appendChild(obfuscator);                                                                     // 3463\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));                                // 3464\n            this.obfuscator_ = obfuscator;                                                                             // 3465\n            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));                           // 3466\n            this.drawer_.setAttribute('aria-hidden', 'true');                                                          // 3467\n        }                                                                                                              // 3468\n        // Keep an eye on screen size, and add/remove auxiliary class for styling                                      // 3469\n        // of small screens.                                                                                           // 3470\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);                                      // 3471\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));                                    // 3472\n        this.screenSizeHandler_();                                                                                     // 3473\n        // Initialize tabs, if any.                                                                                    // 3474\n        if (this.header_ && this.tabBar_) {                                                                            // 3475\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);                                                    // 3476\n            var tabContainer = document.createElement('div');                                                          // 3477\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);                                                // 3478\n            this.header_.insertBefore(tabContainer, this.tabBar_);                                                     // 3479\n            this.header_.removeChild(this.tabBar_);                                                                    // 3480\n            var leftButton = document.createElement('div');                                                            // 3481\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);                                                 // 3482\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);                                            // 3483\n            var leftButtonIcon = document.createElement('i');                                                          // 3484\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);                                                       // 3485\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;                                                  // 3486\n            leftButton.appendChild(leftButtonIcon);                                                                    // 3487\n            leftButton.addEventListener('click', function () {                                                         // 3488\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;                                           // 3489\n            }.bind(this));                                                                                             // 3490\n            var rightButton = document.createElement('div');                                                           // 3491\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);                                                // 3492\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);                                          // 3493\n            var rightButtonIcon = document.createElement('i');                                                         // 3494\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);                                                      // 3495\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;                                                // 3496\n            rightButton.appendChild(rightButtonIcon);                                                                  // 3497\n            rightButton.addEventListener('click', function () {                                                        // 3498\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;                                           // 3499\n            }.bind(this));                                                                                             // 3500\n            tabContainer.appendChild(leftButton);                                                                      // 3501\n            tabContainer.appendChild(this.tabBar_);                                                                    // 3502\n            tabContainer.appendChild(rightButton);                                                                     // 3503\n            // Add and remove tab buttons depending on scroll position and total                                       // 3504\n            // window size.                                                                                            // 3505\n            var tabUpdateHandler = function () {                                                                       // 3506\n                if (this.tabBar_.scrollLeft > 0) {                                                                     // 3507\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);                                              // 3508\n                } else {                                                                                               // 3509\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);                                           // 3510\n                }                                                                                                      // 3511\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {                   // 3512\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);                                             // 3513\n                } else {                                                                                               // 3514\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);                                          // 3515\n                }                                                                                                      // 3516\n            }.bind(this);                                                                                              // 3517\n            this.tabBar_.addEventListener('scroll', tabUpdateHandler);                                                 // 3518\n            tabUpdateHandler();                                                                                        // 3519\n            // Update tabs when the window resizes.                                                                    // 3520\n            var windowResizeHandler = function () {                                                                    // 3521\n                // Use timeouts to make sure it doesn't happen too often.                                              // 3522\n                if (this.resizeTimeoutId_) {                                                                           // 3523\n                    clearTimeout(this.resizeTimeoutId_);                                                               // 3524\n                }                                                                                                      // 3525\n                this.resizeTimeoutId_ = setTimeout(function () {                                                       // 3526\n                    tabUpdateHandler();                                                                                // 3527\n                    this.resizeTimeoutId_ = null;                                                                      // 3528\n                }.bind(this), this.Constant_.RESIZE_TIMEOUT);                                                          // 3529\n            }.bind(this);                                                                                              // 3530\n            window.addEventListener('resize', windowResizeHandler);                                                    // 3531\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {                                  // 3532\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                     // 3533\n            }                                                                                                          // 3534\n            // Select element tabs, document panels                                                                    // 3535\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);                                      // 3536\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);                                 // 3537\n            // Create new tabs for each tab element                                                                    // 3538\n            for (var i = 0; i < tabs.length; i++) {                                                                    // 3539\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);                                                    // 3540\n            }                                                                                                          // 3541\n        }                                                                                                              // 3542\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 3543\n    }                                                                                                                  // 3544\n};                                                                                                                     // 3545\n/**                                                                                                                    // 3546\n   * Constructor for an individual tab.                                                                                // 3547\n   *                                                                                                                   // 3548\n   * @constructor                                                                                                      // 3549\n   * @param {HTMLElement} tab The HTML element for the tab.                                                            // 3550\n   * @param {!Array<HTMLElement>} tabs Array with HTML elements for all tabs.                                          // 3551\n   * @param {!Array<HTMLElement>} panels Array with HTML elements for all panels.                                      // 3552\n   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.                                       // 3553\n   */                                                                                                                  // 3554\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {                                                                // 3555\n    /**                                                                                                                // 3556\n     * Auxiliary method to programmatically select a tab in the UI.                                                    // 3557\n     */                                                                                                                // 3558\n    function selectTab() {                                                                                             // 3559\n        var href = tab.href.split('#')[1];                                                                             // 3560\n        var panel = layout.content_.querySelector('#' + href);                                                         // 3561\n        layout.resetTabState_(tabs);                                                                                   // 3562\n        layout.resetPanelState_(panels);                                                                               // 3563\n        tab.classList.add(layout.CssClasses_.IS_ACTIVE);                                                               // 3564\n        panel.classList.add(layout.CssClasses_.IS_ACTIVE);                                                             // 3565\n    }                                                                                                                  // 3566\n    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {                                      // 3567\n        var rippleContainer = document.createElement('span');                                                          // 3568\n        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);                                            // 3569\n        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);                                            // 3570\n        var ripple = document.createElement('span');                                                                   // 3571\n        ripple.classList.add(layout.CssClasses_.RIPPLE);                                                               // 3572\n        rippleContainer.appendChild(ripple);                                                                           // 3573\n        tab.appendChild(rippleContainer);                                                                              // 3574\n    }                                                                                                                  // 3575\n    tab.addEventListener('click', function (e) {                                                                       // 3576\n        if (tab.getAttribute('href').charAt(0) === '#') {                                                              // 3577\n            e.preventDefault();                                                                                        // 3578\n            selectTab();                                                                                               // 3579\n        }                                                                                                              // 3580\n    });                                                                                                                // 3581\n    tab.show = selectTab;                                                                                              // 3582\n}                                                                                                                      // 3583\nwindow['MaterialLayoutTab'] = MaterialLayoutTab;                                                                       // 3584\n// The component registers itself. It can assume componentHandler is available                                         // 3585\n// in the global scope.                                                                                                // 3586\ncomponentHandler.register({                                                                                            // 3587\n    constructor: MaterialLayout,                                                                                       // 3588\n    classAsString: 'MaterialLayout',                                                                                   // 3589\n    cssClass: 'mdl-js-layout'                                                                                          // 3590\n});                                                                                                                    // 3591\n/**                                                                                                                    // 3592\n * @license                                                                                                            // 3593\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3594\n *                                                                                                                     // 3595\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3596\n * you may not use this file except in compliance with the License.                                                    // 3597\n * You may obtain a copy of the License at                                                                             // 3598\n *                                                                                                                     // 3599\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3600\n *                                                                                                                     // 3601\n * Unless required by applicable law or agreed to in writing, software                                                 // 3602\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3603\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3604\n * See the License for the specific language governing permissions and                                                 // 3605\n * limitations under the License.                                                                                      // 3606\n */                                                                                                                    // 3607\n/**                                                                                                                    // 3608\n   * Class constructor for Data Table Card MDL component.                                                              // 3609\n   * Implements MDL component design pattern defined at:                                                               // 3610\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3611\n   *                                                                                                                   // 3612\n   * @constructor                                                                                                      // 3613\n   * @param {Element} element The element that will be upgraded.                                                       // 3614\n   */                                                                                                                  // 3615\nvar MaterialDataTable = function MaterialDataTable(element) {                                                          // 3616\n    this.element_ = element;                                                                                           // 3617\n    // Initialize instance.                                                                                            // 3618\n    this.init();                                                                                                       // 3619\n};                                                                                                                     // 3620\nwindow['MaterialDataTable'] = MaterialDataTable;                                                                       // 3621\n/**                                                                                                                    // 3622\n   * Store constants in one place so they can be updated easily.                                                       // 3623\n   *                                                                                                                   // 3624\n   * @enum {string | number}                                                                                           // 3625\n   * @private                                                                                                          // 3626\n   */                                                                                                                  // 3627\nMaterialDataTable.prototype.Constant_ = {};                                                                            // 3628\n/**                                                                                                                    // 3629\n   * Store strings for class names defined by this component that are used in                                          // 3630\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3631\n   * decide to modify at a later date.                                                                                 // 3632\n   *                                                                                                                   // 3633\n   * @enum {string}                                                                                                    // 3634\n   * @private                                                                                                          // 3635\n   */                                                                                                                  // 3636\nMaterialDataTable.prototype.CssClasses_ = {                                                                            // 3637\n    DATA_TABLE: 'mdl-data-table',                                                                                      // 3638\n    SELECTABLE: 'mdl-data-table--selectable',                                                                          // 3639\n    SELECT_ELEMENT: 'mdl-data-table__select',                                                                          // 3640\n    IS_SELECTED: 'is-selected',                                                                                        // 3641\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 3642\n};                                                                                                                     // 3643\n/**                                                                                                                    // 3644\n   * Generates and returns a function that toggles the selection state of a                                            // 3645\n   * single row (or multiple rows).                                                                                    // 3646\n   *                                                                                                                   // 3647\n   * @param {Element} checkbox Checkbox that toggles the selection state.                                              // 3648\n   * @param {Element} row Row to toggle when checkbox changes.                                                         // 3649\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.                                 // 3650\n   * @private                                                                                                          // 3651\n   */                                                                                                                  // 3652\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {                                          // 3653\n    if (row) {                                                                                                         // 3654\n        return function () {                                                                                           // 3655\n            if (checkbox.checked) {                                                                                    // 3656\n                row.classList.add(this.CssClasses_.IS_SELECTED);                                                       // 3657\n            } else {                                                                                                   // 3658\n                row.classList.remove(this.CssClasses_.IS_SELECTED);                                                    // 3659\n            }                                                                                                          // 3660\n        }.bind(this);                                                                                                  // 3661\n    }                                                                                                                  // 3662\n    if (opt_rows) {                                                                                                    // 3663\n        return function () {                                                                                           // 3664\n            var i;                                                                                                     // 3665\n            var el;                                                                                                    // 3666\n            if (checkbox.checked) {                                                                                    // 3667\n                for (i = 0; i < opt_rows.length; i++) {                                                                // 3668\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');                               // 3669\n                    el['MaterialCheckbox'].check();                                                                    // 3670\n                    opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);                                           // 3671\n                }                                                                                                      // 3672\n            } else {                                                                                                   // 3673\n                for (i = 0; i < opt_rows.length; i++) {                                                                // 3674\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');                               // 3675\n                    el['MaterialCheckbox'].uncheck();                                                                  // 3676\n                    opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);                                        // 3677\n                }                                                                                                      // 3678\n            }                                                                                                          // 3679\n        }.bind(this);                                                                                                  // 3680\n    }                                                                                                                  // 3681\n};                                                                                                                     // 3682\n/**                                                                                                                    // 3683\n   * Creates a checkbox for a single or or multiple rows and hooks up the                                              // 3684\n   * event handling.                                                                                                   // 3685\n   *                                                                                                                   // 3686\n   * @param {Element} row Row to toggle when checkbox changes.                                                         // 3687\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.                                 // 3688\n   * @private                                                                                                          // 3689\n   */                                                                                                                  // 3690\nMaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {                                               // 3691\n    var label = document.createElement('label');                                                                       // 3692\n    var labelClasses = [                                                                                               // 3693\n        'mdl-checkbox',                                                                                                // 3694\n        'mdl-js-checkbox',                                                                                             // 3695\n        'mdl-js-ripple-effect',                                                                                        // 3696\n        this.CssClasses_.SELECT_ELEMENT                                                                                // 3697\n    ];                                                                                                                 // 3698\n    label.className = labelClasses.join(' ');                                                                          // 3699\n    var checkbox = document.createElement('input');                                                                    // 3700\n    checkbox.type = 'checkbox';                                                                                        // 3701\n    checkbox.classList.add('mdl-checkbox__input');                                                                     // 3702\n    if (row) {                                                                                                         // 3703\n        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);                                       // 3704\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));                                           // 3705\n    } else if (opt_rows) {                                                                                             // 3706\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));                                // 3707\n    }                                                                                                                  // 3708\n    label.appendChild(checkbox);                                                                                       // 3709\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');                                                        // 3710\n    return label;                                                                                                      // 3711\n};                                                                                                                     // 3712\n/**                                                                                                                    // 3713\n   * Initialize element.                                                                                               // 3714\n   */                                                                                                                  // 3715\nMaterialDataTable.prototype.init = function () {                                                                       // 3716\n    if (this.element_) {                                                                                               // 3717\n        var firstHeader = this.element_.querySelector('th');                                                           // 3718\n        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));                         // 3719\n        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));                         // 3720\n        var rows = bodyRows.concat(footRows);                                                                          // 3721\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {                                           // 3722\n            var th = document.createElement('th');                                                                     // 3723\n            var headerCheckbox = this.createCheckbox_(null, rows);                                                     // 3724\n            th.appendChild(headerCheckbox);                                                                            // 3725\n            firstHeader.parentElement.insertBefore(th, firstHeader);                                                   // 3726\n            for (var i = 0; i < rows.length; i++) {                                                                    // 3727\n                var firstCell = rows[i].querySelector('td');                                                           // 3728\n                if (firstCell) {                                                                                       // 3729\n                    var td = document.createElement('td');                                                             // 3730\n                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {                                       // 3731\n                        var rowCheckbox = this.createCheckbox_(rows[i]);                                               // 3732\n                        td.appendChild(rowCheckbox);                                                                   // 3733\n                    }                                                                                                  // 3734\n                    rows[i].insertBefore(td, firstCell);                                                               // 3735\n                }                                                                                                      // 3736\n            }                                                                                                          // 3737\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                 // 3738\n        }                                                                                                              // 3739\n    }                                                                                                                  // 3740\n};                                                                                                                     // 3741\n// The component registers itself. It can assume componentHandler is available                                         // 3742\n// in the global scope.                                                                                                // 3743\ncomponentHandler.register({                                                                                            // 3744\n    constructor: MaterialDataTable,                                                                                    // 3745\n    classAsString: 'MaterialDataTable',                                                                                // 3746\n    cssClass: 'mdl-js-data-table'                                                                                      // 3747\n});                                                                                                                    // 3748\n/**                                                                                                                    // 3749\n * @license                                                                                                            // 3750\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3751\n *                                                                                                                     // 3752\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3753\n * you may not use this file except in compliance with the License.                                                    // 3754\n * You may obtain a copy of the License at                                                                             // 3755\n *                                                                                                                     // 3756\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3757\n *                                                                                                                     // 3758\n * Unless required by applicable law or agreed to in writing, software                                                 // 3759\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3760\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3761\n * See the License for the specific language governing permissions and                                                 // 3762\n * limitations under the License.                                                                                      // 3763\n */                                                                                                                    // 3764\n/**                                                                                                                    // 3765\n   * Class constructor for Ripple MDL component.                                                                       // 3766\n   * Implements MDL component design pattern defined at:                                                               // 3767\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3768\n   *                                                                                                                   // 3769\n   * @constructor                                                                                                      // 3770\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3771\n   */                                                                                                                  // 3772\nvar MaterialRipple = function MaterialRipple(element) {                                                                // 3773\n    this.element_ = element;                                                                                           // 3774\n    // Initialize instance.                                                                                            // 3775\n    this.init();                                                                                                       // 3776\n};                                                                                                                     // 3777\nwindow['MaterialRipple'] = MaterialRipple;                                                                             // 3778\n/**                                                                                                                    // 3779\n   * Store constants in one place so they can be updated easily.                                                       // 3780\n   *                                                                                                                   // 3781\n   * @enum {string | number}                                                                                           // 3782\n   * @private                                                                                                          // 3783\n   */                                                                                                                  // 3784\nMaterialRipple.prototype.Constant_ = {                                                                                 // 3785\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',                                                                            // 3786\n    INITIAL_SIZE: '1px',                                                                                               // 3787\n    INITIAL_OPACITY: '0.4',                                                                                            // 3788\n    FINAL_OPACITY: '0',                                                                                                // 3789\n    FINAL_SCALE: ''                                                                                                    // 3790\n};                                                                                                                     // 3791\n/**                                                                                                                    // 3792\n   * Store strings for class names defined by this component that are used in                                          // 3793\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3794\n   * decide to modify at a later date.                                                                                 // 3795\n   *                                                                                                                   // 3796\n   * @enum {string}                                                                                                    // 3797\n   * @private                                                                                                          // 3798\n   */                                                                                                                  // 3799\nMaterialRipple.prototype.CssClasses_ = {                                                                               // 3800\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 3801\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                // 3802\n    RIPPLE: 'mdl-ripple',                                                                                              // 3803\n    IS_ANIMATING: 'is-animating',                                                                                      // 3804\n    IS_VISIBLE: 'is-visible'                                                                                           // 3805\n};                                                                                                                     // 3806\n/**                                                                                                                    // 3807\n   * Handle mouse / finger down on element.                                                                            // 3808\n   *                                                                                                                   // 3809\n   * @param {Event} event The event that fired.                                                                        // 3810\n   * @private                                                                                                          // 3811\n   */                                                                                                                  // 3812\nMaterialRipple.prototype.downHandler_ = function (event) {                                                             // 3813\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {                                       // 3814\n        var rect = this.element_.getBoundingClientRect();                                                              // 3815\n        this.boundHeight = rect.height;                                                                                // 3816\n        this.boundWidth = rect.width;                                                                                  // 3817\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;                     // 3818\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';                                                     // 3819\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';                                                    // 3820\n    }                                                                                                                  // 3821\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);                                                    // 3822\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {                                                       // 3823\n        this.ignoringMouseDown_ = false;                                                                               // 3824\n    } else {                                                                                                           // 3825\n        if (event.type === 'touchstart') {                                                                             // 3826\n            this.ignoringMouseDown_ = true;                                                                            // 3827\n        }                                                                                                              // 3828\n        var frameCount = this.getFrameCount();                                                                         // 3829\n        if (frameCount > 0) {                                                                                          // 3830\n            return;                                                                                                    // 3831\n        }                                                                                                              // 3832\n        this.setFrameCount(1);                                                                                         // 3833\n        var bound = event.currentTarget.getBoundingClientRect();                                                       // 3834\n        var x;                                                                                                         // 3835\n        var y;                                                                                                         // 3836\n        // Check if we are handling a keyboard click.                                                                  // 3837\n        if (event.clientX === 0 && event.clientY === 0) {                                                              // 3838\n            x = Math.round(bound.width / 2);                                                                           // 3839\n            y = Math.round(bound.height / 2);                                                                          // 3840\n        } else {                                                                                                       // 3841\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;                                    // 3842\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;                                    // 3843\n            x = Math.round(clientX - bound.left);                                                                      // 3844\n            y = Math.round(clientY - bound.top);                                                                       // 3845\n        }                                                                                                              // 3846\n        this.setRippleXY(x, y);                                                                                        // 3847\n        this.setRippleStyles(true);                                                                                    // 3848\n        window.requestAnimationFrame(this.animFrameHandler.bind(this));                                                // 3849\n    }                                                                                                                  // 3850\n};                                                                                                                     // 3851\n/**                                                                                                                    // 3852\n   * Handle mouse / finger up on element.                                                                              // 3853\n   *                                                                                                                   // 3854\n   * @param {Event} event The event that fired.                                                                        // 3855\n   * @private                                                                                                          // 3856\n   */                                                                                                                  // 3857\nMaterialRipple.prototype.upHandler_ = function (event) {                                                               // 3858\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.                                            // 3859\n    if (event && event.detail !== 2) {                                                                                 // 3860\n        // Allow a repaint to occur before removing this class, so the animation                                       // 3861\n        // shows for tap events, which seem to trigger a mouseup too soon after                                        // 3862\n        // mousedown.                                                                                                  // 3863\n        window.setTimeout(function () {                                                                                // 3864\n            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);                                         // 3865\n        }.bind(this), 0);                                                                                              // 3866\n    }                                                                                                                  // 3867\n};                                                                                                                     // 3868\n/**                                                                                                                    // 3869\n   * Initialize element.                                                                                               // 3870\n   */                                                                                                                  // 3871\nMaterialRipple.prototype.init = function () {                                                                          // 3872\n    if (this.element_) {                                                                                               // 3873\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);                            // 3874\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {                         // 3875\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);                          // 3876\n            this.frameCount_ = 0;                                                                                      // 3877\n            this.rippleSize_ = 0;                                                                                      // 3878\n            this.x_ = 0;                                                                                               // 3879\n            this.y_ = 0;                                                                                               // 3880\n            // Touch start produces a compat mouse down event, which would cause a                                     // 3881\n            // second ripples. To avoid that, we use this property to ignore the first                                 // 3882\n            // mouse down after a touch start.                                                                         // 3883\n            this.ignoringMouseDown_ = false;                                                                           // 3884\n            this.boundDownHandler = this.downHandler_.bind(this);                                                      // 3885\n            this.element_.addEventListener('mousedown', this.boundDownHandler);                                        // 3886\n            this.element_.addEventListener('touchstart', this.boundDownHandler);                                       // 3887\n            this.boundUpHandler = this.upHandler_.bind(this);                                                          // 3888\n            this.element_.addEventListener('mouseup', this.boundUpHandler);                                            // 3889\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);                                         // 3890\n            this.element_.addEventListener('touchend', this.boundUpHandler);                                           // 3891\n            this.element_.addEventListener('blur', this.boundUpHandler);                                               // 3892\n            /**                                                                                                        // 3893\n         * Getter for frameCount_.                                                                                     // 3894\n         * @return {number} the frame count.                                                                           // 3895\n         */                                                                                                            // 3896\n            this.getFrameCount = function () {                                                                         // 3897\n                return this.frameCount_;                                                                               // 3898\n            };                                                                                                         // 3899\n            /**                                                                                                        // 3900\n         * Setter for frameCount_.                                                                                     // 3901\n         * @param {number} fC the frame count.                                                                         // 3902\n         */                                                                                                            // 3903\n            this.setFrameCount = function (fC) {                                                                       // 3904\n                this.frameCount_ = fC;                                                                                 // 3905\n            };                                                                                                         // 3906\n            /**                                                                                                        // 3907\n         * Getter for rippleElement_.                                                                                  // 3908\n         * @return {Element} the ripple element.                                                                       // 3909\n         */                                                                                                            // 3910\n            this.getRippleElement = function () {                                                                      // 3911\n                return this.rippleElement_;                                                                            // 3912\n            };                                                                                                         // 3913\n            /**                                                                                                        // 3914\n         * Sets the ripple X and Y coordinates.                                                                        // 3915\n         * @param  {number} newX the new X coordinate                                                                  // 3916\n         * @param  {number} newY the new Y coordinate                                                                  // 3917\n         */                                                                                                            // 3918\n            this.setRippleXY = function (newX, newY) {                                                                 // 3919\n                this.x_ = newX;                                                                                        // 3920\n                this.y_ = newY;                                                                                        // 3921\n            };                                                                                                         // 3922\n            /**                                                                                                        // 3923\n         * Sets the ripple styles.                                                                                     // 3924\n         * @param  {boolean} start whether or not this is the start frame.                                             // 3925\n         */                                                                                                            // 3926\n            this.setRippleStyles = function (start) {                                                                  // 3927\n                if (this.rippleElement_ !== null) {                                                                    // 3928\n                    var transformString;                                                                               // 3929\n                    var scale;                                                                                         // 3930\n                    var size;                                                                                          // 3931\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';                                    // 3932\n                    if (start) {                                                                                       // 3933\n                        scale = this.Constant_.INITIAL_SCALE;                                                          // 3934\n                        size = this.Constant_.INITIAL_SIZE;                                                            // 3935\n                    } else {                                                                                           // 3936\n                        scale = this.Constant_.FINAL_SCALE;                                                            // 3937\n                        size = this.rippleSize_ + 'px';                                                                // 3938\n                        if (recentering) {                                                                             // 3939\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';       // 3940\n                        }                                                                                              // 3941\n                    }                                                                                                  // 3942\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;                                       // 3943\n                    this.rippleElement_.style.webkitTransform = transformString;                                       // 3944\n                    this.rippleElement_.style.msTransform = transformString;                                           // 3945\n                    this.rippleElement_.style.transform = transformString;                                             // 3946\n                    if (start) {                                                                                       // 3947\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);                           // 3948\n                    } else {                                                                                           // 3949\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);                              // 3950\n                    }                                                                                                  // 3951\n                }                                                                                                      // 3952\n            };                                                                                                         // 3953\n            /**                                                                                                        // 3954\n         * Handles an animation frame.                                                                                 // 3955\n         */                                                                                                            // 3956\n            this.animFrameHandler = function () {                                                                      // 3957\n                if (this.frameCount_-- > 0) {                                                                          // 3958\n                    window.requestAnimationFrame(this.animFrameHandler.bind(this));                                    // 3959\n                } else {                                                                                               // 3960\n                    this.setRippleStyles(false);                                                                       // 3961\n                }                                                                                                      // 3962\n            };                                                                                                         // 3963\n        }                                                                                                              // 3964\n    }                                                                                                                  // 3965\n};                                                                                                                     // 3966\n// The component registers itself. It can assume componentHandler is available                                         // 3967\n// in the global scope.                                                                                                // 3968\ncomponentHandler.register({                                                                                            // 3969\n    constructor: MaterialRipple,                                                                                       // 3970\n    classAsString: 'MaterialRipple',                                                                                   // 3971\n    cssClass: 'mdl-js-ripple-effect',                                                                                  // 3972\n    widget: false                                                                                                      // 3973\n});                                                                                                                    // 3974\n}());                                                                                                                  // 3975\n                                                                                                                       // 3976\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/attach-componentHandler.generated.js                                                                     //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMDl.componentHandler = componentHandler;                                                                               // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["client/main.js"],"names":["Template","module","watch","require","v","ReactiveVar","hello","onCreated","helloOnCreated","counter","helpers","instance","get","events","event","cosole","log","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,iBAAJ;AAAaC,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACH,UAAD,YAAUI,CAAV,EAAY;AAACJ,eAASI,CAAT;AAAW;AAAxB,CAA1C,EAAoE,CAApE;AAAuE,IAAIC,oBAAJ;AAAgBJ,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACE,aAAD,YAAaD,CAAb,EAAe;AAACC,kBAAYD,CAAZ;AAAc;AAA9B,CAA5C,EAA4E,CAA5E;AAA+EH,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb;AAKnLH,SAASM,KAAT,CAAeC,SAAf;AAAyB,WAASC,cAAT,GAA0B;AACjD;AACA,SAAKC,OAAL,GAAe,IAAIJ,WAAJ,CAAgB,CAAhB,CAAf;AACD;;AAHD,SAAkCG,cAAlC;AAAA;AAKAR,SAASM,KAAT,CAAeI,OAAf,CAAuB;AACrBD,SADqB,cACX;AACR,WAAOT,SAASW,QAAT,GAAoBF,OAApB,CAA4BG,GAA5B,EAAP;AACD;AAHoB,CAAvB;AAMAZ,SAASM,KAAT,CAAeO,MAAf,CAAsB;AACpB,gBADoB,YACLC,KADK,EACEH,QADF,EACY;AAC9BI,WAAOC,GAAP,CAAW,OAAX;AACAL,aAASF,OAAT,CAAiBQ,GAAjB,CAAqBN,SAASF,OAAT,CAAiBG,GAAjB,KAAyB,CAA9C;AACD;AAJmB,CAAtB,2H","file":"/app.js","sourcesContent":["import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport './main.html';\n\nTemplate.hello.onCreated(function helloOnCreated() {\n  // counter starts at 0\n  this.counter = new ReactiveVar(0);\n});\n\nTemplate.hello.helpers({\n  counter() {\n    return Template.instance().counter.get();\n  },\n});\n\nTemplate.hello.events({\n  'click button'(event, instance) {\n    cosole.log(\"click\");\n    instance.counter.set(instance.counter.get() + 1);\n  },\n});\n"]}}]