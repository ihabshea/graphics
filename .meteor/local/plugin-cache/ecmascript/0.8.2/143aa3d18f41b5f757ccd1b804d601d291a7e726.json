{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/customizer/lib/js.js","filenameRelative":"packages/zurb:foundation-sites/customizer/lib/js.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/customizer/lib/js.js.map","sourceFileName":"packages/zurb:foundation-sites/customizer/lib/js.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"js"},"ignored":false,"code":"var empty = require('is-empty-object');\n\nvar unique = require('array-uniq');\n\nvar path = require('path'); // custom module names where needed\n\n\nvar MODULES = {\n  'offcanvas': 'OffCanvas'\n}; /**\n    * Creates an array of file paths that can be passed to `gulp.src()`.\n    * @param {Object} config - Customizer configuration file.\n    * @param {String[]} modules - Modules to include in the file list.\n    * @returns {String[]} Array of file paths.\n    */\n\nmodule.exports = function (config, modules) {\n  var dir = path.resolve(__dirname, '../../js/');\n  var entry = \"import $ from 'jquery';\\n\" + \"import { Foundation } from '\" + dir + \"/foundation.core';\\n\" + \"Foundation.addToJquery($);\\n\" + \"import { MediaQuery } from '\" + dir + \"/foundation.util.mediaQuery';\\n\" + \"Foundation.MediaQuery = MediaQuery;\\n\"; // last 2 pieces work around https://github.com/zurb/foundation-sites/issues/10287\n\n  var libraries = [];\n\n  if (empty(modules)) {\n    modules = Object.keys(config);\n  }\n\n  for (var i in meteorBabelHelpers.sanitizeForInObject(modules)) {\n    var name = modules[i]; // Check if the module has JS files\n\n    if (config[name] && config[name].js) {\n      libraries.push(config[name].js);\n    }\n  } // add plugins into entry\n\n\n  for (var i in meteorBabelHelpers.sanitizeForInObject(libraries)) {\n    var file = libraries[i];\n    var moduleName = MODULES[file] || file.charAt(0).toUpperCase() + file.slice(1);\n    entry = entry + \"import { \" + moduleName + \" } from '\" + dir + \"/foundation.\" + file + \"';\\n\";\n    entry = entry + \"Foundation.plugin(\" + moduleName + \", '\" + moduleName + \"');\\n\";\n  } // return entry file as string\n\n\n  return entry;\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/customizer/lib/js.js"],"names":["empty","require","unique","path","MODULES","module","exports","config","modules","dir","resolve","__dirname","entry","libraries","Object","keys","i","name","js","push","file","moduleName","charAt","toUpperCase","slice"],"mappings":"AAAA,IAAIA,QAAQC,QAAQ,iBAAR,CAAZ;;AACA,IAAIC,SAASD,QAAQ,YAAR,CAAb;;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX,C,CAEA;;;AACA,IAAMG,UAAU;AACd,eAAa;AADC,CAAhB,C,CAIA;;;;;;;AAOAC,OAAOC,OAAP,GAAiB,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACzC,MAAIC,MAAMN,KAAKO,OAAL,CAAaC,SAAb,EAAwB,WAAxB,CAAV;AACA,MAAIC,QAAQ,8BACA,8BADA,GACiCH,GADjC,GACuC,sBADvC,GAEA,8BAFA,GAGA,8BAHA,GAGiCA,GAHjC,GAGuC,iCAHvC,GAIA,uCAJZ,CAFyC,CAQzC;;AAEA,MAAII,YAAY,EAAhB;;AAEA,MAAIb,MAAMQ,OAAN,CAAJ,EAAoB;AAClBA,cAAUM,OAAOC,IAAP,CAAYR,MAAZ,CAAV;AACD;;AAED,OAAK,IAAIS,CAAT,2CAAcR,OAAd,GAAuB;AACrB,QAAIS,OAAOT,QAAQQ,CAAR,CAAX,CADqB,CAGrB;;AACA,QAAIT,OAAOU,IAAP,KAAgBV,OAAOU,IAAP,EAAaC,EAAjC,EAAqC;AACnCL,gBAAUM,IAAV,CAAeZ,OAAOU,IAAP,EAAaC,EAA5B;AACD;AACF,GAvBwC,CAyBzC;;;AACA,OAAK,IAAIF,CAAT,2CAAcH,SAAd,GAAyB;AACvB,QAAIO,OAAOP,UAAUG,CAAV,CAAX;AACA,QAAIK,aAAajB,QAAQgB,IAAR,KAAiBA,KAAKE,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BH,KAAKI,KAAL,CAAW,CAAX,CAAjE;AACAZ,YAAQA,QAAQ,WAAR,GAAsBS,UAAtB,GAAmC,WAAnC,GAAiDZ,GAAjD,GAAuD,cAAvD,GAAwEW,IAAxE,GAA+E,MAAvF;AACAR,YAAQA,QAAQ,oBAAR,GAA+BS,UAA/B,GAA4C,KAA5C,GAAoDA,UAApD,GAAiE,OAAzE;AACD,GA/BwC,CAiCzC;;;AACA,SAAOT,KAAP;AACD,CAnCD","file":"packages/zurb:foundation-sites/customizer/lib/js.js.map","sourcesContent":["var empty = require('is-empty-object');\nvar unique = require('array-uniq');\nvar path = require('path');\n\n// custom module names where needed\nconst MODULES = {\n  'offcanvas': 'OffCanvas'\n};\n\n/**\n * Creates an array of file paths that can be passed to `gulp.src()`.\n * @param {Object} config - Customizer configuration file.\n * @param {String[]} modules - Modules to include in the file list.\n * @returns {String[]} Array of file paths.\n */\n\nmodule.exports = function(config, modules) {\n  var dir = path.resolve(__dirname, '../../js/');\n  var entry = \"import $ from 'jquery';\\n\" +\n              \"import { Foundation } from '\" + dir + \"/foundation.core';\\n\" +\n              \"Foundation.addToJquery($);\\n\" +\n              \"import { MediaQuery } from '\" + dir + \"/foundation.util.mediaQuery';\\n\" +\n              \"Foundation.MediaQuery = MediaQuery;\\n\";\n\n  // last 2 pieces work around https://github.com/zurb/foundation-sites/issues/10287\n\n  var libraries = [];\n\n  if (empty(modules)) {\n    modules = Object.keys(config);\n  }\n\n  for (var i in modules) {\n    var name = modules[i];\n\n    // Check if the module has JS files\n    if (config[name] && config[name].js) {\n      libraries.push(config[name].js);\n    }\n  }\n\n  // add plugins into entry\n  for (var i in libraries) {\n    var file = libraries[i];\n    var moduleName = MODULES[file] || file.charAt(0).toUpperCase() + file.slice(1);\n    entry = entry + \"import { \" + moduleName + \" } from '\" + dir + \"/foundation.\" + file + \"';\\n\";\n    entry = entry + \"Foundation.plugin(\" + moduleName + \", '\" + moduleName + \"');\\n\";\n  }\n\n  // return entry file as string\n  return entry;\n}\n"]},"hash":"143aa3d18f41b5f757ccd1b804d601d291a7e726"}
