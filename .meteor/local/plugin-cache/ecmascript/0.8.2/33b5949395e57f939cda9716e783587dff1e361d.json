{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/docs/assets/img/gulpfile.js","filenameRelative":"packages/zurb:foundation-sites/docs/assets/img/gulpfile.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/docs/assets/img/gulpfile.js.map","sourceFileName":"packages/zurb:foundation-sites/docs/assets/img/gulpfile.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"gulpfile"},"ignored":false,"code":"var $ = require('gulp-load-plugins')();\n\nvar argv = require('yargs').argv;\n\nvar gulp = require('gulp');\n\nvar rimraf = require('rimraf');\n\nvar panini = require('panini');\n\nvar sequence = require('run-sequence'); // Check for --production flag\n\n\nvar isProduction = !!argv.production; // File paths to various assets are defined here.\n\nvar paths = {\n  assets: ['src/assets/**/*', '!src/assets/{!img,js,scss}/**/*'],\n  downloads: ['src/downloads/**/*.*'],\n  sass: ['bower_components/foundation-sites/scss'],\n  javascript: ['node_modules/jquery/dist/jquery.js', 'bower_components/foundation-sites/dist/foundation.js', 'bower_components/what-input/what-input.js', 'src/assets/js/**/*.js', 'bower_components/lodash/lodash.js', 'src/assets/js/app.js']\n}; // Delete the \"dist\" folder\n// This happens every time a build starts\n\ngulp.task('clean', function (done) {\n  rimraf('./dist', done);\n}); // Copy files out of the assets folder\n// This task skips over the \"img\", \"js\", and \"scss\" folders, which are parsed separately\n\ngulp.task('copy', function (done) {\n  gulp.src(paths.assets).pipe(gulp.dest('./dist/assets'));\n});\ngulp.task('downloads', function (done) {\n  gulp.src('src/downloads/**/*.*').pipe(gulp.dest('./dist/downloads'));\n  done();\n}); // Copy page templates into finished HTML files\n\ngulp.task('pages', function () {\n  gulp.src('./src/pages/**/*.html').pipe(panini({\n    root: './src/pages/',\n    layouts: './src/layouts/',\n    partials: './src/partials/',\n    data: './src/data/'\n  })).pipe($.cacheBust({\n    type: 'MD5'\n  })).pipe(gulp.dest('./dist'));\n});\ngulp.task('pages:reset', function () {\n  panini.refresh();\n  gulp.run('pages');\n}); // Compile Sass into CSS\n// In production, the CSS is compressed\n\ngulp.task('sass', function () {\n  var uncss = $.if(isProduction, $.uncss({\n    html: ['src/**/*.html'],\n    ignore: [new RegExp('^meta\\..*'), new RegExp('^\\.is-.*')]\n  }));\n  return gulp.src('./src/assets/scss/app.scss').pipe($.sass({\n    includePaths: paths.sass,\n    outputStyle: isProduction ? 'compressed' : 'nested'\n  }).on('error', $.sass.logError)).pipe($.autoprefixer({\n    browsers: ['last 2 versions', 'ie >= 9']\n  })) // .pipe(uncss)\n  .pipe(gulp.dest('./dist/assets/css'));\n}); // Combine JavaScript into one file\n// In production, the file is minified\n\ngulp.task('javascript', function () {\n  var uglify = $.if(isProduction, $.uglify({\n    mangle: false\n  }).on('error', function (e) {\n    console.log(e);\n  }));\n  return gulp.src(paths.javascript).pipe($.concat('app.js')).pipe(uglify).pipe(gulp.dest('./dist/assets/js'));\n}); // Compiles HTML templates into JST\n\ngulp.task('jst', function () {\n  gulp.src('src/templates/*.html').pipe($.jstConcat('templates.js', {\n    renameKeys: ['^.*marketing/(src.*.html)$', '$1']\n  })).pipe(gulp.dest('dist/assets/js'));\n}); // Copy images to the \"dist\" folder\n// In production, the images are compressed\n\ngulp.task('images', function () {\n  var imagemin = $.if(isProduction, $.imagemin({\n    progressive: true\n  }));\n  return gulp.src('./src/assets/img/**/*') // .pipe(imagemin)\n  .pipe(gulp.dest('./dist/assets/img'));\n}); // Deploy to the live server\n\ngulp.task('deploy', ['build'], function () {\n  return gulp.src('./dist/**').pipe($.prompt.confirm('Make sure everything looks right before you deploy.')).pipe($.rsync({\n    root: './dist',\n    hostname: 'deployer@72.32.134.77',\n    destination: '/home/deployer/sites/foundation-sites-6-marketing'\n  }));\n}); // Build the \"dist\" folder by running all of the above tasks\n\ngulp.task('build', function (done) {\n  sequence('clean', ['pages', 'sass', 'javascript', 'images', 'jst', 'downloads'], done);\n}); // Start a server with LiveReload to preview the site in\n\ngulp.task('server', ['build'], function () {\n  return gulp.src('./dist').pipe($.webserver({\n    host: 'localhost',\n    port: 8000,\n    livereload: true,\n    open: true\n  }));\n}); // Build the site, run the server, and watch for file changes\n\ngulp.task('default', ['build', 'server'], function () {\n  gulp.watch(paths.assets, ['copy']);\n  gulp.watch(['./src/pages/**/*.html'], ['pages']);\n  gulp.watch(['./src/{layouts,partials}/**/*.html'], ['pages:reset']);\n  gulp.watch(['./src/assets/scss/**/*.scss'], ['sass']);\n  gulp.watch(['./src/assets/js/**/*.js'], ['javascript']);\n  gulp.watch(['bower_components/foundation-sites/dist/foundation.js'], ['javascript']);\n  gulp.watch(['./src/assets/img/**/*'], ['images']);\n  gulp.watch(['./src/templates/**/*'], ['jst']);\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/docs/assets/img/gulpfile.js"],"names":["$","require","argv","gulp","rimraf","panini","sequence","isProduction","production","paths","assets","downloads","sass","javascript","task","done","src","pipe","dest","root","layouts","partials","data","cacheBust","type","refresh","run","uncss","if","html","ignore","RegExp","includePaths","outputStyle","on","logError","autoprefixer","browsers","uglify","mangle","e","console","log","concat","jstConcat","renameKeys","imagemin","progressive","prompt","confirm","rsync","hostname","destination","webserver","host","port","livereload","open","watch"],"mappings":"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","file":"packages/zurb:foundation-sites/docs/assets/img/gulpfile.js.map","sourcesContent":["var $      = require('gulp-load-plugins')();\nvar argv   = require('yargs').argv;\nvar gulp   = require('gulp');\nvar rimraf = require('rimraf');\nvar panini = require('panini');\nvar sequence = require('run-sequence');\n\n// Check for --production flag\nvar isProduction = !!(argv.production);\n\n// File paths to various assets are defined here.\nvar paths = {\n  assets: [\n    'src/assets/**/*',\n    '!src/assets/{!img,js,scss}/**/*'\n  ],\n  downloads: [\n    'src/downloads/**/*.*'\n  ],\n  sass: [\n    'bower_components/foundation-sites/scss'\n  ],\n  javascript: [\n    'node_modules/jquery/dist/jquery.js',\n    'bower_components/foundation-sites/dist/foundation.js',\n    'bower_components/what-input/what-input.js',\n    'src/assets/js/**/*.js',\n    'bower_components/lodash/lodash.js',\n    'src/assets/js/app.js'\n  ]\n};\n\n// Delete the \"dist\" folder\n// This happens every time a build starts\ngulp.task('clean', function(done) {\n  rimraf('./dist', done);\n});\n\n// Copy files out of the assets folder\n// This task skips over the \"img\", \"js\", and \"scss\" folders, which are parsed separately\ngulp.task('copy', function(done) {\n  gulp.src(paths.assets)\n    .pipe(gulp.dest('./dist/assets'));\n});\ngulp.task('downloads', function(done){\n  gulp.src('src/downloads/**/*.*')\n      .pipe(gulp.dest('./dist/downloads'));\n      done();\n});\n\n// Copy page templates into finished HTML files\ngulp.task('pages', function() {\n  gulp.src('./src/pages/**/*.html')\n    .pipe(panini({\n      root: './src/pages/',\n      layouts: './src/layouts/',\n      partials: './src/partials/',\n      data: './src/data/'\n    }))\n    .pipe($.cacheBust({ type: 'MD5' }))\n    .pipe(gulp.dest('./dist'));\n});\n\ngulp.task('pages:reset', function() {\n  panini.refresh();\n  gulp.run('pages');\n});\n\n// Compile Sass into CSS\n// In production, the CSS is compressed\ngulp.task('sass', function() {\n  var uncss = $.if(isProduction, $.uncss({\n    html: ['src/**/*.html'],\n    ignore: [\n      new RegExp('^meta\\..*'),\n      new RegExp('^\\.is-.*')\n    ]\n  }));\n\n  return gulp.src('./src/assets/scss/app.scss')\n    .pipe($.sass({\n      includePaths: paths.sass,\n      outputStyle: isProduction ? 'compressed' : 'nested'\n    })\n      .on('error', $.sass.logError))\n    .pipe($.autoprefixer({\n      browsers: ['last 2 versions', 'ie >= 9']\n    }))\n    // .pipe(uncss)\n    .pipe(gulp.dest('./dist/assets/css'));\n});\n\n// Combine JavaScript into one file\n// In production, the file is minified\ngulp.task('javascript', function() {\n  var uglify = $.if(isProduction, $.uglify({\n      mangle: false\n    })\n    .on('error', function (e) {\n      console.log(e);\n    }));\n\n  return gulp.src(paths.javascript)\n    .pipe($.concat('app.js'))\n    .pipe(uglify)\n    .pipe(gulp.dest('./dist/assets/js'));\n});\n\n// Compiles HTML templates into JST\ngulp.task('jst', function() {\n  gulp.src('src/templates/*.html')\n    .pipe($.jstConcat('templates.js', {\n      renameKeys: ['^.*marketing/(src.*.html)$', '$1']\n    }))\n    .pipe(gulp.dest('dist/assets/js'));\n});\n\n// Copy images to the \"dist\" folder\n// In production, the images are compressed\ngulp.task('images', function() {\n  var imagemin = $.if(isProduction, $.imagemin({\n    progressive: true\n  }));\n\n  return gulp.src('./src/assets/img/**/*')\n    // .pipe(imagemin)\n    .pipe(gulp.dest('./dist/assets/img'));\n});\n\n// Deploy to the live server\ngulp.task('deploy', ['build'], function() {\n  return gulp.src('./dist/**')\n    .pipe($.prompt.confirm('Make sure everything looks right before you deploy.'))\n    .pipe($.rsync({\n      root: './dist',\n      hostname: 'deployer@72.32.134.77',\n      destination: '/home/deployer/sites/foundation-sites-6-marketing'\n    }));\n});\n\n// Build the \"dist\" folder by running all of the above tasks\ngulp.task('build', function(done) {\n  sequence('clean', ['pages', 'sass', 'javascript', 'images', 'jst', 'downloads'], done);\n});\n\n// Start a server with LiveReload to preview the site in\ngulp.task('server', ['build'], function() {\n  return gulp.src('./dist')\n    .pipe($.webserver({\n      host: 'localhost',\n      port: 8000,\n      livereload: true,\n      open: true\n    }));\n});\n\n// Build the site, run the server, and watch for file changes\ngulp.task('default', ['build', 'server'], function() {\n  gulp.watch(paths.assets, ['copy']);\n  gulp.watch(['./src/pages/**/*.html'], ['pages']);\n  gulp.watch(['./src/{layouts,partials}/**/*.html'], ['pages:reset']);\n  gulp.watch(['./src/assets/scss/**/*.scss'], ['sass']);\n  gulp.watch(['./src/assets/js/**/*.js'], ['javascript']);\n  gulp.watch(['bower_components/foundation-sites/dist/foundation.js'], ['javascript']);\n  gulp.watch(['./src/assets/img/**/*'], ['images']);\n  gulp.watch(['./src/templates/**/*'], ['jst']);\n});\n"]},"hash":"33b5949395e57f939cda9716e783587dff1e361d"}
