{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"jasmine"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar isCommonJS = typeof window == \"undefined\" && (typeof exports === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(exports)) == \"object\"; /**\n                                                                                                                                               * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.\n                                                                                                                                               *\n                                                                                                                                               * @namespace\n                                                                                                                                               */\nvar jasmine = {};\nif (isCommonJS) exports.jasmine = jasmine; /**\n                                            * @private\n                                            */\n\njasmine.unimplementedMethod_ = function () {\n  throw new Error(\"unimplemented method\");\n}; /**\n    * Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\n    * a plain old variable and may be redefined by somebody else.\n    *\n    * @private\n    */\n\njasmine.undefined = jasmine.___undefined___; /**\n                                              * Show diagnostic messages in the console if set to true\n                                              *\n                                              */\njasmine.VERBOSE = false; /**\n                          * Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.\n                          *\n                          */\njasmine.DEFAULT_UPDATE_INTERVAL = 250; /**\n                                        * Maximum levels of nesting that will be included when an object is pretty-printed\n                                        */\njasmine.MAX_PRETTY_PRINT_DEPTH = 40; /**\n                                      * Default timeout interval in milliseconds for waitsFor() blocks.\n                                      */\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000; /**\n                                          * By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\n                                          * Set to false to let the exception bubble up in the browser.\n                                          *\n                                          */\njasmine.CATCH_EXCEPTIONS = true;\n\njasmine.getGlobal = function () {\n  function getGlobal() {\n    return this;\n  }\n\n  return getGlobal();\n}; /**\n    * Allows for bound functions to be compared.  Internal use only.\n    *\n    * @ignore\n    * @private\n    * @param base {Object} bound 'this' for the function\n    * @param name {Function} function to find\n    */\n\njasmine.bindOriginal_ = function (base, name) {\n  var original = base[name];\n\n  if (original.apply) {\n    return function () {\n      return original.apply(base, arguments);\n    };\n  } else {\n    // IE support\n    return jasmine.getGlobal()[name];\n  }\n};\n\njasmine.setTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'setTimeout');\njasmine.clearTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearTimeout');\njasmine.setInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'setInterval');\njasmine.clearInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearInterval');\n\njasmine.MessageResult = function (values) {\n  this.type = 'log';\n  this.values = values;\n  this.trace = new Error(); // todo: test better\n};\n\njasmine.MessageResult.prototype.toString = function () {\n  var text = \"\";\n\n  for (var i = 0; i < this.values.length; i++) {\n    if (i > 0) text += \" \";\n\n    if (jasmine.isString_(this.values[i])) {\n      text += this.values[i];\n    } else {\n      text += jasmine.pp(this.values[i]);\n    }\n  }\n\n  return text;\n};\n\njasmine.ExpectationResult = function (params) {\n  this.type = 'expect';\n  this.matcherName = params.matcherName;\n  this.passed_ = params.passed;\n  this.expected = params.expected;\n  this.actual = params.actual;\n  this.message = this.passed_ ? 'Passed.' : params.message;\n  var trace = params.trace || new Error(this.message);\n  this.trace = this.passed_ ? '' : trace;\n};\n\njasmine.ExpectationResult.prototype.toString = function () {\n  return this.message;\n};\n\njasmine.ExpectationResult.prototype.passed = function () {\n  return this.passed_;\n}; /**\n    * Getter for the Jasmine environment. Ensures one gets created\n    */\n\njasmine.getEnv = function () {\n  var env = jasmine.currentEnv_ = jasmine.currentEnv_ || new jasmine.Env();\n  return env;\n}; /**\n    * @ignore\n    * @private\n    * @param value\n    * @returns {Boolean}\n    */\n\njasmine.isArray_ = function (value) {\n  return jasmine.isA_(\"Array\", value);\n}; /**\n    * @ignore\n    * @private\n    * @param value\n    * @returns {Boolean}\n    */\n\njasmine.isString_ = function (value) {\n  return jasmine.isA_(\"String\", value);\n}; /**\n    * @ignore\n    * @private\n    * @param value\n    * @returns {Boolean}\n    */\n\njasmine.isNumber_ = function (value) {\n  return jasmine.isA_(\"Number\", value);\n}; /**\n    * @ignore\n    * @private\n    * @param {String} typeName\n    * @param value\n    * @returns {Boolean}\n    */\n\njasmine.isA_ = function (typeName, value) {\n  return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n}; /**\n    * Pretty printer for expecations.  Takes any object and turns it into a human-readable string.\n    *\n    * @param value {Object} an object to be outputted\n    * @returns {String}\n    */\n\njasmine.pp = function (value) {\n  var stringPrettyPrinter = new jasmine.StringPrettyPrinter();\n  stringPrettyPrinter.format(value);\n  return stringPrettyPrinter.string;\n}; /**\n    * Returns true if the object is a DOM Node.\n    *\n    * @param {Object} obj object to check\n    * @returns {Boolean}\n    */\n\njasmine.isDomNode = function (obj) {\n  return obj.nodeType > 0;\n}; /**\n    * Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.\n    *\n    * @example\n    * // don't care about which function is passed in, as long as it's a function\n    * expect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));\n    *\n    * @param {Class} clazz\n    * @returns matchable object of the type clazz\n    */\n\njasmine.any = function (clazz) {\n  return new jasmine.Matchers.Any(clazz);\n}; /**\n    * Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\n    * attributes on the object.\n    *\n    * @example\n    * // don't care about any other attributes than foo.\n    * expect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});\n    *\n    * @param sample {Object} sample\n    * @returns matchable object for the sample\n    */\n\njasmine.objectContaining = function (sample) {\n  return new jasmine.Matchers.ObjectContaining(sample);\n}; /**\n    * Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n    *\n    * Spies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\n    * expectation syntax. Spies can be checked if they were called or not and what the calling params were.\n    *\n    * A Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n    *\n    * Spies are torn down at the end of every spec.\n    *\n    * Note: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.\n    *\n    * @example\n    * // a stub\n    * var myStub = jasmine.createSpy('myStub');  // can be used anywhere\n    *\n    * // spy example\n    * var foo = {\n    *   not: function(bool) { return !bool; }\n    * }\n    *\n    * // actual foo.not will not be called, execution stops\n    * spyOn(foo, 'not');\n   \n    // foo.not spied upon, execution will continue to implementation\n    * spyOn(foo, 'not').andCallThrough();\n    *\n    * // fake example\n    * var foo = {\n    *   not: function(bool) { return !bool; }\n    * }\n    *\n    * // foo.not(val) will return val\n    * spyOn(foo, 'not').andCallFake(function(value) {return value;});\n    *\n    * // mock example\n    * foo.not(7 == 7);\n    * expect(foo.not).toHaveBeenCalled();\n    * expect(foo.not).toHaveBeenCalledWith(true);\n    *\n    * @constructor\n    * @see spyOn, jasmine.createSpy, jasmine.createSpyObj\n    * @param {String} name\n    */\n\njasmine.Spy = function (name) {\n  /**\n   * The name of the spy, if provided.\n   */this.identity = name || 'unknown'; /**\n                                         *  Is this Object a spy?\n                                         */\n  this.isSpy = true; /**\n                      * The actual function this spy stubs.\n                      */\n\n  this.plan = function () {}; /**\n                               * Tracking of the most recent call to the spy.\n                               * @example\n                               * var mySpy = jasmine.createSpy('foo');\n                               * mySpy(1, 2);\n                               * mySpy.mostRecentCall.args = [1, 2];\n                               */\n\n  this.mostRecentCall = {}; /**\n                             * Holds arguments for each call to the spy, indexed by call count\n                             * @example\n                             * var mySpy = jasmine.createSpy('foo');\n                             * mySpy(1, 2);\n                             * mySpy(7, 8);\n                             * mySpy.mostRecentCall.args = [7, 8];\n                             * mySpy.argsForCall[0] = [1, 2];\n                             * mySpy.argsForCall[1] = [7, 8];\n                             */\n  this.argsForCall = [];\n  this.calls = [];\n}; /**\n    * Tells a spy to call through to the actual implemenatation.\n    *\n    * @example\n    * var foo = {\n    *   bar: function() { // do some stuff }\n    * }\n    *\n    * // defining a spy on an existing property: foo.bar\n    * spyOn(foo, 'bar').andCallThrough();\n    */\n\njasmine.Spy.prototype.andCallThrough = function () {\n  this.plan = this.originalValue;\n  return this;\n}; /**\n    * For setting the return value of a spy.\n    *\n    * @example\n    * // defining a spy from scratch: foo() returns 'baz'\n    * var foo = jasmine.createSpy('spy on foo').andReturn('baz');\n    *\n    * // defining a spy on an existing property: foo.bar() returns 'baz'\n    * spyOn(foo, 'bar').andReturn('baz');\n    *\n    * @param {Object} value\n    */\n\njasmine.Spy.prototype.andReturn = function (value) {\n  this.plan = function () {\n    return value;\n  };\n\n  return this;\n}; /**\n    * For throwing an exception when a spy is called.\n    *\n    * @example\n    * // defining a spy from scratch: foo() throws an exception w/ message 'ouch'\n    * var foo = jasmine.createSpy('spy on foo').andThrow('baz');\n    *\n    * // defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\n    * spyOn(foo, 'bar').andThrow('baz');\n    *\n    * @param {String} exceptionMsg\n    */\n\njasmine.Spy.prototype.andThrow = function (exceptionMsg) {\n  this.plan = function () {\n    throw exceptionMsg;\n  };\n\n  return this;\n}; /**\n    * Calls an alternate implementation when a spy is called.\n    *\n    * @example\n    * var baz = function() {\n    *   // do some stuff, return something\n    * }\n    * // defining a spy from scratch: foo() calls the function baz\n    * var foo = jasmine.createSpy('spy on foo').andCall(baz);\n    *\n    * // defining a spy on an existing property: foo.bar() calls an anonymnous function\n    * spyOn(foo, 'bar').andCall(function() { return 'baz';} );\n    *\n    * @param {Function} fakeFunc\n    */\n\njasmine.Spy.prototype.andCallFake = function (fakeFunc) {\n  this.plan = fakeFunc;\n  return this;\n}; /**\n    * Resets all of a spy's the tracking variables so that it can be used again.\n    *\n    * @example\n    * spyOn(foo, 'bar');\n    *\n    * foo.bar();\n    *\n    * expect(foo.bar.callCount).toEqual(1);\n    *\n    * foo.bar.reset();\n    *\n    * expect(foo.bar.callCount).toEqual(0);\n    */\n\njasmine.Spy.prototype.reset = function () {\n  this.wasCalled = false;\n  this.callCount = 0;\n  this.argsForCall = [];\n  this.calls = [];\n  this.mostRecentCall = {};\n};\n\njasmine.createSpy = function (name) {\n  var spyObj = function () {\n    spyObj.wasCalled = true;\n    spyObj.callCount++;\n    var args = jasmine.util.argsToArray(arguments);\n    spyObj.mostRecentCall.object = this;\n    spyObj.mostRecentCall.args = args;\n    spyObj.argsForCall.push(args);\n    spyObj.calls.push({\n      object: this,\n      args: args\n    });\n    return spyObj.plan.apply(this, arguments);\n  };\n\n  var spy = new jasmine.Spy(name);\n\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(spy)) {\n    spyObj[prop] = spy[prop];\n  }\n\n  spyObj.reset();\n  return spyObj;\n}; /**\n    * Determines whether an object is a spy.\n    *\n    * @param {jasmine.Spy|Object} putativeSpy\n    * @returns {Boolean}\n    */\n\njasmine.isSpy = function (putativeSpy) {\n  return putativeSpy && putativeSpy.isSpy;\n}; /**\n    * Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\n    * large in one call.\n    *\n    * @param {String} baseName name of spy class\n    * @param {Array} methodNames array of names of methods to make spies\n    */\n\njasmine.createSpyObj = function (baseName, methodNames) {\n  if (!jasmine.isArray_(methodNames) || methodNames.length === 0) {\n    throw new Error('createSpyObj requires a non-empty array of method names to create spies for');\n  }\n\n  var obj = {};\n\n  for (var i = 0; i < methodNames.length; i++) {\n    obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]);\n  }\n\n  return obj;\n}; /**\n    * All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n    *\n    * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n    */\n\njasmine.log = function () {\n  var spec = jasmine.getEnv().currentSpec;\n  spec.log.apply(spec, arguments);\n}; /**\n    * Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.\n    *\n    * @example\n    * // spy example\n    * var foo = {\n    *   not: function(bool) { return !bool; }\n    * }\n    * spyOn(foo, 'not'); // actual foo.not will not be called, execution stops\n    *\n    * @see jasmine.createSpy\n    * @param obj\n    * @param methodName\n    * @return {jasmine.Spy} a Jasmine spy that can be chained with all spy methods\n    */\n\nvar spyOn = function (obj, methodName) {\n  return jasmine.getEnv().currentSpec.spyOn(obj, methodName);\n};\n\nif (isCommonJS) exports.spyOn = spyOn; /**\n                                        * Creates a Jasmine spec that will be added to the current suite.\n                                        *\n                                        * // TODO: pending tests\n                                        *\n                                        * @example\n                                        * it('should be true', function() {\n                                        *   expect(true).toEqual(true);\n                                        * });\n                                        *\n                                        * @param {String} desc description of this specification\n                                        * @param {Function} func defines the preconditions and expectations of the spec\n                                        */\n\nvar it = function (desc, func) {\n  return jasmine.getEnv().it(desc, func);\n};\n\nif (isCommonJS) exports.it = it; /**\n                                  * Creates a <em>disabled</em> Jasmine spec.\n                                  *\n                                  * A convenience method that allows existing specs to be disabled temporarily during development.\n                                  *\n                                  * @param {String} desc description of this specification\n                                  * @param {Function} func defines the preconditions and expectations of the spec\n                                  */\n\nvar xit = function (desc, func) {\n  return jasmine.getEnv().xit(desc, func);\n};\n\nif (isCommonJS) exports.xit = xit; /**\n                                    * Starts a chain for a Jasmine expectation.\n                                    *\n                                    * It is passed an Object that is the actual value and should chain to one of the many\n                                    * jasmine.Matchers functions.\n                                    *\n                                    * @param {Object} actual Actual value to test against and expected value\n                                    * @return {jasmine.Matchers}\n                                    */\n\nvar expect = function (actual) {\n  return jasmine.getEnv().currentSpec.expect(actual);\n};\n\nif (isCommonJS) exports.expect = expect; /**\n                                          * Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.\n                                          *\n                                          * @param {Function} func Function that defines part of a jasmine spec.\n                                          */\n\nvar runs = function (func) {\n  jasmine.getEnv().currentSpec.runs(func);\n};\n\nif (isCommonJS) exports.runs = runs; /**\n                                      * Waits a fixed time period before moving to the next block.\n                                      *\n                                      * @deprecated Use waitsFor() instead\n                                      * @param {Number} timeout milliseconds to wait\n                                      */\n\nvar waits = function (timeout) {\n  jasmine.getEnv().currentSpec.waits(timeout);\n};\n\nif (isCommonJS) exports.waits = waits; /**\n                                        * Waits for the latchFunction to return true before proceeding to the next block.\n                                        *\n                                        * @param {Function} latchFunction\n                                        * @param {String} optional_timeoutMessage\n                                        * @param {Number} optional_timeout\n                                        */\n\nvar waitsFor = function (latchFunction, optional_timeoutMessage, optional_timeout) {\n  jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments);\n};\n\nif (isCommonJS) exports.waitsFor = waitsFor; /**\n                                              * A function that is called before each spec in a suite.\n                                              *\n                                              * Used for spec setup, including validating assumptions.\n                                              *\n                                              * @param {Function} beforeEachFunction\n                                              */\n\nvar beforeEach = function (beforeEachFunction) {\n  jasmine.getEnv().beforeEach(beforeEachFunction);\n};\n\nif (isCommonJS) exports.beforeEach = beforeEach; /**\n                                                  * A function that is called after each spec in a suite.\n                                                  *\n                                                  * Used for restoring any state that is hijacked during spec execution.\n                                                  *\n                                                  * @param {Function} afterEachFunction\n                                                  */\n\nvar afterEach = function (afterEachFunction) {\n  jasmine.getEnv().afterEach(afterEachFunction);\n};\n\nif (isCommonJS) exports.afterEach = afterEach; /**\n                                                * Defines a suite of specifications.\n                                                *\n                                                * Stores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\n                                                * are accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\n                                                * of setup in some tests.\n                                                *\n                                                * @example\n                                                * // TODO: a simple suite\n                                                *\n                                                * // TODO: a simple suite with a nested describe block\n                                                *\n                                                * @param {String} description A string, usually the class under test.\n                                                * @param {Function} specDefinitions function that defines several specs.\n                                                */\n\nvar describe = function (description, specDefinitions) {\n  return jasmine.getEnv().describe(description, specDefinitions);\n};\n\nif (isCommonJS) exports.describe = describe; /**\n                                              * Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.\n                                              *\n                                              * @param {String} description A string, usually the class under test.\n                                              * @param {Function} specDefinitions function that defines several specs.\n                                              */\n\nvar xdescribe = function (description, specDefinitions) {\n  return jasmine.getEnv().xdescribe(description, specDefinitions);\n};\n\nif (isCommonJS) exports.xdescribe = xdescribe; // Provide the XMLHttpRequest class for IE 5.x-6.x:\n\njasmine.XmlHttpRequest = typeof XMLHttpRequest == \"undefined\" ? function () {\n  function tryIt(f) {\n    try {\n      return f();\n    } catch (e) {}\n\n    return null;\n  }\n\n  var xhr = tryIt(function () {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  }) || tryIt(function () {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n  }) || tryIt(function () {\n    return new ActiveXObject(\"Msxml2.XMLHTTP\");\n  }) || tryIt(function () {\n    return new ActiveXObject(\"Microsoft.XMLHTTP\");\n  });\n  if (!xhr) throw new Error(\"This browser does not support XMLHttpRequest.\");\n  return xhr;\n} : XMLHttpRequest; /**\n                     * @namespace\n                     */\njasmine.util = {}; /**\n                    * Declare that a child class inherit it's prototype from the parent class.\n                    *\n                    * @private\n                    * @param {Function} childClass\n                    * @param {Function} parentClass\n                    */\n\njasmine.util.inherit = function (childClass, parentClass) {\n  /**\n   * @private\n   */var subclass = function () {};\n\n  subclass.prototype = parentClass.prototype;\n  childClass.prototype = new subclass();\n};\n\njasmine.util.formatException = function (e) {\n  var lineNumber;\n\n  if (e.line) {\n    lineNumber = e.line;\n  } else if (e.lineNumber) {\n    lineNumber = e.lineNumber;\n  }\n\n  var file;\n\n  if (e.sourceURL) {\n    file = e.sourceURL;\n  } else if (e.fileName) {\n    file = e.fileName;\n  }\n\n  var message = e.name && e.message ? e.name + ': ' + e.message : e.toString();\n\n  if (file && lineNumber) {\n    message += ' in ' + file + ' (line ' + lineNumber + ')';\n  }\n\n  return message;\n};\n\njasmine.util.htmlEscape = function (str) {\n  if (!str) return str;\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\njasmine.util.argsToArray = function (args) {\n  var arrayOfArgs = [];\n\n  for (var i = 0; i < args.length; i++) {\n    arrayOfArgs.push(args[i]);\n  }\n\n  return arrayOfArgs;\n};\n\njasmine.util.extend = function (destination, source) {\n  for (var property in meteorBabelHelpers.sanitizeForInObject(source)) {\n    destination[property] = source[property];\n  }\n\n  return destination;\n}; /**\n    * Environment for Jasmine\n    *\n    * @constructor\n    */\n\njasmine.Env = function () {\n  this.currentSpec = null;\n  this.currentSuite = null;\n  this.currentRunner_ = new jasmine.Runner(this);\n  this.reporter = new jasmine.MultiReporter();\n  this.updateInterval = jasmine.DEFAULT_UPDATE_INTERVAL;\n  this.defaultTimeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n  this.lastUpdate = 0;\n\n  this.specFilter = function () {\n    return true;\n  };\n\n  this.nextSpecId_ = 0;\n  this.nextSuiteId_ = 0;\n  this.equalityTesters_ = []; // wrap matchers\n\n  this.matchersClass = function () {\n    jasmine.Matchers.apply(this, arguments);\n  };\n\n  jasmine.util.inherit(this.matchersClass, jasmine.Matchers);\n  jasmine.Matchers.wrapInto_(jasmine.Matchers.prototype, this.matchersClass);\n};\n\njasmine.Env.prototype.setTimeout = jasmine.setTimeout;\njasmine.Env.prototype.clearTimeout = jasmine.clearTimeout;\njasmine.Env.prototype.setInterval = jasmine.setInterval;\njasmine.Env.prototype.clearInterval = jasmine.clearInterval; /**\n                                                              * @returns an object containing jasmine version build info, if set.\n                                                              */\n\njasmine.Env.prototype.version = function () {\n  if (jasmine.version_) {\n    return jasmine.version_;\n  } else {\n    throw new Error('Version not set');\n  }\n}; /**\n    * @returns string containing jasmine version build info, if set.\n    */\n\njasmine.Env.prototype.versionString = function () {\n  if (!jasmine.version_) {\n    return \"version unknown\";\n  }\n\n  var version = this.version();\n  var versionString = version.major + \".\" + version.minor + \".\" + version.build;\n\n  if (version.release_candidate) {\n    versionString += \".rc\" + version.release_candidate;\n  }\n\n  versionString += \" revision \" + version.revision;\n  return versionString;\n}; /**\n    * @returns a sequential integer starting at 0\n    */\n\njasmine.Env.prototype.nextSpecId = function () {\n  return this.nextSpecId_++;\n}; /**\n    * @returns a sequential integer starting at 0\n    */\n\njasmine.Env.prototype.nextSuiteId = function () {\n  return this.nextSuiteId_++;\n}; /**\n    * Register a reporter to receive status updates from Jasmine.\n    * @param {jasmine.Reporter} reporter An object which will receive status updates.\n    */\n\njasmine.Env.prototype.addReporter = function (reporter) {\n  this.reporter.addReporter(reporter);\n};\n\njasmine.Env.prototype.execute = function () {\n  this.currentRunner_.execute();\n};\n\njasmine.Env.prototype.describe = function (description, specDefinitions) {\n  var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite);\n  var parentSuite = this.currentSuite;\n\n  if (parentSuite) {\n    parentSuite.add(suite);\n  } else {\n    this.currentRunner_.add(suite);\n  }\n\n  this.currentSuite = suite;\n  var declarationError = null;\n\n  try {\n    specDefinitions.call(suite);\n  } catch (e) {\n    declarationError = e;\n  }\n\n  if (declarationError) {\n    this.it(\"encountered a declaration exception\", function () {\n      throw declarationError;\n    });\n  }\n\n  this.currentSuite = parentSuite;\n  return suite;\n};\n\njasmine.Env.prototype.beforeEach = function (beforeEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.beforeEach(beforeEachFunction);\n  } else {\n    this.currentRunner_.beforeEach(beforeEachFunction);\n  }\n};\n\njasmine.Env.prototype.currentRunner = function () {\n  return this.currentRunner_;\n};\n\njasmine.Env.prototype.afterEach = function (afterEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.afterEach(afterEachFunction);\n  } else {\n    this.currentRunner_.afterEach(afterEachFunction);\n  }\n};\n\njasmine.Env.prototype.xdescribe = function (desc, specDefinitions) {\n  return {\n    execute: function () {}\n  };\n};\n\njasmine.Env.prototype.it = function (description, func) {\n  var spec = new jasmine.Spec(this, this.currentSuite, description);\n  this.currentSuite.add(spec);\n  this.currentSpec = spec;\n\n  if (func) {\n    spec.runs(func);\n  }\n\n  return spec;\n};\n\njasmine.Env.prototype.xit = function (desc, func) {\n  return {\n    id: this.nextSpecId(),\n    runs: function () {}\n  };\n};\n\njasmine.Env.prototype.compareRegExps_ = function (a, b, mismatchKeys, mismatchValues) {\n  if (a.source != b.source) mismatchValues.push(\"expected pattern /\" + b.source + \"/ is not equal to the pattern /\" + a.source + \"/\");\n  if (a.ignoreCase != b.ignoreCase) mismatchValues.push(\"expected modifier i was\" + (b.ignoreCase ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n  if (a.global != b.global) mismatchValues.push(\"expected modifier g was\" + (b.global ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n  if (a.multiline != b.multiline) mismatchValues.push(\"expected modifier m was\" + (b.multiline ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n  if (a.sticky != b.sticky) mismatchValues.push(\"expected modifier y was\" + (b.sticky ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n  return mismatchValues.length === 0;\n};\n\njasmine.Env.prototype.compareObjects_ = function (a, b, mismatchKeys, mismatchValues) {\n  if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) {\n    return true;\n  }\n\n  a.__Jasmine_been_here_before__ = b;\n  b.__Jasmine_been_here_before__ = a;\n\n  var hasKey = function (obj, keyName) {\n    return obj !== null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in meteorBabelHelpers.sanitizeForInObject(b)) {\n    if (!hasKey(a, property) && hasKey(b, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n  }\n\n  for (property in meteorBabelHelpers.sanitizeForInObject(a)) {\n    if (!hasKey(b, property) && hasKey(a, property)) {\n      mismatchKeys.push(\"expected missing key '\" + property + \"', but present in actual.\");\n    }\n  }\n\n  for (property in meteorBabelHelpers.sanitizeForInObject(b)) {\n    if (property == '__Jasmine_been_here_before__') continue;\n\n    if (!this.equals_(a[property], b[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString()) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString()) : a[property]) + \"' in actual.\");\n    }\n  }\n\n  if (jasmine.isArray_(a) && jasmine.isArray_(b) && a.length != b.length) {\n    mismatchValues.push(\"arrays were not the same length\");\n  }\n\n  delete a.__Jasmine_been_here_before__;\n  delete b.__Jasmine_been_here_before__;\n  return mismatchKeys.length === 0 && mismatchValues.length === 0;\n};\n\njasmine.Env.prototype.equals_ = function (a, b, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  for (var i = 0; i < this.equalityTesters_.length; i++) {\n    var equalityTester = this.equalityTesters_[i];\n    var result = equalityTester(a, b, this, mismatchKeys, mismatchValues);\n    if (result !== jasmine.undefined) return result;\n  }\n\n  if (a === b) return true;\n\n  if (a === jasmine.undefined || a === null || b === jasmine.undefined || b === null) {\n    return a == jasmine.undefined && b == jasmine.undefined;\n  }\n\n  if (jasmine.isDomNode(a) && jasmine.isDomNode(b)) {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() == b.getTime();\n  }\n\n  if (a.jasmineMatches) {\n    return a.jasmineMatches(b);\n  }\n\n  if (b.jasmineMatches) {\n    return b.jasmineMatches(a);\n  }\n\n  if (a instanceof jasmine.Matchers.ObjectContaining) {\n    return a.matches(b);\n  }\n\n  if (b instanceof jasmine.Matchers.ObjectContaining) {\n    return b.matches(a);\n  }\n\n  if (jasmine.isString_(a) && jasmine.isString_(b)) {\n    return a == b;\n  }\n\n  if (jasmine.isNumber_(a) && jasmine.isNumber_(b)) {\n    return a == b;\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return this.compareRegExps_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  if ((typeof a === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(a)) === \"object\" && (typeof b === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(b)) === \"object\") {\n    return this.compareObjects_(a, b, mismatchKeys, mismatchValues);\n  } //Straight check\n\n\n  return a === b;\n};\n\njasmine.Env.prototype.contains_ = function (haystack, needle) {\n  if (jasmine.isArray_(haystack)) {\n    for (var i = 0; i < haystack.length; i++) {\n      if (this.equals_(haystack[i], needle)) return true;\n    }\n\n    return false;\n  }\n\n  return haystack.indexOf(needle) >= 0;\n};\n\njasmine.Env.prototype.addEqualityTester = function (equalityTester) {\n  this.equalityTesters_.push(equalityTester);\n}; /** No-op base class for Jasmine reporters.\n    *\n    * @constructor\n    */\n\njasmine.Reporter = function () {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.reportRunnerStarting = function (runner) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.reportRunnerResults = function (runner) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.reportSuiteResults = function (suite) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.reportSpecStarting = function (spec) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.reportSpecResults = function (spec) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.Reporter.prototype.log = function (str) {}; /**\n                                                     * Blocks are functions with executable code that make up a spec.\n                                                     *\n                                                     * @constructor\n                                                     * @param {jasmine.Env} env\n                                                     * @param {Function} func\n                                                     * @param {jasmine.Spec} spec\n                                                     */\n\njasmine.Block = function (env, func, spec) {\n  this.env = env;\n  this.func = func;\n  this.spec = spec;\n};\n\njasmine.Block.prototype.execute = function (onComplete) {\n  if (!jasmine.CATCH_EXCEPTIONS) {\n    this.func.apply(this.spec);\n  } else {\n    try {\n      this.func.apply(this.spec);\n    } catch (e) {\n      this.spec.fail(e);\n    }\n  }\n\n  onComplete();\n}; /** JavaScript API reporter.\n    *\n    * @constructor\n    */\n\njasmine.JsApiReporter = function () {\n  this.started = false;\n  this.finished = false;\n  this.suites_ = [];\n  this.results_ = {};\n};\n\njasmine.JsApiReporter.prototype.reportRunnerStarting = function (runner) {\n  this.started = true;\n  var suites = runner.topLevelSuites();\n\n  for (var i = 0; i < suites.length; i++) {\n    var suite = suites[i];\n    this.suites_.push(this.summarize_(suite));\n  }\n};\n\njasmine.JsApiReporter.prototype.suites = function () {\n  return this.suites_;\n};\n\njasmine.JsApiReporter.prototype.summarize_ = function (suiteOrSpec) {\n  var isSuite = suiteOrSpec instanceof jasmine.Suite;\n  var summary = {\n    id: suiteOrSpec.id,\n    name: suiteOrSpec.description,\n    type: isSuite ? 'suite' : 'spec',\n    children: []\n  };\n\n  if (isSuite) {\n    var children = suiteOrSpec.children();\n\n    for (var i = 0; i < children.length; i++) {\n      summary.children.push(this.summarize_(children[i]));\n    }\n  }\n\n  return summary;\n};\n\njasmine.JsApiReporter.prototype.results = function () {\n  return this.results_;\n};\n\njasmine.JsApiReporter.prototype.resultsForSpec = function (specId) {\n  return this.results_[specId];\n}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.JsApiReporter.prototype.reportRunnerResults = function (runner) {\n  this.finished = true;\n}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.JsApiReporter.prototype.reportSuiteResults = function (suite) {}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.JsApiReporter.prototype.reportSpecResults = function (spec) {\n  this.results_[spec.id] = {\n    messages: spec.results().getItems(),\n    result: spec.results().failedCount > 0 ? \"failed\" : \"passed\"\n  };\n}; //noinspection JSUnusedLocalSymbols\n\n\njasmine.JsApiReporter.prototype.log = function (str) {};\n\njasmine.JsApiReporter.prototype.resultsForSpecs = function (specIds) {\n  var results = {};\n\n  for (var i = 0; i < specIds.length; i++) {\n    var specId = specIds[i];\n    results[specId] = this.summarizeResult_(this.results_[specId]);\n  }\n\n  return results;\n};\n\njasmine.JsApiReporter.prototype.summarizeResult_ = function (result) {\n  var summaryMessages = [];\n  var messagesLength = result.messages.length;\n\n  for (var messageIndex = 0; messageIndex < messagesLength; messageIndex++) {\n    var resultMessage = result.messages[messageIndex];\n    summaryMessages.push({\n      text: resultMessage.type == 'log' ? resultMessage.toString() : jasmine.undefined,\n      passed: resultMessage.passed ? resultMessage.passed() : true,\n      type: resultMessage.type,\n      message: resultMessage.message,\n      trace: {\n        stack: resultMessage.passed && !resultMessage.passed() ? resultMessage.trace.stack : jasmine.undefined\n      }\n    });\n  }\n\n  return {\n    result: result.result,\n    messages: summaryMessages\n  };\n}; /**\n    * @constructor\n    * @param {jasmine.Env} env\n    * @param actual\n    * @param {jasmine.Spec} spec\n    */\n\njasmine.Matchers = function (env, actual, spec, opt_isNot) {\n  this.env = env;\n  this.actual = actual;\n  this.spec = spec;\n  this.isNot = opt_isNot || false;\n  this.reportWasCalled_ = false;\n}; // todo: @deprecated as of Jasmine 0.11, remove soon [xw]\n\n\njasmine.Matchers.pp = function (str) {\n  throw new Error(\"jasmine.Matchers.pp() is no longer supported, please use jasmine.pp() instead!\");\n}; // todo: @deprecated Deprecated as of Jasmine 0.10. Rewrite your custom matchers to return true or false. [xw]\n\n\njasmine.Matchers.prototype.report = function (result, failing_message, details) {\n  throw new Error(\"As of jasmine 0.11, custom matchers must be implemented differently -- please see jasmine docs\");\n};\n\njasmine.Matchers.wrapInto_ = function (prototype, matchersClass) {\n  for (var methodName in meteorBabelHelpers.sanitizeForInObject(prototype)) {\n    if (methodName == 'report') continue;\n    var orig = prototype[methodName];\n    matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n  }\n};\n\njasmine.Matchers.matcherFn_ = function (matcherName, matcherFunction) {\n  return function () {\n    var matcherArgs = jasmine.util.argsToArray(arguments);\n    var result = matcherFunction.apply(this, arguments);\n\n    if (this.isNot) {\n      result = !result;\n    }\n\n    if (this.reportWasCalled_) return result;\n    var message;\n\n    if (!result) {\n      if (this.message) {\n        message = this.message.apply(this, arguments);\n\n        if (jasmine.isArray_(message)) {\n          message = message[this.isNot ? 1 : 0];\n        }\n      } else {\n        var englishyPredicate = matcherName.replace(/[A-Z]/g, function (s) {\n          return ' ' + s.toLowerCase();\n        });\n        message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate;\n\n        if (matcherArgs.length > 0) {\n          for (var i = 0; i < matcherArgs.length; i++) {\n            if (i > 0) message += \",\";\n            message += \" \" + jasmine.pp(matcherArgs[i]);\n          }\n        }\n\n        message += \".\";\n      }\n    }\n\n    var expectationResult = new jasmine.ExpectationResult({\n      matcherName: matcherName,\n      passed: result,\n      expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0],\n      actual: this.actual,\n      message: message\n    });\n    this.spec.addMatcherResult(expectationResult);\n    return jasmine.undefined;\n  };\n}; /**\n    * toBe: compares the actual to the expected using ===\n    * @param expected\n    */\n\njasmine.Matchers.prototype.toBe = function (expected) {\n  return this.actual === expected;\n}; /**\n    * toNotBe: compares the actual to the expected using !==\n    * @param expected\n    * @deprecated as of 1.0. Use not.toBe() instead.\n    */\n\njasmine.Matchers.prototype.toNotBe = function (expected) {\n  return this.actual !== expected;\n}; /**\n    * toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.\n    *\n    * @param expected\n    */\n\njasmine.Matchers.prototype.toEqual = function (expected) {\n  return this.env.equals_(this.actual, expected);\n}; /**\n    * toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual\n    * @param expected\n    * @deprecated as of 1.0. Use not.toEqual() instead.\n    */\n\njasmine.Matchers.prototype.toNotEqual = function (expected) {\n  return !this.env.equals_(this.actual, expected);\n}; /**\n    * Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\n    * a pattern or a String.\n    *\n    * @param expected\n    */\n\njasmine.Matchers.prototype.toMatch = function (expected) {\n  return new RegExp(expected).test(this.actual);\n}; /**\n    * Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch\n    * @param expected\n    * @deprecated as of 1.0. Use not.toMatch() instead.\n    */\n\njasmine.Matchers.prototype.toNotMatch = function (expected) {\n  return !new RegExp(expected).test(this.actual);\n}; /**\n    * Matcher that compares the actual to jasmine.undefined.\n    */\n\njasmine.Matchers.prototype.toBeDefined = function () {\n  return this.actual !== jasmine.undefined;\n}; /**\n    * Matcher that compares the actual to jasmine.undefined.\n    */\n\njasmine.Matchers.prototype.toBeUndefined = function () {\n  return this.actual === jasmine.undefined;\n}; /**\n    * Matcher that compares the actual to null.\n    */\n\njasmine.Matchers.prototype.toBeNull = function () {\n  return this.actual === null;\n}; /**\n    * Matcher that compares the actual to NaN.\n    */\n\njasmine.Matchers.prototype.toBeNaN = function () {\n  this.message = function () {\n    return [\"Expected \" + jasmine.pp(this.actual) + \" to be NaN.\"];\n  };\n\n  return this.actual !== this.actual;\n}; /**\n    * Matcher that boolean not-nots the actual.\n    */\n\njasmine.Matchers.prototype.toBeTruthy = function () {\n  return !!this.actual;\n}; /**\n    * Matcher that boolean nots the actual.\n    */\n\njasmine.Matchers.prototype.toBeFalsy = function () {\n  return !this.actual;\n}; /**\n    * Matcher that checks to see if the actual, a Jasmine spy, was called.\n    */\n\njasmine.Matchers.prototype.toHaveBeenCalled = function () {\n  if (arguments.length > 0) {\n    throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function () {\n    return [\"Expected spy \" + this.actual.identity + \" to have been called.\", \"Expected spy \" + this.actual.identity + \" not to have been called.\"];\n  };\n\n  return this.actual.wasCalled;\n}; /** @deprecated Use expect(xxx).toHaveBeenCalled() instead */\n\njasmine.Matchers.prototype.wasCalled = jasmine.Matchers.prototype.toHaveBeenCalled; /**\n                                                                                     * Matcher that checks to see if the actual, a Jasmine spy, was not called.\n                                                                                     *\n                                                                                     * @deprecated Use expect(xxx).not.toHaveBeenCalled() instead\n                                                                                     */\n\njasmine.Matchers.prototype.wasNotCalled = function () {\n  if (arguments.length > 0) {\n    throw new Error('wasNotCalled does not take arguments');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function () {\n    return [\"Expected spy \" + this.actual.identity + \" to not have been called.\", \"Expected spy \" + this.actual.identity + \" to have been called.\"];\n  };\n\n  return !this.actual.wasCalled;\n}; /**\n    * Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.\n    *\n    * @example\n    *\n    */\n\njasmine.Matchers.prototype.toHaveBeenCalledWith = function () {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function () {\n    var invertedMessage = \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was.\";\n    var positiveMessage = \"\";\n\n    if (this.actual.callCount === 0) {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but it was never called.\";\n    } else {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but actual calls were \" + jasmine.pp(this.actual.argsForCall).replace(/^\\[ | \\]$/g, '');\n    }\n\n    return [positiveMessage, invertedMessage];\n  };\n\n  return this.env.contains_(this.actual.argsForCall, expectedArgs);\n}; /** @deprecated Use expect(xxx).toHaveBeenCalledWith() instead */\n\njasmine.Matchers.prototype.wasCalledWith = jasmine.Matchers.prototype.toHaveBeenCalledWith; /** @deprecated Use expect(xxx).not.toHaveBeenCalledWith() instead */\n\njasmine.Matchers.prototype.wasNotCalledWith = function () {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function () {\n    return [\"Expected spy not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\", \"Expected spy to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\"];\n  };\n\n  return !this.env.contains_(this.actual.argsForCall, expectedArgs);\n}; /**\n    * Matcher that checks that the expected item is an element in the actual Array.\n    *\n    * @param {Object} expected\n    */\n\njasmine.Matchers.prototype.toContain = function (expected) {\n  return this.env.contains_(this.actual, expected);\n}; /**\n    * Matcher that checks that the expected item is NOT an element in the actual Array.\n    *\n    * @param {Object} expected\n    * @deprecated as of 1.0. Use not.toContain() instead.\n    */\n\njasmine.Matchers.prototype.toNotContain = function (expected) {\n  return !this.env.contains_(this.actual, expected);\n};\n\njasmine.Matchers.prototype.toBeLessThan = function (expected) {\n  return this.actual < expected;\n};\n\njasmine.Matchers.prototype.toBeGreaterThan = function (expected) {\n  return this.actual > expected;\n}; /**\n    * Matcher that checks that the expected item is equal to the actual item\n    * up to a given level of decimal precision (default 2).\n    *\n    * @param {Number} expected\n    * @param {Number} precision, as number of decimal places\n    */\n\njasmine.Matchers.prototype.toBeCloseTo = function (expected, precision) {\n  if (!(precision === 0)) {\n    precision = precision || 2;\n  }\n\n  return Math.abs(expected - this.actual) < Math.pow(10, -precision) / 2;\n}; /**\n    * Matcher that checks that the expected exception was thrown by the actual.\n    *\n    * @param {String} [expected]\n    */\n\njasmine.Matchers.prototype.toThrow = function (expected) {\n  var result = false;\n  var exception;\n\n  if (typeof this.actual != 'function') {\n    throw new Error('Actual is not a function');\n  }\n\n  try {\n    this.actual();\n  } catch (e) {\n    exception = e;\n  }\n\n  if (exception) {\n    result = expected === jasmine.undefined || this.env.equals_(exception.message || exception, expected.message || expected);\n  }\n\n  var not = this.isNot ? \"not \" : \"\";\n\n  this.message = function () {\n    if (exception && (expected === jasmine.undefined || !this.env.equals_(exception.message || exception, expected.message || expected))) {\n      return [\"Expected function \" + not + \"to throw\", expected ? expected.message || expected : \"an exception\", \", but it threw\", exception.message || exception].join(' ');\n    } else {\n      return \"Expected function to throw an exception.\";\n    }\n  };\n\n  return result;\n};\n\njasmine.Matchers.Any = function (expectedClass) {\n  this.expectedClass = expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineMatches = function (other) {\n  if (this.expectedClass == String) {\n    return typeof other == 'string' || other instanceof String;\n  }\n\n  if (this.expectedClass == Number) {\n    return typeof other == 'number' || other instanceof Number;\n  }\n\n  if (this.expectedClass == Function) {\n    return typeof other == 'function' || other instanceof Function;\n  }\n\n  if (this.expectedClass == Object) {\n    return (typeof other === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(other)) == 'object';\n  }\n\n  return other instanceof this.expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineToString = function () {\n  return '<jasmine.any(' + this.expectedClass + ')>';\n};\n\njasmine.Matchers.ObjectContaining = function (sample) {\n  this.sample = sample;\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineMatches = function (other, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n  var env = jasmine.getEnv();\n\n  var hasKey = function (obj, keyName) {\n    return obj != null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in meteorBabelHelpers.sanitizeForInObject(this.sample)) {\n    if (!hasKey(other, property) && hasKey(this.sample, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    } else if (!env.equals_(this.sample[property], other[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (other[property] ? jasmine.util.htmlEscape(other[property].toString()) : other[property]) + \"' in expected, but was '\" + (this.sample[property] ? jasmine.util.htmlEscape(this.sample[property].toString()) : this.sample[property]) + \"' in actual.\");\n    }\n  }\n\n  return mismatchKeys.length === 0 && mismatchValues.length === 0;\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineToString = function () {\n  return \"<jasmine.objectContaining(\" + jasmine.pp(this.sample) + \")>\";\n}; // Mock setTimeout, clearTimeout\n// Contributed by Pivotal Computer Systems, www.pivotalsf.com\n\n\njasmine.FakeTimer = function () {\n  this.reset();\n  var self = this;\n\n  self.setTimeout = function (funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, false);\n    return self.timeoutsMade;\n  };\n\n  self.setInterval = function (funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, true);\n    return self.timeoutsMade;\n  };\n\n  self.clearTimeout = function (timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n  self.clearInterval = function (timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n};\n\njasmine.FakeTimer.prototype.reset = function () {\n  this.timeoutsMade = 0;\n  this.scheduledFunctions = {};\n  this.nowMillis = 0;\n};\n\njasmine.FakeTimer.prototype.tick = function (millis) {\n  var oldMillis = this.nowMillis;\n  var newMillis = oldMillis + millis;\n  this.runFunctionsWithinRange(oldMillis, newMillis);\n  this.nowMillis = newMillis;\n};\n\njasmine.FakeTimer.prototype.runFunctionsWithinRange = function (oldMillis, nowMillis) {\n  var scheduledFunc;\n  var funcsToRun = [];\n\n  for (var timeoutKey in meteorBabelHelpers.sanitizeForInObject(this.scheduledFunctions)) {\n    scheduledFunc = this.scheduledFunctions[timeoutKey];\n\n    if (scheduledFunc != jasmine.undefined && scheduledFunc.runAtMillis >= oldMillis && scheduledFunc.runAtMillis <= nowMillis) {\n      funcsToRun.push(scheduledFunc);\n      this.scheduledFunctions[timeoutKey] = jasmine.undefined;\n    }\n  }\n\n  if (funcsToRun.length > 0) {\n    funcsToRun.sort(function (a, b) {\n      return a.runAtMillis - b.runAtMillis;\n    });\n\n    for (var i = 0; i < funcsToRun.length; ++i) {\n      try {\n        var funcToRun = funcsToRun[i];\n        this.nowMillis = funcToRun.runAtMillis;\n        funcToRun.funcToCall();\n\n        if (funcToRun.recurring) {\n          this.scheduleFunction(funcToRun.timeoutKey, funcToRun.funcToCall, funcToRun.millis, true);\n        }\n      } catch (e) {}\n    }\n\n    this.runFunctionsWithinRange(oldMillis, nowMillis);\n  }\n};\n\njasmine.FakeTimer.prototype.scheduleFunction = function (timeoutKey, funcToCall, millis, recurring) {\n  this.scheduledFunctions[timeoutKey] = {\n    runAtMillis: this.nowMillis + millis,\n    funcToCall: funcToCall,\n    recurring: recurring,\n    timeoutKey: timeoutKey,\n    millis: millis\n  };\n}; /**\n    * @namespace\n    */\n\njasmine.Clock = {\n  defaultFakeTimer: new jasmine.FakeTimer(),\n  reset: function () {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.reset();\n  },\n  tick: function (millis) {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.tick(millis);\n  },\n  runFunctionsWithinRange: function (oldMillis, nowMillis) {\n    jasmine.Clock.defaultFakeTimer.runFunctionsWithinRange(oldMillis, nowMillis);\n  },\n  scheduleFunction: function (timeoutKey, funcToCall, millis, recurring) {\n    jasmine.Clock.defaultFakeTimer.scheduleFunction(timeoutKey, funcToCall, millis, recurring);\n  },\n  useMock: function () {\n    if (!jasmine.Clock.isInstalled()) {\n      var spec = jasmine.getEnv().currentSpec;\n      spec.after(jasmine.Clock.uninstallMock);\n      jasmine.Clock.installMock();\n    }\n  },\n  installMock: function () {\n    jasmine.Clock.installed = jasmine.Clock.defaultFakeTimer;\n  },\n  uninstallMock: function () {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.installed = jasmine.Clock.real;\n  },\n  real: {\n    setTimeout: jasmine.getGlobal().setTimeout,\n    clearTimeout: jasmine.getGlobal().clearTimeout,\n    setInterval: jasmine.getGlobal().setInterval,\n    clearInterval: jasmine.getGlobal().clearInterval\n  },\n  assertInstalled: function () {\n    if (!jasmine.Clock.isInstalled()) {\n      throw new Error(\"Mock clock is not installed, use jasmine.Clock.useMock()\");\n    }\n  },\n  isInstalled: function () {\n    return jasmine.Clock.installed == jasmine.Clock.defaultFakeTimer;\n  },\n  installed: null\n};\njasmine.Clock.installed = jasmine.Clock.real; //else for IE support\n\njasmine.getGlobal().setTimeout = function (funcToCall, millis) {\n  if (jasmine.Clock.installed.setTimeout.apply) {\n    return jasmine.Clock.installed.setTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setTimeout(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().setInterval = function (funcToCall, millis) {\n  if (jasmine.Clock.installed.setInterval.apply) {\n    return jasmine.Clock.installed.setInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setInterval(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().clearTimeout = function (timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearTimeout(timeoutKey);\n  }\n};\n\njasmine.getGlobal().clearInterval = function (timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearInterval(timeoutKey);\n  }\n}; /**\n    * @constructor\n    */\n\njasmine.MultiReporter = function () {\n  this.subReporters_ = [];\n};\n\njasmine.util.inherit(jasmine.MultiReporter, jasmine.Reporter);\n\njasmine.MultiReporter.prototype.addReporter = function (reporter) {\n  this.subReporters_.push(reporter);\n};\n\n(function () {\n  var functionNames = [\"reportRunnerStarting\", \"reportRunnerResults\", \"reportSuiteResults\", \"reportSpecStarting\", \"reportSpecResults\", \"log\"];\n\n  for (var i = 0; i < functionNames.length; i++) {\n    var functionName = functionNames[i];\n\n    jasmine.MultiReporter.prototype[functionName] = function (functionName) {\n      return function () {\n        for (var j = 0; j < this.subReporters_.length; j++) {\n          var subReporter = this.subReporters_[j];\n\n          if (subReporter[functionName]) {\n            subReporter[functionName].apply(subReporter, arguments);\n          }\n        }\n      };\n    }(functionName);\n  }\n})(); /**\n       * Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults\n       *\n       * @constructor\n       */\n\njasmine.NestedResults = function () {\n  /**\n   * The total count of results\n   */this.totalCount = 0; /**\n                           * Number of passed results\n                           */\n  this.passedCount = 0; /**\n                         * Number of failed results\n                         */\n  this.failedCount = 0; /**\n                         * Was this suite/spec skipped?\n                         */\n  this.skipped = false; /**\n                         * @ignore\n                         */\n  this.items_ = [];\n}; /**\n    * Roll up the result counts.\n    *\n    * @param result\n    */\n\njasmine.NestedResults.prototype.rollupCounts = function (result) {\n  this.totalCount += result.totalCount;\n  this.passedCount += result.passedCount;\n  this.failedCount += result.failedCount;\n}; /**\n    * Adds a log message.\n    * @param values Array of message parts which will be concatenated later.\n    */\n\njasmine.NestedResults.prototype.log = function (values) {\n  this.items_.push(new jasmine.MessageResult(values));\n}; /**\n    * Getter for the results: message & results.\n    */\n\njasmine.NestedResults.prototype.getItems = function () {\n  return this.items_;\n}; /**\n    * Adds a result, tracking counts (total, passed, & failed)\n    * @param {jasmine.ExpectationResult|jasmine.NestedResults} result\n    */\n\njasmine.NestedResults.prototype.addResult = function (result) {\n  if (result.type != 'log') {\n    if (result.items_) {\n      this.rollupCounts(result);\n    } else {\n      this.totalCount++;\n\n      if (result.passed()) {\n        this.passedCount++;\n      } else {\n        this.failedCount++;\n      }\n    }\n  }\n\n  this.items_.push(result);\n}; /**\n    * @returns {Boolean} True if <b>everything</b> below passed\n    */\n\njasmine.NestedResults.prototype.passed = function () {\n  return this.passedCount === this.totalCount;\n}; /**\n    * Base class for pretty printing for expectation results.\n    */\n\njasmine.PrettyPrinter = function () {\n  this.ppNestLevel_ = 0;\n}; /**\n    * Formats a value in a nice, human-readable string.\n    *\n    * @param value\n    */\n\njasmine.PrettyPrinter.prototype.format = function (value) {\n  this.ppNestLevel_++;\n\n  try {\n    if (value === jasmine.undefined) {\n      this.emitScalar('undefined');\n    } else if (value === null) {\n      this.emitScalar('null');\n    } else if (value === jasmine.getGlobal()) {\n      this.emitScalar('<global>');\n    } else if (value.jasmineToString) {\n      this.emitScalar(value.jasmineToString());\n    } else if (typeof value === 'string') {\n      this.emitString(value);\n    } else if (jasmine.isSpy(value)) {\n      this.emitScalar(\"spy on \" + value.identity);\n    } else if (value instanceof RegExp) {\n      this.emitScalar(value.toString());\n    } else if (typeof value === 'function') {\n      this.emitScalar('Function');\n    } else if (typeof value.nodeType === 'number') {\n      this.emitScalar('HTMLNode');\n    } else if (value instanceof Date) {\n      this.emitScalar('Date(' + value + ')');\n    } else if (value.__Jasmine_been_here_before__) {\n      this.emitScalar('<circular reference: ' + (jasmine.isArray_(value) ? 'Array' : 'Object') + '>');\n    } else if (jasmine.isArray_(value) || (typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) == 'object') {\n      value.__Jasmine_been_here_before__ = true;\n\n      if (jasmine.isArray_(value)) {\n        this.emitArray(value);\n      } else {\n        this.emitObject(value);\n      }\n\n      delete value.__Jasmine_been_here_before__;\n    } else {\n      this.emitScalar(value.toString());\n    }\n  } finally {\n    this.ppNestLevel_--;\n  }\n};\n\njasmine.PrettyPrinter.prototype.iterateObject = function (obj, fn) {\n  for (var property in meteorBabelHelpers.sanitizeForInObject(obj)) {\n    if (!obj.hasOwnProperty(property)) continue;\n    if (property == '__Jasmine_been_here_before__') continue;\n    fn(property, obj.__lookupGetter__ ? obj.__lookupGetter__(property) !== jasmine.undefined && obj.__lookupGetter__(property) !== null : false);\n  }\n};\n\njasmine.PrettyPrinter.prototype.emitArray = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitObject = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitScalar = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitString = jasmine.unimplementedMethod_;\n\njasmine.StringPrettyPrinter = function () {\n  jasmine.PrettyPrinter.call(this);\n  this.string = '';\n};\n\njasmine.util.inherit(jasmine.StringPrettyPrinter, jasmine.PrettyPrinter);\n\njasmine.StringPrettyPrinter.prototype.emitScalar = function (value) {\n  this.append(value);\n};\n\njasmine.StringPrettyPrinter.prototype.emitString = function (value) {\n  this.append(\"'\" + value + \"'\");\n};\n\njasmine.StringPrettyPrinter.prototype.emitArray = function (array) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Array\");\n    return;\n  }\n\n  this.append('[ ');\n\n  for (var i = 0; i < array.length; i++) {\n    if (i > 0) {\n      this.append(', ');\n    }\n\n    this.format(array[i]);\n  }\n\n  this.append(' ]');\n};\n\njasmine.StringPrettyPrinter.prototype.emitObject = function (obj) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Object\");\n    return;\n  }\n\n  var self = this;\n  this.append('{ ');\n  var first = true;\n  this.iterateObject(obj, function (property, isGetter) {\n    if (first) {\n      first = false;\n    } else {\n      self.append(', ');\n    }\n\n    self.append(property);\n    self.append(' : ');\n\n    if (isGetter) {\n      self.append('<getter>');\n    } else {\n      self.format(obj[property]);\n    }\n  });\n  this.append(' }');\n};\n\njasmine.StringPrettyPrinter.prototype.append = function (value) {\n  this.string += value;\n};\n\njasmine.Queue = function (env) {\n  this.env = env; // parallel to blocks. each true value in this array means the block will\n  // get executed even if we abort\n\n  this.ensured = [];\n  this.blocks = [];\n  this.running = false;\n  this.index = 0;\n  this.offset = 0;\n  this.abort = false;\n};\n\njasmine.Queue.prototype.addBefore = function (block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.unshift(block);\n  this.ensured.unshift(ensure);\n};\n\njasmine.Queue.prototype.add = function (block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.push(block);\n  this.ensured.push(ensure);\n};\n\njasmine.Queue.prototype.insertNext = function (block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.ensured.splice(this.index + this.offset + 1, 0, ensure);\n  this.blocks.splice(this.index + this.offset + 1, 0, block);\n  this.offset++;\n};\n\njasmine.Queue.prototype.start = function (onComplete) {\n  this.running = true;\n  this.onComplete = onComplete;\n  this.next_();\n};\n\njasmine.Queue.prototype.isRunning = function () {\n  return this.running;\n};\n\njasmine.Queue.LOOP_DONT_RECURSE = true;\n\njasmine.Queue.prototype.next_ = function () {\n  var self = this;\n  var goAgain = true;\n\n  while (goAgain) {\n    goAgain = false;\n\n    if (self.index < self.blocks.length && !(this.abort && !this.ensured[self.index])) {\n      var calledSynchronously = true;\n      var completedSynchronously = false;\n\n      var onComplete = function () {\n        if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {\n          completedSynchronously = true;\n          return;\n        }\n\n        if (self.blocks[self.index].abort) {\n          self.abort = true;\n        }\n\n        self.offset = 0;\n        self.index++;\n        var now = new Date().getTime();\n\n        if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {\n          self.env.lastUpdate = now;\n          self.env.setTimeout(function () {\n            self.next_();\n          }, 0);\n        } else {\n          if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {\n            goAgain = true;\n          } else {\n            self.next_();\n          }\n        }\n      };\n\n      self.blocks[self.index].execute(onComplete);\n      calledSynchronously = false;\n\n      if (completedSynchronously) {\n        onComplete();\n      }\n    } else {\n      self.running = false;\n\n      if (self.onComplete) {\n        self.onComplete();\n      }\n    }\n  }\n};\n\njasmine.Queue.prototype.results = function () {\n  var results = new jasmine.NestedResults();\n\n  for (var i = 0; i < this.blocks.length; i++) {\n    if (this.blocks[i].results) {\n      results.addResult(this.blocks[i].results());\n    }\n  }\n\n  return results;\n}; /**\n    * Runner\n    *\n    * @constructor\n    * @param {jasmine.Env} env\n    */\n\njasmine.Runner = function (env) {\n  var self = this;\n  self.env = env;\n  self.queue = new jasmine.Queue(env);\n  self.before_ = [];\n  self.after_ = [];\n  self.suites_ = [];\n};\n\njasmine.Runner.prototype.execute = function () {\n  var self = this;\n\n  if (self.env.reporter.reportRunnerStarting) {\n    self.env.reporter.reportRunnerStarting(this);\n  }\n\n  self.queue.start(function () {\n    self.finishCallback();\n  });\n};\n\njasmine.Runner.prototype.beforeEach = function (beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.splice(0, 0, beforeEachFunction);\n};\n\njasmine.Runner.prototype.afterEach = function (afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.splice(0, 0, afterEachFunction);\n};\n\njasmine.Runner.prototype.finishCallback = function () {\n  this.env.reporter.reportRunnerResults(this);\n};\n\njasmine.Runner.prototype.addSuite = function (suite) {\n  this.suites_.push(suite);\n};\n\njasmine.Runner.prototype.add = function (block) {\n  if (block instanceof jasmine.Suite) {\n    this.addSuite(block);\n  }\n\n  this.queue.add(block);\n};\n\njasmine.Runner.prototype.specs = function () {\n  var suites = this.suites();\n  var specs = [];\n\n  for (var i = 0; i < suites.length; i++) {\n    specs = specs.concat(suites[i].specs());\n  }\n\n  return specs;\n};\n\njasmine.Runner.prototype.suites = function () {\n  return this.suites_;\n};\n\njasmine.Runner.prototype.topLevelSuites = function () {\n  var topLevelSuites = [];\n\n  for (var i = 0; i < this.suites_.length; i++) {\n    if (!this.suites_[i].parentSuite) {\n      topLevelSuites.push(this.suites_[i]);\n    }\n  }\n\n  return topLevelSuites;\n};\n\njasmine.Runner.prototype.results = function () {\n  return this.queue.results();\n}; /**\n    * Internal representation of a Jasmine specification, or test.\n    *\n    * @constructor\n    * @param {jasmine.Env} env\n    * @param {jasmine.Suite} suite\n    * @param {String} description\n    */\n\njasmine.Spec = function (env, suite, description) {\n  if (!env) {\n    throw new Error('jasmine.Env() required');\n  }\n\n  if (!suite) {\n    throw new Error('jasmine.Suite() required');\n  }\n\n  var spec = this;\n  spec.id = env.nextSpecId ? env.nextSpecId() : null;\n  spec.env = env;\n  spec.suite = suite;\n  spec.description = description;\n  spec.queue = new jasmine.Queue(env);\n  spec.afterCallbacks = [];\n  spec.spies_ = [];\n  spec.results_ = new jasmine.NestedResults();\n  spec.results_.description = description;\n  spec.matchersClass = null;\n};\n\njasmine.Spec.prototype.getFullName = function () {\n  return this.suite.getFullName() + ' ' + this.description + '.';\n};\n\njasmine.Spec.prototype.results = function () {\n  return this.results_;\n}; /**\n    * All parameters are pretty-printed and concatenated together, then written to the spec's output.\n    *\n    * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n    */\n\njasmine.Spec.prototype.log = function () {\n  return this.results_.log(arguments);\n};\n\njasmine.Spec.prototype.runs = function (func) {\n  var block = new jasmine.Block(this.env, func, this);\n  this.addToQueue(block);\n  return this;\n};\n\njasmine.Spec.prototype.addToQueue = function (block) {\n  if (this.queue.isRunning()) {\n    this.queue.insertNext(block);\n  } else {\n    this.queue.add(block);\n  }\n}; /**\n    * @param {jasmine.ExpectationResult} result\n    */\n\njasmine.Spec.prototype.addMatcherResult = function (result) {\n  this.results_.addResult(result);\n};\n\njasmine.Spec.prototype.expect = function (actual) {\n  var positive = new (this.getMatchersClass_())(this.env, actual, this);\n  positive.not = new (this.getMatchersClass_())(this.env, actual, this, true);\n  return positive;\n}; /**\n    * Waits a fixed time period before moving to the next block.\n    *\n    * @deprecated Use waitsFor() instead\n    * @param {Number} timeout milliseconds to wait\n    */\n\njasmine.Spec.prototype.waits = function (timeout) {\n  var waitsFunc = new jasmine.WaitsBlock(this.env, timeout, this);\n  this.addToQueue(waitsFunc);\n  return this;\n}; /**\n    * Waits for the latchFunction to return true before proceeding to the next block.\n    *\n    * @param {Function} latchFunction\n    * @param {String} optional_timeoutMessage\n    * @param {Number} optional_timeout\n    */\n\njasmine.Spec.prototype.waitsFor = function (latchFunction, optional_timeoutMessage, optional_timeout) {\n  var latchFunction_ = null;\n  var optional_timeoutMessage_ = null;\n  var optional_timeout_ = null;\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n\n    switch (typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) {\n      case 'function':\n        latchFunction_ = arg;\n        break;\n\n      case 'string':\n        optional_timeoutMessage_ = arg;\n        break;\n\n      case 'number':\n        optional_timeout_ = arg;\n        break;\n    }\n  }\n\n  var waitsForFunc = new jasmine.WaitsForBlock(this.env, optional_timeout_, latchFunction_, optional_timeoutMessage_, this);\n  this.addToQueue(waitsForFunc);\n  return this;\n};\n\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: {\n      stack: e.stack\n    }\n  });\n  this.results_.addResult(expectationResult);\n};\n\njasmine.Spec.prototype.getMatchersClass_ = function () {\n  return this.matchersClass || this.env.matchersClass;\n};\n\njasmine.Spec.prototype.addMatchers = function (matchersPrototype) {\n  var parent = this.getMatchersClass_();\n\n  var newMatchersClass = function () {\n    parent.apply(this, arguments);\n  };\n\n  jasmine.util.inherit(newMatchersClass, parent);\n  jasmine.Matchers.wrapInto_(matchersPrototype, newMatchersClass);\n  this.matchersClass = newMatchersClass;\n};\n\njasmine.Spec.prototype.finishCallback = function () {\n  this.env.reporter.reportSpecResults(this);\n};\n\njasmine.Spec.prototype.finish = function (onComplete) {\n  this.removeAllSpies();\n  this.finishCallback();\n\n  if (onComplete) {\n    onComplete();\n  }\n};\n\njasmine.Spec.prototype.after = function (doAfter) {\n  if (this.queue.isRunning()) {\n    this.queue.add(new jasmine.Block(this.env, doAfter, this), true);\n  } else {\n    this.afterCallbacks.unshift(doAfter);\n  }\n};\n\njasmine.Spec.prototype.execute = function (onComplete) {\n  var spec = this;\n\n  if (!spec.env.specFilter(spec)) {\n    spec.results_.skipped = true;\n    spec.finish(onComplete);\n    return;\n  }\n\n  this.env.reporter.reportSpecStarting(this);\n  spec.env.currentSpec = spec;\n  spec.addBeforesAndAftersToQueue();\n  spec.queue.start(function () {\n    spec.finish(onComplete);\n  });\n};\n\njasmine.Spec.prototype.addBeforesAndAftersToQueue = function () {\n  var runner = this.env.currentRunner();\n  var i;\n\n  for (var suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.before_.length; i++) {\n      this.queue.addBefore(new jasmine.Block(this.env, suite.before_[i], this));\n    }\n  }\n\n  for (i = 0; i < runner.before_.length; i++) {\n    this.queue.addBefore(new jasmine.Block(this.env, runner.before_[i], this));\n  }\n\n  for (i = 0; i < this.afterCallbacks.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, this.afterCallbacks[i], this), true);\n  }\n\n  for (suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.after_.length; i++) {\n      this.queue.add(new jasmine.Block(this.env, suite.after_[i], this), true);\n    }\n  }\n\n  for (i = 0; i < runner.after_.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, runner.after_[i], this), true);\n  }\n};\n\njasmine.Spec.prototype.explodes = function () {\n  throw 'explodes function should not have been called';\n};\n\njasmine.Spec.prototype.spyOn = function (obj, methodName, ignoreMethodDoesntExist) {\n  if (obj == jasmine.undefined) {\n    throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\";\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) {\n    throw methodName + '() method does not exist';\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) {\n    throw new Error(methodName + ' has already been spied upon');\n  }\n\n  var spyObj = jasmine.createSpy(methodName);\n  this.spies_.push(spyObj);\n  spyObj.baseObj = obj;\n  spyObj.methodName = methodName;\n  spyObj.originalValue = obj[methodName];\n  obj[methodName] = spyObj;\n  return spyObj;\n};\n\njasmine.Spec.prototype.removeAllSpies = function () {\n  for (var i = 0; i < this.spies_.length; i++) {\n    var spy = this.spies_[i];\n    spy.baseObj[spy.methodName] = spy.originalValue;\n  }\n\n  this.spies_ = [];\n}; /**\n    * Internal representation of a Jasmine suite.\n    *\n    * @constructor\n    * @param {jasmine.Env} env\n    * @param {String} description\n    * @param {Function} specDefinitions\n    * @param {jasmine.Suite} parentSuite\n    */\n\njasmine.Suite = function (env, description, specDefinitions, parentSuite) {\n  var self = this;\n  self.id = env.nextSuiteId ? env.nextSuiteId() : null;\n  self.description = description;\n  self.queue = new jasmine.Queue(env);\n  self.parentSuite = parentSuite;\n  self.env = env;\n  self.before_ = [];\n  self.after_ = [];\n  self.children_ = [];\n  self.suites_ = [];\n  self.specs_ = [];\n};\n\njasmine.Suite.prototype.getFullName = function () {\n  var fullName = this.description;\n\n  for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n    fullName = parentSuite.description + ' ' + fullName;\n  }\n\n  return fullName;\n};\n\njasmine.Suite.prototype.finish = function (onComplete) {\n  this.env.reporter.reportSuiteResults(this);\n  this.finished = true;\n\n  if (typeof onComplete == 'function') {\n    onComplete();\n  }\n};\n\njasmine.Suite.prototype.beforeEach = function (beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.unshift(beforeEachFunction);\n};\n\njasmine.Suite.prototype.afterEach = function (afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.unshift(afterEachFunction);\n};\n\njasmine.Suite.prototype.results = function () {\n  return this.queue.results();\n};\n\njasmine.Suite.prototype.add = function (suiteOrSpec) {\n  this.children_.push(suiteOrSpec);\n\n  if (suiteOrSpec instanceof jasmine.Suite) {\n    this.suites_.push(suiteOrSpec);\n    this.env.currentRunner().addSuite(suiteOrSpec);\n  } else {\n    this.specs_.push(suiteOrSpec);\n  }\n\n  this.queue.add(suiteOrSpec);\n};\n\njasmine.Suite.prototype.specs = function () {\n  return this.specs_;\n};\n\njasmine.Suite.prototype.suites = function () {\n  return this.suites_;\n};\n\njasmine.Suite.prototype.children = function () {\n  return this.children_;\n};\n\njasmine.Suite.prototype.execute = function (onComplete) {\n  var self = this;\n  this.queue.start(function () {\n    self.finish(onComplete);\n  });\n};\n\njasmine.WaitsBlock = function (env, timeout, spec) {\n  this.timeout = timeout;\n  jasmine.Block.call(this, env, null, spec);\n};\n\njasmine.util.inherit(jasmine.WaitsBlock, jasmine.Block);\n\njasmine.WaitsBlock.prototype.execute = function (onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + this.timeout + ' ms...');\n  }\n\n  this.env.setTimeout(function () {\n    onComplete();\n  }, this.timeout);\n}; /**\n    * A block which waits for some condition to become true, with timeout.\n    *\n    * @constructor\n    * @extends jasmine.Block\n    * @param {jasmine.Env} env The Jasmine environment.\n    * @param {Number} timeout The maximum time in milliseconds to wait for the condition to become true.\n    * @param {Function} latchFunction A function which returns true when the desired condition has been met.\n    * @param {String} message The message to display if the desired condition hasn't been met within the given time period.\n    * @param {jasmine.Spec} spec The Jasmine spec.\n    */\n\njasmine.WaitsForBlock = function (env, timeout, latchFunction, message, spec) {\n  this.timeout = timeout || env.defaultTimeoutInterval;\n  this.latchFunction = latchFunction;\n  this.message = message;\n  this.totalTimeSpentWaitingForLatch = 0;\n  jasmine.Block.call(this, env, null, spec);\n};\n\njasmine.util.inherit(jasmine.WaitsForBlock, jasmine.Block);\njasmine.WaitsForBlock.TIMEOUT_INCREMENT = 10;\n\njasmine.WaitsForBlock.prototype.execute = function (onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + (this.message || 'something to happen'));\n  }\n\n  var latchFunctionResult;\n\n  try {\n    latchFunctionResult = this.latchFunction.apply(this.spec);\n  } catch (e) {\n    this.spec.fail(e);\n    onComplete();\n    return;\n  }\n\n  if (latchFunctionResult) {\n    onComplete();\n  } else if (this.totalTimeSpentWaitingForLatch >= this.timeout) {\n    var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen');\n    this.spec.fail({\n      name: 'timeout',\n      message: message\n    });\n    this.abort = true;\n    onComplete();\n  } else {\n    this.totalTimeSpentWaitingForLatch += jasmine.WaitsForBlock.TIMEOUT_INCREMENT;\n    var self = this;\n    this.env.setTimeout(function () {\n      self.execute(onComplete);\n    }, jasmine.WaitsForBlock.TIMEOUT_INCREMENT);\n  }\n};\n\njasmine.version_ = {\n  \"major\": 1,\n  \"minor\": 3,\n  \"build\": 1,\n  \"revision\": 1354556913\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js"],"names":["isCommonJS","window","exports","jasmine","unimplementedMethod_","Error","undefined","___undefined___","VERBOSE","DEFAULT_UPDATE_INTERVAL","MAX_PRETTY_PRINT_DEPTH","DEFAULT_TIMEOUT_INTERVAL","CATCH_EXCEPTIONS","getGlobal","bindOriginal_","base","name","original","apply","arguments","setTimeout","clearTimeout","setInterval","clearInterval","MessageResult","values","type","trace","prototype","toString","text","i","length","isString_","pp","ExpectationResult","params","matcherName","passed_","passed","expected","actual","message","getEnv","env","currentEnv_","Env","isArray_","value","isA_","isNumber_","typeName","Object","stringPrettyPrinter","StringPrettyPrinter","format","string","isDomNode","obj","nodeType","any","clazz","Matchers","Any","objectContaining","sample","ObjectContaining","Spy","identity","isSpy","plan","mostRecentCall","argsForCall","calls","andCallThrough","originalValue","andReturn","andThrow","exceptionMsg","andCallFake","fakeFunc","reset","wasCalled","callCount","createSpy","spyObj","args","util","argsToArray","object","push","spy","prop","putativeSpy","createSpyObj","baseName","methodNames","log","spec","currentSpec","spyOn","methodName","it","desc","func","xit","expect","runs","waits","timeout","waitsFor","latchFunction","optional_timeoutMessage","optional_timeout","beforeEach","beforeEachFunction","afterEach","afterEachFunction","describe","description","specDefinitions","xdescribe","XmlHttpRequest","XMLHttpRequest","tryIt","f","e","xhr","ActiveXObject","inherit","childClass","parentClass","subclass","formatException","lineNumber","line","file","sourceURL","fileName","htmlEscape","str","replace","arrayOfArgs","extend","destination","source","property","currentSuite","currentRunner_","Runner","reporter","MultiReporter","updateInterval","defaultTimeoutInterval","lastUpdate","specFilter","nextSpecId_","nextSuiteId_","equalityTesters_","matchersClass","wrapInto_","version","version_","versionString","major","minor","build","release_candidate","revision","nextSpecId","nextSuiteId","addReporter","execute","suite","Suite","parentSuite","add","declarationError","call","currentRunner","Spec","id","compareRegExps_","a","b","mismatchKeys","mismatchValues","ignoreCase","global","multiline","sticky","compareObjects_","__Jasmine_been_here_before__","hasKey","keyName","equals_","equalityTester","result","Date","getTime","jasmineMatches","matches","RegExp","contains_","haystack","needle","indexOf","addEqualityTester","Reporter","reportRunnerStarting","runner","reportRunnerResults","reportSuiteResults","reportSpecStarting","reportSpecResults","Block","onComplete","fail","JsApiReporter","started","finished","suites_","results_","suites","topLevelSuites","summarize_","suiteOrSpec","isSuite","summary","children","results","resultsForSpec","specId","messages","getItems","failedCount","resultsForSpecs","specIds","summarizeResult_","summaryMessages","messagesLength","messageIndex","resultMessage","stack","opt_isNot","isNot","reportWasCalled_","report","failing_message","details","orig","matcherFn_","matcherFunction","matcherArgs","englishyPredicate","s","toLowerCase","expectationResult","addMatcherResult","toBe","toNotBe","toEqual","toNotEqual","toMatch","test","toNotMatch","toBeDefined","toBeUndefined","toBeNull","toBeNaN","toBeTruthy","toBeFalsy","toHaveBeenCalled","wasNotCalled","toHaveBeenCalledWith","expectedArgs","invertedMessage","positiveMessage","wasCalledWith","wasNotCalledWith","toContain","toNotContain","toBeLessThan","toBeGreaterThan","toBeCloseTo","precision","Math","abs","pow","toThrow","exception","not","join","expectedClass","other","String","Number","Function","jasmineToString","FakeTimer","self","funcToCall","millis","timeoutsMade","scheduleFunction","timeoutKey","scheduledFunctions","nowMillis","tick","oldMillis","newMillis","runFunctionsWithinRange","scheduledFunc","funcsToRun","runAtMillis","sort","funcToRun","recurring","Clock","defaultFakeTimer","assertInstalled","useMock","isInstalled","after","uninstallMock","installMock","installed","real","subReporters_","functionNames","functionName","j","subReporter","NestedResults","totalCount","passedCount","skipped","items_","rollupCounts","addResult","PrettyPrinter","ppNestLevel_","emitScalar","emitString","emitArray","emitObject","iterateObject","fn","hasOwnProperty","__lookupGetter__","append","array","first","isGetter","Queue","ensured","blocks","running","index","offset","abort","addBefore","block","ensure","unshift","insertNext","splice","start","next_","isRunning","LOOP_DONT_RECURSE","goAgain","calledSynchronously","completedSynchronously","now","queue","before_","after_","finishCallback","addSuite","specs","concat","afterCallbacks","spies_","getFullName","addToQueue","positive","getMatchersClass_","waitsFunc","WaitsBlock","latchFunction_","optional_timeoutMessage_","optional_timeout_","arg","waitsForFunc","WaitsForBlock","addMatchers","matchersPrototype","parent","newMatchersClass","finish","removeAllSpies","doAfter","addBeforesAndAftersToQueue","explodes","ignoreMethodDoesntExist","baseObj","children_","specs_","fullName","totalTimeSpentWaitingForLatch","TIMEOUT_INCREMENT","latchFunctionResult"],"mappings":"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","file":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/lib/jasmine-1.3.1/jasmine.js.map","sourcesContent":["var isCommonJS = typeof window == \"undefined\" && typeof exports == \"object\";\n\n/**\n * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.\n *\n * @namespace\n */\nvar jasmine = {};\nif (isCommonJS) exports.jasmine = jasmine;\n/**\n * @private\n */\njasmine.unimplementedMethod_ = function() {\n  throw new Error(\"unimplemented method\");\n};\n\n/**\n * Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\n * a plain old variable and may be redefined by somebody else.\n *\n * @private\n */\njasmine.undefined = jasmine.___undefined___;\n\n/**\n * Show diagnostic messages in the console if set to true\n *\n */\njasmine.VERBOSE = false;\n\n/**\n * Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.\n *\n */\njasmine.DEFAULT_UPDATE_INTERVAL = 250;\n\n/**\n * Maximum levels of nesting that will be included when an object is pretty-printed\n */\njasmine.MAX_PRETTY_PRINT_DEPTH = 40;\n\n/**\n * Default timeout interval in milliseconds for waitsFor() blocks.\n */\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000;\n\n/**\n * By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\n * Set to false to let the exception bubble up in the browser.\n *\n */\njasmine.CATCH_EXCEPTIONS = true;\n\njasmine.getGlobal = function() {\n  function getGlobal() {\n    return this;\n  }\n\n  return getGlobal();\n};\n\n/**\n * Allows for bound functions to be compared.  Internal use only.\n *\n * @ignore\n * @private\n * @param base {Object} bound 'this' for the function\n * @param name {Function} function to find\n */\njasmine.bindOriginal_ = function(base, name) {\n  var original = base[name];\n  if (original.apply) {\n    return function() {\n      return original.apply(base, arguments);\n    };\n  } else {\n    // IE support\n    return jasmine.getGlobal()[name];\n  }\n};\n\njasmine.setTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'setTimeout');\njasmine.clearTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearTimeout');\njasmine.setInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'setInterval');\njasmine.clearInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearInterval');\n\njasmine.MessageResult = function(values) {\n  this.type = 'log';\n  this.values = values;\n  this.trace = new Error(); // todo: test better\n};\n\njasmine.MessageResult.prototype.toString = function() {\n  var text = \"\";\n  for (var i = 0; i < this.values.length; i++) {\n    if (i > 0) text += \" \";\n    if (jasmine.isString_(this.values[i])) {\n      text += this.values[i];\n    } else {\n      text += jasmine.pp(this.values[i]);\n    }\n  }\n  return text;\n};\n\njasmine.ExpectationResult = function(params) {\n  this.type = 'expect';\n  this.matcherName = params.matcherName;\n  this.passed_ = params.passed;\n  this.expected = params.expected;\n  this.actual = params.actual;\n  this.message = this.passed_ ? 'Passed.' : params.message;\n\n  var trace = (params.trace || new Error(this.message));\n  this.trace = this.passed_ ? '' : trace;\n};\n\njasmine.ExpectationResult.prototype.toString = function () {\n  return this.message;\n};\n\njasmine.ExpectationResult.prototype.passed = function () {\n  return this.passed_;\n};\n\n/**\n * Getter for the Jasmine environment. Ensures one gets created\n */\njasmine.getEnv = function() {\n  var env = jasmine.currentEnv_ = jasmine.currentEnv_ || new jasmine.Env();\n  return env;\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isArray_ = function(value) {\n  return jasmine.isA_(\"Array\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isString_ = function(value) {\n  return jasmine.isA_(\"String\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isNumber_ = function(value) {\n  return jasmine.isA_(\"Number\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param {String} typeName\n * @param value\n * @returns {Boolean}\n */\njasmine.isA_ = function(typeName, value) {\n  return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n};\n\n/**\n * Pretty printer for expecations.  Takes any object and turns it into a human-readable string.\n *\n * @param value {Object} an object to be outputted\n * @returns {String}\n */\njasmine.pp = function(value) {\n  var stringPrettyPrinter = new jasmine.StringPrettyPrinter();\n  stringPrettyPrinter.format(value);\n  return stringPrettyPrinter.string;\n};\n\n/**\n * Returns true if the object is a DOM Node.\n *\n * @param {Object} obj object to check\n * @returns {Boolean}\n */\njasmine.isDomNode = function(obj) {\n  return obj.nodeType > 0;\n};\n\n/**\n * Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.\n *\n * @example\n * // don't care about which function is passed in, as long as it's a function\n * expect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));\n *\n * @param {Class} clazz\n * @returns matchable object of the type clazz\n */\njasmine.any = function(clazz) {\n  return new jasmine.Matchers.Any(clazz);\n};\n\n/**\n * Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\n * attributes on the object.\n *\n * @example\n * // don't care about any other attributes than foo.\n * expect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});\n *\n * @param sample {Object} sample\n * @returns matchable object for the sample\n */\njasmine.objectContaining = function (sample) {\n    return new jasmine.Matchers.ObjectContaining(sample);\n};\n\n/**\n * Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n *\n * Spies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\n * expectation syntax. Spies can be checked if they were called or not and what the calling params were.\n *\n * A Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n *\n * Spies are torn down at the end of every spec.\n *\n * Note: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.\n *\n * @example\n * // a stub\n * var myStub = jasmine.createSpy('myStub');  // can be used anywhere\n *\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // actual foo.not will not be called, execution stops\n * spyOn(foo, 'not');\n\n // foo.not spied upon, execution will continue to implementation\n * spyOn(foo, 'not').andCallThrough();\n *\n * // fake example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // foo.not(val) will return val\n * spyOn(foo, 'not').andCallFake(function(value) {return value;});\n *\n * // mock example\n * foo.not(7 == 7);\n * expect(foo.not).toHaveBeenCalled();\n * expect(foo.not).toHaveBeenCalledWith(true);\n *\n * @constructor\n * @see spyOn, jasmine.createSpy, jasmine.createSpyObj\n * @param {String} name\n */\njasmine.Spy = function(name) {\n  /**\n   * The name of the spy, if provided.\n   */\n  this.identity = name || 'unknown';\n  /**\n   *  Is this Object a spy?\n   */\n  this.isSpy = true;\n  /**\n   * The actual function this spy stubs.\n   */\n  this.plan = function() {\n  };\n  /**\n   * Tracking of the most recent call to the spy.\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy.mostRecentCall.args = [1, 2];\n   */\n  this.mostRecentCall = {};\n\n  /**\n   * Holds arguments for each call to the spy, indexed by call count\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy(7, 8);\n   * mySpy.mostRecentCall.args = [7, 8];\n   * mySpy.argsForCall[0] = [1, 2];\n   * mySpy.argsForCall[1] = [7, 8];\n   */\n  this.argsForCall = [];\n  this.calls = [];\n};\n\n/**\n * Tells a spy to call through to the actual implemenatation.\n *\n * @example\n * var foo = {\n *   bar: function() { // do some stuff }\n * }\n *\n * // defining a spy on an existing property: foo.bar\n * spyOn(foo, 'bar').andCallThrough();\n */\njasmine.Spy.prototype.andCallThrough = function() {\n  this.plan = this.originalValue;\n  return this;\n};\n\n/**\n * For setting the return value of a spy.\n *\n * @example\n * // defining a spy from scratch: foo() returns 'baz'\n * var foo = jasmine.createSpy('spy on foo').andReturn('baz');\n *\n * // defining a spy on an existing property: foo.bar() returns 'baz'\n * spyOn(foo, 'bar').andReturn('baz');\n *\n * @param {Object} value\n */\njasmine.Spy.prototype.andReturn = function(value) {\n  this.plan = function() {\n    return value;\n  };\n  return this;\n};\n\n/**\n * For throwing an exception when a spy is called.\n *\n * @example\n * // defining a spy from scratch: foo() throws an exception w/ message 'ouch'\n * var foo = jasmine.createSpy('spy on foo').andThrow('baz');\n *\n * // defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\n * spyOn(foo, 'bar').andThrow('baz');\n *\n * @param {String} exceptionMsg\n */\njasmine.Spy.prototype.andThrow = function(exceptionMsg) {\n  this.plan = function() {\n    throw exceptionMsg;\n  };\n  return this;\n};\n\n/**\n * Calls an alternate implementation when a spy is called.\n *\n * @example\n * var baz = function() {\n *   // do some stuff, return something\n * }\n * // defining a spy from scratch: foo() calls the function baz\n * var foo = jasmine.createSpy('spy on foo').andCall(baz);\n *\n * // defining a spy on an existing property: foo.bar() calls an anonymnous function\n * spyOn(foo, 'bar').andCall(function() { return 'baz';} );\n *\n * @param {Function} fakeFunc\n */\njasmine.Spy.prototype.andCallFake = function(fakeFunc) {\n  this.plan = fakeFunc;\n  return this;\n};\n\n/**\n * Resets all of a spy's the tracking variables so that it can be used again.\n *\n * @example\n * spyOn(foo, 'bar');\n *\n * foo.bar();\n *\n * expect(foo.bar.callCount).toEqual(1);\n *\n * foo.bar.reset();\n *\n * expect(foo.bar.callCount).toEqual(0);\n */\njasmine.Spy.prototype.reset = function() {\n  this.wasCalled = false;\n  this.callCount = 0;\n  this.argsForCall = [];\n  this.calls = [];\n  this.mostRecentCall = {};\n};\n\njasmine.createSpy = function(name) {\n\n  var spyObj = function() {\n    spyObj.wasCalled = true;\n    spyObj.callCount++;\n    var args = jasmine.util.argsToArray(arguments);\n    spyObj.mostRecentCall.object = this;\n    spyObj.mostRecentCall.args = args;\n    spyObj.argsForCall.push(args);\n    spyObj.calls.push({object: this, args: args});\n    return spyObj.plan.apply(this, arguments);\n  };\n\n  var spy = new jasmine.Spy(name);\n\n  for (var prop in spy) {\n    spyObj[prop] = spy[prop];\n  }\n\n  spyObj.reset();\n\n  return spyObj;\n};\n\n/**\n * Determines whether an object is a spy.\n *\n * @param {jasmine.Spy|Object} putativeSpy\n * @returns {Boolean}\n */\njasmine.isSpy = function(putativeSpy) {\n  return putativeSpy && putativeSpy.isSpy;\n};\n\n/**\n * Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\n * large in one call.\n *\n * @param {String} baseName name of spy class\n * @param {Array} methodNames array of names of methods to make spies\n */\njasmine.createSpyObj = function(baseName, methodNames) {\n  if (!jasmine.isArray_(methodNames) || methodNames.length === 0) {\n    throw new Error('createSpyObj requires a non-empty array of method names to create spies for');\n  }\n  var obj = {};\n  for (var i = 0; i < methodNames.length; i++) {\n    obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]);\n  }\n  return obj;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.log = function() {\n  var spec = jasmine.getEnv().currentSpec;\n  spec.log.apply(spec, arguments);\n};\n\n/**\n * Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.\n *\n * @example\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n * spyOn(foo, 'not'); // actual foo.not will not be called, execution stops\n *\n * @see jasmine.createSpy\n * @param obj\n * @param methodName\n * @return {jasmine.Spy} a Jasmine spy that can be chained with all spy methods\n */\nvar spyOn = function(obj, methodName) {\n  return jasmine.getEnv().currentSpec.spyOn(obj, methodName);\n};\nif (isCommonJS) exports.spyOn = spyOn;\n\n/**\n * Creates a Jasmine spec that will be added to the current suite.\n *\n * // TODO: pending tests\n *\n * @example\n * it('should be true', function() {\n *   expect(true).toEqual(true);\n * });\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar it = function(desc, func) {\n  return jasmine.getEnv().it(desc, func);\n};\nif (isCommonJS) exports.it = it;\n\n/**\n * Creates a <em>disabled</em> Jasmine spec.\n *\n * A convenience method that allows existing specs to be disabled temporarily during development.\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar xit = function(desc, func) {\n  return jasmine.getEnv().xit(desc, func);\n};\nif (isCommonJS) exports.xit = xit;\n\n/**\n * Starts a chain for a Jasmine expectation.\n *\n * It is passed an Object that is the actual value and should chain to one of the many\n * jasmine.Matchers functions.\n *\n * @param {Object} actual Actual value to test against and expected value\n * @return {jasmine.Matchers}\n */\nvar expect = function(actual) {\n  return jasmine.getEnv().currentSpec.expect(actual);\n};\nif (isCommonJS) exports.expect = expect;\n\n/**\n * Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.\n *\n * @param {Function} func Function that defines part of a jasmine spec.\n */\nvar runs = function(func) {\n  jasmine.getEnv().currentSpec.runs(func);\n};\nif (isCommonJS) exports.runs = runs;\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\nvar waits = function(timeout) {\n  jasmine.getEnv().currentSpec.waits(timeout);\n};\nif (isCommonJS) exports.waits = waits;\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\nvar waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments);\n};\nif (isCommonJS) exports.waitsFor = waitsFor;\n\n/**\n * A function that is called before each spec in a suite.\n *\n * Used for spec setup, including validating assumptions.\n *\n * @param {Function} beforeEachFunction\n */\nvar beforeEach = function(beforeEachFunction) {\n  jasmine.getEnv().beforeEach(beforeEachFunction);\n};\nif (isCommonJS) exports.beforeEach = beforeEach;\n\n/**\n * A function that is called after each spec in a suite.\n *\n * Used for restoring any state that is hijacked during spec execution.\n *\n * @param {Function} afterEachFunction\n */\nvar afterEach = function(afterEachFunction) {\n  jasmine.getEnv().afterEach(afterEachFunction);\n};\nif (isCommonJS) exports.afterEach = afterEach;\n\n/**\n * Defines a suite of specifications.\n *\n * Stores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\n * are accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\n * of setup in some tests.\n *\n * @example\n * // TODO: a simple suite\n *\n * // TODO: a simple suite with a nested describe block\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar describe = function(description, specDefinitions) {\n  return jasmine.getEnv().describe(description, specDefinitions);\n};\nif (isCommonJS) exports.describe = describe;\n\n/**\n * Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar xdescribe = function(description, specDefinitions) {\n  return jasmine.getEnv().xdescribe(description, specDefinitions);\n};\nif (isCommonJS) exports.xdescribe = xdescribe;\n\n\n// Provide the XMLHttpRequest class for IE 5.x-6.x:\njasmine.XmlHttpRequest = (typeof XMLHttpRequest == \"undefined\") ? function() {\n  function tryIt(f) {\n    try {\n      return f();\n    } catch(e) {\n    }\n    return null;\n  }\n\n  var xhr = tryIt(function() {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    });\n\n  if (!xhr) throw new Error(\"This browser does not support XMLHttpRequest.\");\n\n  return xhr;\n} : XMLHttpRequest;\n/**\n * @namespace\n */\njasmine.util = {};\n\n/**\n * Declare that a child class inherit it's prototype from the parent class.\n *\n * @private\n * @param {Function} childClass\n * @param {Function} parentClass\n */\njasmine.util.inherit = function(childClass, parentClass) {\n  /**\n   * @private\n   */\n  var subclass = function() {\n  };\n  subclass.prototype = parentClass.prototype;\n  childClass.prototype = new subclass();\n};\n\njasmine.util.formatException = function(e) {\n  var lineNumber;\n  if (e.line) {\n    lineNumber = e.line;\n  }\n  else if (e.lineNumber) {\n    lineNumber = e.lineNumber;\n  }\n\n  var file;\n\n  if (e.sourceURL) {\n    file = e.sourceURL;\n  }\n  else if (e.fileName) {\n    file = e.fileName;\n  }\n\n  var message = (e.name && e.message) ? (e.name + ': ' + e.message) : e.toString();\n\n  if (file && lineNumber) {\n    message += ' in ' + file + ' (line ' + lineNumber + ')';\n  }\n\n  return message;\n};\n\njasmine.util.htmlEscape = function(str) {\n  if (!str) return str;\n  return str.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\njasmine.util.argsToArray = function(args) {\n  var arrayOfArgs = [];\n  for (var i = 0; i < args.length; i++) arrayOfArgs.push(args[i]);\n  return arrayOfArgs;\n};\n\njasmine.util.extend = function(destination, source) {\n  for (var property in source) destination[property] = source[property];\n  return destination;\n};\n\n/**\n * Environment for Jasmine\n *\n * @constructor\n */\njasmine.Env = function() {\n  this.currentSpec = null;\n  this.currentSuite = null;\n  this.currentRunner_ = new jasmine.Runner(this);\n\n  this.reporter = new jasmine.MultiReporter();\n\n  this.updateInterval = jasmine.DEFAULT_UPDATE_INTERVAL;\n  this.defaultTimeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n  this.lastUpdate = 0;\n  this.specFilter = function() {\n    return true;\n  };\n\n  this.nextSpecId_ = 0;\n  this.nextSuiteId_ = 0;\n  this.equalityTesters_ = [];\n\n  // wrap matchers\n  this.matchersClass = function() {\n    jasmine.Matchers.apply(this, arguments);\n  };\n  jasmine.util.inherit(this.matchersClass, jasmine.Matchers);\n\n  jasmine.Matchers.wrapInto_(jasmine.Matchers.prototype, this.matchersClass);\n};\n\n\njasmine.Env.prototype.setTimeout = jasmine.setTimeout;\njasmine.Env.prototype.clearTimeout = jasmine.clearTimeout;\njasmine.Env.prototype.setInterval = jasmine.setInterval;\njasmine.Env.prototype.clearInterval = jasmine.clearInterval;\n\n/**\n * @returns an object containing jasmine version build info, if set.\n */\njasmine.Env.prototype.version = function () {\n  if (jasmine.version_) {\n    return jasmine.version_;\n  } else {\n    throw new Error('Version not set');\n  }\n};\n\n/**\n * @returns string containing jasmine version build info, if set.\n */\njasmine.Env.prototype.versionString = function() {\n  if (!jasmine.version_) {\n    return \"version unknown\";\n  }\n\n  var version = this.version();\n  var versionString = version.major + \".\" + version.minor + \".\" + version.build;\n  if (version.release_candidate) {\n    versionString += \".rc\" + version.release_candidate;\n  }\n  versionString += \" revision \" + version.revision;\n  return versionString;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSpecId = function () {\n  return this.nextSpecId_++;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSuiteId = function () {\n  return this.nextSuiteId_++;\n};\n\n/**\n * Register a reporter to receive status updates from Jasmine.\n * @param {jasmine.Reporter} reporter An object which will receive status updates.\n */\njasmine.Env.prototype.addReporter = function(reporter) {\n  this.reporter.addReporter(reporter);\n};\n\njasmine.Env.prototype.execute = function() {\n  this.currentRunner_.execute();\n};\n\njasmine.Env.prototype.describe = function(description, specDefinitions) {\n  var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite);\n\n  var parentSuite = this.currentSuite;\n  if (parentSuite) {\n    parentSuite.add(suite);\n  } else {\n    this.currentRunner_.add(suite);\n  }\n\n  this.currentSuite = suite;\n\n  var declarationError = null;\n  try {\n    specDefinitions.call(suite);\n  } catch(e) {\n    declarationError = e;\n  }\n\n  if (declarationError) {\n    this.it(\"encountered a declaration exception\", function() {\n      throw declarationError;\n    });\n  }\n\n  this.currentSuite = parentSuite;\n\n  return suite;\n};\n\njasmine.Env.prototype.beforeEach = function(beforeEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.beforeEach(beforeEachFunction);\n  } else {\n    this.currentRunner_.beforeEach(beforeEachFunction);\n  }\n};\n\njasmine.Env.prototype.currentRunner = function () {\n  return this.currentRunner_;\n};\n\njasmine.Env.prototype.afterEach = function(afterEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.afterEach(afterEachFunction);\n  } else {\n    this.currentRunner_.afterEach(afterEachFunction);\n  }\n\n};\n\njasmine.Env.prototype.xdescribe = function(desc, specDefinitions) {\n  return {\n    execute: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.it = function(description, func) {\n  var spec = new jasmine.Spec(this, this.currentSuite, description);\n  this.currentSuite.add(spec);\n  this.currentSpec = spec;\n\n  if (func) {\n    spec.runs(func);\n  }\n\n  return spec;\n};\n\njasmine.Env.prototype.xit = function(desc, func) {\n  return {\n    id: this.nextSpecId(),\n    runs: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.compareRegExps_ = function(a, b, mismatchKeys, mismatchValues) {\n  if (a.source != b.source)\n    mismatchValues.push(\"expected pattern /\" + b.source + \"/ is not equal to the pattern /\" + a.source + \"/\");\n\n  if (a.ignoreCase != b.ignoreCase)\n    mismatchValues.push(\"expected modifier i was\" + (b.ignoreCase ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.global != b.global)\n    mismatchValues.push(\"expected modifier g was\" + (b.global ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.multiline != b.multiline)\n    mismatchValues.push(\"expected modifier m was\" + (b.multiline ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.sticky != b.sticky)\n    mismatchValues.push(\"expected modifier y was\" + (b.sticky ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  return (mismatchValues.length === 0);\n};\n\njasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) {\n  if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) {\n    return true;\n  }\n\n  a.__Jasmine_been_here_before__ = b;\n  b.__Jasmine_been_here_before__ = a;\n\n  var hasKey = function(obj, keyName) {\n    return obj !== null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in b) {\n    if (!hasKey(a, property) && hasKey(b, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n  }\n  for (property in a) {\n    if (!hasKey(b, property) && hasKey(a, property)) {\n      mismatchKeys.push(\"expected missing key '\" + property + \"', but present in actual.\");\n    }\n  }\n  for (property in b) {\n    if (property == '__Jasmine_been_here_before__') continue;\n    if (!this.equals_(a[property], b[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString()) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString()) : a[property]) + \"' in actual.\");\n    }\n  }\n\n  if (jasmine.isArray_(a) && jasmine.isArray_(b) && a.length != b.length) {\n    mismatchValues.push(\"arrays were not the same length\");\n  }\n\n  delete a.__Jasmine_been_here_before__;\n  delete b.__Jasmine_been_here_before__;\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Env.prototype.equals_ = function(a, b, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  for (var i = 0; i < this.equalityTesters_.length; i++) {\n    var equalityTester = this.equalityTesters_[i];\n    var result = equalityTester(a, b, this, mismatchKeys, mismatchValues);\n    if (result !== jasmine.undefined) return result;\n  }\n\n  if (a === b) return true;\n\n  if (a === jasmine.undefined || a === null || b === jasmine.undefined || b === null) {\n    return (a == jasmine.undefined && b == jasmine.undefined);\n  }\n\n  if (jasmine.isDomNode(a) && jasmine.isDomNode(b)) {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() == b.getTime();\n  }\n\n  if (a.jasmineMatches) {\n    return a.jasmineMatches(b);\n  }\n\n  if (b.jasmineMatches) {\n    return b.jasmineMatches(a);\n  }\n\n  if (a instanceof jasmine.Matchers.ObjectContaining) {\n    return a.matches(b);\n  }\n\n  if (b instanceof jasmine.Matchers.ObjectContaining) {\n    return b.matches(a);\n  }\n\n  if (jasmine.isString_(a) && jasmine.isString_(b)) {\n    return (a == b);\n  }\n\n  if (jasmine.isNumber_(a) && jasmine.isNumber_(b)) {\n    return (a == b);\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return this.compareRegExps_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    return this.compareObjects_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  //Straight check\n  return (a === b);\n};\n\njasmine.Env.prototype.contains_ = function(haystack, needle) {\n  if (jasmine.isArray_(haystack)) {\n    for (var i = 0; i < haystack.length; i++) {\n      if (this.equals_(haystack[i], needle)) return true;\n    }\n    return false;\n  }\n  return haystack.indexOf(needle) >= 0;\n};\n\njasmine.Env.prototype.addEqualityTester = function(equalityTester) {\n  this.equalityTesters_.push(equalityTester);\n};\n/** No-op base class for Jasmine reporters.\n *\n * @constructor\n */\njasmine.Reporter = function() {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerStarting = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerResults = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecStarting = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecResults = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.log = function(str) {\n};\n\n/**\n * Blocks are functions with executable code that make up a spec.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {Function} func\n * @param {jasmine.Spec} spec\n */\njasmine.Block = function(env, func, spec) {\n  this.env = env;\n  this.func = func;\n  this.spec = spec;\n};\n\njasmine.Block.prototype.execute = function(onComplete) {\n  if (!jasmine.CATCH_EXCEPTIONS) {\n    this.func.apply(this.spec);\n  }\n  else {\n    try {\n      this.func.apply(this.spec);\n    } catch (e) {\n      this.spec.fail(e);\n    }\n  }\n  onComplete();\n};\n/** JavaScript API reporter.\n *\n * @constructor\n */\njasmine.JsApiReporter = function() {\n  this.started = false;\n  this.finished = false;\n  this.suites_ = [];\n  this.results_ = {};\n};\n\njasmine.JsApiReporter.prototype.reportRunnerStarting = function(runner) {\n  this.started = true;\n  var suites = runner.topLevelSuites();\n  for (var i = 0; i < suites.length; i++) {\n    var suite = suites[i];\n    this.suites_.push(this.summarize_(suite));\n  }\n};\n\njasmine.JsApiReporter.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.JsApiReporter.prototype.summarize_ = function(suiteOrSpec) {\n  var isSuite = suiteOrSpec instanceof jasmine.Suite;\n  var summary = {\n    id: suiteOrSpec.id,\n    name: suiteOrSpec.description,\n    type: isSuite ? 'suite' : 'spec',\n    children: []\n  };\n  \n  if (isSuite) {\n    var children = suiteOrSpec.children();\n    for (var i = 0; i < children.length; i++) {\n      summary.children.push(this.summarize_(children[i]));\n    }\n  }\n  return summary;\n};\n\njasmine.JsApiReporter.prototype.results = function() {\n  return this.results_;\n};\n\njasmine.JsApiReporter.prototype.resultsForSpec = function(specId) {\n  return this.results_[specId];\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportRunnerResults = function(runner) {\n  this.finished = true;\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSpecResults = function(spec) {\n  this.results_[spec.id] = {\n    messages: spec.results().getItems(),\n    result: spec.results().failedCount > 0 ? \"failed\" : \"passed\"\n  };\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.log = function(str) {\n};\n\njasmine.JsApiReporter.prototype.resultsForSpecs = function(specIds){\n  var results = {};\n  for (var i = 0; i < specIds.length; i++) {\n    var specId = specIds[i];\n    results[specId] = this.summarizeResult_(this.results_[specId]);\n  }\n  return results;\n};\n\njasmine.JsApiReporter.prototype.summarizeResult_ = function(result){\n  var summaryMessages = [];\n  var messagesLength = result.messages.length;\n  for (var messageIndex = 0; messageIndex < messagesLength; messageIndex++) {\n    var resultMessage = result.messages[messageIndex];\n    summaryMessages.push({\n      text: resultMessage.type == 'log' ? resultMessage.toString() : jasmine.undefined,\n      passed: resultMessage.passed ? resultMessage.passed() : true,\n      type: resultMessage.type,\n      message: resultMessage.message,\n      trace: {\n        stack: resultMessage.passed && !resultMessage.passed() ? resultMessage.trace.stack : jasmine.undefined\n      }\n    });\n  }\n\n  return {\n    result : result.result,\n    messages : summaryMessages\n  };\n};\n\n/**\n * @constructor\n * @param {jasmine.Env} env\n * @param actual\n * @param {jasmine.Spec} spec\n */\njasmine.Matchers = function(env, actual, spec, opt_isNot) {\n  this.env = env;\n  this.actual = actual;\n  this.spec = spec;\n  this.isNot = opt_isNot || false;\n  this.reportWasCalled_ = false;\n};\n\n// todo: @deprecated as of Jasmine 0.11, remove soon [xw]\njasmine.Matchers.pp = function(str) {\n  throw new Error(\"jasmine.Matchers.pp() is no longer supported, please use jasmine.pp() instead!\");\n};\n\n// todo: @deprecated Deprecated as of Jasmine 0.10. Rewrite your custom matchers to return true or false. [xw]\njasmine.Matchers.prototype.report = function(result, failing_message, details) {\n  throw new Error(\"As of jasmine 0.11, custom matchers must be implemented differently -- please see jasmine docs\");\n};\n\njasmine.Matchers.wrapInto_ = function(prototype, matchersClass) {\n  for (var methodName in prototype) {\n    if (methodName == 'report') continue;\n    var orig = prototype[methodName];\n    matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n  }\n};\n\njasmine.Matchers.matcherFn_ = function(matcherName, matcherFunction) {\n  return function() {\n    var matcherArgs = jasmine.util.argsToArray(arguments);\n    var result = matcherFunction.apply(this, arguments);\n\n    if (this.isNot) {\n      result = !result;\n    }\n\n    if (this.reportWasCalled_) return result;\n\n    var message;\n    if (!result) {\n      if (this.message) {\n        message = this.message.apply(this, arguments);\n        if (jasmine.isArray_(message)) {\n          message = message[this.isNot ? 1 : 0];\n        }\n      } else {\n        var englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n        message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate;\n        if (matcherArgs.length > 0) {\n          for (var i = 0; i < matcherArgs.length; i++) {\n            if (i > 0) message += \",\";\n            message += \" \" + jasmine.pp(matcherArgs[i]);\n          }\n        }\n        message += \".\";\n      }\n    }\n    var expectationResult = new jasmine.ExpectationResult({\n      matcherName: matcherName,\n      passed: result,\n      expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0],\n      actual: this.actual,\n      message: message\n    });\n    this.spec.addMatcherResult(expectationResult);\n    return jasmine.undefined;\n  };\n};\n\n\n\n\n/**\n * toBe: compares the actual to the expected using ===\n * @param expected\n */\njasmine.Matchers.prototype.toBe = function(expected) {\n  return this.actual === expected;\n};\n\n/**\n * toNotBe: compares the actual to the expected using !==\n * @param expected\n * @deprecated as of 1.0. Use not.toBe() instead.\n */\njasmine.Matchers.prototype.toNotBe = function(expected) {\n  return this.actual !== expected;\n};\n\n/**\n * toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toEqual = function(expected) {\n  return this.env.equals_(this.actual, expected);\n};\n\n/**\n * toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual\n * @param expected\n * @deprecated as of 1.0. Use not.toEqual() instead.\n */\njasmine.Matchers.prototype.toNotEqual = function(expected) {\n  return !this.env.equals_(this.actual, expected);\n};\n\n/**\n * Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\n * a pattern or a String.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toMatch = function(expected) {\n  return new RegExp(expected).test(this.actual);\n};\n\n/**\n * Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch\n * @param expected\n * @deprecated as of 1.0. Use not.toMatch() instead.\n */\njasmine.Matchers.prototype.toNotMatch = function(expected) {\n  return !(new RegExp(expected).test(this.actual));\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeDefined = function() {\n  return (this.actual !== jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeUndefined = function() {\n  return (this.actual === jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to null.\n */\njasmine.Matchers.prototype.toBeNull = function() {\n  return (this.actual === null);\n};\n\n/**\n * Matcher that compares the actual to NaN.\n */\njasmine.Matchers.prototype.toBeNaN = function() {\n\tthis.message = function() {\n\t\treturn [ \"Expected \" + jasmine.pp(this.actual) + \" to be NaN.\" ];\n\t};\n\n\treturn (this.actual !== this.actual);\n};\n\n/**\n * Matcher that boolean not-nots the actual.\n */\njasmine.Matchers.prototype.toBeTruthy = function() {\n  return !!this.actual;\n};\n\n\n/**\n * Matcher that boolean nots the actual.\n */\njasmine.Matchers.prototype.toBeFalsy = function() {\n  return !this.actual;\n};\n\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called.\n */\njasmine.Matchers.prototype.toHaveBeenCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to have been called.\",\n      \"Expected spy \" + this.actual.identity + \" not to have been called.\"\n    ];\n  };\n\n  return this.actual.wasCalled;\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalled() instead */\njasmine.Matchers.prototype.wasCalled = jasmine.Matchers.prototype.toHaveBeenCalled;\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was not called.\n *\n * @deprecated Use expect(xxx).not.toHaveBeenCalled() instead\n */\njasmine.Matchers.prototype.wasNotCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('wasNotCalled does not take arguments');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to not have been called.\",\n      \"Expected spy \" + this.actual.identity + \" to have been called.\"\n    ];\n  };\n\n  return !this.actual.wasCalled;\n};\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.\n *\n * @example\n *\n */\njasmine.Matchers.prototype.toHaveBeenCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n  this.message = function() {\n    var invertedMessage = \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was.\";\n    var positiveMessage = \"\";\n    if (this.actual.callCount === 0) {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but it was never called.\";\n    } else {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but actual calls were \" + jasmine.pp(this.actual.argsForCall).replace(/^\\[ | \\]$/g, '')\n    }\n    return [positiveMessage, invertedMessage];\n  };\n\n  return this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasCalledWith = jasmine.Matchers.prototype.toHaveBeenCalledWith;\n\n/** @deprecated Use expect(xxx).not.toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasNotCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\",\n      \"Expected spy to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\"\n    ];\n  };\n\n  return !this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/**\n * Matcher that checks that the expected item is an element in the actual Array.\n *\n * @param {Object} expected\n */\njasmine.Matchers.prototype.toContain = function(expected) {\n  return this.env.contains_(this.actual, expected);\n};\n\n/**\n * Matcher that checks that the expected item is NOT an element in the actual Array.\n *\n * @param {Object} expected\n * @deprecated as of 1.0. Use not.toContain() instead.\n */\njasmine.Matchers.prototype.toNotContain = function(expected) {\n  return !this.env.contains_(this.actual, expected);\n};\n\njasmine.Matchers.prototype.toBeLessThan = function(expected) {\n  return this.actual < expected;\n};\n\njasmine.Matchers.prototype.toBeGreaterThan = function(expected) {\n  return this.actual > expected;\n};\n\n/**\n * Matcher that checks that the expected item is equal to the actual item\n * up to a given level of decimal precision (default 2).\n *\n * @param {Number} expected\n * @param {Number} precision, as number of decimal places\n */\njasmine.Matchers.prototype.toBeCloseTo = function(expected, precision) {\n  if (!(precision === 0)) {\n    precision = precision || 2;\n  }\n  return Math.abs(expected - this.actual) < (Math.pow(10, -precision) / 2);\n};\n\n/**\n * Matcher that checks that the expected exception was thrown by the actual.\n *\n * @param {String} [expected]\n */\njasmine.Matchers.prototype.toThrow = function(expected) {\n  var result = false;\n  var exception;\n  if (typeof this.actual != 'function') {\n    throw new Error('Actual is not a function');\n  }\n  try {\n    this.actual();\n  } catch (e) {\n    exception = e;\n  }\n  if (exception) {\n    result = (expected === jasmine.undefined || this.env.equals_(exception.message || exception, expected.message || expected));\n  }\n\n  var not = this.isNot ? \"not \" : \"\";\n\n  this.message = function() {\n    if (exception && (expected === jasmine.undefined || !this.env.equals_(exception.message || exception, expected.message || expected))) {\n      return [\"Expected function \" + not + \"to throw\", expected ? expected.message || expected : \"an exception\", \", but it threw\", exception.message || exception].join(' ');\n    } else {\n      return \"Expected function to throw an exception.\";\n    }\n  };\n\n  return result;\n};\n\njasmine.Matchers.Any = function(expectedClass) {\n  this.expectedClass = expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineMatches = function(other) {\n  if (this.expectedClass == String) {\n    return typeof other == 'string' || other instanceof String;\n  }\n\n  if (this.expectedClass == Number) {\n    return typeof other == 'number' || other instanceof Number;\n  }\n\n  if (this.expectedClass == Function) {\n    return typeof other == 'function' || other instanceof Function;\n  }\n\n  if (this.expectedClass == Object) {\n    return typeof other == 'object';\n  }\n\n  return other instanceof this.expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineToString = function() {\n  return '<jasmine.any(' + this.expectedClass + ')>';\n};\n\njasmine.Matchers.ObjectContaining = function (sample) {\n  this.sample = sample;\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineMatches = function(other, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  var env = jasmine.getEnv();\n\n  var hasKey = function(obj, keyName) {\n    return obj != null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in this.sample) {\n    if (!hasKey(other, property) && hasKey(this.sample, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n    else if (!env.equals_(this.sample[property], other[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (other[property] ? jasmine.util.htmlEscape(other[property].toString()) : other[property]) + \"' in expected, but was '\" + (this.sample[property] ? jasmine.util.htmlEscape(this.sample[property].toString()) : this.sample[property]) + \"' in actual.\");\n    }\n  }\n\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineToString = function () {\n  return \"<jasmine.objectContaining(\" + jasmine.pp(this.sample) + \")>\";\n};\n// Mock setTimeout, clearTimeout\n// Contributed by Pivotal Computer Systems, www.pivotalsf.com\n\njasmine.FakeTimer = function() {\n  this.reset();\n\n  var self = this;\n  self.setTimeout = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, false);\n    return self.timeoutsMade;\n  };\n\n  self.setInterval = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, true);\n    return self.timeoutsMade;\n  };\n\n  self.clearTimeout = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n  self.clearInterval = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n};\n\njasmine.FakeTimer.prototype.reset = function() {\n  this.timeoutsMade = 0;\n  this.scheduledFunctions = {};\n  this.nowMillis = 0;\n};\n\njasmine.FakeTimer.prototype.tick = function(millis) {\n  var oldMillis = this.nowMillis;\n  var newMillis = oldMillis + millis;\n  this.runFunctionsWithinRange(oldMillis, newMillis);\n  this.nowMillis = newMillis;\n};\n\njasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) {\n  var scheduledFunc;\n  var funcsToRun = [];\n  for (var timeoutKey in this.scheduledFunctions) {\n    scheduledFunc = this.scheduledFunctions[timeoutKey];\n    if (scheduledFunc != jasmine.undefined &&\n        scheduledFunc.runAtMillis >= oldMillis &&\n        scheduledFunc.runAtMillis <= nowMillis) {\n      funcsToRun.push(scheduledFunc);\n      this.scheduledFunctions[timeoutKey] = jasmine.undefined;\n    }\n  }\n\n  if (funcsToRun.length > 0) {\n    funcsToRun.sort(function(a, b) {\n      return a.runAtMillis - b.runAtMillis;\n    });\n    for (var i = 0; i < funcsToRun.length; ++i) {\n      try {\n        var funcToRun = funcsToRun[i];\n        this.nowMillis = funcToRun.runAtMillis;\n        funcToRun.funcToCall();\n        if (funcToRun.recurring) {\n          this.scheduleFunction(funcToRun.timeoutKey,\n              funcToRun.funcToCall,\n              funcToRun.millis,\n              true);\n        }\n      } catch(e) {\n      }\n    }\n    this.runFunctionsWithinRange(oldMillis, nowMillis);\n  }\n};\n\njasmine.FakeTimer.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) {\n  this.scheduledFunctions[timeoutKey] = {\n    runAtMillis: this.nowMillis + millis,\n    funcToCall: funcToCall,\n    recurring: recurring,\n    timeoutKey: timeoutKey,\n    millis: millis\n  };\n};\n\n/**\n * @namespace\n */\njasmine.Clock = {\n  defaultFakeTimer: new jasmine.FakeTimer(),\n\n  reset: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.reset();\n  },\n\n  tick: function(millis) {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.tick(millis);\n  },\n\n  runFunctionsWithinRange: function(oldMillis, nowMillis) {\n    jasmine.Clock.defaultFakeTimer.runFunctionsWithinRange(oldMillis, nowMillis);\n  },\n\n  scheduleFunction: function(timeoutKey, funcToCall, millis, recurring) {\n    jasmine.Clock.defaultFakeTimer.scheduleFunction(timeoutKey, funcToCall, millis, recurring);\n  },\n\n  useMock: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      var spec = jasmine.getEnv().currentSpec;\n      spec.after(jasmine.Clock.uninstallMock);\n\n      jasmine.Clock.installMock();\n    }\n  },\n\n  installMock: function() {\n    jasmine.Clock.installed = jasmine.Clock.defaultFakeTimer;\n  },\n\n  uninstallMock: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.installed = jasmine.Clock.real;\n  },\n\n  real: {\n    setTimeout: jasmine.getGlobal().setTimeout,\n    clearTimeout: jasmine.getGlobal().clearTimeout,\n    setInterval: jasmine.getGlobal().setInterval,\n    clearInterval: jasmine.getGlobal().clearInterval\n  },\n\n  assertInstalled: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      throw new Error(\"Mock clock is not installed, use jasmine.Clock.useMock()\");\n    }\n  },\n\n  isInstalled: function() {\n    return jasmine.Clock.installed == jasmine.Clock.defaultFakeTimer;\n  },\n\n  installed: null\n};\njasmine.Clock.installed = jasmine.Clock.real;\n\n//else for IE support\njasmine.getGlobal().setTimeout = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setTimeout.apply) {\n    return jasmine.Clock.installed.setTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setTimeout(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().setInterval = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setInterval.apply) {\n    return jasmine.Clock.installed.setInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setInterval(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().clearTimeout = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearTimeout(timeoutKey);\n  }\n};\n\njasmine.getGlobal().clearInterval = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearInterval(timeoutKey);\n  }\n};\n\n/**\n * @constructor\n */\njasmine.MultiReporter = function() {\n  this.subReporters_ = [];\n};\njasmine.util.inherit(jasmine.MultiReporter, jasmine.Reporter);\n\njasmine.MultiReporter.prototype.addReporter = function(reporter) {\n  this.subReporters_.push(reporter);\n};\n\n(function() {\n  var functionNames = [\n    \"reportRunnerStarting\",\n    \"reportRunnerResults\",\n    \"reportSuiteResults\",\n    \"reportSpecStarting\",\n    \"reportSpecResults\",\n    \"log\"\n  ];\n  for (var i = 0; i < functionNames.length; i++) {\n    var functionName = functionNames[i];\n    jasmine.MultiReporter.prototype[functionName] = (function(functionName) {\n      return function() {\n        for (var j = 0; j < this.subReporters_.length; j++) {\n          var subReporter = this.subReporters_[j];\n          if (subReporter[functionName]) {\n            subReporter[functionName].apply(subReporter, arguments);\n          }\n        }\n      };\n    })(functionName);\n  }\n})();\n/**\n * Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults\n *\n * @constructor\n */\njasmine.NestedResults = function() {\n  /**\n   * The total count of results\n   */\n  this.totalCount = 0;\n  /**\n   * Number of passed results\n   */\n  this.passedCount = 0;\n  /**\n   * Number of failed results\n   */\n  this.failedCount = 0;\n  /**\n   * Was this suite/spec skipped?\n   */\n  this.skipped = false;\n  /**\n   * @ignore\n   */\n  this.items_ = [];\n};\n\n/**\n * Roll up the result counts.\n *\n * @param result\n */\njasmine.NestedResults.prototype.rollupCounts = function(result) {\n  this.totalCount += result.totalCount;\n  this.passedCount += result.passedCount;\n  this.failedCount += result.failedCount;\n};\n\n/**\n * Adds a log message.\n * @param values Array of message parts which will be concatenated later.\n */\njasmine.NestedResults.prototype.log = function(values) {\n  this.items_.push(new jasmine.MessageResult(values));\n};\n\n/**\n * Getter for the results: message & results.\n */\njasmine.NestedResults.prototype.getItems = function() {\n  return this.items_;\n};\n\n/**\n * Adds a result, tracking counts (total, passed, & failed)\n * @param {jasmine.ExpectationResult|jasmine.NestedResults} result\n */\njasmine.NestedResults.prototype.addResult = function(result) {\n  if (result.type != 'log') {\n    if (result.items_) {\n      this.rollupCounts(result);\n    } else {\n      this.totalCount++;\n      if (result.passed()) {\n        this.passedCount++;\n      } else {\n        this.failedCount++;\n      }\n    }\n  }\n  this.items_.push(result);\n};\n\n/**\n * @returns {Boolean} True if <b>everything</b> below passed\n */\njasmine.NestedResults.prototype.passed = function() {\n  return this.passedCount === this.totalCount;\n};\n/**\n * Base class for pretty printing for expectation results.\n */\njasmine.PrettyPrinter = function() {\n  this.ppNestLevel_ = 0;\n};\n\n/**\n * Formats a value in a nice, human-readable string.\n *\n * @param value\n */\njasmine.PrettyPrinter.prototype.format = function(value) {\n  this.ppNestLevel_++;\n  try {\n    if (value === jasmine.undefined) {\n      this.emitScalar('undefined');\n    } else if (value === null) {\n      this.emitScalar('null');\n    } else if (value === jasmine.getGlobal()) {\n      this.emitScalar('<global>');\n    } else if (value.jasmineToString) {\n      this.emitScalar(value.jasmineToString());\n    } else if (typeof value === 'string') {\n      this.emitString(value);\n    } else if (jasmine.isSpy(value)) {\n      this.emitScalar(\"spy on \" + value.identity);\n    } else if (value instanceof RegExp) {\n      this.emitScalar(value.toString());\n    } else if (typeof value === 'function') {\n      this.emitScalar('Function');\n    } else if (typeof value.nodeType === 'number') {\n      this.emitScalar('HTMLNode');\n    } else if (value instanceof Date) {\n      this.emitScalar('Date(' + value + ')');\n    } else if (value.__Jasmine_been_here_before__) {\n      this.emitScalar('<circular reference: ' + (jasmine.isArray_(value) ? 'Array' : 'Object') + '>');\n    } else if (jasmine.isArray_(value) || typeof value == 'object') {\n      value.__Jasmine_been_here_before__ = true;\n      if (jasmine.isArray_(value)) {\n        this.emitArray(value);\n      } else {\n        this.emitObject(value);\n      }\n      delete value.__Jasmine_been_here_before__;\n    } else {\n      this.emitScalar(value.toString());\n    }\n  } finally {\n    this.ppNestLevel_--;\n  }\n};\n\njasmine.PrettyPrinter.prototype.iterateObject = function(obj, fn) {\n  for (var property in obj) {\n    if (!obj.hasOwnProperty(property)) continue;\n    if (property == '__Jasmine_been_here_before__') continue;\n    fn(property, obj.__lookupGetter__ ? (obj.__lookupGetter__(property) !== jasmine.undefined && \n                                         obj.__lookupGetter__(property) !== null) : false);\n  }\n};\n\njasmine.PrettyPrinter.prototype.emitArray = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitObject = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitScalar = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitString = jasmine.unimplementedMethod_;\n\njasmine.StringPrettyPrinter = function() {\n  jasmine.PrettyPrinter.call(this);\n\n  this.string = '';\n};\njasmine.util.inherit(jasmine.StringPrettyPrinter, jasmine.PrettyPrinter);\n\njasmine.StringPrettyPrinter.prototype.emitScalar = function(value) {\n  this.append(value);\n};\n\njasmine.StringPrettyPrinter.prototype.emitString = function(value) {\n  this.append(\"'\" + value + \"'\");\n};\n\njasmine.StringPrettyPrinter.prototype.emitArray = function(array) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Array\");\n    return;\n  }\n\n  this.append('[ ');\n  for (var i = 0; i < array.length; i++) {\n    if (i > 0) {\n      this.append(', ');\n    }\n    this.format(array[i]);\n  }\n  this.append(' ]');\n};\n\njasmine.StringPrettyPrinter.prototype.emitObject = function(obj) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Object\");\n    return;\n  }\n\n  var self = this;\n  this.append('{ ');\n  var first = true;\n\n  this.iterateObject(obj, function(property, isGetter) {\n    if (first) {\n      first = false;\n    } else {\n      self.append(', ');\n    }\n\n    self.append(property);\n    self.append(' : ');\n    if (isGetter) {\n      self.append('<getter>');\n    } else {\n      self.format(obj[property]);\n    }\n  });\n\n  this.append(' }');\n};\n\njasmine.StringPrettyPrinter.prototype.append = function(value) {\n  this.string += value;\n};\njasmine.Queue = function(env) {\n  this.env = env;\n\n  // parallel to blocks. each true value in this array means the block will\n  // get executed even if we abort\n  this.ensured = [];\n  this.blocks = [];\n  this.running = false;\n  this.index = 0;\n  this.offset = 0;\n  this.abort = false;\n};\n\njasmine.Queue.prototype.addBefore = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.unshift(block);\n  this.ensured.unshift(ensure);\n};\n\njasmine.Queue.prototype.add = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.push(block);\n  this.ensured.push(ensure);\n};\n\njasmine.Queue.prototype.insertNext = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.ensured.splice((this.index + this.offset + 1), 0, ensure);\n  this.blocks.splice((this.index + this.offset + 1), 0, block);\n  this.offset++;\n};\n\njasmine.Queue.prototype.start = function(onComplete) {\n  this.running = true;\n  this.onComplete = onComplete;\n  this.next_();\n};\n\njasmine.Queue.prototype.isRunning = function() {\n  return this.running;\n};\n\njasmine.Queue.LOOP_DONT_RECURSE = true;\n\njasmine.Queue.prototype.next_ = function() {\n  var self = this;\n  var goAgain = true;\n\n  while (goAgain) {\n    goAgain = false;\n    \n    if (self.index < self.blocks.length && !(this.abort && !this.ensured[self.index])) {\n      var calledSynchronously = true;\n      var completedSynchronously = false;\n\n      var onComplete = function () {\n        if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {\n          completedSynchronously = true;\n          return;\n        }\n\n        if (self.blocks[self.index].abort) {\n          self.abort = true;\n        }\n\n        self.offset = 0;\n        self.index++;\n\n        var now = new Date().getTime();\n        if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {\n          self.env.lastUpdate = now;\n          self.env.setTimeout(function() {\n            self.next_();\n          }, 0);\n        } else {\n          if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {\n            goAgain = true;\n          } else {\n            self.next_();\n          }\n        }\n      };\n      self.blocks[self.index].execute(onComplete);\n\n      calledSynchronously = false;\n      if (completedSynchronously) {\n        onComplete();\n      }\n      \n    } else {\n      self.running = false;\n      if (self.onComplete) {\n        self.onComplete();\n      }\n    }\n  }\n};\n\njasmine.Queue.prototype.results = function() {\n  var results = new jasmine.NestedResults();\n  for (var i = 0; i < this.blocks.length; i++) {\n    if (this.blocks[i].results) {\n      results.addResult(this.blocks[i].results());\n    }\n  }\n  return results;\n};\n\n\n/**\n * Runner\n *\n * @constructor\n * @param {jasmine.Env} env\n */\njasmine.Runner = function(env) {\n  var self = this;\n  self.env = env;\n  self.queue = new jasmine.Queue(env);\n  self.before_ = [];\n  self.after_ = [];\n  self.suites_ = [];\n};\n\njasmine.Runner.prototype.execute = function() {\n  var self = this;\n  if (self.env.reporter.reportRunnerStarting) {\n    self.env.reporter.reportRunnerStarting(this);\n  }\n  self.queue.start(function () {\n    self.finishCallback();\n  });\n};\n\njasmine.Runner.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.splice(0,0,beforeEachFunction);\n};\n\njasmine.Runner.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.splice(0,0,afterEachFunction);\n};\n\n\njasmine.Runner.prototype.finishCallback = function() {\n  this.env.reporter.reportRunnerResults(this);\n};\n\njasmine.Runner.prototype.addSuite = function(suite) {\n  this.suites_.push(suite);\n};\n\njasmine.Runner.prototype.add = function(block) {\n  if (block instanceof jasmine.Suite) {\n    this.addSuite(block);\n  }\n  this.queue.add(block);\n};\n\njasmine.Runner.prototype.specs = function () {\n  var suites = this.suites();\n  var specs = [];\n  for (var i = 0; i < suites.length; i++) {\n    specs = specs.concat(suites[i].specs());\n  }\n  return specs;\n};\n\njasmine.Runner.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Runner.prototype.topLevelSuites = function() {\n  var topLevelSuites = [];\n  for (var i = 0; i < this.suites_.length; i++) {\n    if (!this.suites_[i].parentSuite) {\n      topLevelSuites.push(this.suites_[i]);\n    }\n  }\n  return topLevelSuites;\n};\n\njasmine.Runner.prototype.results = function() {\n  return this.queue.results();\n};\n/**\n * Internal representation of a Jasmine specification, or test.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {jasmine.Suite} suite\n * @param {String} description\n */\njasmine.Spec = function(env, suite, description) {\n  if (!env) {\n    throw new Error('jasmine.Env() required');\n  }\n  if (!suite) {\n    throw new Error('jasmine.Suite() required');\n  }\n  var spec = this;\n  spec.id = env.nextSpecId ? env.nextSpecId() : null;\n  spec.env = env;\n  spec.suite = suite;\n  spec.description = description;\n  spec.queue = new jasmine.Queue(env);\n\n  spec.afterCallbacks = [];\n  spec.spies_ = [];\n\n  spec.results_ = new jasmine.NestedResults();\n  spec.results_.description = description;\n  spec.matchersClass = null;\n};\n\njasmine.Spec.prototype.getFullName = function() {\n  return this.suite.getFullName() + ' ' + this.description + '.';\n};\n\n\njasmine.Spec.prototype.results = function() {\n  return this.results_;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.Spec.prototype.log = function() {\n  return this.results_.log(arguments);\n};\n\njasmine.Spec.prototype.runs = function (func) {\n  var block = new jasmine.Block(this.env, func, this);\n  this.addToQueue(block);\n  return this;\n};\n\njasmine.Spec.prototype.addToQueue = function (block) {\n  if (this.queue.isRunning()) {\n    this.queue.insertNext(block);\n  } else {\n    this.queue.add(block);\n  }\n};\n\n/**\n * @param {jasmine.ExpectationResult} result\n */\njasmine.Spec.prototype.addMatcherResult = function(result) {\n  this.results_.addResult(result);\n};\n\njasmine.Spec.prototype.expect = function(actual) {\n  var positive = new (this.getMatchersClass_())(this.env, actual, this);\n  positive.not = new (this.getMatchersClass_())(this.env, actual, this, true);\n  return positive;\n};\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\njasmine.Spec.prototype.waits = function(timeout) {\n  var waitsFunc = new jasmine.WaitsBlock(this.env, timeout, this);\n  this.addToQueue(waitsFunc);\n  return this;\n};\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\njasmine.Spec.prototype.waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  var latchFunction_ = null;\n  var optional_timeoutMessage_ = null;\n  var optional_timeout_ = null;\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    switch (typeof arg) {\n      case 'function':\n        latchFunction_ = arg;\n        break;\n      case 'string':\n        optional_timeoutMessage_ = arg;\n        break;\n      case 'number':\n        optional_timeout_ = arg;\n        break;\n    }\n  }\n\n  var waitsForFunc = new jasmine.WaitsForBlock(this.env, optional_timeout_, latchFunction_, optional_timeoutMessage_, this);\n  this.addToQueue(waitsForFunc);\n  return this;\n};\n\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }\n  });\n  this.results_.addResult(expectationResult);\n};\n\njasmine.Spec.prototype.getMatchersClass_ = function() {\n  return this.matchersClass || this.env.matchersClass;\n};\n\njasmine.Spec.prototype.addMatchers = function(matchersPrototype) {\n  var parent = this.getMatchersClass_();\n  var newMatchersClass = function() {\n    parent.apply(this, arguments);\n  };\n  jasmine.util.inherit(newMatchersClass, parent);\n  jasmine.Matchers.wrapInto_(matchersPrototype, newMatchersClass);\n  this.matchersClass = newMatchersClass;\n};\n\njasmine.Spec.prototype.finishCallback = function() {\n  this.env.reporter.reportSpecResults(this);\n};\n\njasmine.Spec.prototype.finish = function(onComplete) {\n  this.removeAllSpies();\n  this.finishCallback();\n  if (onComplete) {\n    onComplete();\n  }\n};\n\njasmine.Spec.prototype.after = function(doAfter) {\n  if (this.queue.isRunning()) {\n    this.queue.add(new jasmine.Block(this.env, doAfter, this), true);\n  } else {\n    this.afterCallbacks.unshift(doAfter);\n  }\n};\n\njasmine.Spec.prototype.execute = function(onComplete) {\n  var spec = this;\n  if (!spec.env.specFilter(spec)) {\n    spec.results_.skipped = true;\n    spec.finish(onComplete);\n    return;\n  }\n\n  this.env.reporter.reportSpecStarting(this);\n\n  spec.env.currentSpec = spec;\n\n  spec.addBeforesAndAftersToQueue();\n\n  spec.queue.start(function () {\n    spec.finish(onComplete);\n  });\n};\n\njasmine.Spec.prototype.addBeforesAndAftersToQueue = function() {\n  var runner = this.env.currentRunner();\n  var i;\n\n  for (var suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.before_.length; i++) {\n      this.queue.addBefore(new jasmine.Block(this.env, suite.before_[i], this));\n    }\n  }\n  for (i = 0; i < runner.before_.length; i++) {\n    this.queue.addBefore(new jasmine.Block(this.env, runner.before_[i], this));\n  }\n  for (i = 0; i < this.afterCallbacks.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, this.afterCallbacks[i], this), true);\n  }\n  for (suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.after_.length; i++) {\n      this.queue.add(new jasmine.Block(this.env, suite.after_[i], this), true);\n    }\n  }\n  for (i = 0; i < runner.after_.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, runner.after_[i], this), true);\n  }\n};\n\njasmine.Spec.prototype.explodes = function() {\n  throw 'explodes function should not have been called';\n};\n\njasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) {\n  if (obj == jasmine.undefined) {\n    throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\";\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) {\n    throw methodName + '() method does not exist';\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) {\n    throw new Error(methodName + ' has already been spied upon');\n  }\n\n  var spyObj = jasmine.createSpy(methodName);\n\n  this.spies_.push(spyObj);\n  spyObj.baseObj = obj;\n  spyObj.methodName = methodName;\n  spyObj.originalValue = obj[methodName];\n\n  obj[methodName] = spyObj;\n\n  return spyObj;\n};\n\njasmine.Spec.prototype.removeAllSpies = function() {\n  for (var i = 0; i < this.spies_.length; i++) {\n    var spy = this.spies_[i];\n    spy.baseObj[spy.methodName] = spy.originalValue;\n  }\n  this.spies_ = [];\n};\n\n/**\n * Internal representation of a Jasmine suite.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {String} description\n * @param {Function} specDefinitions\n * @param {jasmine.Suite} parentSuite\n */\njasmine.Suite = function(env, description, specDefinitions, parentSuite) {\n  var self = this;\n  self.id = env.nextSuiteId ? env.nextSuiteId() : null;\n  self.description = description;\n  self.queue = new jasmine.Queue(env);\n  self.parentSuite = parentSuite;\n  self.env = env;\n  self.before_ = [];\n  self.after_ = [];\n  self.children_ = [];\n  self.suites_ = [];\n  self.specs_ = [];\n};\n\njasmine.Suite.prototype.getFullName = function() {\n  var fullName = this.description;\n  for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n    fullName = parentSuite.description + ' ' + fullName;\n  }\n  return fullName;\n};\n\njasmine.Suite.prototype.finish = function(onComplete) {\n  this.env.reporter.reportSuiteResults(this);\n  this.finished = true;\n  if (typeof(onComplete) == 'function') {\n    onComplete();\n  }\n};\n\njasmine.Suite.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.unshift(beforeEachFunction);\n};\n\njasmine.Suite.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.unshift(afterEachFunction);\n};\n\njasmine.Suite.prototype.results = function() {\n  return this.queue.results();\n};\n\njasmine.Suite.prototype.add = function(suiteOrSpec) {\n  this.children_.push(suiteOrSpec);\n  if (suiteOrSpec instanceof jasmine.Suite) {\n    this.suites_.push(suiteOrSpec);\n    this.env.currentRunner().addSuite(suiteOrSpec);\n  } else {\n    this.specs_.push(suiteOrSpec);\n  }\n  this.queue.add(suiteOrSpec);\n};\n\njasmine.Suite.prototype.specs = function() {\n  return this.specs_;\n};\n\njasmine.Suite.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Suite.prototype.children = function() {\n  return this.children_;\n};\n\njasmine.Suite.prototype.execute = function(onComplete) {\n  var self = this;\n  this.queue.start(function () {\n    self.finish(onComplete);\n  });\n};\njasmine.WaitsBlock = function(env, timeout, spec) {\n  this.timeout = timeout;\n  jasmine.Block.call(this, env, null, spec);\n};\n\njasmine.util.inherit(jasmine.WaitsBlock, jasmine.Block);\n\njasmine.WaitsBlock.prototype.execute = function (onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + this.timeout + ' ms...');\n  }\n  this.env.setTimeout(function () {\n    onComplete();\n  }, this.timeout);\n};\n/**\n * A block which waits for some condition to become true, with timeout.\n *\n * @constructor\n * @extends jasmine.Block\n * @param {jasmine.Env} env The Jasmine environment.\n * @param {Number} timeout The maximum time in milliseconds to wait for the condition to become true.\n * @param {Function} latchFunction A function which returns true when the desired condition has been met.\n * @param {String} message The message to display if the desired condition hasn't been met within the given time period.\n * @param {jasmine.Spec} spec The Jasmine spec.\n */\njasmine.WaitsForBlock = function(env, timeout, latchFunction, message, spec) {\n  this.timeout = timeout || env.defaultTimeoutInterval;\n  this.latchFunction = latchFunction;\n  this.message = message;\n  this.totalTimeSpentWaitingForLatch = 0;\n  jasmine.Block.call(this, env, null, spec);\n};\njasmine.util.inherit(jasmine.WaitsForBlock, jasmine.Block);\n\njasmine.WaitsForBlock.TIMEOUT_INCREMENT = 10;\n\njasmine.WaitsForBlock.prototype.execute = function(onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + (this.message || 'something to happen'));\n  }\n  var latchFunctionResult;\n  try {\n    latchFunctionResult = this.latchFunction.apply(this.spec);\n  } catch (e) {\n    this.spec.fail(e);\n    onComplete();\n    return;\n  }\n\n  if (latchFunctionResult) {\n    onComplete();\n  } else if (this.totalTimeSpentWaitingForLatch >= this.timeout) {\n    var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen');\n    this.spec.fail({\n      name: 'timeout',\n      message: message\n    });\n\n    this.abort = true;\n    onComplete();\n  } else {\n    this.totalTimeSpentWaitingForLatch += jasmine.WaitsForBlock.TIMEOUT_INCREMENT;\n    var self = this;\n    this.env.setTimeout(function() {\n      self.execute(onComplete);\n    }, jasmine.WaitsForBlock.TIMEOUT_INCREMENT);\n  }\n};\n\njasmine.version_= {\n  \"major\": 1,\n  \"minor\": 3,\n  \"build\": 1,\n  \"revision\": 1354556913\n};\n"]},"hash":"7193e100c05438617ac09edda14907bbfcb34423"}
