{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ready"},"ignored":false,"code":"define([\"../core\", \"../core/init\", \"../deferred\"], function (jQuery) {\n\t// The deferred used on DOM ready\n\tvar readyList;\n\n\tjQuery.fn.ready = function (fn) {\n\t\t// Add the callback\n\t\tjQuery.ready.promise().done(fn);\n\t\treturn this;\n\t};\n\n\tjQuery.extend({\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function (hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\t\t// Handle when the DOM is ready\n\t\tready: function (wait) {\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t} // Remember that the DOM is ready\n\n\n\t\t\tjQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t} // If there are functions bound, to execute\n\n\n\t\t\treadyList.resolveWith(document, [jQuery]); // Trigger any bound ready events\n\n\t\t\tif (jQuery.fn.triggerHandler) {\n\t\t\t\tjQuery(document).triggerHandler(\"ready\");\n\t\t\t\tjQuery(document).off(\"ready\");\n\t\t\t}\n\t\t}\n\t}); /**\n      * The ready event handler and self cleanup method\n      */\n\n\tfunction completed() {\n\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed, false);\n\t\twindow.removeEventListener(\"load\", completed, false);\n\t\tjQuery.ready();\n\t}\n\n\tjQuery.ready.promise = function (obj) {\n\t\tif (!readyList) {\n\t\t\treadyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t\t// We once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\n\t\t\tif (document.readyState === \"complete\") {\n\t\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\t\tsetTimeout(jQuery.ready);\n\t\t\t} else {\n\t\t\t\t// Use the handy event callback\n\t\t\t\tdocument.addEventListener(\"DOMContentLoaded\", completed, false); // A fallback to window.onload, that will always work\n\n\t\t\t\twindow.addEventListener(\"load\", completed, false);\n\t\t\t}\n\t\t}\n\n\t\treturn readyList.promise(obj);\n\t}; // Kick off the DOM ready check even if the user does not\n\n\n\tjQuery.ready.promise();\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js"],"names":["define","jQuery","readyList","fn","ready","promise","done","extend","isReady","readyWait","holdReady","hold","wait","resolveWith","document","triggerHandler","off","completed","removeEventListener","window","obj","Deferred","readyState","setTimeout","addEventListener"],"mappings":"AAAAA,OAAO,CACN,SADM,EAEN,cAFM,EAGN,aAHM,CAAP,EAIG,UAAUC,MAAV,EAAmB;AAEtB;AACA,KAAIC,SAAJ;;AAEAD,QAAOE,EAAP,CAAUC,KAAV,GAAkB,UAAUD,EAAV,EAAe;AAChC;AACAF,SAAOG,KAAP,CAAaC,OAAb,GAAuBC,IAAvB,CAA6BH,EAA7B;AAEA,SAAO,IAAP;AACA,EALD;;AAOAF,QAAOM,MAAP,CAAc;AACb;AACAC,WAAS,KAFI;AAIb;AACA;AACAC,aAAW,CANE;AAQb;AACAC,aAAW,UAAUC,IAAV,EAAiB;AAC3B,OAAKA,IAAL,EAAY;AACXV,WAAOQ,SAAP;AACA,IAFD,MAEO;AACNR,WAAOG,KAAP,CAAc,IAAd;AACA;AACD,GAfY;AAiBb;AACAA,SAAO,UAAUQ,IAAV,EAAiB;AAEvB;AACA,OAAKA,SAAS,IAAT,GAAgB,EAAEX,OAAOQ,SAAzB,GAAqCR,OAAOO,OAAjD,EAA2D;AAC1D;AACA,IALsB,CAOvB;;;AACAP,UAAOO,OAAP,GAAiB,IAAjB,CARuB,CAUvB;;AACA,OAAKI,SAAS,IAAT,IAAiB,EAAEX,OAAOQ,SAAT,GAAqB,CAA3C,EAA+C;AAC9C;AACA,IAbsB,CAevB;;;AACAP,aAAUW,WAAV,CAAuBC,QAAvB,EAAiC,CAAEb,MAAF,CAAjC,EAhBuB,CAkBvB;;AACA,OAAKA,OAAOE,EAAP,CAAUY,cAAf,EAAgC;AAC/Bd,WAAQa,QAAR,EAAmBC,cAAnB,CAAmC,OAAnC;AACAd,WAAQa,QAAR,EAAmBE,GAAnB,CAAwB,OAAxB;AACA;AACD;AAzCY,EAAd,EAZsB,CAwDtB;;;;AAGA,UAASC,SAAT,GAAqB;AACpBH,WAASI,mBAAT,CAA8B,kBAA9B,EAAkDD,SAAlD,EAA6D,KAA7D;AACAE,SAAOD,mBAAP,CAA4B,MAA5B,EAAoCD,SAApC,EAA+C,KAA/C;AACAhB,SAAOG,KAAP;AACA;;AAEDH,QAAOG,KAAP,CAAaC,OAAb,GAAuB,UAAUe,GAAV,EAAgB;AACtC,MAAK,CAAClB,SAAN,EAAkB;AAEjBA,eAAYD,OAAOoB,QAAP,EAAZ,CAFiB,CAIjB;AACA;AACA;;AACA,OAAKP,SAASQ,UAAT,KAAwB,UAA7B,EAA0C;AACzC;AACAC,eAAYtB,OAAOG,KAAnB;AAEA,IAJD,MAIO;AAEN;AACAU,aAASU,gBAAT,CAA2B,kBAA3B,EAA+CP,SAA/C,EAA0D,KAA1D,EAHM,CAKN;;AACAE,WAAOK,gBAAP,CAAyB,MAAzB,EAAiCP,SAAjC,EAA4C,KAA5C;AACA;AACD;;AACD,SAAOf,UAAUG,OAAV,CAAmBe,GAAnB,CAAP;AACA,EAtBD,CAjEsB,CAyFtB;;;AACAnB,QAAOG,KAAP,CAAaC,OAAb;AAEC,CAhGD","file":"packages/zurb:foundation-sites/vendor/jquery/src/core/ready.js.map","sourcesContent":["define([\n\t\"../core\",\n\t\"../core/init\",\n\t\"../deferred\"\n], function( jQuery ) {\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend({\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n});\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed, false );\n\twindow.removeEventListener( \"load\", completed, false );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called after the browser event has already occurred.\n\t\t// We once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t\tif ( document.readyState === \"complete\" ) {\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\tsetTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed, false );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed, false );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n});\n"]},"hash":"7a473ad72be085cf22990125bdc62dd7c089d3a8"}
