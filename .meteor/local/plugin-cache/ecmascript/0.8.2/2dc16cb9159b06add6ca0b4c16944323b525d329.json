{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js","filenameRelative":"packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"forms-validation"},"ignored":false,"code":"// This implementation only tests support for interactive form validation.\n// To check validation for a specific type or a specific other constraint,\n// the test can be combined: \n//    - Modernizr.inputtypes.numer && Modernizr.formvalidation (browser supports rangeOverflow, typeMismatch etc. for type=number)\n//    - Modernizr.input.required && Modernizr.formvalidation (browser supports valueMissing)\n//\n(function (document, Modernizr) {\n  Modernizr.formvalidationapi = false;\n  Modernizr.formvalidationmessage = false;\n  Modernizr.addTest('formvalidation', function () {\n    var form = document.createElement('form');\n\n    if (!('checkValidity' in form) || !('addEventListener' in form)) {\n      return false;\n    }\n\n    if ('reportValidity' in form) {\n      return true;\n    }\n\n    var invalidFired = false;\n    var input;\n    Modernizr.formvalidationapi = true; // Prevent form from being submitted\n\n    form.addEventListener('submit', function (e) {\n      //Opera does not validate form, if submit is prevented\n      if (!window.opera) {\n        e.preventDefault();\n      }\n\n      e.stopPropagation();\n    }, false); // Calling form.submit() doesn't trigger interactive validation,\n    // use a submit button instead\n    //older opera browsers need a name attribute\n\n    form.innerHTML = '<input name=\"modTest\" required><button></button>';\n    Modernizr.testStyles('#modernizr form{position:absolute;top:-99999em}', function (node) {\n      node.appendChild(form);\n      input = form.getElementsByTagName('input')[0]; // Record whether \"invalid\" event is fired\n\n      input.addEventListener('invalid', function (e) {\n        invalidFired = true;\n        e.preventDefault();\n        e.stopPropagation();\n      }, false); //Opera does not fully support the validationMessage property\n\n      Modernizr.formvalidationmessage = !!input.validationMessage; // Submit form by clicking submit button\n\n      form.getElementsByTagName('button')[0].click();\n    });\n    return invalidFired;\n  });\n})(document, window.Modernizr);","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js"],"names":["document","Modernizr","formvalidationapi","formvalidationmessage","addTest","form","createElement","invalidFired","input","addEventListener","e","window","opera","preventDefault","stopPropagation","innerHTML","testStyles","node","appendChild","getElementsByTagName","validationMessage","click"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAASA,QAAT,EAAmBC,SAAnB,EAA6B;AAG5BA,YAAUC,iBAAV,GAA8B,KAA9B;AACAD,YAAUE,qBAAV,GAAkC,KAAlC;AAEAF,YAAUG,OAAV,CAAkB,gBAAlB,EAAoC,YAAW;AAC7C,QAAIC,OAAOL,SAASM,aAAT,CAAuB,MAAvB,CAAX;;AACA,QAAK,EAAE,mBAAmBD,IAArB,KAA8B,EAAE,sBAAsBA,IAAxB,CAAnC,EAAmE;AACjE,aAAO,KAAP;AACD;;AACD,QAAI,oBAAoBA,IAAxB,EAA8B;AAC5B,aAAO,IAAP;AACD;;AACD,QAAIE,eAAe,KAAnB;AACA,QAAIC,KAAJ;AAEAP,cAAUC,iBAAV,GAA+B,IAA/B,CAX6C,CAa7C;;AACAG,SAAKI,gBAAL,CAAsB,QAAtB,EAAgC,UAASC,CAAT,EAAY;AAC1C;AACA,UAAK,CAACC,OAAOC,KAAb,EAAqB;AACnBF,UAAEG,cAAF;AACD;;AACDH,QAAEI,eAAF;AACD,KAND,EAMG,KANH,EAd6C,CAsB7C;AACA;AACA;;AACAT,SAAKU,SAAL,GAAiB,kDAAjB;AAEAd,cAAUe,UAAV,CAAqB,iDAArB,EAAwE,UAAUC,IAAV,EAAiB;AACvFA,WAAKC,WAAL,CAAiBb,IAAjB;AAEAG,cAAQH,KAAKc,oBAAL,CAA0B,OAA1B,EAAmC,CAAnC,CAAR,CAHuF,CAKvF;;AACAX,YAAMC,gBAAN,CAAuB,SAAvB,EAAkC,UAASC,CAAT,EAAY;AAC5CH,uBAAe,IAAf;AACAG,UAAEG,cAAF;AACAH,UAAEI,eAAF;AACD,OAJD,EAIG,KAJH,EANuF,CAYvF;;AACAb,gBAAUE,qBAAV,GAAkC,CAAC,CAACK,MAAMY,iBAA1C,CAbuF,CAevF;;AACAf,WAAKc,oBAAL,CAA0B,QAA1B,EAAoC,CAApC,EAAuCE,KAAvC;AACD,KAjBD;AAmBA,WAAOd,YAAP;AACD,GA/CD;AAiDD,CAvDD,EAuDGP,QAvDH,EAuDaW,OAAOV,SAvDpB","file":"packages/zurb:foundation-sites/vendor/modernizr/feature-detects/forms-validation.js.map","sourcesContent":["// This implementation only tests support for interactive form validation.\n// To check validation for a specific type or a specific other constraint,\n// the test can be combined: \n//    - Modernizr.inputtypes.numer && Modernizr.formvalidation (browser supports rangeOverflow, typeMismatch etc. for type=number)\n//    - Modernizr.input.required && Modernizr.formvalidation (browser supports valueMissing)\n//\n(function(document, Modernizr){\n\n\n  Modernizr.formvalidationapi = false;\n  Modernizr.formvalidationmessage = false;\n\n  Modernizr.addTest('formvalidation', function() {\n    var form = document.createElement('form');\n    if ( !('checkValidity' in form) || !('addEventListener' in form) ) {\n      return false;\n    }\n    if ('reportValidity' in form) {\n      return true;\n    }\n    var invalidFired = false;\n    var input;\n\n    Modernizr.formvalidationapi =  true;\n\n    // Prevent form from being submitted\n    form.addEventListener('submit', function(e) {\n      //Opera does not validate form, if submit is prevented\n      if ( !window.opera ) {\n        e.preventDefault();\n      }\n      e.stopPropagation();\n    }, false);\n\n    // Calling form.submit() doesn't trigger interactive validation,\n    // use a submit button instead\n    //older opera browsers need a name attribute\n    form.innerHTML = '<input name=\"modTest\" required><button></button>';\n\n    Modernizr.testStyles('#modernizr form{position:absolute;top:-99999em}', function( node ) {\n      node.appendChild(form);\n\n      input = form.getElementsByTagName('input')[0];\n\n      // Record whether \"invalid\" event is fired\n      input.addEventListener('invalid', function(e) {\n        invalidFired = true;\n        e.preventDefault();\n        e.stopPropagation();\n      }, false);\n\n      //Opera does not fully support the validationMessage property\n      Modernizr.formvalidationmessage = !!input.validationMessage;\n\n      // Submit form by clicking submit button\n      form.getElementsByTagName('button')[0].click();\n    });\n\n    return invalidFired;\n  });\n\n})(document, window.Modernizr);\n"]},"hash":"2dc16cb9159b06add6ca0b4c16944323b525d329"}
