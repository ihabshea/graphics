{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.util.keyboard","imported":["Keyboard"],"specifiers":[{"kind":"named","imported":"Keyboard","local":"Keyboard"}]},{"source":"./foundation.util.mediaQuery","imported":["MediaQuery"],"specifiers":[{"kind":"named","imported":"MediaQuery","local":"MediaQuery"}]},{"source":"./foundation.util.core","imported":["transitionend"],"specifiers":[{"kind":"named","imported":"transitionend","local":"transitionend"}]},{"source":"./foundation.plugin","imported":["Plugin"],"specifiers":[{"kind":"named","imported":"Plugin","local":"Plugin"}]},{"source":"./foundation.util.triggers","imported":["Triggers"],"specifiers":[{"kind":"named","imported":"Triggers","local":"Triggers"}]}],"exports":{"exported":["OffCanvas"],"specifiers":[{"kind":"local","local":"OffCanvas","exported":"OffCanvas"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.offcanvas.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.offcanvas.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.offcanvas.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.offcanvas.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.offcanvas"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nmodule1.export({\n  OffCanvas: function () {\n    return OffCanvas;\n  }\n});\nvar $ = void 0;\nmodule1.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar Keyboard = void 0;\nmodule1.watch(require(\"./foundation.util.keyboard\"), {\n  Keyboard: function (v) {\n    Keyboard = v;\n  }\n}, 1);\nvar MediaQuery = void 0;\nmodule1.watch(require(\"./foundation.util.mediaQuery\"), {\n  MediaQuery: function (v) {\n    MediaQuery = v;\n  }\n}, 2);\nvar transitionend = void 0;\nmodule1.watch(require(\"./foundation.util.core\"), {\n  transitionend: function (v) {\n    transitionend = v;\n  }\n}, 3);\nvar Plugin = void 0;\nmodule1.watch(require(\"./foundation.plugin\"), {\n  Plugin: function (v) {\n    Plugin = v;\n  }\n}, 4);\nvar Triggers = void 0;\nmodule1.watch(require(\"./foundation.util.triggers\"), {\n  Triggers: function (v) {\n    Triggers = v;\n  }\n}, 5);\n\n/**\n * OffCanvas module.\n * @module foundation.offcanvas\n * @requires foundation.util.keyboard\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.triggers\n */var OffCanvas = function (_Plugin) {\n  (0, _inherits3.default)(OffCanvas, _Plugin);\n\n  function OffCanvas() {\n    (0, _classCallCheck3.default)(this, OffCanvas);\n    return (0, _possibleConstructorReturn3.default)(this, _Plugin.apply(this, arguments));\n  }\n\n  /**\n   * Creates a new instance of an off-canvas wrapper.\n   * @class\n   * @name OffCanvas\n   * @fires OffCanvas#init\n   * @param {Object} element - jQuery object to initialize.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */OffCanvas.prototype._setup = function () {\n    function _setup(element, options) {\n      var _this3 = this;\n\n      this.className = 'OffCanvas'; // ie9 back compat\n\n      this.$element = element;\n      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n      this.contentClasses = {\n        base: [],\n        reveal: []\n      };\n      this.$lastTrigger = $();\n      this.$triggers = $();\n      this.position = 'left';\n      this.$content = $();\n      this.nested = !!this.options.nested; // Defines the CSS transition/position classes of the off-canvas content container.\n\n      $(['push', 'overlap']).each(function (index, val) {\n        _this3.contentClasses.base.push('has-transition-' + val);\n      });\n      $(['left', 'right', 'top', 'bottom']).each(function (index, val) {\n        _this3.contentClasses.base.push('has-position-' + val);\n\n        _this3.contentClasses.reveal.push('has-reveal-' + val);\n      }); // Triggers init is idempotent, just need to make sure it is initialized\n\n      Triggers.init($);\n\n      MediaQuery._init();\n\n      this._init();\n\n      this._events();\n\n      Keyboard.register('OffCanvas', {\n        'ESCAPE': 'close'\n      });\n    }\n\n    return _setup;\n  }(); /**\n        * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n        * @function\n        * @private\n        */\n\n  OffCanvas.prototype._init = function () {\n    function _init() {\n      var id = this.$element.attr('id');\n      this.$element.attr('aria-hidden', 'true'); // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)\n\n      if (this.options.contentId) {\n        this.$content = $('#' + this.options.contentId);\n      } else if (this.$element.siblings('[data-off-canvas-content]').length) {\n        this.$content = this.$element.siblings('[data-off-canvas-content]').first();\n      } else {\n        this.$content = this.$element.closest('[data-off-canvas-content]').first();\n      }\n\n      if (!this.options.contentId) {\n        // Assume that the off-canvas element is nested if it isn't a sibling of the content\n        this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;\n      } else if (this.options.contentId && this.options.nested === null) {\n        // Warning if using content ID without setting the nested option\n        // Once the element is nested it is required to work properly in this case\n        console.warn('Remember to use the nested option if using the content ID option!');\n      }\n\n      if (this.nested === true) {\n        // Force transition overlap if nested\n        this.options.transition = 'overlap'; // Remove appropriate classes if already assigned in markup\n\n        this.$element.removeClass('is-transition-push');\n      }\n\n      this.$element.addClass(\"is-transition-\" + this.options.transition + \" is-closed\"); // Find triggers that affect this element and add aria-expanded to them\n\n      this.$triggers = $(document).find('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-expanded', 'false').attr('aria-controls', id); // Get position by checking for related CSS class\n\n      this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\\-(left|top|right|bottom)/)[1] : this.position; // Add an overlay over the content if necessary\n\n      if (this.options.contentOverlay === true) {\n        var overlay = document.createElement('div');\n        var overlayPosition = $(this.$element).css(\"position\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\n        overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\n        this.$overlay = $(overlay);\n\n        if (overlayPosition === 'is-overlay-fixed') {\n          $(this.$overlay).insertAfter(this.$element);\n        } else {\n          this.$content.append(this.$overlay);\n        }\n      }\n\n      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n      if (this.options.isRevealed === true) {\n        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n\n        this._setMQChecker();\n      }\n\n      if (this.options.transitionTime) {\n        this.$element.css('transition-duration', this.options.transitionTime);\n      } // Initally remove all transition/position CSS classes from off-canvas content container.\n\n\n      this._removeContentClasses();\n    }\n\n    return _init;\n  }(); /**\n        * Adds event handlers to the off-canvas wrapper and the exit overlay.\n        * @function\n        * @private\n        */\n\n  OffCanvas.prototype._events = function () {\n    function _events() {\n      this.$element.off('.zf.trigger .zf.offcanvas').on({\n        'open.zf.trigger': this.open.bind(this),\n        'close.zf.trigger': this.close.bind(this),\n        'toggle.zf.trigger': this.toggle.bind(this),\n        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n      });\n\n      if (this.options.closeOnClick === true) {\n        var $target = this.options.contentOverlay ? this.$overlay : this.$content;\n        $target.on({\n          'click.zf.offcanvas': this.close.bind(this)\n        });\n      }\n    }\n\n    return _events;\n  }(); /**\n        * Applies event listener for elements that will reveal at certain breakpoints.\n        * @private\n        */\n\n  OffCanvas.prototype._setMQChecker = function () {\n    function _setMQChecker() {\n      var _this = this;\n\n      $(window).on('changed.zf.mediaquery', function () {\n        if (MediaQuery.atLeast(_this.options.revealOn)) {\n          _this.reveal(true);\n        } else {\n          _this.reveal(false);\n        }\n      }).one('load.zf.offcanvas', function () {\n        if (MediaQuery.atLeast(_this.options.revealOn)) {\n          _this.reveal(true);\n        }\n      });\n    }\n\n    return _setMQChecker;\n  }(); /**\n        * Removes the CSS transition/position classes of the off-canvas content container.\n        * Removing the classes is important when another off-canvas gets opened that uses the same content container.\n        * @private\n        */\n\n  OffCanvas.prototype._removeContentClasses = function () {\n    function _removeContentClasses(hasReveal) {\n      this.$content.removeClass(this.contentClasses.base.join(' '));\n\n      if (hasReveal === true) {\n        this.$content.removeClass(this.contentClasses.reveal.join(' '));\n      }\n    }\n\n    return _removeContentClasses;\n  }(); /**\n        * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.\n        * Beforehand any transition/position class gets removed.\n        * @param {Boolean} hasReveal - true if related off-canvas element is revealed.\n        * @private\n        */\n\n  OffCanvas.prototype._addContentClasses = function () {\n    function _addContentClasses(hasReveal) {\n      this._removeContentClasses();\n\n      this.$content.addClass(\"has-transition-\" + this.options.transition + \" has-position-\" + this.position);\n\n      if (hasReveal === true) {\n        this.$content.addClass(\"has-reveal-\" + this.position);\n      }\n    }\n\n    return _addContentClasses;\n  }(); /**\n        * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n        * @param {Boolean} isRevealed - true if element should be revealed.\n        * @function\n        */\n\n  OffCanvas.prototype.reveal = function () {\n    function reveal(isRevealed) {\n      if (isRevealed) {\n        this.close();\n        this.isRevealed = true;\n        this.$element.attr('aria-hidden', 'false');\n        this.$element.off('open.zf.trigger toggle.zf.trigger');\n        this.$element.removeClass('is-closed');\n      } else {\n        this.isRevealed = false;\n        this.$element.attr('aria-hidden', 'true');\n        this.$element.off('open.zf.trigger toggle.zf.trigger').on({\n          'open.zf.trigger': this.open.bind(this),\n          'toggle.zf.trigger': this.toggle.bind(this)\n        });\n        this.$element.addClass('is-closed');\n      }\n\n      this._addContentClasses(isRevealed);\n    }\n\n    return reveal;\n  }(); /**\n        * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\n        * @private\n        */\n\n  OffCanvas.prototype._stopScrolling = function () {\n    function _stopScrolling(event) {\n      return false;\n    }\n\n    return _stopScrolling;\n  }(); // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios\n  // Only really works for y, not sure how to extend to x or if we need to.\n\n\n  OffCanvas.prototype._recordScrollable = function () {\n    function _recordScrollable(event) {\n      var elem = this; // called from event handler context with this as elem\n      // If the element is scrollable (content overflows), then...\n\n      if (elem.scrollHeight !== elem.clientHeight) {\n        // If we're at the top, scroll down one pixel to allow scrolling up\n        if (elem.scrollTop === 0) {\n          elem.scrollTop = 1;\n        } // If we're at the bottom, scroll up one pixel to allow scrolling down\n\n\n        if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {\n          elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;\n        }\n      }\n\n      elem.allowUp = elem.scrollTop > 0;\n      elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;\n      elem.lastY = event.originalEvent.pageY;\n    }\n\n    return _recordScrollable;\n  }();\n\n  OffCanvas.prototype._stopScrollPropagation = function () {\n    function _stopScrollPropagation(event) {\n      var elem = this; // called from event handler context with this as elem\n\n      var up = event.pageY < elem.lastY;\n      var down = !up;\n      elem.lastY = event.pageY;\n\n      if (up && elem.allowUp || down && elem.allowDown) {\n        event.stopPropagation();\n      } else {\n        event.preventDefault();\n      }\n    }\n\n    return _stopScrollPropagation;\n  }(); /**\n        * Opens the off-canvas menu.\n        * @function\n        * @param {Object} event - Event object passed from listener.\n        * @param {jQuery} trigger - element that triggered the off-canvas to open.\n        * @fires OffCanvas#opened\n        */\n\n  OffCanvas.prototype.open = function () {\n    function open(event, trigger) {\n      if (this.$element.hasClass('is-open') || this.isRevealed) {\n        return;\n      }\n\n      var _this = this;\n\n      if (trigger) {\n        this.$lastTrigger = trigger;\n      }\n\n      if (this.options.forceTo === 'top') {\n        window.scrollTo(0, 0);\n      } else if (this.options.forceTo === 'bottom') {\n        window.scrollTo(0, document.body.scrollHeight);\n      }\n\n      if (this.options.transitionTime && this.options.transition !== 'overlap') {\n        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);\n      } else {\n        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');\n      } /**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#opened\n         */\n\n      this.$element.addClass('is-open').removeClass('is-closed');\n      this.$triggers.attr('aria-expanded', 'true');\n      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\n      this.$content.addClass('is-open-' + this.position); // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\n\n      if (this.options.contentScroll === false) {\n        $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\n        this.$element.on('touchstart', this._recordScrollable);\n        this.$element.on('touchmove', this._stopScrollPropagation);\n      }\n\n      if (this.options.contentOverlay === true) {\n        this.$overlay.addClass('is-visible');\n      }\n\n      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n        this.$overlay.addClass('is-closable');\n      }\n\n      if (this.options.autoFocus === true) {\n        this.$element.one(transitionend(this.$element), function () {\n          if (!_this.$element.hasClass('is-open')) {\n            return; // exit if prematurely closed\n          }\n\n          var canvasFocus = _this.$element.find('[data-autofocus]');\n\n          if (canvasFocus.length) {\n            canvasFocus.eq(0).focus();\n          } else {\n            _this.$element.find('a, button').eq(0).focus();\n          }\n        });\n      }\n\n      if (this.options.trapFocus === true) {\n        this.$content.attr('tabindex', '-1');\n        Keyboard.trapFocus(this.$element);\n      }\n\n      this._addContentClasses();\n    }\n\n    return open;\n  }(); /**\n        * Closes the off-canvas menu.\n        * @function\n        * @param {Function} cb - optional cb to fire after closure.\n        * @fires OffCanvas#closed\n        */\n\n  OffCanvas.prototype.close = function () {\n    function close(cb) {\n      if (!this.$element.hasClass('is-open') || this.isRevealed) {\n        return;\n      }\n\n      var _this = this;\n\n      this.$element.removeClass('is-open');\n      this.$element.attr('aria-hidden', 'true') /**\n                                                 * Fires when the off-canvas menu opens.\n                                                 * @event OffCanvas#closed\n                                                 */.trigger('closed.zf.offcanvas');\n      this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom'); // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\n\n      if (this.options.contentScroll === false) {\n        $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\n        this.$element.off('touchstart', this._recordScrollable);\n        this.$element.off('touchmove', this._stopScrollPropagation);\n      }\n\n      if (this.options.contentOverlay === true) {\n        this.$overlay.removeClass('is-visible');\n      }\n\n      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n        this.$overlay.removeClass('is-closable');\n      }\n\n      this.$triggers.attr('aria-expanded', 'false');\n\n      if (this.options.trapFocus === true) {\n        this.$content.removeAttr('tabindex');\n        Keyboard.releaseFocus(this.$element);\n      } // Listen to transitionEnd and add class when done.\n\n\n      this.$element.one(transitionend(this.$element), function (e) {\n        _this.$element.addClass('is-closed');\n\n        _this._removeContentClasses();\n      });\n    }\n\n    return close;\n  }(); /**\n        * Toggles the off-canvas menu open or closed.\n        * @function\n        * @param {Object} event - Event object passed from listener.\n        * @param {jQuery} trigger - element that triggered the off-canvas to open.\n        */\n\n  OffCanvas.prototype.toggle = function () {\n    function toggle(event, trigger) {\n      if (this.$element.hasClass('is-open')) {\n        this.close(event, trigger);\n      } else {\n        this.open(event, trigger);\n      }\n    }\n\n    return toggle;\n  }(); /**\n        * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n        * @function\n        * @private\n        */\n\n  OffCanvas.prototype._handleKeyboard = function () {\n    function _handleKeyboard(e) {\n      var _this4 = this;\n\n      Keyboard.handleKey(e, 'OffCanvas', {\n        close: function () {\n          _this4.close();\n\n          _this4.$lastTrigger.focus();\n\n          return true;\n        },\n        handled: function () {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      });\n    }\n\n    return _handleKeyboard;\n  }(); /**\n        * Destroys the offcanvas plugin.\n        * @function\n        */\n\n  OffCanvas.prototype._destroy = function () {\n    function _destroy() {\n      this.close();\n      this.$element.off('.zf.trigger .zf.offcanvas');\n      this.$overlay.off('.zf.offcanvas');\n    }\n\n    return _destroy;\n  }();\n\n  return OffCanvas;\n}(Plugin);\n\nOffCanvas.defaults = {\n  /**\n   * Allow the user to click outside of the menu to close it.\n   * @option\n   * @type {boolean}\n   * @default true\n   */closeOnClick: true,\n  /**\n   * Adds an overlay on top of `[data-off-canvas-content]`.\n   * @option\n   * @type {boolean}\n   * @default true\n   */contentOverlay: true,\n  /**\n   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.\n   * @option\n   * @type {?string}\n   * @default null\n   */contentId: null,\n  /**\n   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.\n   * @option\n   * @type {boolean}\n   * @default null\n   */nested: null,\n  /**\n   * Enable/disable scrolling of the main content when an off canvas panel is open.\n   * @option\n   * @type {boolean}\n   * @default true\n   */contentScroll: true,\n  /**\n   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n   * @option\n   * @type {number}\n   * @default null\n   */transitionTime: null,\n  /**\n   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\n   * @option\n   * @type {string}\n   * @default push\n   */transition: 'push',\n  /**\n   * Force the page to scroll to top or bottom on open.\n   * @option\n   * @type {?string}\n   * @default null\n   */forceTo: null,\n  /**\n   * Allow the offcanvas to remain open for certain breakpoints.\n   * @option\n   * @type {boolean}\n   * @default false\n   */isRevealed: false,\n  /**\n   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n   * @option\n   * @type {?string}\n   * @default null\n   */revealOn: null,\n  /**\n   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n   * @option\n   * @type {boolean}\n   * @default true\n   */autoFocus: true,\n  /**\n   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n   * @option\n   * @type {string}\n   * @default reveal-for-\n   * @todo improve the regex testing for this.\n   */revealClass: 'reveal-for-',\n  /**\n   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n   * @option\n   * @type {boolean}\n   * @default false\n   */trapFocus: false\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.offcanvas.js"],"names":["module1","module","export","OffCanvas","$","watch","require","v","Keyboard","MediaQuery","transitionend","Plugin","Triggers","_setup","element","options","className","$element","extend","defaults","data","contentClasses","base","reveal","$lastTrigger","$triggers","position","$content","nested","each","index","val","push","init","_init","_events","register","id","attr","contentId","siblings","length","first","closest","console","warn","transition","removeClass","addClass","document","find","is","match","contentOverlay","overlay","createElement","overlayPosition","css","setAttribute","$overlay","insertAfter","append","isRevealed","RegExp","revealClass","test","revealOn","split","_setMQChecker","transitionTime","_removeContentClasses","off","on","open","bind","close","toggle","_handleKeyboard","closeOnClick","$target","_this","window","atLeast","one","hasReveal","join","_addContentClasses","_stopScrolling","event","_recordScrollable","elem","scrollHeight","clientHeight","scrollTop","allowUp","allowDown","lastY","originalEvent","pageY","_stopScrollPropagation","up","down","stopPropagation","preventDefault","trigger","hasClass","forceTo","scrollTo","body","contentScroll","autoFocus","canvasFocus","eq","focus","trapFocus","cb","removeAttr","releaseFocus","e","handleKey","handled","_destroy"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.offcanvas.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { transitionend } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\nimport { Triggers } from './foundation.util.triggers';\n\n/**\n * OffCanvas module.\n * @module foundation.offcanvas\n * @requires foundation.util.keyboard\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.triggers\n */\n\nclass OffCanvas extends Plugin {\n  /**\n   * Creates a new instance of an off-canvas wrapper.\n   * @class\n   * @name OffCanvas\n   * @fires OffCanvas#init\n   * @param {Object} element - jQuery object to initialize.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.className = 'OffCanvas'; // ie9 back compat\n    this.$element = element;\n    this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n    this.contentClasses = { base: [], reveal: [] };\n    this.$lastTrigger = $();\n    this.$triggers = $();\n    this.position = 'left';\n    this.$content = $();\n    this.nested = !!(this.options.nested);\n\n    // Defines the CSS transition/position classes of the off-canvas content container.\n    $(['push', 'overlap']).each((index, val) => {\n      this.contentClasses.base.push('has-transition-'+val);\n    });\n    $(['left', 'right', 'top', 'bottom']).each((index, val) => {\n      this.contentClasses.base.push('has-position-'+val);\n      this.contentClasses.reveal.push('has-reveal-'+val);\n    });\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n    MediaQuery._init();\n\n    this._init();\n    this._events();\n\n    Keyboard.register('OffCanvas', {\n      'ESCAPE': 'close'\n    });\n\n  }\n\n  /**\n   * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n   * @function\n   * @private\n   */\n  _init() {\n    var id = this.$element.attr('id');\n\n    this.$element.attr('aria-hidden', 'true');\n\n    // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)\n    if (this.options.contentId) {\n      this.$content = $('#'+this.options.contentId);\n    } else if (this.$element.siblings('[data-off-canvas-content]').length) {\n      this.$content = this.$element.siblings('[data-off-canvas-content]').first();\n    } else {\n      this.$content = this.$element.closest('[data-off-canvas-content]').first();\n    }\n\n    if (!this.options.contentId) {\n      // Assume that the off-canvas element is nested if it isn't a sibling of the content\n      this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;\n\n    } else if (this.options.contentId && this.options.nested === null) {\n      // Warning if using content ID without setting the nested option\n      // Once the element is nested it is required to work properly in this case\n      console.warn('Remember to use the nested option if using the content ID option!');\n    }\n\n    if (this.nested === true) {\n      // Force transition overlap if nested\n      this.options.transition = 'overlap';\n      // Remove appropriate classes if already assigned in markup\n      this.$element.removeClass('is-transition-push');\n    }\n\n    this.$element.addClass(`is-transition-${this.options.transition} is-closed`);\n\n    // Find triggers that affect this element and add aria-expanded to them\n    this.$triggers = $(document)\n      .find('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]')\n      .attr('aria-expanded', 'false')\n      .attr('aria-controls', id);\n\n    // Get position by checking for related CSS class\n    this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\\-(left|top|right|bottom)/)[1] : this.position;\n\n    // Add an overlay over the content if necessary\n    if (this.options.contentOverlay === true) {\n      var overlay = document.createElement('div');\n      var overlayPosition = $(this.$element).css(\"position\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\n      overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\n      this.$overlay = $(overlay);\n      if(overlayPosition === 'is-overlay-fixed') {\n        $(this.$overlay).insertAfter(this.$element);\n      } else {\n        this.$content.append(this.$overlay);\n      }\n    }\n\n    this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n    if (this.options.isRevealed === true) {\n      this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n      this._setMQChecker();\n    }\n\n    if (this.options.transitionTime) {\n      this.$element.css('transition-duration', this.options.transitionTime);\n    }\n\n    // Initally remove all transition/position CSS classes from off-canvas content container.\n    this._removeContentClasses();\n  }\n\n  /**\n   * Adds event handlers to the off-canvas wrapper and the exit overlay.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('.zf.trigger .zf.offcanvas').on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': this.close.bind(this),\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n    });\n\n    if (this.options.closeOnClick === true) {\n      var $target = this.options.contentOverlay ? this.$overlay : this.$content;\n      $target.on({'click.zf.offcanvas': this.close.bind(this)});\n    }\n  }\n\n  /**\n   * Applies event listener for elements that will reveal at certain breakpoints.\n   * @private\n   */\n  _setMQChecker() {\n    var _this = this;\n\n    $(window).on('changed.zf.mediaquery', function() {\n      if (MediaQuery.atLeast(_this.options.revealOn)) {\n        _this.reveal(true);\n      } else {\n        _this.reveal(false);\n      }\n    }).one('load.zf.offcanvas', function() {\n      if (MediaQuery.atLeast(_this.options.revealOn)) {\n        _this.reveal(true);\n      }\n    });\n  }\n\n  /**\n   * Removes the CSS transition/position classes of the off-canvas content container.\n   * Removing the classes is important when another off-canvas gets opened that uses the same content container.\n   * @private\n   */\n  _removeContentClasses(hasReveal) {\n    this.$content.removeClass(this.contentClasses.base.join(' '));\n    if (hasReveal === true) {\n      this.$content.removeClass(this.contentClasses.reveal.join(' '));\n    }\n  }\n\n  /**\n   * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.\n   * Beforehand any transition/position class gets removed.\n   * @param {Boolean} hasReveal - true if related off-canvas element is revealed.\n   * @private\n   */\n  _addContentClasses(hasReveal) {\n    this._removeContentClasses();\n    this.$content.addClass(`has-transition-${this.options.transition} has-position-${this.position}`);\n    if (hasReveal === true) {\n      this.$content.addClass(`has-reveal-${this.position}`);\n    }\n  }\n\n  /**\n   * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n   * @param {Boolean} isRevealed - true if element should be revealed.\n   * @function\n   */\n  reveal(isRevealed) {\n    if (isRevealed) {\n      this.close();\n      this.isRevealed = true;\n      this.$element.attr('aria-hidden', 'false');\n      this.$element.off('open.zf.trigger toggle.zf.trigger');\n      this.$element.removeClass('is-closed');\n    } else {\n      this.isRevealed = false;\n      this.$element.attr('aria-hidden', 'true');\n      this.$element.off('open.zf.trigger toggle.zf.trigger').on({\n        'open.zf.trigger': this.open.bind(this),\n        'toggle.zf.trigger': this.toggle.bind(this)\n      });\n      this.$element.addClass('is-closed');\n    }\n    this._addContentClasses(isRevealed);\n  }\n\n  /**\n   * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\n   * @private\n   */\n  _stopScrolling(event) {\n    return false;\n  }\n\n  // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios\n  // Only really works for y, not sure how to extend to x or if we need to.\n  _recordScrollable(event) {\n    let elem = this; // called from event handler context with this as elem\n\n     // If the element is scrollable (content overflows), then...\n    if (elem.scrollHeight !== elem.clientHeight) {\n      // If we're at the top, scroll down one pixel to allow scrolling up\n      if (elem.scrollTop === 0) {\n        elem.scrollTop = 1;\n      }\n      // If we're at the bottom, scroll up one pixel to allow scrolling down\n      if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {\n        elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;\n      }\n    }\n    elem.allowUp = elem.scrollTop > 0;\n    elem.allowDown = elem.scrollTop < (elem.scrollHeight - elem.clientHeight);\n    elem.lastY = event.originalEvent.pageY;\n  }\n\n  _stopScrollPropagation(event) {\n    let elem = this; // called from event handler context with this as elem\n    let up = event.pageY < elem.lastY;\n    let down = !up;\n    elem.lastY = event.pageY;\n\n    if((up && elem.allowUp) || (down && elem.allowDown)) {\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the off-canvas menu.\n   * @function\n   * @param {Object} event - Event object passed from listener.\n   * @param {jQuery} trigger - element that triggered the off-canvas to open.\n   * @fires OffCanvas#opened\n   */\n  open(event, trigger) {\n    if (this.$element.hasClass('is-open') || this.isRevealed) { return; }\n    var _this = this;\n\n    if (trigger) {\n      this.$lastTrigger = trigger;\n    }\n\n    if (this.options.forceTo === 'top') {\n      window.scrollTo(0, 0);\n    } else if (this.options.forceTo === 'bottom') {\n      window.scrollTo(0,document.body.scrollHeight);\n    }\n\n    if (this.options.transitionTime && this.options.transition !== 'overlap') {\n      this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);\n    } else {\n      this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');\n    }\n\n    /**\n     * Fires when the off-canvas menu opens.\n     * @event OffCanvas#opened\n     */\n    this.$element.addClass('is-open').removeClass('is-closed');\n\n    this.$triggers.attr('aria-expanded', 'true');\n    this.$element.attr('aria-hidden', 'false')\n        .trigger('opened.zf.offcanvas');\n\n    this.$content.addClass('is-open-' + this.position);\n\n    // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\n    if (this.options.contentScroll === false) {\n      $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\n      this.$element.on('touchstart', this._recordScrollable);\n      this.$element.on('touchmove', this._stopScrollPropagation);\n    }\n\n    if (this.options.contentOverlay === true) {\n      this.$overlay.addClass('is-visible');\n    }\n\n    if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n      this.$overlay.addClass('is-closable');\n    }\n\n    if (this.options.autoFocus === true) {\n      this.$element.one(transitionend(this.$element), function() {\n        if (!_this.$element.hasClass('is-open')) {\n          return; // exit if prematurely closed\n        }\n        var canvasFocus = _this.$element.find('[data-autofocus]');\n        if (canvasFocus.length) {\n            canvasFocus.eq(0).focus();\n        } else {\n            _this.$element.find('a, button').eq(0).focus();\n        }\n      });\n    }\n\n    if (this.options.trapFocus === true) {\n      this.$content.attr('tabindex', '-1');\n      Keyboard.trapFocus(this.$element);\n    }\n\n    this._addContentClasses();\n  }\n\n  /**\n   * Closes the off-canvas menu.\n   * @function\n   * @param {Function} cb - optional cb to fire after closure.\n   * @fires OffCanvas#closed\n   */\n  close(cb) {\n    if (!this.$element.hasClass('is-open') || this.isRevealed) { return; }\n\n    var _this = this;\n\n    this.$element.removeClass('is-open');\n\n    this.$element.attr('aria-hidden', 'true')\n      /**\n       * Fires when the off-canvas menu opens.\n       * @event OffCanvas#closed\n       */\n        .trigger('closed.zf.offcanvas');\n\n    this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');\n\n    // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\n    if (this.options.contentScroll === false) {\n      $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\n      this.$element.off('touchstart', this._recordScrollable);\n      this.$element.off('touchmove', this._stopScrollPropagation);\n    }\n\n    if (this.options.contentOverlay === true) {\n      this.$overlay.removeClass('is-visible');\n    }\n\n    if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n      this.$overlay.removeClass('is-closable');\n    }\n\n    this.$triggers.attr('aria-expanded', 'false');\n\n    if (this.options.trapFocus === true) {\n      this.$content.removeAttr('tabindex');\n      Keyboard.releaseFocus(this.$element);\n    }\n\n    // Listen to transitionEnd and add class when done.\n    this.$element.one(transitionend(this.$element), function(e) {\n      _this.$element.addClass('is-closed');\n      _this._removeContentClasses();\n    });\n  }\n\n  /**\n   * Toggles the off-canvas menu open or closed.\n   * @function\n   * @param {Object} event - Event object passed from listener.\n   * @param {jQuery} trigger - element that triggered the off-canvas to open.\n   */\n  toggle(event, trigger) {\n    if (this.$element.hasClass('is-open')) {\n      this.close(event, trigger);\n    }\n    else {\n      this.open(event, trigger);\n    }\n  }\n\n  /**\n   * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n   * @function\n   * @private\n   */\n  _handleKeyboard(e) {\n    Keyboard.handleKey(e, 'OffCanvas', {\n      close: () => {\n        this.close();\n        this.$lastTrigger.focus();\n        return true;\n      },\n      handled: () => {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    });\n  }\n\n  /**\n   * Destroys the offcanvas plugin.\n   * @function\n   */\n  _destroy() {\n    this.close();\n    this.$element.off('.zf.trigger .zf.offcanvas');\n    this.$overlay.off('.zf.offcanvas');\n  }\n}\n\nOffCanvas.defaults = {\n  /**\n   * Allow the user to click outside of the menu to close it.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnClick: true,\n\n  /**\n   * Adds an overlay on top of `[data-off-canvas-content]`.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  contentOverlay: true,\n\n  /**\n   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  contentId: null,\n\n  /**\n   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.\n   * @option\n   * @type {boolean}\n   * @default null\n   */\n  nested: null,\n\n  /**\n   * Enable/disable scrolling of the main content when an off canvas panel is open.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  contentScroll: true,\n\n  /**\n   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n   * @option\n   * @type {number}\n   * @default null\n   */\n  transitionTime: null,\n\n  /**\n   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\n   * @option\n   * @type {string}\n   * @default push\n   */\n  transition: 'push',\n\n  /**\n   * Force the page to scroll to top or bottom on open.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  forceTo: null,\n\n  /**\n   * Allow the offcanvas to remain open for certain breakpoints.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  isRevealed: false,\n\n  /**\n   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  revealOn: null,\n\n  /**\n   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  autoFocus: true,\n\n  /**\n   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n   * @option\n   * @type {string}\n   * @default reveal-for-\n   * @todo improve the regex testing for this.\n   */\n  revealClass: 'reveal-for-',\n\n  /**\n   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  trapFocus: false\n}\n\nexport {OffCanvas};\n"]},"hash":"6376665986cae1bdfba9e1c9e8ce07d423163f76"}
