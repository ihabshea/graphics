{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"defaultDisplay"},"ignored":false,"code":"define([\"../core\", \"../manipulation\" // appendTo\n], function (jQuery) {\n\tvar iframe,\n\t    elemdisplay = {}; /**\n                        * Retrieve the actual display of a element\n                        * @param {String} name nodeName of the element\n                        * @param {Object} doc Document object\n                        */ // Called only from within defaultDisplay\n\n\tfunction actualDisplay(name, doc) {\n\t\tvar style,\n\t\t    elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n\t\t    // getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? // Use of this method is a temporary fix (more like optimization) until something better comes along,\n\t\t// since it was removed from specification and supported only in FF\n\t\tstyle.display : jQuery.css(elem[0], \"display\"); // We don't have any data stored on the element,\n\t\t// so use \"detach\" method as fast way to get rid of the element\n\n\t\telem.detach();\n\t\treturn display;\n\t} /**\n    * Try to determine the default display value of an element\n    * @param {String} nodeName\n    */\n\n\tfunction defaultDisplay(nodeName) {\n\t\tvar doc = document,\n\t\t    display = elemdisplay[nodeName];\n\n\t\tif (!display) {\n\t\t\tdisplay = actualDisplay(nodeName, doc); // If the simple way fails, read from inside an iframe\n\n\t\t\tif (display === \"none\" || !display) {\n\t\t\t\t// Use the already-created iframe if possible\n\t\t\t\tiframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\n\t\t\t\tdoc = iframe[0].contentDocument; // Support: IE\n\n\t\t\t\tdoc.write();\n\t\t\t\tdoc.close();\n\t\t\t\tdisplay = actualDisplay(nodeName, doc);\n\t\t\t\tiframe.detach();\n\t\t\t} // Store the correct default display\n\n\n\t\t\telemdisplay[nodeName] = display;\n\t\t}\n\n\t\treturn display;\n\t}\n\n\treturn defaultDisplay;\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js"],"names":["define","jQuery","iframe","elemdisplay","actualDisplay","name","doc","style","elem","createElement","appendTo","body","display","window","getDefaultComputedStyle","css","detach","defaultDisplay","nodeName","document","documentElement","contentDocument","write","close"],"mappings":"AAAAA,OAAO,CACN,SADM,EAEN,iBAFM,CAEY;AAFZ,CAAP,EAGG,UAAUC,MAAV,EAAmB;AAEtB,KAAIC,MAAJ;AAAA,KACCC,cAAc,EADf,CAFsB,CAKtB;;;;0BALsB,CAUtB;;AACA,UAASC,aAAT,CAAwBC,IAAxB,EAA8BC,GAA9B,EAAoC;AACnC,MAAIC,KAAJ;AAAA,MACCC,OAAOP,OAAQK,IAAIG,aAAJ,CAAmBJ,IAAnB,CAAR,EAAoCK,QAApC,CAA8CJ,IAAIK,IAAlD,CADR;AAAA,MAGC;AACAC,YAAUC,OAAOC,uBAAP,KAAoCP,QAAQM,OAAOC,uBAAP,CAAgCN,KAAM,CAAN,CAAhC,CAA5C,IAET;AACA;AACAD,QAAMK,OAJG,GAIOX,OAAOc,GAAP,CAAYP,KAAM,CAAN,CAAZ,EAAuB,SAAvB,CARlB,CADmC,CAWnC;AACA;;AACAA,OAAKQ,MAAL;AAEA,SAAOJ,OAAP;AACA,EA3BqB,CA6BtB;;;;;AAIA,UAASK,cAAT,CAAyBC,QAAzB,EAAoC;AACnC,MAAIZ,MAAMa,QAAV;AAAA,MACCP,UAAUT,YAAae,QAAb,CADX;;AAGA,MAAK,CAACN,OAAN,EAAgB;AACfA,aAAUR,cAAec,QAAf,EAAyBZ,GAAzB,CAAV,CADe,CAGf;;AACA,OAAKM,YAAY,MAAZ,IAAsB,CAACA,OAA5B,EAAsC;AAErC;AACAV,aAAS,CAACA,UAAUD,OAAQ,gDAAR,CAAX,EAAuES,QAAvE,CAAiFJ,IAAIc,eAArF,CAAT,CAHqC,CAKrC;;AACAd,UAAMJ,OAAQ,CAAR,EAAYmB,eAAlB,CANqC,CAQrC;;AACAf,QAAIgB,KAAJ;AACAhB,QAAIiB,KAAJ;AAEAX,cAAUR,cAAec,QAAf,EAAyBZ,GAAzB,CAAV;AACAJ,WAAOc,MAAP;AACA,IAlBc,CAoBf;;;AACAb,eAAae,QAAb,IAA0BN,OAA1B;AACA;;AAED,SAAOA,OAAP;AACA;;AAED,QAAOK,cAAP;AAEC,CArED","file":"packages/zurb:foundation-sites/vendor/jquery/src/css/defaultDisplay.js.map","sourcesContent":["define([\n\t\"../core\",\n\t\"../manipulation\" // appendTo\n], function( jQuery ) {\n\nvar iframe,\n\telemdisplay = {};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar style,\n\t\telem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\t// getDefaultComputedStyle might be reliably used only on attached element\n\t\tdisplay = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?\n\n\t\t\t// Use of this method is a temporary fix (more like optimization) until something better comes along,\n\t\t\t// since it was removed from specification and supported only in FF\n\t\t\tstyle.display : jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = (iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" )).appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\n\nreturn defaultDisplay;\n\n});\n"]},"hash":"aaf4c43c6b983f857eb1a01d93ec778dedcbb1a5"}
