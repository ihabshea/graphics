{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/test/javascript/components/interchange.js","filenameRelative":"packages/zurb:foundation-sites/test/javascript/components/interchange.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/test/javascript/components/interchange.js.map","sourceFileName":"packages/zurb:foundation-sites/test/javascript/components/interchange.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"interchange"},"ignored":false,"code":"describe('Interchange', function () {\n  var plugin;\n  var $html; /**\n              * Generates paths to different assets\n              * @param  {[type]} type [description]\n              * @param  {[type]} size [description]\n              * @return {[type]}      [description]\n              */\n\n  var getPath = function (type, size) {\n    switch (type) {\n      case 'image':\n      case 'background':\n        return \"_build/assets/img/interchange/strip_icc()/\" + size + \".jpg\";\n\n      default:\n        return \"_build/assets/partials/interchange-\" + size + \".html\";\n    }\n  }; /**\n      * Generates templates to use based on type.\n      * @param  {string} type Type to generate, image, background or template.\n      * @return {string}      Generated template.\n      */\n\n  var generateTemplate = function (type) {\n    var type = type || 'template',\n        tag = type === 'image' ? 'img' : 'div',\n        path;\n\n    switch (type) {\n      case 'image':\n        return \"<img data-interchange=\\\"\\n            [\" + getPath(type, 'small') + \", small],\\n            [\" + getPath(type, 'medium') + \", medium],\\n            [\" + getPath(type, 'large') + \", large]\\n          \\\">\";\n\n      case 'background':\n        return \"<div data-interchange=\\\"\\n            [\" + getPath(type, 'small') + \", small],\\n            [\" + getPath(type, 'medium') + \", medium],\\n            [\" + getPath(type, 'large') + \", large]\\n          \\\"></div>\";\n\n      default:\n        return \"<div data-interchange=\\\"\\n            [\" + getPath(type, 'default') + \", small],\\n            [\" + getPath(type, 'medium') + \", medium],\\n            [\" + getPath(type, 'large') + \", large]\\n          \\\"></div>\";\n    }\n  };\n\n  afterEach(function () {\n    plugin.destroy();\n    $html.remove();\n  });\n  describe('constructor()', function () {\n    it('stores the element and plugin options', function () {\n      $html = $(generateTemplate('template')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      plugin.$element.should.be.an('object');\n      plugin.options.should.be.an('object');\n    });\n  });\n  describe('replace()', function () {\n    it('replaces src attribute of img', function () {\n      $html = $(generateTemplate('image')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      plugin.replace(getPath('img', 'large'));\n      $html.should.have.attr('src', getPath('img', 'large'));\n    });\n    it('replaces background style of divs', function () {\n      $html = $(generateTemplate('background')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      plugin.replace(getPath('background', 'large'));\n      $html[0].style.backgroundImage.should.contain(getPath('background', 'large').replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    });\n    it('replaces contents of div with templates', function () {\n      $html = $(generateTemplate('template')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      var spy = sinon.spy($, 'get');\n      plugin.replace(getPath('template', 'large'));\n      sinon.assert.calledWith(spy, getPath('template', 'large'));\n      spy.restore();\n    });\n    it('fires replaced.zf.interchange event', function () {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      var spy = sinon.spy();\n      $html.on('replaced.zf.interchange', spy);\n      plugin.replace(getPath('image', 'large'));\n      sinon.assert.called(spy);\n    });\n  });\n  describe('reflow()', function () {\n    it('calls replace for given media query', function () {\n      $html = $(generateTemplate('image')).attr('data-interchange', '[image.png, (min-width: 1px)]').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      var spy = sinon.spy();\n      plugin.replace = spy;\n\n      plugin._reflow();\n\n      sinon.assert.calledWith(spy, 'image.png');\n    });\n  });\n  describe('generateRules()', function () {\n    it('extracts rules from the plugin element', function () {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin._generateRules($html);\n\n      plugin.rules.length.should.be.equal(3);\n    });\n    it('extracts special queries from the plugin element', function () {\n      $html = $(generateTemplate('image')).attr('data-interchange', '[image.png, retina]').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin._generateRules($html);\n\n      plugin.rules[0].query.should.be.equal(Foundation.Interchange.SPECIAL_QUERIES['retina']);\n    });\n  });\n  describe('addBreakpoints()', function () {\n    it('adds Foundation breakpoints to special queries', function () {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      var specialQueriesCount = Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length,\n          foundationMediaQueriesCount = Foundation.MediaQuery.queries.length;\n      Foundation.MediaQuery.queries.push({\n        name: 'test-query',\n        value: 'test-query-value'\n      });\n\n      plugin._addBreakpoints($html);\n\n      Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length.should.be.equal(specialQueriesCount + 1); // Reset Foundation.MediaQueries\n\n      Foundation.MediaQuery.queries.length = foundationMediaQueriesCount;\n    });\n  });\n  describe('events()', function () {\n    it('calls reflow on viewport size change once', function (done) {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      Foundation.IHearYou();\n      var spy = sinon.spy(plugin, '_reflow');\n      setTimeout(function () {\n        $(window).trigger('resize');\n      }, 1);\n      setTimeout(function () {\n        $(window).trigger('resize');\n      }, 5);\n      setTimeout(function () {\n        $(window).trigger('resize');\n      }, 10);\n      setTimeout(function () {\n        // Wait for third trigger...\n        sinon.assert.calledOnce(spy);\n        done();\n      }, 50);\n    });\n  });\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/test/javascript/components/interchange.js"],"names":["describe","plugin","$html","getPath","type","size","generateTemplate","tag","path","afterEach","destroy","remove","it","$","appendTo","Foundation","Interchange","$element","should","be","an","options","attr","replace","have","style","backgroundImage","contain","spy","sinon","assert","calledWith","restore","on","called","_reflow","_generateRules","rules","length","equal","query","SPECIAL_QUERIES","specialQueriesCount","Object","keys","foundationMediaQueriesCount","MediaQuery","queries","push","name","value","_addBreakpoints","done","IHearYou","setTimeout","window","trigger","calledOnce"],"mappings":"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","file":"packages/zurb:foundation-sites/test/javascript/components/interchange.js.map","sourcesContent":["describe('Interchange', function() {\n  var plugin;\n  var $html;\n\n  /**\n   * Generates paths to different assets\n   * @param  {[type]} type [description]\n   * @param  {[type]} size [description]\n   * @return {[type]}      [description]\n   */\n  var getPath = function(type, size) {\n    switch (type) {\n      case 'image':\n      case 'background':\n        return `_build/assets/img/interchange/strip_icc()/${size}.jpg`;\n      default:\n        return `_build/assets/partials/interchange-${size}.html`;\n    }\n  };\n  /**\n   * Generates templates to use based on type.\n   * @param  {string} type Type to generate, image, background or template.\n   * @return {string}      Generated template.\n   */\n  var generateTemplate = function(type) {\n    var type = type || 'template',\n        tag = type === 'image' ? 'img' : 'div',\n        path;\n    switch (type) {\n      case 'image':\n        return `<img data-interchange=\"\n            [${getPath(type, 'small')}, small],\n            [${getPath(type, 'medium')}, medium],\n            [${getPath(type, 'large')}, large]\n          \">`;\n      case 'background':\n        return `<div data-interchange=\"\n            [${getPath(type, 'small')}, small],\n            [${getPath(type, 'medium')}, medium],\n            [${getPath(type, 'large')}, large]\n          \"></div>`;\n      default:\n        return `<div data-interchange=\"\n            [${getPath(type, 'default')}, small],\n            [${getPath(type, 'medium')}, medium],\n            [${getPath(type, 'large')}, large]\n          \"></div>`;\n    }\n  };\n\n  afterEach(function() {\n    plugin.destroy();\n    $html.remove();\n  });\n\n  describe('constructor()', function() {\n    it('stores the element and plugin options', function() {\n      $html = $(generateTemplate('template')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin.$element.should.be.an('object');\n      plugin.options.should.be.an('object');\n    });\n  });\n\n  describe('replace()', function() {\n    it('replaces src attribute of img', function() {\n      $html = $(generateTemplate('image')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin.replace(getPath('img', 'large'));\n\n      $html.should.have.attr('src', getPath('img', 'large'));\n    });\n\n    it('replaces background style of divs', function() {\n      $html = $(generateTemplate('background')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin.replace(getPath('background', 'large'));\n\n      $html[0].style.backgroundImage.should.contain(getPath('background', 'large').replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    });\n\n    it('replaces contents of div with templates', function() {\n      $html = $(generateTemplate('template')).attr('data-interchange', '').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      var spy = sinon.spy($, 'get');\n\n      plugin.replace(getPath('template', 'large'));\n\n      sinon.assert.calledWith(spy, getPath('template', 'large'));\n\n      spy.restore();\n    });\n\n    it('fires replaced.zf.interchange event', function() {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      let spy = sinon.spy();\n      $html.on('replaced.zf.interchange', spy);\n\n      plugin.replace(getPath('image', 'large'));\n\n      sinon.assert.called(spy);\n    });\n  });\n\n  describe('reflow()', function() {\n    it('calls replace for given media query', function() {\n      $html = $(generateTemplate('image')).attr('data-interchange', '[image.png, (min-width: 1px)]').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      let spy = sinon.spy();\n      plugin.replace = spy;\n\n      plugin._reflow();\n\n      sinon.assert.calledWith(spy, 'image.png');\n    });\n  });\n\n  describe('generateRules()', function() {\n    it('extracts rules from the plugin element', function() {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin._generateRules($html);\n\n      plugin.rules.length.should.be.equal(3);\n    });\n\n    it('extracts special queries from the plugin element', function() {\n      $html = $(generateTemplate('image')).attr('data-interchange', '[image.png, retina]').appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n      plugin._generateRules($html);\n\n      plugin.rules[0].query.should.be.equal(Foundation.Interchange.SPECIAL_QUERIES['retina']);\n    });\n  });\n\n\n  describe('addBreakpoints()', function() {\n    it('adds Foundation breakpoints to special queries', function() {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n\n\n      var specialQueriesCount = Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length,\n          foundationMediaQueriesCount = Foundation.MediaQuery.queries.length;\n\n      Foundation.MediaQuery.queries.push({\n        name: 'test-query',\n        value: 'test-query-value'\n      })\n\n      plugin._addBreakpoints($html);\n\n      Object.keys(Foundation.Interchange.SPECIAL_QUERIES).length.should.be.equal(specialQueriesCount + 1);\n\n      // Reset Foundation.MediaQueries\n      Foundation.MediaQuery.queries.length = foundationMediaQueriesCount;\n    });\n  });\n\n describe('events()', function() {\n    it('calls reflow on viewport size change once', function(done) {\n      $html = $(generateTemplate('image')).appendTo('body');\n      plugin = new Foundation.Interchange($html, {});\n      Foundation.IHearYou();\n      let spy = sinon.spy(plugin, '_reflow');\n\n      setTimeout(function() {\n        $(window).trigger('resize');\n      }, 1);\n\n      setTimeout(function() {\n        $(window).trigger('resize');\n      }, 5);\n\n      setTimeout(function() {\n        $(window).trigger('resize');\n      }, 10);\n\n      setTimeout(function() { // Wait for third trigger...\n        sinon.assert.calledOnce(spy);\n        done();\n      }, 50);\n    });\n  });\n\n\n});\n"]},"hash":"6ef750863e4e926cc45a672393c7d3e821c5a0ff"}
