{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./foundation.util.core","imported":["rtl"],"specifiers":[{"kind":"named","imported":"rtl","local":"Rtl"}]}],"exports":{"exported":["Box"],"specifiers":[{"kind":"local","local":"Box","exported":"Box"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.util.box.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.util.box.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.util.box.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.util.box.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.util.box"},"ignored":false,"code":"'use strict';\n\nmodule.export({\n  Box: function () {\n    return Box;\n  }\n});\nvar Rtl = void 0;\nmodule.watch(require(\"./foundation.util.core\"), {\n  rtl: function (v) {\n    Rtl = v;\n  }\n}, 0);\nvar Box = {\n  ImNotTouchingYou: ImNotTouchingYou,\n  OverlapArea: OverlapArea,\n  GetDimensions: GetDimensions,\n  GetOffsets: GetOffsets,\n  GetExplicitOffsets: GetExplicitOffsets /**\n                                          * Compares the dimensions of an element to a container and determines collision events with container.\n                                          * @function\n                                          * @param {jQuery} element - jQuery object to test for collisions.\n                                          * @param {jQuery} parent - jQuery object to use as bounding container.\n                                          * @param {Boolean} lrOnly - set to true to check left and right values only.\n                                          * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n                                          * @default if no parent object passed, detects collisions with `window`.\n                                          * @returns {Boolean} - true if collision free, false if a collision in any direction.\n                                          */\n};\n\nfunction ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;\n}\n\n;\n\nfunction OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  var eleDims = GetDimensions(element),\n      topOver,\n      bottomOver,\n      leftOver,\n      rightOver;\n\n  if (parent) {\n    var parDims = GetDimensions(parent);\n    bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);\n    topOver = eleDims.offset.top - parDims.offset.top;\n    leftOver = eleDims.offset.left - parDims.offset.left;\n    rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);\n  } else {\n    bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);\n    topOver = eleDims.offset.top - eleDims.windowDims.offset.top;\n    leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;\n    rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);\n  }\n\n  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);\n  topOver = Math.min(topOver, 0);\n  leftOver = Math.min(leftOver, 0);\n  rightOver = Math.min(rightOver, 0);\n\n  if (lrOnly) {\n    return leftOver + rightOver;\n  }\n\n  if (tbOnly) {\n    return topOver + bottomOver;\n  } // use sum of squares b/c we care about overlap area.\n\n\n  return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);\n} /**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */\n\nfunction GetDimensions(elem, test) {\n  elem = elem.length ? elem[0] : elem;\n\n  if (elem === window || elem === document) {\n    throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n  }\n\n  var rect = elem.getBoundingClientRect(),\n      parRect = elem.parentNode.getBoundingClientRect(),\n      winRect = document.body.getBoundingClientRect(),\n      winY = window.pageYOffset,\n      winX = window.pageXOffset;\n  return {\n    width: rect.width,\n    height: rect.height,\n    offset: {\n      top: rect.top + winY,\n      left: rect.left + winX\n    },\n    parentDims: {\n      width: parRect.width,\n      height: parRect.height,\n      offset: {\n        top: parRect.top + winY,\n        left: parRect.left + winX\n      }\n    },\n    windowDims: {\n      width: winRect.width,\n      height: winRect.height,\n      offset: {\n        top: winY,\n        left: winX\n      }\n    }\n  };\n} /**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where\n   * you don't know alignment, but generally from\n   * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */\n\nfunction GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n  console.log(\"NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5\");\n\n  switch (position) {\n    case 'top':\n      return Rtl() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);\n\n    case 'bottom':\n      return Rtl() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n\n    case 'center top':\n      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);\n\n    case 'center bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);\n\n    case 'center left':\n      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);\n\n    case 'center right':\n      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);\n\n    case 'left bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);\n\n    case 'right bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n    // Backwards compatibility... this along with the reveal and reveal full\n    // classes are the only ones that didn't reference anchor\n\n    case 'center':\n      return {\n        left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,\n        top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)\n      };\n\n    case 'reveal':\n      return {\n        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,\n        top: $eleDims.windowDims.offset.top + vOffset\n      };\n\n    case 'reveal full':\n      return {\n        left: $eleDims.windowDims.offset.left,\n        top: $eleDims.windowDims.offset.top\n      };\n      break;\n\n    default:\n      return {\n        left: Rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,\n        top: $anchorDims.offset.top + $anchorDims.height + vOffset\n      };\n  }\n}\n\nfunction GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {\n  var $eleDims = GetDimensions(element),\n      $anchorDims = anchor ? GetDimensions(anchor) : null;\n  var topVal, leftVal; // set position related attribute\n\n  switch (position) {\n    case 'top':\n      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);\n      break;\n\n    case 'bottom':\n      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;\n      break;\n\n    case 'left':\n      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);\n      break;\n\n    case 'right':\n      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;\n      break;\n  } // set alignment related attribute\n\n\n  switch (position) {\n    case 'top':\n    case 'bottom':\n      switch (alignment) {\n        case 'left':\n          leftVal = $anchorDims.offset.left + hOffset;\n          break;\n\n        case 'right':\n          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;\n          break;\n\n        case 'center':\n          leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;\n          break;\n      }\n\n      break;\n\n    case 'right':\n    case 'left':\n      switch (alignment) {\n        case 'bottom':\n          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;\n          break;\n\n        case 'top':\n          topVal = $anchorDims.offset.top + vOffset;\n          break;\n\n        case 'center':\n          topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;\n          break;\n      }\n\n      break;\n  }\n\n  return {\n    top: topVal,\n    left: leftVal\n  };\n}","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.util.box.js"],"names":["module","export","Box","Rtl","watch","require","rtl","v","ImNotTouchingYou","OverlapArea","GetDimensions","GetOffsets","GetExplicitOffsets","element","parent","lrOnly","tbOnly","ignoreBottom","eleDims","topOver","bottomOver","leftOver","rightOver","parDims","height","offset","top","left","width","windowDims","Math","min","sqrt","elem","test","length","window","document","Error","rect","getBoundingClientRect","parRect","parentNode","winRect","body","winY","pageYOffset","winX","pageXOffset","parentDims","anchor","position","vOffset","hOffset","isOverflow","console","log","$eleDims","$anchorDims","alignment","topVal","leftVal"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.util.box.js.map","sourcesContent":["'use strict';\n\n\nimport { rtl as Rtl } from \"./foundation.util.core\";\n\nvar Box = {\n  ImNotTouchingYou: ImNotTouchingYou,\n  OverlapArea: OverlapArea,\n  GetDimensions: GetDimensions,\n  GetOffsets: GetOffsets,\n  GetExplicitOffsets: GetExplicitOffsets\n}\n\n/**\n * Compares the dimensions of an element to a container and determines collision events with container.\n * @function\n * @param {jQuery} element - jQuery object to test for collisions.\n * @param {jQuery} parent - jQuery object to use as bounding container.\n * @param {Boolean} lrOnly - set to true to check left and right values only.\n * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n * @default if no parent object passed, detects collisions with `window`.\n * @returns {Boolean} - true if collision free, false if a collision in any direction.\n */\nfunction ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;\n};\n\nfunction OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  var eleDims = GetDimensions(element),\n  topOver, bottomOver, leftOver, rightOver;\n  if (parent) {\n    var parDims = GetDimensions(parent);\n\n    bottomOver = (parDims.height + parDims.offset.top) - (eleDims.offset.top + eleDims.height);\n    topOver    = eleDims.offset.top - parDims.offset.top;\n    leftOver   = eleDims.offset.left - parDims.offset.left;\n    rightOver  = (parDims.width + parDims.offset.left) - (eleDims.offset.left + eleDims.width);\n  }\n  else {\n    bottomOver = (eleDims.windowDims.height + eleDims.windowDims.offset.top) - (eleDims.offset.top + eleDims.height);\n    topOver    = eleDims.offset.top - eleDims.windowDims.offset.top;\n    leftOver   = eleDims.offset.left - eleDims.windowDims.offset.left;\n    rightOver  = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);\n  }\n\n  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);\n  topOver    = Math.min(topOver, 0);\n  leftOver   = Math.min(leftOver, 0);\n  rightOver  = Math.min(rightOver, 0);\n\n  if (lrOnly) {\n    return leftOver + rightOver;\n  }\n  if (tbOnly) {\n    return topOver + bottomOver;\n  }\n\n  // use sum of squares b/c we care about overlap area.\n  return Math.sqrt((topOver * topOver) + (bottomOver * bottomOver) + (leftOver * leftOver) + (rightOver * rightOver));\n}\n\n/**\n * Uses native methods to return an object of dimension values.\n * @function\n * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n * @returns {Object} - nested object of integer pixel values\n * TODO - if element is window, return only those values.\n */\nfunction GetDimensions(elem, test){\n  elem = elem.length ? elem[0] : elem;\n\n  if (elem === window || elem === document) {\n    throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n  }\n\n  var rect = elem.getBoundingClientRect(),\n      parRect = elem.parentNode.getBoundingClientRect(),\n      winRect = document.body.getBoundingClientRect(),\n      winY = window.pageYOffset,\n      winX = window.pageXOffset;\n\n  return {\n    width: rect.width,\n    height: rect.height,\n    offset: {\n      top: rect.top + winY,\n      left: rect.left + winX\n    },\n    parentDims: {\n      width: parRect.width,\n      height: parRect.height,\n      offset: {\n        top: parRect.top + winY,\n        left: parRect.left + winX\n      }\n    },\n    windowDims: {\n      width: winRect.width,\n      height: winRect.height,\n      offset: {\n        top: winY,\n        left: winX\n      }\n    }\n  }\n}\n\n/**\n * Returns an object of top and left integer pixel values for dynamically rendered elements,\n * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where\n * you don't know alignment, but generally from\n * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.\n * @function\n * @param {jQuery} element - jQuery object for the element being positioned.\n * @param {jQuery} anchor - jQuery object for the element's anchor point.\n * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n * TODO alter/rewrite to work with `em` values as well/instead of pixels\n */\nfunction GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n  console.log(\"NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5\");\n  switch (position) {\n    case 'top':\n      return Rtl() ?\n        GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) :\n        GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);\n    case 'bottom':\n      return Rtl() ?\n        GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) :\n        GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n    case 'center top':\n      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);\n    case 'center bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);\n    case 'center left':\n      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);\n    case 'center right':\n      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);\n    case 'left bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);\n    case 'right bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n    // Backwards compatibility... this along with the reveal and reveal full\n    // classes are the only ones that didn't reference anchor\n    case 'center':\n      return {\n        left: ($eleDims.windowDims.offset.left + ($eleDims.windowDims.width / 2)) - ($eleDims.width / 2) + hOffset,\n        top: ($eleDims.windowDims.offset.top + ($eleDims.windowDims.height / 2)) - ($eleDims.height / 2 + vOffset)\n      }\n    case 'reveal':\n      return {\n        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,\n        top: $eleDims.windowDims.offset.top + vOffset\n      }\n    case 'reveal full':\n      return {\n        left: $eleDims.windowDims.offset.left,\n        top: $eleDims.windowDims.offset.top\n      }\n      break;\n    default:\n      return {\n        left: (Rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset: $anchorDims.offset.left + hOffset),\n        top: $anchorDims.offset.top + $anchorDims.height + vOffset\n      }\n\n  }\n\n}\n\nfunction GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {\n  var $eleDims = GetDimensions(element),\n      $anchorDims = anchor ? GetDimensions(anchor) : null;\n\n      var topVal, leftVal;\n\n  // set position related attribute\n\n  switch (position) {\n    case 'top':\n      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);\n      break;\n    case 'bottom':\n      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;\n      break;\n    case 'left':\n      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);\n      break;\n    case 'right':\n      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;\n      break;\n  }\n\n\n  // set alignment related attribute\n  switch (position) {\n    case 'top':\n    case 'bottom':\n      switch (alignment) {\n        case 'left':\n          leftVal = $anchorDims.offset.left + hOffset;\n          break;\n        case 'right':\n          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;\n          break;\n        case 'center':\n          leftVal = isOverflow ? hOffset : (($anchorDims.offset.left + ($anchorDims.width / 2)) - ($eleDims.width / 2)) + hOffset;\n          break;\n      }\n      break;\n    case 'right':\n    case 'left':\n      switch (alignment) {\n        case 'bottom':\n          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;\n          break;\n        case 'top':\n          topVal = $anchorDims.offset.top + vOffset\n          break;\n        case 'center':\n          topVal = ($anchorDims.offset.top + vOffset + ($anchorDims.height / 2)) - ($eleDims.height / 2)\n          break;\n      }\n      break;\n  }\n  return {top: topVal, left: leftVal};\n}\n\nexport {Box};\n"]},"hash":"1e683a24c36e7e55f1a258de13638f2cdafe85a6"}
