{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"autocompleteBehavior"},"ignored":false,"code":"/*jslint vars: true*/ /*global describe, it, expect, waits, waitsFor, runs, afterEach, spyOn, $*/describe('Autocomplete', function () {\n    'use strict';\n\n    afterEach(function () {\n        $('.autocomplete-suggestions').hide();\n    });\n    it('Should initialize autocomplete options', function () {\n        var input = document.createElement('input'),\n            options = {\n            serviceUrl: '/autocomplete/service/url'\n        },\n            autocomplete = new $.Autocomplete(input, options);\n        expect(autocomplete.options.serviceUrl).toEqual(options.serviceUrl);\n        expect(autocomplete.suggestionsContainer).not.toBeNull();\n    });\n    it('Should set autocomplete attribute to \"off\"', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {});\n        expect(autocomplete).not.toBeNull();\n        expect(input.getAttribute('autocomplete')).toEqual('off');\n    });\n    it('Should get current value', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{\n                value: 'Jamaica',\n                data: 'B'\n            }]\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.currentValue).toEqual('Jam');\n    });\n    it('Should call formatResult three times', function () {\n        var input = document.createElement('input'),\n            counter = 0,\n            suggestion,\n            currentValue,\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n            formatResult: function (s, v) {\n                suggestion = s;\n                currentValue = v;\n                counter += 1;\n            }\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        expect(suggestion.value).toBe('Jamaica');\n        expect(suggestion.data).toBe(null);\n        expect(currentValue).toEqual('Jam');\n        expect(counter).toEqual(3);\n    });\n    it('Verify onSelect callback', function () {\n        var input = document.createElement('input'),\n            context,\n            value,\n            data,\n            autocomplete = $(input).autocomplete({\n            lookup: [{\n                value: 'A',\n                data: 'B'\n            }],\n            triggerSelectOnValidInput: false,\n            onSelect: function (suggestion) {\n                context = this;\n                value = suggestion.value;\n                data = suggestion.data;\n            }\n        }).autocomplete();\n        input.value = 'A';\n        autocomplete.onValueChange();\n        autocomplete.select(0);\n        expect(context).toEqual(input);\n        expect(value).toEqual('A');\n        expect(data).toEqual('B');\n    });\n    it('Should convert suggestions format', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['A', 'B']\n        });\n        expect(autocomplete.options.lookup[0].value).toBe('A');\n        expect(autocomplete.options.lookup[1].value).toBe('B');\n    });\n    it('Should execute onSearchStart', function () {\n        var input = document.createElement('input'),\n            startQuery,\n            ajaxExecuted = false,\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: '/test',\n            onSearchStart: function (params) {\n                startQuery = params.query;\n            }\n        });\n        $.mockjax({\n            url: '/test',\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                    query: query,\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.value = 'A';\n        autocomplete.onValueChange();\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(startQuery).toBe('A');\n        });\n    });\n    it('Should execute onSearchComplete', function () {\n        var input = document.createElement('input'),\n            completeQuery,\n            ajaxExecuted = false,\n            url = '/test-completed',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            onSearchComplete: function (query) {\n                completeQuery = query;\n            }\n        });\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                    query: query,\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.value = 'A';\n        autocomplete.onValueChange();\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(completeQuery).toBe('A');\n        });\n    });\n    it('Should execute onSearchError', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            errorMessage = false,\n            url = '/test-error',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            onSearchError: function (q, jqXHR, textStatus, errorThrown) {\n                errorMessage = jqXHR.responseText;\n            }\n        });\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            status: 500,\n            response: function (settings) {\n                ajaxExecuted = true;\n                this.responseText = \"An error occurred\";\n            }\n        });\n        input.value = 'A';\n        autocomplete.onValueChange();\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(errorMessage).toBe(\"An error occurred\");\n        });\n    });\n    it('Should transform results', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-transform',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            transformResult: function (result, query) {\n                return {\n                    query: query,\n                    suggestions: $.map(result.split(','), function (item) {\n                        return {\n                            value: item,\n                            data: null\n                        };\n                    })\n                };\n            }\n        });\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                this.responseText = 'Andora,Angola,Argentina';\n            }\n        });\n        input.value = 'A';\n        autocomplete.onValueChange();\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Andora');\n        });\n    });\n    it('Should not require orginal query value from the server', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-original-query',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url\n        });\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                var response = {\n                    query: null,\n                    suggestions: ['Aa', 'Bb', 'Cc']\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.value = 'A';\n        autocomplete.onValueChange();\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Aa');\n        });\n    });\n    it('Should should not preventDefault when tabDisabled is set to false', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{\n                value: 'Jamaica',\n                data: 'B'\n            }],\n            tabDisabled: false,\n            autoSelectFirst: true\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n        $(input).trigger(event);\n        expect(event.stopImmediatePropagation).not.toHaveBeenCalled();\n        expect(event.preventDefault).not.toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n    it('Should should preventDefault when tabDisabled is set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{\n                value: 'Jamaica',\n                data: 'B'\n            }],\n            tabDisabled: true,\n            autoSelectFirst: true\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n        $(input).trigger(event);\n        expect(event.stopImmediatePropagation).toHaveBeenCalled();\n        expect(event.preventDefault).toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n    it('Should not autoselect first item by default', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica']\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        expect(autocomplete.selectedIndex).toBe(-1);\n    });\n    it('Should autoselect first item autoSelectFirst set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n            autoSelectFirst: true\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        expect(autocomplete.selectedIndex).toBe(0);\n    });\n    it('Should use custom query parameter name', function () {\n        var input = document.createElement('input'),\n            paramName = 'custom',\n            paramValue = null,\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: '/test-query',\n            paramName: paramName\n        });\n        $.mockjax({\n            url: '/test-query',\n            responseTime: 5,\n            response: function (settings) {\n                paramValue = settings.data[paramName];\n                var response = {\n                    query: paramValue,\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n        waits(10);\n        runs(function () {\n            expect(paramValue).toBe('Jam');\n        });\n    });\n    it('Should destroy autocomplete instance', function () {\n        var input = $(document.createElement('input')),\n            div = $(document.createElement('div'));\n        input.autocomplete({\n            serviceUrl: '/test-dispose',\n            appendTo: div\n        });\n        expect(input.data('autocomplete')).toBeDefined();\n        expect(div.children().length).toBeGreaterThan(0);\n        input.autocomplete('dispose');\n        expect(input.data('autocomplete')).toBeUndefined();\n        expect(div.children().length).toBe(0);\n    });\n    it('Should return Autocomplete instance if called without arguments', function () {\n        var input = $(document.createElement('input'));\n        input.autocomplete({\n            serviceUrl: '/test-dispose'\n        });\n        var instance = input.autocomplete();\n        expect(instance instanceof $.Autocomplete).toBe(true);\n    });\n    it('Should construct serviceUrl via callback function.', function () {\n        var input = $(document.createElement('input')),\n            dynamicUrl,\n            data;\n        input.autocomplete({\n            ignoreParams: true,\n            serviceUrl: function (query) {\n                return '/dynamic-url/' + encodeURIComponent(query).replace(/%20/g, \"+\");\n            }\n        });\n        $.mockjax({\n            url: '/dynamic-url/*',\n            responseTime: 5,\n            response: function (settings) {\n                dynamicUrl = settings.url;\n                data = settings.data;\n                var response = {\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.val('Hello World');\n        input.autocomplete().onValueChange();\n        waits(10);\n        runs(function () {\n            expect(dynamicUrl).toBe('/dynamic-url/Hello+World');\n            expect(data).toBeFalsy();\n        });\n    });\n    it('Should set width to be greater than zero', function () {\n        var input = $(document.createElement('input')),\n            instance,\n            width;\n        input.autocomplete({\n            lookup: [{\n                value: 'Jamaica',\n                data: 'B'\n            }]\n        });\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        width = $(instance.suggestionsContainer).width();\n        expect(width).toBeGreaterThan(0);\n    });\n    it('Should call beforeRender and pass container jQuery object', function () {\n        var element = document.createElement('input'),\n            input = $(element),\n            instance,\n            elementCount,\n            context;\n        input.autocomplete({\n            lookup: [{\n                value: 'Jamaica',\n                data: 'B'\n            }],\n            beforeRender: function (container) {\n                context = this;\n                elementCount = container.length;\n            }\n        });\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        expect(context).toBe(element);\n        expect(elementCount).toBe(1);\n    });\n    it('Should trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = false;\n        input.autocomplete({\n            lookup: [{\n                value: 'Jamaica',\n                data: 'J'\n            }],\n            triggerSelectOnValidInput: true,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        expect(suggestionData).toBe('J');\n    });\n    it('Should NOT trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = null;\n        input.autocomplete({\n            lookup: [{\n                value: 'Jamaica',\n                data: 'J'\n            }],\n            triggerSelectOnValidInput: false,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        expect(suggestionData).toBeNull();\n    });\n    it('Should use serviceUrl and params as cacheKey', function () {\n        var input = $('<input />'),\n            instance,\n            ajaxExecuted = false,\n            data = {\n            a: 1,\n            query: 'Jam'\n        },\n            serviceUrl = '/autocomplete/cached/url',\n            cacheKey = serviceUrl + '?' + $.param(data);\n        input.autocomplete({\n            serviceUrl: serviceUrl,\n            params: data\n        });\n        $.mockjax({\n            url: serviceUrl,\n            responseTime: 5,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                    suggestions: [{\n                        value: 'Jamaica'\n                    }, {\n                        value: 'Jamaica'\n                    }]\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        waits(10);\n        runs(function () {\n            expect(instance.cachedResponse[cacheKey]).toBeTruthy();\n        });\n    });\n    it('Should limit results for local request', function () {\n        var input = $('<input />'),\n            instance,\n            limit = 3;\n        input.autocomplete({\n            lookup: [{\n                value: 'Jamaica'\n            }, {\n                value: 'Jamaica'\n            }, {\n                value: 'Jamaica'\n            }, {\n                value: 'Jamaica'\n            }, {\n                value: 'Jamaica'\n            }]\n        });\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange(); // Expect all items to be displayed:\n\n        expect(instance.suggestions.length).toBe(5); // Set lookup result limit and verify:\n\n        instance.setOptions({\n            lookupLimit: limit\n        });\n        instance.onValueChange();\n        expect(instance.suggestions.length).toBe(limit);\n    });\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js"],"names":["describe","afterEach","$","hide","it","input","document","createElement","options","serviceUrl","autocomplete","Autocomplete","expect","toEqual","suggestionsContainer","not","toBeNull","getAttribute","lookup","value","data","onValueChange","visible","toBe","currentValue","counter","suggestion","formatResult","s","v","context","triggerSelectOnValidInput","onSelect","select","startQuery","ajaxExecuted","onSearchStart","params","query","mockjax","url","responseTime","response","settings","suggestions","responseText","JSON","stringify","waitsFor","runs","completeQuery","onSearchComplete","errorMessage","onSearchError","q","jqXHR","textStatus","errorThrown","status","transformResult","result","map","split","item","length","tabDisabled","autoSelectFirst","event","Event","which","spyOn","disabled","undefined","selectedIndex","trigger","stopImmediatePropagation","toHaveBeenCalled","preventDefault","suggest","paramName","paramValue","waits","div","appendTo","toBeDefined","children","toBeGreaterThan","toBeUndefined","instance","dynamicUrl","ignoreParams","encodeURIComponent","replace","val","toBeFalsy","width","element","elementCount","beforeRender","container","suggestionData","a","cacheKey","param","cachedResponse","toBeTruthy","limit","setOptions","lookupLimit"],"mappings":"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","file":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js.map","sourcesContent":["﻿/*jslint vars: true*/\n/*global describe, it, expect, waits, waitsFor, runs, afterEach, spyOn, $*/\n\ndescribe('Autocomplete', function () {\n    'use strict';\n\n    afterEach(function () {\n        $('.autocomplete-suggestions').hide();\n    });\n\n    it('Should initialize autocomplete options', function () {\n        var input = document.createElement('input'),\n            options = { serviceUrl: '/autocomplete/service/url' },\n            autocomplete = new $.Autocomplete(input, options);\n\n        expect(autocomplete.options.serviceUrl).toEqual(options.serviceUrl);\n        expect(autocomplete.suggestionsContainer).not.toBeNull();\n    });\n\n    it('Should set autocomplete attribute to \"off\"', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {});\n\n        expect(autocomplete).not.toBeNull();\n        expect(input.getAttribute('autocomplete')).toEqual('off');\n    });\n\n    it('Should get current value', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }]\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.currentValue).toEqual('Jam');\n    });\n\n    it('Should call formatResult three times', function () {\n        var input = document.createElement('input'),\n            counter = 0,\n            suggestion,\n            currentValue,\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n                formatResult: function (s, v) {\n                    suggestion = s;\n                    currentValue = v;\n                    counter += 1;\n                }\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(suggestion.value).toBe('Jamaica');\n        expect(suggestion.data).toBe(null);\n        expect(currentValue).toEqual('Jam');\n        expect(counter).toEqual(3);\n    });\n\n    it('Verify onSelect callback', function () {\n        var input = document.createElement('input'),\n            context,\n            value,\n            data,\n            autocomplete = $(input).autocomplete({\n                lookup: [{ value: 'A', data: 'B' }],\n                triggerSelectOnValidInput: false,\n                onSelect: function (suggestion) {\n                    context = this;\n                    value = suggestion.value;\n                    data = suggestion.data;\n                }\n            }).autocomplete();\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n        autocomplete.select(0);\n\n        expect(context).toEqual(input);\n        expect(value).toEqual('A');\n        expect(data).toEqual('B');\n    });\n\n    it('Should convert suggestions format', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['A', 'B']\n            });\n\n        expect(autocomplete.options.lookup[0].value).toBe('A');\n        expect(autocomplete.options.lookup[1].value).toBe('B');\n    });\n\n    it('Should execute onSearchStart', function () {\n        var input = document.createElement('input'),\n            startQuery,\n            ajaxExecuted = false,\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: '/test',\n                onSearchStart: function (params) {\n                    startQuery = params.query;\n                }\n            });\n\n        $.mockjax({\n            url: '/test',\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        query: query,\n                        suggestions: []\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(startQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchComplete', function () {\n        var input = document.createElement('input'),\n            completeQuery,\n            ajaxExecuted = false,\n            url = '/test-completed',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                onSearchComplete: function (query) {\n                    completeQuery = query;\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        query: query,\n                        suggestions: []\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(completeQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchError', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            errorMessage = false,\n            url = '/test-error',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                onSearchError: function (q, jqXHR, textStatus, errorThrown) {\n                    errorMessage = jqXHR.responseText;\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            status: 500,\n            response: function (settings) {\n                ajaxExecuted = true;\n                this.responseText = \"An error occurred\";\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(errorMessage).toBe(\"An error occurred\");\n        });\n    });\n\n    it('Should transform results', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-transform',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                transformResult: function (result, query) {\n                    return {\n                        query: query,\n                        suggestions: $.map(result.split(','), function (item) {\n                            return { value: item, data: null };\n                        })\n                    };\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                this.responseText = 'Andora,Angola,Argentina';\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Andora');\n        });\n    });\n\n    it('Should not require orginal query value from the server', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-original-query',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                var response = {\n                    query: null,\n                    suggestions: ['Aa', 'Bb', 'Cc']\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Aa');\n        });\n    });\n\n    it('Should should not preventDefault when tabDisabled is set to false', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }],\n                tabDisabled: false,\n                autoSelectFirst: true\n            });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).not.toHaveBeenCalled();\n        expect(event.preventDefault).not.toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should should preventDefault when tabDisabled is set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }],\n                tabDisabled: true,\n                autoSelectFirst: true\n            });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).toHaveBeenCalled();\n        expect(event.preventDefault).toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should not autoselect first item by default', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica']\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(-1);\n    });\n\n    it('Should autoselect first item autoSelectFirst set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n                autoSelectFirst: true\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(0);\n    });\n\n    it('Should use custom query parameter name', function () {\n        var input = document.createElement('input'),\n            paramName = 'custom',\n            paramValue = null,\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: '/test-query',\n                paramName: paramName\n            });\n\n        $.mockjax({\n            url: '/test-query',\n            responseTime: 5,\n            response: function (settings) {\n                paramValue = settings.data[paramName];\n                var response = {\n                    query: paramValue,\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(paramValue).toBe('Jam');\n        });\n    });\n\n    it('Should destroy autocomplete instance', function () {\n        var input = $(document.createElement('input')),\n            div = $(document.createElement('div'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose',\n            appendTo: div\n        });\n\n        expect(input.data('autocomplete')).toBeDefined();\n        expect(div.children().length).toBeGreaterThan(0);\n\n        input.autocomplete('dispose');\n\n        expect(input.data('autocomplete')).toBeUndefined();\n        expect(div.children().length).toBe(0);\n    });\n\n    it('Should return Autocomplete instance if called without arguments', function () {\n        var input = $(document.createElement('input'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose'\n        });\n\n        var instance = input.autocomplete();\n\n        expect(instance instanceof $.Autocomplete).toBe(true);\n    });\n\n    it('Should construct serviceUrl via callback function.', function () {\n        var input = $(document.createElement('input')),\n            dynamicUrl,\n            data;\n\n        input.autocomplete({\n            ignoreParams: true,\n            serviceUrl: function (query) {\n                return '/dynamic-url/' + encodeURIComponent(query).replace(/%20/g, \"+\");\n            }\n        });\n\n        $.mockjax({\n            url: '/dynamic-url/*',\n            responseTime: 5,\n            response: function (settings) {\n                dynamicUrl = settings.url;\n                data = settings.data;\n                var response = {\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.val('Hello World');\n        input.autocomplete().onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(dynamicUrl).toBe('/dynamic-url/Hello+World');\n            expect(data).toBeFalsy();\n        });\n    });\n\n    it('Should set width to be greater than zero', function () {\n        var input = $(document.createElement('input')),\n            instance,\n            width;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        width = $(instance.suggestionsContainer).width();\n\n        expect(width).toBeGreaterThan(0);\n    });\n\n    it('Should call beforeRender and pass container jQuery object', function () {\n        var element = document.createElement('input'),\n            input = $(element),\n            instance,\n            elementCount,\n            context;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }],\n            beforeRender: function (container) {\n                context = this;\n                elementCount = container.length;\n            }\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(context).toBe(element);\n        expect(elementCount).toBe(1);\n    });\n\n    it('Should trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = false;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: true,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBe('J');\n    });\n\n    it('Should NOT trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = null;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: false,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBeNull();\n    });\n\n    it('Should use serviceUrl and params as cacheKey', function () {\n        var input = $('<input />'),\n            instance,\n            ajaxExecuted = false,\n            data = { a: 1, query: 'Jam' },\n            serviceUrl = '/autocomplete/cached/url',\n            cacheKey = serviceUrl + '?' + $.param(data);\n\n        input.autocomplete({\n            serviceUrl: serviceUrl,\n            params: data\n        });\n\n        $.mockjax({\n            url: serviceUrl,\n            responseTime: 5,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        suggestions: [{ value: 'Jamaica' }, { value: 'Jamaica' }]\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(instance.cachedResponse[cacheKey]).toBeTruthy();\n        });\n    });\n\n    it('Should limit results for local request', function () {\n        var input = $('<input />'),\n            instance,\n            limit = 3;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        // Expect all items to be displayed:\n        expect(instance.suggestions.length).toBe(5);\n\n        // Set lookup result limit and verify:\n        instance.setOptions({ lookupLimit: limit });\n        instance.onValueChange();\n\n        expect(instance.suggestions.length).toBe(limit);\n    });\n});"]},"hash":"a12ce28b35c7cbdde33a51fea26107db95136fdc"}
