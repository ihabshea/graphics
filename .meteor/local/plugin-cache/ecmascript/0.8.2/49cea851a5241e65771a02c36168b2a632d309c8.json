{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/test/javascript/components/dropdown.js","filenameRelative":"packages/zurb:foundation-sites/test/javascript/components/dropdown.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/test/javascript/components/dropdown.js.map","sourceFileName":"packages/zurb:foundation-sites/test/javascript/components/dropdown.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"dropdown"},"ignored":false,"code":"describe('Dropdown', function () {\n  var plugin = void 0;\n  var $dropdownController = void 0;\n  var $dropdownContainer = void 0;\n\n  var getDropdownController = function () {\n    var buttonClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return \"<button class=\\\"\" + buttonClasses + \"\\\" type=\\\"button\\\" data-toggle=\\\"my-dropdown\\\">toggle</button>\";\n  };\n\n  var getDropdownContainer = function () {\n    var dropdownClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return \"<div class=\\\"\" + dropdownClasses + \"\\\" data-dropdown id=\\\"my-dropdown\\\">Dropdown</div>\";\n  };\n\n  afterEach(function () {\n    plugin.destroy();\n    $dropdownController.remove();\n    $dropdownContainer.remove();\n  });\n  describe('constructor()', function () {\n    it('stores the element & plugin options', function () {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n      plugin.$element.should.be.an('object');\n      plugin.options.should.be.an('object');\n    });\n  });\n  describe('open()', function () {\n    it('traps focus if trapFocus option is true', function () {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {\n        trapFocus: true\n      });\n      var spy = sinon.spy(Foundation.Keyboard, 'trapFocus');\n      plugin.open();\n      sinon.assert.called(spy);\n      Foundation.Keyboard.trapFocus.restore();\n    });\n  });\n  describe('close()', function () {\n    it('releases focus if trapFocus option is true', function () {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {\n        trapFocus: true\n      }); // Open it first...\n\n      plugin.open();\n      var spy = sinon.spy(Foundation.Keyboard, 'releaseFocus');\n      plugin.close();\n      sinon.assert.called(spy);\n      Foundation.Keyboard.releaseFocus.restore();\n    });\n  });\n  describe('inferred positioning', function () {\n    it('default orientation should be bottom', function () {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n      plugin.open();\n      plugin.position.should.equal('bottom');\n    });\n    it('gets right alignment from float-right', function () {\n      $dropdownController = $(getDropdownController('custom-style-before float-right custom-style-after')).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n      plugin.open();\n      plugin.position.should.equal('bottom');\n      plugin.alignment.should.equal('right');\n    });\n  });\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/test/javascript/components/dropdown.js"],"names":["describe","plugin","$dropdownController","$dropdownContainer","getDropdownController","buttonClasses","getDropdownContainer","dropdownClasses","afterEach","destroy","remove","it","$","appendTo","Foundation","Dropdown","$element","should","be","an","options","trapFocus","spy","sinon","Keyboard","open","assert","called","restore","close","releaseFocus","position","equal","alignment"],"mappings":"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","file":"packages/zurb:foundation-sites/test/javascript/components/dropdown.js.map","sourcesContent":["describe('Dropdown', function() {\n  let plugin;\n  let $dropdownController;\n  let $dropdownContainer;\n\n  const getDropdownController = (buttonClasses = '') =>\n    `<button class=\"${buttonClasses}\" type=\"button\" data-toggle=\"my-dropdown\">toggle</button>`;\n  const getDropdownContainer = (dropdownClasses = '') =>\n    `<div class=\"${dropdownClasses}\" data-dropdown id=\"my-dropdown\">Dropdown</div>`;\n\n  afterEach(function() {\n    plugin.destroy();\n    $dropdownController.remove();\n    $dropdownContainer.remove();\n  });\n\n  describe('constructor()', function() {\n    it('stores the element & plugin options', function() {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n\n      plugin.$element.should.be.an('object');\n      plugin.options.should.be.an('object');\n    });\n  });\n\n  describe('open()', function() {\n    it('traps focus if trapFocus option is true', function() {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {trapFocus: true});\n\n      let spy = sinon.spy(Foundation.Keyboard, 'trapFocus');\n      plugin.open();\n\n      sinon.assert.called(spy);\n      Foundation.Keyboard.trapFocus.restore();\n    });\n  });\n\n  describe('close()', function() {\n    it('releases focus if trapFocus option is true', function() {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {trapFocus: true});\n\n      // Open it first...\n      plugin.open();\n\n      let spy = sinon.spy(Foundation.Keyboard, 'releaseFocus');\n      plugin.close();\n\n      sinon.assert.called(spy);\n      Foundation.Keyboard.releaseFocus.restore();\n    });\n  });\n\n  describe('inferred positioning', function() {\n    it('default orientation should be bottom', function() {\n      $dropdownController = $(getDropdownController()).appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n\n      plugin.open()\n      plugin.position.should.equal('bottom');\n    });\n\n    it('gets right alignment from float-right', function() {\n      $dropdownController = $(getDropdownController('custom-style-before float-right custom-style-after'))\n        .appendTo('body');\n      $dropdownContainer = $(getDropdownContainer()).appendTo('body');\n      plugin = new Foundation.Dropdown($dropdownContainer, {});\n\n      plugin.open()\n      plugin.position.should.equal('bottom')\n      plugin.alignment.should.equal('right')\n    });\n  });\n});\n"]},"hash":"49cea851a5241e65771a02c36168b2a632d309c8"}
