{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"jquery.mockjax"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*!\n * MockJax - jQuery Plugin to Mock Ajax requests\n *\n * Version:  1.5.1\n * Released:\n * Home:   http://github.com/appendto/jquery-mockjax\n * Author:   Jonathan Sharp (http://jdsharp.com)\n * License:  MIT,GPL\n *\n * Copyright (c) 2011 appendTo LLC.\n * Dual licensed under the MIT or GPL licenses.\n * http://appendto.com/open-source-licenses\n */(function ($) {\n\tvar _ajax = $.ajax,\n\t    mockHandlers = [],\n\t    CALLBACK_REGEX = /=\\?(&|$)/,\n\t    jsc = new Date().getTime(); // Parse the given XML string. \n\n\tfunction parseXML(xml) {\n\t\tif (window['DOMParser'] == undefined && window.ActiveXObject) {\n\t\t\tDOMParser = function () {};\n\n\t\t\tDOMParser.prototype.parseFromString = function (xmlString) {\n\t\t\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\t\tdoc.async = 'false';\n\t\t\t\tdoc.loadXML(xmlString);\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tvar xmlDoc = new DOMParser().parseFromString(xml, 'text/xml');\n\n\t\t\tif ($.isXMLDoc(xmlDoc)) {\n\t\t\t\tvar err = $('parsererror', xmlDoc);\n\n\t\t\t\tif (err.length == 1) {\n\t\t\t\t\tthrow 'Error: ' + $(xmlDoc).text();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow 'Unable to parse XML';\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tvar msg = e.name == undefined ? e : e.name + ': ' + e.message;\n\t\t\t$(document).trigger('xmlParseError', [msg]);\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn xmlDoc;\n\t} // Trigger a jQuery event\n\n\n\tfunction trigger(s, type, args) {\n\t\t(s.context ? $(s.context) : $.event).trigger(type, args);\n\t} // Check if the data field on the mock handler and the request match. This \n\t// can be used to restrict a mock handler to being used only when a certain\n\t// set of data is passed to it.\n\n\n\tfunction isMockDataEqual(mock, live) {\n\t\tvar identical = false; // Test for situations where the data is a querystring (not an object)\n\n\t\tif (typeof live === 'string') {\n\t\t\t// Querystring may be a regex\n\t\t\treturn $.isFunction(mock.test) ? mock.test(live) : mock == live;\n\t\t}\n\n\t\t$.each(mock, function (k, v) {\n\t\t\tif (live[k] === undefined) {\n\t\t\t\tidentical = false;\n\t\t\t\treturn identical;\n\t\t\t} else {\n\t\t\t\tidentical = true;\n\n\t\t\t\tif ((0, _typeof3.default)(live[k]) == 'object') {\n\t\t\t\t\treturn isMockDataEqual(mock[k], live[k]);\n\t\t\t\t} else {\n\t\t\t\t\tif ($.isFunction(mock[k].test)) {\n\t\t\t\t\t\tidentical = mock[k].test(live[k]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidentical = mock[k] == live[k];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn identical;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn identical;\n\t} // Check the given handler should mock the given request\n\n\n\tfunction getMockForRequest(handler, requestSettings) {\n\t\t// If the mock was registered with a function, let the function decide if we\n\t\t// want to mock this request\n\t\tif ($.isFunction(handler)) {\n\t\t\treturn handler(requestSettings);\n\t\t} // Inspect the URL of the request and check if the mock handler's url\n\t\t// matches the url for this ajax request\n\n\n\t\tif ($.isFunction(handler.url.test)) {\n\t\t\t// The user provided a regex for the url, test it\n\t\t\tif (!handler.url.test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t// Look for a simple wildcard '*' or a direct URL match\n\t\t\tvar star = handler.url.indexOf('*');\n\n\t\t\tif (handler.url !== requestSettings.url && star === -1 || !new RegExp(handler.url.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, \"\\\\$&\").replace('*', '.+')).test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} // Inspect the data submitted in the request (either POST body or GET query string)\n\n\n\t\tif (handler.data && requestSettings.data) {\n\t\t\tif (!isMockDataEqual(handler.data, requestSettings.data)) {\n\t\t\t\t// They're not identical, do not mock this request\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} // Inspect the request type\n\n\n\t\tif (handler && handler.type && handler.type.toLowerCase() != requestSettings.type.toLowerCase()) {\n\t\t\t// The request type doesn't match (GET vs. POST)\n\t\t\treturn null;\n\t\t}\n\n\t\treturn handler;\n\t} // If logging is enabled, log the mock to the console\n\n\n\tfunction logMock(mockHandler, requestSettings) {\n\t\tvar c = $.extend({}, $.mockjaxSettings, mockHandler);\n\n\t\tif (c.log && $.isFunction(c.log)) {\n\t\t\tc.log('MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url, $.extend({}, requestSettings));\n\t\t}\n\t} // Process the xhr objects send operation\n\n\n\tfunction _xhrSend(mockHandler, requestSettings, origSettings) {\n\t\t// This is a substitute for < 1.4 which lacks $.proxy\n\t\tvar process = function (that) {\n\t\t\treturn function () {\n\t\t\t\treturn function () {\n\t\t\t\t\t// The request has returned\n\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\tthis.readyState = 4; // We have an executable function, call it to give\n\t\t\t\t\t// the mock handler a chance to update it's data\n\n\t\t\t\t\tif ($.isFunction(mockHandler.response)) {\n\t\t\t\t\t\tmockHandler.response(origSettings);\n\t\t\t\t\t} // Copy over our mock to our xhr object before passing control back to\n\t\t\t\t\t// jQuery's onreadystatechange callback\n\n\n\t\t\t\t\tif (requestSettings.dataType == 'json' && (0, _typeof3.default)(mockHandler.responseText) == 'object') {\n\t\t\t\t\t\tthis.responseText = JSON.stringify(mockHandler.responseText);\n\t\t\t\t\t} else if (requestSettings.dataType == 'xml') {\n\t\t\t\t\t\tif (typeof mockHandler.responseXML == 'string') {\n\t\t\t\t\t\t\tthis.responseXML = parseXML(mockHandler.responseXML);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.responseXML = mockHandler.responseXML;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.responseText = mockHandler.responseText;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof mockHandler.status == 'number' || typeof mockHandler.status == 'string') {\n\t\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof mockHandler.statusText === \"string\") {\n\t\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\t} // jQuery < 1.4 doesn't have onreadystate change for xhr\n\n\n\t\t\t\t\tif ($.isFunction(this.onreadystatechange)) {\n\t\t\t\t\t\tif (mockHandler.isTimeout) {\n\t\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.onreadystatechange(mockHandler.isTimeout ? 'timeout' : undefined);\n\t\t\t\t\t} else if (mockHandler.isTimeout) {\n\t\t\t\t\t\t// Fix for 1.3.2 timeout to keep success from firing.\n\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t}\n\t\t\t\t}.apply(that);\n\t\t\t};\n\t\t}(this);\n\n\t\tif (mockHandler.proxy) {\n\t\t\t// We're proxying this request and loading in an external file instead\n\t\t\t_ajax({\n\t\t\t\tglobal: false,\n\t\t\t\turl: mockHandler.proxy,\n\t\t\t\ttype: mockHandler.proxyType,\n\t\t\t\tdata: mockHandler.data,\n\t\t\t\tdataType: requestSettings.dataType === \"script\" ? \"text/plain\" : requestSettings.dataType,\n\t\t\t\tcomplete: function (xhr, txt) {\n\t\t\t\t\tmockHandler.responseXML = xhr.responseXML;\n\t\t\t\t\tmockHandler.responseText = xhr.responseText;\n\t\t\t\t\tmockHandler.status = xhr.status;\n\t\t\t\t\tmockHandler.statusText = xhr.statusText;\n\t\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 0);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// type == 'POST' || 'GET' || 'DELETE'\n\t\t\tif (requestSettings.async === false) {\n\t\t\t\t// TODO: Blocking delay\n\t\t\t\tprocess();\n\t\t\t} else {\n\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 50);\n\t\t\t}\n\t\t}\n\t} // Construct a mocked XHR Object\n\n\n\tfunction xhr(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t// Extend with our default mockjax settings\n\t\tmockHandler = $.extend(true, {}, $.mockjaxSettings, mockHandler);\n\n\t\tif (typeof mockHandler.headers === 'undefined') {\n\t\t\tmockHandler.headers = {};\n\t\t}\n\n\t\tif (mockHandler.contentType) {\n\t\t\tmockHandler.headers['content-type'] = mockHandler.contentType;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: mockHandler.status,\n\t\t\tstatusText: mockHandler.statusText,\n\t\t\treadyState: 1,\n\t\t\topen: function () {},\n\t\t\tsend: function () {\n\t\t\t\torigHandler.fired = true;\n\n\t\t\t\t_xhrSend.call(this, mockHandler, requestSettings, origSettings);\n\t\t\t},\n\t\t\tabort: function () {\n\t\t\t\tclearTimeout(this.responseTimer);\n\t\t\t},\n\t\t\tsetRequestHeader: function (header, value) {\n\t\t\t\tmockHandler.headers[header] = value;\n\t\t\t},\n\t\t\tgetResponseHeader: function (header) {\n\t\t\t\t// 'Last-modified', 'Etag', 'content-type' are all checked by jQuery\n\t\t\t\tif (mockHandler.headers && mockHandler.headers[header]) {\n\t\t\t\t\t// Return arbitrary headers\n\t\t\t\t\treturn mockHandler.headers[header];\n\t\t\t\t} else if (header.toLowerCase() == 'last-modified') {\n\t\t\t\t\treturn mockHandler.lastModified || new Date().toString();\n\t\t\t\t} else if (header.toLowerCase() == 'etag') {\n\t\t\t\t\treturn mockHandler.etag || '';\n\t\t\t\t} else if (header.toLowerCase() == 'content-type') {\n\t\t\t\t\treturn mockHandler.contentType || 'text/plain';\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetAllResponseHeaders: function () {\n\t\t\t\tvar headers = '';\n\t\t\t\t$.each(mockHandler.headers, function (k, v) {\n\t\t\t\t\theaders += k + ': ' + v + \"\\n\";\n\t\t\t\t});\n\t\t\t\treturn headers;\n\t\t\t}\n\t\t};\n\t} // Process a JSONP mock request.\n\n\n\tfunction processJsonpMock(requestSettings, mockHandler, origSettings) {\n\t\t// Handle JSONP Parameter Callbacks, we need to replicate some of the jQuery core here\n\t\t// because there isn't an easy hook for the cross domain script tag of jsonp\n\t\tprocessJsonpUrl(requestSettings);\n\t\trequestSettings.dataType = \"json\";\n\n\t\tif (requestSettings.data && CALLBACK_REGEX.test(requestSettings.data) || CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\tcreateJsonpCallback(requestSettings, mockHandler); // We need to make sure\n\t\t\t// that a JSONP style response is executed properly\n\n\t\t\tvar rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n\t\t\t    parts = rurl.exec(requestSettings.url),\n\t\t\t    remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n\t\t\trequestSettings.dataType = \"script\";\n\n\t\t\tif (requestSettings.type.toUpperCase() === \"GET\" && remote) {\n\t\t\t\tvar newMockReturn = processJsonpRequest(requestSettings, mockHandler, origSettings); // Check if we are supposed to return a Deferred back to the mock call, or just \n\t\t\t\t// signal success\n\n\t\t\t\tif (newMockReturn) {\n\t\t\t\t\treturn newMockReturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t} // Append the required callback parameter to the end of the request URL, for a JSONP request\n\n\n\tfunction processJsonpUrl(requestSettings) {\n\t\tif (requestSettings.type.toUpperCase() === \"GET\") {\n\t\t\tif (!CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\t\trequestSettings.url += (/\\?/.test(requestSettings.url) ? \"&\" : \"?\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t\t}\n\t\t} else if (!requestSettings.data || !CALLBACK_REGEX.test(requestSettings.data)) {\n\t\t\trequestSettings.data = (requestSettings.data ? requestSettings.data + \"&\" : \"\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t}\n\t} // Process a JSONP request by evaluating the mocked response text\n\n\n\tfunction processJsonpRequest(requestSettings, mockHandler, origSettings) {\n\t\t// Synthesize the mock request for adding a script tag\n\t\tvar callbackContext = origSettings && origSettings.context || requestSettings,\n\t\t    newMock = null; // If the response handler on the moock is a function, call it\n\n\t\tif (mockHandler.response && $.isFunction(mockHandler.response)) {\n\t\t\tmockHandler.response(origSettings);\n\t\t} else {\n\t\t\t// Evaluate the responseText javascript in a global context\n\t\t\tif ((0, _typeof3.default)(mockHandler.responseText) === 'object') {\n\t\t\t\t$.globalEval('(' + JSON.stringify(mockHandler.responseText) + ')');\n\t\t\t} else {\n\t\t\t\t$.globalEval('(' + mockHandler.responseText + ')');\n\t\t\t}\n\t\t} // Successful response\n\n\n\t\tjsonpSuccess(requestSettings, mockHandler);\n\t\tjsonpComplete(requestSettings, mockHandler); // If we are running under jQuery 1.5+, return a deferred object\n\n\t\tif ($.Deferred) {\n\t\t\tnewMock = new $.Deferred();\n\n\t\t\tif ((0, _typeof3.default)(mockHandler.responseText) == \"object\") {\n\t\t\t\tnewMock.resolveWith(callbackContext, [mockHandler.responseText]);\n\t\t\t} else {\n\t\t\t\tnewMock.resolveWith(callbackContext, [$.parseJSON(mockHandler.responseText)]);\n\t\t\t}\n\t\t}\n\n\t\treturn newMock;\n\t} // Create the required JSONP callback function for the request\n\n\n\tfunction createJsonpCallback(requestSettings, mockHandler) {\n\t\tjsonp = requestSettings.jsonpCallback || \"jsonp\" + jsc++; // Replace the =? sequence both in the query string and the data\n\n\t\tif (requestSettings.data) {\n\t\t\trequestSettings.data = (requestSettings.data + \"\").replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\t\t}\n\n\t\trequestSettings.url = requestSettings.url.replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\"); // Handle JSONP-style loading\n\n\t\twindow[jsonp] = window[jsonp] || function (tmp) {\n\t\t\tdata = tmp;\n\t\t\tjsonpSuccess(requestSettings, mockHandler);\n\t\t\tjsonpComplete(requestSettings, mockHandler); // Garbage collect\n\n\t\t\twindow[jsonp] = undefined;\n\n\t\t\ttry {\n\t\t\t\tdelete window[jsonp];\n\t\t\t} catch (e) {}\n\n\t\t\tif (head) {\n\t\t\t\thead.removeChild(script);\n\t\t\t}\n\t\t};\n\t} // The JSONP request was successful\n\n\n\tfunction jsonpSuccess(requestSettings, mockHandler) {\n\t\t// If a local callback was specified, fire it and pass it the data\n\t\tif (requestSettings.success) {\n\t\t\trequestSettings.success.call(callbackContext, mockHandler.response ? mockHandler.response.toString() : mockHandler.responseText || '', status, {});\n\t\t} // Fire the global callback\n\n\n\t\tif (requestSettings.global) {\n\t\t\ttrigger(requestSettings, \"ajaxSuccess\", [{}, requestSettings]);\n\t\t}\n\t} // The JSONP request was completed\n\n\n\tfunction jsonpComplete(requestSettings, mockHandler) {\n\t\t// Process result\n\t\tif (requestSettings.complete) {\n\t\t\trequestSettings.complete.call(callbackContext, {}, status);\n\t\t} // The request was completed\n\n\n\t\tif (requestSettings.global) {\n\t\t\ttrigger(\"ajaxComplete\", [{}, requestSettings]);\n\t\t} // Handle the global AJAX counter\n\n\n\t\tif (requestSettings.global && ! --$.active) {\n\t\t\t$.event.trigger(\"ajaxStop\");\n\t\t}\n\t} // The core $.ajax replacement.  \n\n\n\tfunction handleAjax(url, origSettings) {\n\t\tvar mockRequest, requestSettings, mockHandler; // If url is an object, simulate pre-1.5 signature\n\n\t\tif ((typeof url === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(url)) === \"object\") {\n\t\t\torigSettings = url;\n\t\t\turl = undefined;\n\t\t} else {\n\t\t\t// work around to support 1.5 signature\n\t\t\torigSettings.url = url;\n\t\t} // Extend the original settings for the request\n\n\n\t\trequestSettings = $.extend(true, {}, $.ajaxSettings, origSettings); // Iterate over our mock handlers (in registration order) until we find\n\t\t// one that is willing to intercept the request\n\n\t\tfor (var k = 0; k < mockHandlers.length; k++) {\n\t\t\tif (!mockHandlers[k]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmockHandler = getMockForRequest(mockHandlers[k], requestSettings);\n\n\t\t\tif (!mockHandler) {\n\t\t\t\t// No valid mock found for this request\n\t\t\t\tcontinue;\n\t\t\t} // Handle console logging\n\n\n\t\t\tlogMock(mockHandler, requestSettings);\n\n\t\t\tif (requestSettings.dataType === \"jsonp\") {\n\t\t\t\tif (mockRequest = processJsonpMock(requestSettings, mockHandler, origSettings)) {\n\t\t\t\t\t// This mock will handle the JSONP request\n\t\t\t\t\treturn mockRequest;\n\t\t\t\t}\n\t\t\t} // Removed to fix #54 - keep the mocking data object intact\n\t\t\t//mockHandler.data = requestSettings.data;\n\n\n\t\t\tmockHandler.cache = requestSettings.cache;\n\t\t\tmockHandler.timeout = requestSettings.timeout;\n\t\t\tmockHandler.global = requestSettings.global;\n\t\t\tcopyUrlParameters(mockHandler, origSettings);\n\n\t\t\t(function (mockHandler, requestSettings, origSettings, origHandler) {\n\t\t\t\tmockRequest = _ajax.call($, $.extend(true, {}, origSettings, {\n\t\t\t\t\t// Mock the XHR object\n\t\t\t\t\txhr: function () {\n\t\t\t\t\t\treturn xhr(mockHandler, requestSettings, origSettings, origHandler);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t})(mockHandler, requestSettings, origSettings, mockHandlers[k]);\n\n\t\t\treturn mockRequest;\n\t\t} // We don't have a mock request, trigger a normal request\n\n\n\t\treturn _ajax.apply($, [origSettings]);\n\t} /**\n    * Copies URL parameter values if they were captured by a regular expression\n    * @param {Object} mockHandler\n    * @param {Object} origSettings\n    */\n\n\tfunction copyUrlParameters(mockHandler, origSettings) {\n\t\t//parameters aren't captured if the URL isn't a RegExp\n\t\tif (!mockHandler.url instanceof RegExp) {\n\t\t\treturn;\n\t\t} //if no URL params were defined on the handler, don't attempt a capture\n\n\n\t\tif (!mockHandler.hasOwnProperty('urlParams')) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar captures = mockHandler.url.exec(origSettings.url); //the whole RegExp match is always the first value in the capture results\n\n\t\tif (captures.length === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tcaptures.shift(); //use handler params as keys and capture resuts as values\n\n\t\tvar i = 0,\n\t\t    capturesLength = captures.length,\n\t\t    paramsLength = mockHandler.urlParams.length,\n\t\t    //in case the number of params specified is less than actual captures\n\t\tmaxIterations = Math.min(capturesLength, paramsLength),\n\t\t    paramValues = {};\n\n\t\tfor (i; i < maxIterations; i++) {\n\t\t\tvar key = mockHandler.urlParams[i];\n\t\t\tparamValues[key] = captures[i];\n\t\t}\n\n\t\torigSettings.urlParams = paramValues;\n\t} // Public\n\n\n\t$.extend({\n\t\tajax: handleAjax\n\t});\n\t$.mockjaxSettings = {\n\t\t//url:        null,\n\t\t//type:       'GET',\n\t\tlog: function (msg) {\n\t\t\tif (window['console'] && window.console.log) {\n\t\t\t\tif (!Function.prototype.bind) {\n\t\t\t\t\tconsole.log(Array.prototype.slice.call(arguments).join(', '));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar log = Function.prototype.bind.call(console.log, console);\n\t\t\t\tlog.apply(console, arguments);\n\t\t\t}\n\t\t},\n\t\tstatus: 200,\n\t\tstatusText: \"OK\",\n\t\tresponseTime: 500,\n\t\tisTimeout: false,\n\t\tcontentType: 'text/plain',\n\t\tresponse: '',\n\t\tresponseText: '',\n\t\tresponseXML: '',\n\t\tproxy: '',\n\t\tproxyType: 'GET',\n\t\tlastModified: null,\n\t\tetag: '',\n\t\theaders: {\n\t\t\tetag: 'IJF@H#@923uf8023hFO@I#H#',\n\t\t\t'content-type': 'text/plain'\n\t\t}\n\t};\n\n\t$.mockjax = function (settings) {\n\t\tvar i = mockHandlers.length;\n\t\tmockHandlers[i] = settings;\n\t\treturn i;\n\t};\n\n\t$.mockjaxClear = function (i) {\n\t\tif (arguments.length == 1) {\n\t\t\tmockHandlers[i] = null;\n\t\t} else {\n\t\t\tmockHandlers = [];\n\t\t}\n\t};\n\n\t$.mockjax.handler = function (i) {\n\t\tif (arguments.length == 1) {\n\t\t\treturn mockHandlers[i];\n\t\t}\n\t};\n})(jQuery);","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js"],"names":["$","_ajax","ajax","mockHandlers","CALLBACK_REGEX","jsc","Date","getTime","parseXML","xml","window","undefined","ActiveXObject","DOMParser","prototype","parseFromString","xmlString","doc","async","loadXML","xmlDoc","isXMLDoc","err","length","text","e","msg","name","message","document","trigger","s","type","args","context","event","isMockDataEqual","mock","live","identical","isFunction","test","each","k","v","getMockForRequest","handler","requestSettings","url","star","indexOf","RegExp","replace","data","toLowerCase","logMock","mockHandler","c","extend","mockjaxSettings","log","toUpperCase","_xhrSend","origSettings","process","that","status","statusText","readyState","response","dataType","responseText","JSON","stringify","responseXML","onreadystatechange","isTimeout","apply","proxy","global","proxyType","complete","xhr","txt","responseTimer","setTimeout","responseTime","origHandler","headers","contentType","open","send","fired","call","abort","clearTimeout","setRequestHeader","header","value","getResponseHeader","lastModified","toString","etag","getAllResponseHeaders","processJsonpMock","processJsonpUrl","createJsonpCallback","rurl","parts","exec","remote","location","protocol","host","newMockReturn","processJsonpRequest","jsonp","callbackContext","newMock","globalEval","jsonpSuccess","jsonpComplete","Deferred","resolveWith","parseJSON","jsonpCallback","tmp","head","removeChild","script","success","active","handleAjax","mockRequest","ajaxSettings","cache","timeout","copyUrlParameters","hasOwnProperty","captures","shift","i","capturesLength","paramsLength","urlParams","maxIterations","Math","min","paramValues","key","console","Function","bind","Array","slice","arguments","join","mockjax","settings","mockjaxClear","jQuery"],"mappings":"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","file":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js.map","sourcesContent":["/*!\n * MockJax - jQuery Plugin to Mock Ajax requests\n *\n * Version:  1.5.1\n * Released:\n * Home:   http://github.com/appendto/jquery-mockjax\n * Author:   Jonathan Sharp (http://jdsharp.com)\n * License:  MIT,GPL\n *\n * Copyright (c) 2011 appendTo LLC.\n * Dual licensed under the MIT or GPL licenses.\n * http://appendto.com/open-source-licenses\n */\n(function($) {\n\tvar _ajax = $.ajax,\n\t\tmockHandlers = [],\n\t\tCALLBACK_REGEX = /=\\?(&|$)/, \n\t\tjsc = (new Date()).getTime();\n\n\t\n\t// Parse the given XML string. \n\tfunction parseXML(xml) {\n\t\tif ( window['DOMParser'] == undefined && window.ActiveXObject ) {\n\t\t\tDOMParser = function() { };\n\t\t\tDOMParser.prototype.parseFromString = function( xmlString ) {\n\t\t\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\t\tdoc.async = 'false';\n\t\t\t\tdoc.loadXML( xmlString );\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tvar xmlDoc \t= ( new DOMParser() ).parseFromString( xml, 'text/xml' );\n\t\t\tif ( $.isXMLDoc( xmlDoc ) ) {\n\t\t\t\tvar err = $('parsererror', xmlDoc);\n\t\t\t\tif ( err.length == 1 ) {\n\t\t\t\t\tthrow('Error: ' + $(xmlDoc).text() );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow('Unable to parse XML');\n\t\t\t}\n\t\t} catch( e ) {\n\t\t\tvar msg = ( e.name == undefined ? e : e.name + ': ' + e.message );\n\t\t\t$(document).trigger('xmlParseError', [ msg ]);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn xmlDoc;\n\t}\n\n\t// Trigger a jQuery event\n\tfunction trigger(s, type, args) {\n\t\t(s.context ? $(s.context) : $.event).trigger(type, args);\n\t}\n\n\t// Check if the data field on the mock handler and the request match. This \n\t// can be used to restrict a mock handler to being used only when a certain\n\t// set of data is passed to it.\n\tfunction isMockDataEqual( mock, live ) {\n\t\tvar identical = false;\n\t\t// Test for situations where the data is a querystring (not an object)\n\t\tif (typeof live === 'string') {\n\t\t\t// Querystring may be a regex\n\t\t\treturn $.isFunction( mock.test ) ? mock.test(live) : mock == live;\n\t\t}\n\t\t$.each(mock, function(k, v) {\n\t\t\tif ( live[k] === undefined ) {\n\t\t\t\tidentical = false;\n\t\t\t\treturn identical;\n\t\t\t} else {\n\t\t\t\tidentical = true;\n\t\t\t\tif ( typeof live[k] == 'object' ) {\n\t\t\t\t\treturn isMockDataEqual(mock[k], live[k]);\n\t\t\t\t} else {\n\t\t\t\t\tif ( $.isFunction( mock[k].test ) ) {\n\t\t\t\t\t\tidentical = mock[k].test(live[k]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidentical = ( mock[k] == live[k] );\n\t\t\t\t\t}\n\t\t\t\t\treturn identical;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn identical;\n\t}\n\n\t// Check the given handler should mock the given request\n\tfunction getMockForRequest( handler, requestSettings ) {\n\t\t// If the mock was registered with a function, let the function decide if we\n\t\t// want to mock this request\n\t\tif ( $.isFunction(handler) ) {\n\t\t\treturn handler( requestSettings );\n\t\t}\n\n\t\t// Inspect the URL of the request and check if the mock handler's url\n\t\t// matches the url for this ajax request\n\t\tif ( $.isFunction(handler.url.test) ) {\n\t\t\t// The user provided a regex for the url, test it\n\t\t\tif ( !handler.url.test( requestSettings.url ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t// Look for a simple wildcard '*' or a direct URL match\n\t\t\tvar star = handler.url.indexOf('*');\n\t\t\tif (handler.url !== requestSettings.url && star === -1 || \n\t\t\t\t\t!new RegExp(handler.url.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, \"\\\\$&\").replace('*', '.+')).test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Inspect the data submitted in the request (either POST body or GET query string)\n\t\tif ( handler.data && requestSettings.data ) {\n\t\t\tif ( !isMockDataEqual(handler.data, requestSettings.data) ) {\n\t\t\t\t// They're not identical, do not mock this request\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t// Inspect the request type\n\t\tif ( handler && handler.type && \n\t\t\t\t handler.type.toLowerCase() != requestSettings.type.toLowerCase() ) {\n\t\t\t// The request type doesn't match (GET vs. POST)\n\t\t\treturn null;\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\t// If logging is enabled, log the mock to the console\n\tfunction logMock( mockHandler, requestSettings ) {\n\t\tvar c = $.extend({}, $.mockjaxSettings, mockHandler);\n\t\tif ( c.log && $.isFunction(c.log) ) {\n\t\t\tc.log('MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url, $.extend({}, requestSettings));\n\t\t}\n\t}\n\n\t// Process the xhr objects send operation\n\tfunction _xhrSend(mockHandler, requestSettings, origSettings) {\n\n\t\t// This is a substitute for < 1.4 which lacks $.proxy\n\t\tvar process = (function(that) {\n\t\t\treturn function() {\n\t\t\t\treturn (function() {\n\t\t\t\t\t// The request has returned\n\t\t\t\t\tthis.status \t\t= mockHandler.status;\n\t\t\t\t\tthis.statusText\t\t= mockHandler.statusText;\n\t\t\t\t\tthis.readyState \t= 4;\n\n\t\t\t\t\t// We have an executable function, call it to give\n\t\t\t\t\t// the mock handler a chance to update it's data\n\t\t\t\t\tif ( $.isFunction(mockHandler.response) ) {\n\t\t\t\t\t\tmockHandler.response(origSettings);\n\t\t\t\t\t}\n\t\t\t\t\t// Copy over our mock to our xhr object before passing control back to\n\t\t\t\t\t// jQuery's onreadystatechange callback\n\t\t\t\t\tif ( requestSettings.dataType == 'json' && ( typeof mockHandler.responseText == 'object' ) ) {\n\t\t\t\t\t\tthis.responseText = JSON.stringify(mockHandler.responseText);\n\t\t\t\t\t} else if ( requestSettings.dataType == 'xml' ) {\n\t\t\t\t\t\tif ( typeof mockHandler.responseXML == 'string' ) {\n\t\t\t\t\t\t\tthis.responseXML = parseXML(mockHandler.responseXML);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.responseXML = mockHandler.responseXML;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.responseText = mockHandler.responseText;\n\t\t\t\t\t}\n\t\t\t\t\tif( typeof mockHandler.status == 'number' || typeof mockHandler.status == 'string' ) {\n\t\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\t}\n\t\t\t\t\tif( typeof mockHandler.statusText === \"string\") {\n\t\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\t}\n\t\t\t\t\t// jQuery < 1.4 doesn't have onreadystate change for xhr\n\t\t\t\t\tif ( $.isFunction(this.onreadystatechange) ) {\n\t\t\t\t\t\tif( mockHandler.isTimeout) {\n\t\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.onreadystatechange( mockHandler.isTimeout ? 'timeout' : undefined );\n\t\t\t\t\t} else if ( mockHandler.isTimeout ) {\n\t\t\t\t\t\t// Fix for 1.3.2 timeout to keep success from firing.\n\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t}\n\t\t\t\t}).apply(that);\n\t\t\t};\n\t\t})(this);\n\n\t\tif ( mockHandler.proxy ) {\n\t\t\t// We're proxying this request and loading in an external file instead\n\t\t\t_ajax({\n\t\t\t\tglobal: false,\n\t\t\t\turl: mockHandler.proxy,\n\t\t\t\ttype: mockHandler.proxyType,\n\t\t\t\tdata: mockHandler.data,\n\t\t\t\tdataType: requestSettings.dataType === \"script\" ? \"text/plain\" : requestSettings.dataType,\n\t\t\t\tcomplete: function(xhr, txt) {\n\t\t\t\t\tmockHandler.responseXML = xhr.responseXML;\n\t\t\t\t\tmockHandler.responseText = xhr.responseText;\n\t\t\t\t\tmockHandler.status = xhr.status;\n\t\t\t\t\tmockHandler.statusText = xhr.statusText;\n\t\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 0);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// type == 'POST' || 'GET' || 'DELETE'\n\t\t\tif ( requestSettings.async === false ) {\n\t\t\t\t// TODO: Blocking delay\n\t\t\t\tprocess();\n\t\t\t} else {\n\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 50);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Construct a mocked XHR Object\n\tfunction xhr(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t// Extend with our default mockjax settings\n\t\tmockHandler = $.extend(true, {}, $.mockjaxSettings, mockHandler);\n\n\t\tif (typeof mockHandler.headers === 'undefined') {\n\t\t\tmockHandler.headers = {};\n\t\t}\n\t\tif ( mockHandler.contentType ) {\n\t\t\tmockHandler.headers['content-type'] = mockHandler.contentType;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: mockHandler.status,\n\t\t\tstatusText: mockHandler.statusText,\n\t\t\treadyState: 1,\n\t\t\topen: function() { },\n\t\t\tsend: function() {\n\t\t\t\torigHandler.fired = true;\n\t\t\t\t_xhrSend.call(this, mockHandler, requestSettings, origSettings);\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tclearTimeout(this.responseTimer);\n\t\t\t},\n\t\t\tsetRequestHeader: function(header, value) {\n\t\t\t\tmockHandler.headers[header] = value;\n\t\t\t},\n\t\t\tgetResponseHeader: function(header) {\n\t\t\t\t// 'Last-modified', 'Etag', 'content-type' are all checked by jQuery\n\t\t\t\tif ( mockHandler.headers && mockHandler.headers[header] ) {\n\t\t\t\t\t// Return arbitrary headers\n\t\t\t\t\treturn mockHandler.headers[header];\n\t\t\t\t} else if ( header.toLowerCase() == 'last-modified' ) {\n\t\t\t\t\treturn mockHandler.lastModified || (new Date()).toString();\n\t\t\t\t} else if ( header.toLowerCase() == 'etag' ) {\n\t\t\t\t\treturn mockHandler.etag || '';\n\t\t\t\t} else if ( header.toLowerCase() == 'content-type' ) {\n\t\t\t\t\treturn mockHandler.contentType || 'text/plain';\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\tvar headers = '';\n\t\t\t\t$.each(mockHandler.headers, function(k, v) {\n\t\t\t\t\theaders += k + ': ' + v + \"\\n\";\n\t\t\t\t});\n\t\t\t\treturn headers;\n\t\t\t}\n\t\t};\n\t}\n\n\t// Process a JSONP mock request.\n\tfunction processJsonpMock( requestSettings, mockHandler, origSettings ) {\n\t\t// Handle JSONP Parameter Callbacks, we need to replicate some of the jQuery core here\n\t\t// because there isn't an easy hook for the cross domain script tag of jsonp\n\n\t\tprocessJsonpUrl( requestSettings );\n\n\t\trequestSettings.dataType = \"json\";\n\t\tif(requestSettings.data && CALLBACK_REGEX.test(requestSettings.data) || CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\tcreateJsonpCallback(requestSettings, mockHandler);\n\n\t\t\t// We need to make sure\n\t\t\t// that a JSONP style response is executed properly\n\n\t\t\tvar rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n\t\t\t\tparts = rurl.exec( requestSettings.url ),\n\t\t\t\tremote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n\n\t\t\trequestSettings.dataType = \"script\";\n\t\t\tif(requestSettings.type.toUpperCase() === \"GET\" && remote ) {\n\t\t\t\tvar newMockReturn = processJsonpRequest( requestSettings, mockHandler, origSettings );\n\n\t\t\t\t// Check if we are supposed to return a Deferred back to the mock call, or just \n\t\t\t\t// signal success\n\t\t\t\tif(newMockReturn) {\n\t\t\t\t\treturn newMockReturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t// Append the required callback parameter to the end of the request URL, for a JSONP request\n\tfunction processJsonpUrl( requestSettings ) {\n\t\tif ( requestSettings.type.toUpperCase() === \"GET\" ) {\n\t\t\tif ( !CALLBACK_REGEX.test( requestSettings.url ) ) {\n\t\t\t\trequestSettings.url += (/\\?/.test( requestSettings.url ) ? \"&\" : \"?\") + \n\t\t\t\t\t(requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t\t}\n\t\t} else if ( !requestSettings.data || !CALLBACK_REGEX.test(requestSettings.data) ) {\n\t\t\trequestSettings.data = (requestSettings.data ? requestSettings.data + \"&\" : \"\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t}\n\t}\n\t\n\t// Process a JSONP request by evaluating the mocked response text\n\tfunction processJsonpRequest( requestSettings, mockHandler, origSettings ) {\n\t\t// Synthesize the mock request for adding a script tag\n\t\tvar callbackContext = origSettings && origSettings.context || requestSettings,\n\t\t\tnewMock = null;\n\n\n\t\t// If the response handler on the moock is a function, call it\n\t\tif ( mockHandler.response && $.isFunction(mockHandler.response) ) {\n\t\t\tmockHandler.response(origSettings);\n\t\t} else {\n\n\t\t\t// Evaluate the responseText javascript in a global context\n\t\t\tif( typeof mockHandler.responseText === 'object' ) {\n\t\t\t\t$.globalEval( '(' + JSON.stringify( mockHandler.responseText ) + ')');\n\t\t\t} else {\n\t\t\t\t$.globalEval( '(' + mockHandler.responseText + ')');\n\t\t\t}\n\t\t}\n\n\t\t// Successful response\n\t\tjsonpSuccess( requestSettings, mockHandler );\n\t\tjsonpComplete( requestSettings, mockHandler );\n\n\t\t// If we are running under jQuery 1.5+, return a deferred object\n\t\tif($.Deferred){\n\t\t\tnewMock = new $.Deferred();\n\t\t\tif(typeof mockHandler.responseText == \"object\"){\n\t\t\t\tnewMock.resolveWith( callbackContext, [mockHandler.responseText] );\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnewMock.resolveWith( callbackContext, [$.parseJSON( mockHandler.responseText )] );\n\t\t\t}\n\t\t}\n\t\treturn newMock;\n\t}\n\n\n\t// Create the required JSONP callback function for the request\n\tfunction createJsonpCallback( requestSettings, mockHandler ) {\n\t\tjsonp = requestSettings.jsonpCallback || (\"jsonp\" + jsc++);\n\n\t\t// Replace the =? sequence both in the query string and the data\n\t\tif ( requestSettings.data ) {\n\t\t\trequestSettings.data = (requestSettings.data + \"\").replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\t\t}\n\n\t\trequestSettings.url = requestSettings.url.replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\n\n\t\t// Handle JSONP-style loading\n\t\twindow[ jsonp ] = window[ jsonp ] || function( tmp ) {\n\t\t\tdata = tmp;\n\t\t\tjsonpSuccess( requestSettings, mockHandler );\n\t\t\tjsonpComplete( requestSettings, mockHandler );\n\t\t\t// Garbage collect\n\t\t\twindow[ jsonp ] = undefined;\n\n\t\t\ttry {\n\t\t\t\tdelete window[ jsonp ];\n\t\t\t} catch(e) {}\n\n\t\t\tif ( head ) {\n\t\t\t\thead.removeChild( script );\n\t\t\t}\n\t\t};\n\t}\n\n\t// The JSONP request was successful\n\tfunction jsonpSuccess(requestSettings, mockHandler) {\n\t\t// If a local callback was specified, fire it and pass it the data\n\t\tif ( requestSettings.success ) {\n\t\t\trequestSettings.success.call( callbackContext, ( mockHandler.response ? mockHandler.response.toString() : mockHandler.responseText || ''), status, {} );\n\t\t}\n\n\t\t// Fire the global callback\n\t\tif ( requestSettings.global ) {\n\t\t\ttrigger(requestSettings, \"ajaxSuccess\", [{}, requestSettings] );\n\t\t}\n\t}\n\n\t// The JSONP request was completed\n\tfunction jsonpComplete(requestSettings, mockHandler) {\n\t\t// Process result\n\t\tif ( requestSettings.complete ) {\n\t\t\trequestSettings.complete.call( callbackContext, {} , status );\n\t\t}\n\n\t\t// The request was completed\n\t\tif ( requestSettings.global ) {\n\t\t\ttrigger( \"ajaxComplete\", [{}, requestSettings] );\n\t\t}\n\n\t\t// Handle the global AJAX counter\n\t\tif ( requestSettings.global && ! --$.active ) {\n\t\t\t$.event.trigger( \"ajaxStop\" );\n\t\t}\n\t}\n\n\n\t// The core $.ajax replacement.  \n\tfunction handleAjax( url, origSettings ) {\n\t\tvar mockRequest, requestSettings, mockHandler;\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\torigSettings = url;\n\t\t\turl = undefined;\n\t\t} else {\n\t\t\t// work around to support 1.5 signature\n\t\t\torigSettings.url = url;\n\t\t}\n\t\t\n\t\t// Extend the original settings for the request\n\t\trequestSettings = $.extend(true, {}, $.ajaxSettings, origSettings);\n\n\t\t// Iterate over our mock handlers (in registration order) until we find\n\t\t// one that is willing to intercept the request\n\t\tfor(var k = 0; k < mockHandlers.length; k++) {\n\t\t\tif ( !mockHandlers[k] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tmockHandler = getMockForRequest( mockHandlers[k], requestSettings );\n\t\t\tif(!mockHandler) {\n\t\t\t\t// No valid mock found for this request\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle console logging\n\t\t\tlogMock( mockHandler, requestSettings );\n\n\n\t\t\tif ( requestSettings.dataType === \"jsonp\" ) {\n\t\t\t\tif ((mockRequest = processJsonpMock( requestSettings, mockHandler, origSettings ))) {\n\t\t\t\t\t// This mock will handle the JSONP request\n\t\t\t\t\treturn mockRequest;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// Removed to fix #54 - keep the mocking data object intact\n\t\t\t//mockHandler.data = requestSettings.data;\n\n\t\t\tmockHandler.cache = requestSettings.cache;\n\t\t\tmockHandler.timeout = requestSettings.timeout;\n\t\t\tmockHandler.global = requestSettings.global;\n\n      copyUrlParameters(mockHandler, origSettings);\n\n\t\t\t(function(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t\t\tmockRequest = _ajax.call($, $.extend(true, {}, origSettings, {\n\t\t\t\t\t// Mock the XHR object\n\t\t\t\t\txhr: function() { return xhr( mockHandler, requestSettings, origSettings, origHandler ) }\n\t\t\t\t}));\n\t\t\t})(mockHandler, requestSettings, origSettings, mockHandlers[k]);\n\n\t\t\treturn mockRequest;\n\t\t}\n\n\t\t// We don't have a mock request, trigger a normal request\n\t\treturn _ajax.apply($, [origSettings]);\n\t}\n\n  /**\n   * Copies URL parameter values if they were captured by a regular expression\n   * @param {Object} mockHandler\n   * @param {Object} origSettings\n   */\n  function copyUrlParameters(mockHandler, origSettings) {\n    //parameters aren't captured if the URL isn't a RegExp\n    if (!mockHandler.url instanceof RegExp) {\n      return;\n    }\n    //if no URL params were defined on the handler, don't attempt a capture\n    if (!mockHandler.hasOwnProperty('urlParams')) {\n      return;\n    }\n    var captures = mockHandler.url.exec(origSettings.url);\n    //the whole RegExp match is always the first value in the capture results\n    if (captures.length === 1) {\n      return;\n    }\n    captures.shift();\n    //use handler params as keys and capture resuts as values\n    var i = 0,\n      capturesLength = captures.length,\n      paramsLength = mockHandler.urlParams.length,\n    //in case the number of params specified is less than actual captures\n      maxIterations = Math.min(capturesLength, paramsLength),\n      paramValues = {};\n    for (i; i < maxIterations; i++) {\n      var key = mockHandler.urlParams[i];\n      paramValues[key] = captures[i];\n    }\n    origSettings.urlParams = paramValues;\n  }\n\n\n\t// Public\n\n\t$.extend({\n\t\tajax: handleAjax\n\t});\n\n\t$.mockjaxSettings = {\n\t\t//url:        null,\n\t\t//type:       'GET',\n\t\tlog:          function( msg ) {\n\t\t\tif (window['console'] && window.console.log) {\n\t\t\t\tif (!Function.prototype.bind) {\n\t\t\t\t\tconsole.log(Array.prototype.slice.call(arguments).join(', '));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar log = Function.prototype.bind.call(console.log, console);\n\t\t\t\tlog.apply(console, arguments);\n\t\t\t}\n\t\t},\n\t\tstatus:       200,\n\t\tstatusText:   \"OK\",\n\t\tresponseTime: 500,\n\t\tisTimeout:    false,\n\t\tcontentType:  'text/plain',\n\t\tresponse:     '',\n\t\tresponseText: '',\n\t\tresponseXML:  '',\n\t\tproxy:        '',\n\t\tproxyType:    'GET',\n\n\t\tlastModified: null,\n\t\tetag:         '',\n\t\theaders: {\n\t\t\tetag: 'IJF@H#@923uf8023hFO@I#H#',\n\t\t\t'content-type' : 'text/plain'\n\t\t}\n\t};\n\n\t$.mockjax = function(settings) {\n\t\tvar i = mockHandlers.length;\n\t\tmockHandlers[i] = settings;\n\t\treturn i;\n\t};\n\t$.mockjaxClear = function(i) {\n\t\tif ( arguments.length == 1 ) {\n\t\t\tmockHandlers[i] = null;\n\t\t} else {\n\t\t\tmockHandlers = [];\n\t\t}\n\t};\n\t$.mockjax.handler = function(i) {\n\t  if ( arguments.length == 1 ) {\n\t\t\treturn mockHandlers[i];\n\t\t}\n\t};\n})(jQuery);"]},"hash":"16e7f3708325dd1c9aeffdeba46fc711f1bbbb71"}
