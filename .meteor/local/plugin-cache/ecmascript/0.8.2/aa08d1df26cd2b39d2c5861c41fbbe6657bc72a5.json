{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"jquery.autocomplete"},"ignored":false,"code":"/**\n*  Ajax Autocomplete for jQuery, version 1.2.9\n*  (c) 2013 Tomas Kirda\n*\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\n*\n*/ /*jslint  browser: true, white: true, plusplus: true */ /*global define, window, document, jQuery */ // Expose plugin as an AMD module if AMD loader is present:\n(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function ($) {\n    'use strict';\n\n    var utils = function () {\n        return {\n            escapeRegExChars: function (value) {\n                return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n            },\n            createNode: function (containerClass) {\n                var div = document.createElement('div');\n                div.className = containerClass;\n                div.style.position = 'absolute';\n                div.style.display = 'none';\n                return div;\n            }\n        };\n    }(),\n        keys = {\n        ESC: 27,\n        TAB: 9,\n        RETURN: 13,\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40\n    };\n\n    function Autocomplete(el, options) {\n        var noop = function () {},\n            that = this,\n            defaults = {\n            autoSelectFirst: false,\n            appendTo: 'body',\n            serviceUrl: null,\n            lookup: null,\n            onSelect: null,\n            width: 'auto',\n            minChars: 1,\n            maxHeight: 300,\n            deferRequestBy: 0,\n            params: {},\n            formatResult: Autocomplete.formatResult,\n            delimiter: null,\n            zIndex: 9999,\n            type: 'GET',\n            noCache: false,\n            onSearchStart: noop,\n            onSearchComplete: noop,\n            onSearchError: noop,\n            containerClass: 'autocomplete-suggestions',\n            tabDisabled: false,\n            dataType: 'text',\n            currentRequest: null,\n            triggerSelectOnValidInput: true,\n            lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\n                return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;\n            },\n            paramName: 'query',\n            transformResult: function (response) {\n                return typeof response === 'string' ? $.parseJSON(response) : response;\n            }\n        }; // Shared variables:\n\n\n        that.element = el;\n        that.el = $(el);\n        that.suggestions = [];\n        that.badQueries = [];\n        that.selectedIndex = -1;\n        that.currentValue = that.element.value;\n        that.intervalId = 0;\n        that.cachedResponse = {};\n        that.onChangeInterval = null;\n        that.onChange = null;\n        that.isLocal = false;\n        that.suggestionsContainer = null;\n        that.options = $.extend({}, defaults, options);\n        that.classes = {\n            selected: 'autocomplete-selected',\n            suggestion: 'autocomplete-suggestion'\n        };\n        that.hint = null;\n        that.hintValue = '';\n        that.selection = null; // Initialize and set options:\n\n        that.initialize();\n        that.setOptions(options);\n    }\n\n    Autocomplete.utils = utils;\n    $.Autocomplete = Autocomplete;\n\n    Autocomplete.formatResult = function (suggestion, currentValue) {\n        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';\n        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>');\n    };\n\n    Autocomplete.prototype = {\n        killerFn: null,\n        initialize: function () {\n            var that = this,\n                suggestionSelector = '.' + that.classes.suggestion,\n                selected = that.classes.selected,\n                options = that.options,\n                container; // Remove autocomplete attribute to prevent native suggestions:\n\n            that.element.setAttribute('autocomplete', 'off');\n\n            that.killerFn = function (e) {\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\n                    that.killSuggestions();\n                    that.disableKillerFn();\n                }\n            };\n\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n            container = $(that.suggestionsContainer);\n            container.appendTo(options.appendTo); // Only set width if it was provided:\n\n            if (options.width !== 'auto') {\n                container.width(options.width);\n            } // Listen for mouse over event on suggestions list:\n\n\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\n                that.activate($(this).data('index'));\n            }); // Deselect active element when mouse leaves suggestions container:\n\n            container.on('mouseout.autocomplete', function () {\n                that.selectedIndex = -1;\n                container.children('.' + selected).removeClass(selected);\n            }); // Listen for click event on suggestions list:\n\n            container.on('click.autocomplete', suggestionSelector, function () {\n                that.select($(this).data('index'));\n            });\n            that.fixPosition();\n\n            that.fixPositionCapture = function () {\n                if (that.visible) {\n                    that.fixPosition();\n                }\n            };\n\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\n            that.el.on('keydown.autocomplete', function (e) {\n                that.onKeyPress(e);\n            });\n            that.el.on('keyup.autocomplete', function (e) {\n                that.onKeyUp(e);\n            });\n            that.el.on('blur.autocomplete', function () {\n                that.onBlur();\n            });\n            that.el.on('focus.autocomplete', function () {\n                that.onFocus();\n            });\n            that.el.on('change.autocomplete', function (e) {\n                that.onKeyUp(e);\n            });\n        },\n        onFocus: function () {\n            var that = this;\n            that.fixPosition();\n\n            if (that.options.minChars <= that.el.val().length) {\n                that.onValueChange();\n            }\n        },\n        onBlur: function () {\n            this.enableKillerFn();\n        },\n        setOptions: function (suppliedOptions) {\n            var that = this,\n                options = that.options;\n            $.extend(options, suppliedOptions);\n            that.isLocal = $.isArray(options.lookup);\n\n            if (that.isLocal) {\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\n            } // Adjust height, width and z-index:\n\n\n            $(that.suggestionsContainer).css({\n                'max-height': options.maxHeight + 'px',\n                'width': options.width + 'px',\n                'z-index': options.zIndex\n            });\n        },\n        clearCache: function () {\n            this.cachedResponse = {};\n            this.badQueries = [];\n        },\n        clear: function () {\n            this.clearCache();\n            this.currentValue = '';\n            this.suggestions = [];\n        },\n        disable: function () {\n            var that = this;\n            that.disabled = true;\n\n            if (that.currentRequest) {\n                that.currentRequest.abort();\n            }\n        },\n        enable: function () {\n            this.disabled = false;\n        },\n        fixPosition: function () {\n            var that = this,\n                offset,\n                styles; // Don't adjsut position if custom container has been specified:\n\n            if (that.options.appendTo !== 'body') {\n                return;\n            }\n\n            offset = that.el.offset();\n            styles = {\n                top: offset.top + that.el.outerHeight() + 'px',\n                left: offset.left + 'px'\n            };\n\n            if (that.options.width === 'auto') {\n                styles.width = that.el.outerWidth() - 2 + 'px';\n            }\n\n            $(that.suggestionsContainer).css(styles);\n        },\n        enableKillerFn: function () {\n            var that = this;\n            $(document).on('click.autocomplete', that.killerFn);\n        },\n        disableKillerFn: function () {\n            var that = this;\n            $(document).off('click.autocomplete', that.killerFn);\n        },\n        killSuggestions: function () {\n            var that = this;\n            that.stopKillSuggestions();\n            that.intervalId = window.setInterval(function () {\n                that.hide();\n                that.stopKillSuggestions();\n            }, 50);\n        },\n        stopKillSuggestions: function () {\n            window.clearInterval(this.intervalId);\n        },\n        isCursorAtEnd: function () {\n            var that = this,\n                valLength = that.el.val().length,\n                selectionStart = that.element.selectionStart,\n                range;\n\n            if (typeof selectionStart === 'number') {\n                return selectionStart === valLength;\n            }\n\n            if (document.selection) {\n                range = document.selection.createRange();\n                range.moveStart('character', -valLength);\n                return valLength === range.text.length;\n            }\n\n            return true;\n        },\n        onKeyPress: function (e) {\n            var that = this; // If suggestions are hidden and user presses arrow down, display suggestions:\n\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n                that.suggest();\n                return;\n            }\n\n            if (that.disabled || !that.visible) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.ESC:\n                    that.el.val(that.currentValue);\n                    that.hide();\n                    break;\n\n                case keys.RIGHT:\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n                        that.selectHint();\n                        break;\n                    }\n\n                    return;\n\n                case keys.TAB:\n                    if (that.hint && that.options.onHint) {\n                        that.selectHint();\n                        return;\n                    }\n\n                // Fall through to RETURN\n\n                case keys.RETURN:\n                    if (that.selectedIndex === -1) {\n                        that.hide();\n                        return;\n                    }\n\n                    that.select(that.selectedIndex);\n\n                    if (e.which === keys.TAB && that.options.tabDisabled === false) {\n                        return;\n                    }\n\n                    break;\n\n                case keys.UP:\n                    that.moveUp();\n                    break;\n\n                case keys.DOWN:\n                    that.moveDown();\n                    break;\n\n                default:\n                    return;\n            } // Cancel event if function did not return:\n\n\n            e.stopImmediatePropagation();\n            e.preventDefault();\n        },\n        onKeyUp: function (e) {\n            var that = this;\n\n            if (that.disabled) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.UP:\n                case keys.DOWN:\n                    return;\n            }\n\n            clearInterval(that.onChangeInterval);\n\n            if (that.currentValue !== that.el.val()) {\n                that.findBestHint();\n\n                if (that.options.deferRequestBy > 0) {\n                    // Defer lookup in case when value changes very quickly:\n                    that.onChangeInterval = setInterval(function () {\n                        that.onValueChange();\n                    }, that.options.deferRequestBy);\n                } else {\n                    that.onValueChange();\n                }\n            }\n        },\n        onValueChange: function () {\n            var that = this,\n                options = that.options,\n                value = that.el.val(),\n                query = that.getQuery(value),\n                index;\n\n            if (that.selection) {\n                that.selection = null;\n                (options.onInvalidateSelection || $.noop).call(that.element);\n            }\n\n            clearInterval(that.onChangeInterval);\n            that.currentValue = value;\n            that.selectedIndex = -1; // Check existing suggestion for the match before proceeding:\n\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(query);\n\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            }\n\n            if (query.length < options.minChars) {\n                that.hide();\n            } else {\n                that.getSuggestions(query);\n            }\n        },\n        findSuggestionIndex: function (query) {\n            var that = this,\n                index = -1,\n                queryLowerCase = query.toLowerCase();\n            $.each(that.suggestions, function (i, suggestion) {\n                if (suggestion.value.toLowerCase() === queryLowerCase) {\n                    index = i;\n                    return false;\n                }\n            });\n            return index;\n        },\n        getQuery: function (value) {\n            var delimiter = this.options.delimiter,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n\n            parts = value.split(delimiter);\n            return $.trim(parts[parts.length - 1]);\n        },\n        getSuggestionsLocal: function (query) {\n            var that = this,\n                options = that.options,\n                queryLowerCase = query.toLowerCase(),\n                filter = options.lookupFilter,\n                limit = parseInt(options.lookupLimit, 10),\n                data;\n            data = {\n                suggestions: $.grep(options.lookup, function (suggestion) {\n                    return filter(suggestion, query, queryLowerCase);\n                })\n            };\n\n            if (limit && data.suggestions.length > limit) {\n                data.suggestions = data.suggestions.slice(0, limit);\n            }\n\n            return data;\n        },\n        getSuggestions: function (q) {\n            var response,\n                that = this,\n                options = that.options,\n                serviceUrl = options.serviceUrl,\n                data,\n                cacheKey;\n            options.params[options.paramName] = q;\n            data = options.ignoreParams ? null : options.params;\n\n            if (that.isLocal) {\n                response = that.getSuggestionsLocal(q);\n            } else {\n                if ($.isFunction(serviceUrl)) {\n                    serviceUrl = serviceUrl.call(that.element, q);\n                }\n\n                cacheKey = serviceUrl + '?' + $.param(data || {});\n                response = that.cachedResponse[cacheKey];\n            }\n\n            if (response && $.isArray(response.suggestions)) {\n                that.suggestions = response.suggestions;\n                that.suggest();\n            } else if (!that.isBadQuery(q)) {\n                if (options.onSearchStart.call(that.element, options.params) === false) {\n                    return;\n                }\n\n                if (that.currentRequest) {\n                    that.currentRequest.abort();\n                }\n\n                that.currentRequest = $.ajax({\n                    url: serviceUrl,\n                    data: data,\n                    type: options.type,\n                    dataType: options.dataType\n                }).done(function (data) {\n                    that.currentRequest = null;\n                    that.processResponse(data, q, cacheKey);\n                    options.onSearchComplete.call(that.element, q);\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n                });\n            }\n        },\n        isBadQuery: function (q) {\n            var badQueries = this.badQueries,\n                i = badQueries.length;\n\n            while (i--) {\n                if (q.indexOf(badQueries[i]) === 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n        hide: function () {\n            var that = this;\n            that.visible = false;\n            that.selectedIndex = -1;\n            $(that.suggestionsContainer).hide();\n            that.signalHint(null);\n        },\n        suggest: function () {\n            if (this.suggestions.length === 0) {\n                this.hide();\n                return;\n            }\n\n            var that = this,\n                options = that.options,\n                formatResult = options.formatResult,\n                value = that.getQuery(that.currentValue),\n                className = that.classes.suggestion,\n                classSelected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                beforeRender = options.beforeRender,\n                html = '',\n                index,\n                width;\n\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(value);\n\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            } // Build suggestions inner HTML:\n\n\n            $.each(that.suggestions, function (i, suggestion) {\n                html += '<div class=\"' + className + '\" data-index=\"' + i + '\">' + formatResult(suggestion, value) + '</div>';\n            }); // If width is auto, adjust width before displaying suggestions,\n            // because if instance was created before input had width, it will be zero.\n            // Also it adjusts if input width has changed.\n            // -2px to account for suggestions border.\n\n            if (options.width === 'auto') {\n                width = that.el.outerWidth() - 2;\n                container.width(width > 0 ? width : 300);\n            }\n\n            container.html(html); // Select first value by default:\n\n            if (options.autoSelectFirst) {\n                that.selectedIndex = 0;\n                container.children().first().addClass(classSelected);\n            }\n\n            if ($.isFunction(beforeRender)) {\n                beforeRender.call(that.element, container);\n            }\n\n            container.show();\n            that.visible = true;\n            that.findBestHint();\n        },\n        findBestHint: function () {\n            var that = this,\n                value = that.el.val().toLowerCase(),\n                bestMatch = null;\n\n            if (!value) {\n                return;\n            }\n\n            $.each(that.suggestions, function (i, suggestion) {\n                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;\n\n                if (foundMatch) {\n                    bestMatch = suggestion;\n                }\n\n                return !foundMatch;\n            });\n            that.signalHint(bestMatch);\n        },\n        signalHint: function (suggestion) {\n            var hintValue = '',\n                that = this;\n\n            if (suggestion) {\n                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);\n            }\n\n            if (that.hintValue !== hintValue) {\n                that.hintValue = hintValue;\n                that.hint = suggestion;\n                (this.options.onHint || $.noop)(hintValue);\n            }\n        },\n        verifySuggestionsFormat: function (suggestions) {\n            // If suggestions is string array, convert them to supported format:\n            if (suggestions.length && typeof suggestions[0] === 'string') {\n                return $.map(suggestions, function (value) {\n                    return {\n                        value: value,\n                        data: null\n                    };\n                });\n            }\n\n            return suggestions;\n        },\n        processResponse: function (response, originalQuery, cacheKey) {\n            var that = this,\n                options = that.options,\n                result = options.transformResult(response, originalQuery);\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions); // Cache results if cache is not disabled:\n\n            if (!options.noCache) {\n                that.cachedResponse[cacheKey] = result;\n\n                if (result.suggestions.length === 0) {\n                    that.badQueries.push(cacheKey);\n                }\n            } // Return if originalQuery is not matching current query:\n\n\n            if (originalQuery !== that.getQuery(that.currentValue)) {\n                return;\n            }\n\n            that.suggestions = result.suggestions;\n            that.suggest();\n        },\n        activate: function (index) {\n            var that = this,\n                activeItem,\n                selected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                children = container.children();\n            container.children('.' + selected).removeClass(selected);\n            that.selectedIndex = index;\n\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n                activeItem = children.get(that.selectedIndex);\n                $(activeItem).addClass(selected);\n                return activeItem;\n            }\n\n            return null;\n        },\n        selectHint: function () {\n            var that = this,\n                i = $.inArray(that.hint, that.suggestions);\n            that.select(i);\n        },\n        select: function (i) {\n            var that = this;\n            that.hide();\n            that.onSelect(i);\n        },\n        moveUp: function () {\n            var that = this;\n\n            if (that.selectedIndex === -1) {\n                return;\n            }\n\n            if (that.selectedIndex === 0) {\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\n                that.selectedIndex = -1;\n                that.el.val(that.currentValue);\n                that.findBestHint();\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex - 1);\n        },\n        moveDown: function () {\n            var that = this;\n\n            if (that.selectedIndex === that.suggestions.length - 1) {\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex + 1);\n        },\n        adjustScroll: function (index) {\n            var that = this,\n                activeItem = that.activate(index),\n                offsetTop,\n                upperBound,\n                lowerBound,\n                heightDelta = 25;\n\n            if (!activeItem) {\n                return;\n            }\n\n            offsetTop = activeItem.offsetTop;\n            upperBound = $(that.suggestionsContainer).scrollTop();\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n            if (offsetTop < upperBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop);\n            } else if (offsetTop > lowerBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n            }\n\n            that.el.val(that.getValue(that.suggestions[index].value));\n            that.signalHint(null);\n        },\n        onSelect: function (index) {\n            var that = this,\n                onSelectCallback = that.options.onSelect,\n                suggestion = that.suggestions[index];\n            that.currentValue = that.getValue(suggestion.value);\n            that.el.val(that.currentValue);\n            that.signalHint(null);\n            that.suggestions = [];\n            that.selection = suggestion;\n\n            if ($.isFunction(onSelectCallback)) {\n                onSelectCallback.call(that.element, suggestion);\n            }\n        },\n        getValue: function (value) {\n            var that = this,\n                delimiter = that.options.delimiter,\n                currentValue,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n\n            currentValue = that.currentValue;\n            parts = currentValue.split(delimiter);\n\n            if (parts.length === 1) {\n                return value;\n            }\n\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n        },\n        dispose: function () {\n            var that = this;\n            that.el.off('.autocomplete').removeData('autocomplete');\n            that.disableKillerFn();\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\n            $(that.suggestionsContainer).remove();\n        }\n    }; // Create chainable jQuery plugin:\n\n    $.fn.autocomplete = function (options, args) {\n        var dataKey = 'autocomplete'; // If function invoked without argument return\n        // instance of the first matched element:\n\n        if (arguments.length === 0) {\n            return this.first().data(dataKey);\n        }\n\n        return this.each(function () {\n            var inputElement = $(this),\n                instance = inputElement.data(dataKey);\n\n            if (typeof options === 'string') {\n                if (instance && typeof instance[options] === 'function') {\n                    instance[options](args);\n                }\n            } else {\n                // If instance already exists, destroy it:\n                if (instance && instance.dispose) {\n                    instance.dispose();\n                }\n\n                instance = new Autocomplete(this, options);\n                inputElement.data(dataKey, instance);\n            }\n        });\n    };\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js"],"names":["factory","define","amd","jQuery","$","utils","escapeRegExChars","value","replace","createNode","containerClass","div","document","createElement","className","style","position","display","keys","ESC","TAB","RETURN","LEFT","UP","RIGHT","DOWN","Autocomplete","el","options","noop","that","defaults","autoSelectFirst","appendTo","serviceUrl","lookup","onSelect","width","minChars","maxHeight","deferRequestBy","params","formatResult","delimiter","zIndex","type","noCache","onSearchStart","onSearchComplete","onSearchError","tabDisabled","dataType","currentRequest","triggerSelectOnValidInput","lookupFilter","suggestion","originalQuery","queryLowerCase","toLowerCase","indexOf","paramName","transformResult","response","parseJSON","element","suggestions","badQueries","selectedIndex","currentValue","intervalId","cachedResponse","onChangeInterval","onChange","isLocal","suggestionsContainer","extend","classes","selected","hint","hintValue","selection","initialize","setOptions","pattern","RegExp","prototype","killerFn","suggestionSelector","container","setAttribute","e","target","closest","length","killSuggestions","disableKillerFn","on","activate","data","children","removeClass","select","fixPosition","fixPositionCapture","visible","window","onKeyPress","onKeyUp","onBlur","onFocus","val","onValueChange","enableKillerFn","suppliedOptions","isArray","verifySuggestionsFormat","css","clearCache","clear","disable","disabled","abort","enable","offset","styles","top","outerHeight","left","outerWidth","off","stopKillSuggestions","setInterval","hide","clearInterval","isCursorAtEnd","valLength","selectionStart","range","createRange","moveStart","text","which","suggest","onHint","selectHint","moveUp","moveDown","stopImmediatePropagation","preventDefault","findBestHint","query","getQuery","index","onInvalidateSelection","call","findSuggestionIndex","getSuggestions","each","i","parts","split","trim","getSuggestionsLocal","filter","limit","parseInt","lookupLimit","grep","slice","q","cacheKey","ignoreParams","isFunction","param","isBadQuery","ajax","url","done","processResponse","fail","jqXHR","textStatus","errorThrown","signalHint","classSelected","beforeRender","html","first","addClass","show","bestMatch","foundMatch","substr","map","result","push","activeItem","get","inArray","adjustScroll","offsetTop","upperBound","lowerBound","heightDelta","scrollTop","getValue","onSelectCallback","dispose","removeData","remove","fn","autocomplete","args","dataKey","arguments","inputElement","instance"],"mappings":"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","file":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/dist/jquery.autocomplete.js.map","sourcesContent":["/**\n*  Ajax Autocomplete for jQuery, version 1.2.9\n*  (c) 2013 Tomas Kirda\n*\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\n*\n*/\n\n/*jslint  browser: true, white: true, plusplus: true */\n/*global define, window, document, jQuery */\n\n// Expose plugin as an AMD module if AMD loader is present:\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    var\n        utils = (function () {\n            return {\n                escapeRegExChars: function (value) {\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n                },\n                createNode: function (containerClass) {\n                    var div = document.createElement('div');\n                    div.className = containerClass;\n                    div.style.position = 'absolute';\n                    div.style.display = 'none';\n                    return div;\n                }\n            };\n        }()),\n\n        keys = {\n            ESC: 27,\n            TAB: 9,\n            RETURN: 13,\n            LEFT: 37,\n            UP: 38,\n            RIGHT: 39,\n            DOWN: 40\n        };\n\n    function Autocomplete(el, options) {\n        var noop = function () { },\n            that = this,\n            defaults = {\n                autoSelectFirst: false,\n                appendTo: 'body',\n                serviceUrl: null,\n                lookup: null,\n                onSelect: null,\n                width: 'auto',\n                minChars: 1,\n                maxHeight: 300,\n                deferRequestBy: 0,\n                params: {},\n                formatResult: Autocomplete.formatResult,\n                delimiter: null,\n                zIndex: 9999,\n                type: 'GET',\n                noCache: false,\n                onSearchStart: noop,\n                onSearchComplete: noop,\n                onSearchError: noop,\n                containerClass: 'autocomplete-suggestions',\n                tabDisabled: false,\n                dataType: 'text',\n                currentRequest: null,\n                triggerSelectOnValidInput: true,\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\n                    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;\n                },\n                paramName: 'query',\n                transformResult: function (response) {\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\n                }\n            };\n\n        // Shared variables:\n        that.element = el;\n        that.el = $(el);\n        that.suggestions = [];\n        that.badQueries = [];\n        that.selectedIndex = -1;\n        that.currentValue = that.element.value;\n        that.intervalId = 0;\n        that.cachedResponse = {};\n        that.onChangeInterval = null;\n        that.onChange = null;\n        that.isLocal = false;\n        that.suggestionsContainer = null;\n        that.options = $.extend({}, defaults, options);\n        that.classes = {\n            selected: 'autocomplete-selected',\n            suggestion: 'autocomplete-suggestion'\n        };\n        that.hint = null;\n        that.hintValue = '';\n        that.selection = null;\n\n        // Initialize and set options:\n        that.initialize();\n        that.setOptions(options);\n    }\n\n    Autocomplete.utils = utils;\n\n    $.Autocomplete = Autocomplete;\n\n    Autocomplete.formatResult = function (suggestion, currentValue) {\n        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';\n\n        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>');\n    };\n\n    Autocomplete.prototype = {\n\n        killerFn: null,\n\n        initialize: function () {\n            var that = this,\n                suggestionSelector = '.' + that.classes.suggestion,\n                selected = that.classes.selected,\n                options = that.options,\n                container;\n\n            // Remove autocomplete attribute to prevent native suggestions:\n            that.element.setAttribute('autocomplete', 'off');\n\n            that.killerFn = function (e) {\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\n                    that.killSuggestions();\n                    that.disableKillerFn();\n                }\n            };\n\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n\n            container = $(that.suggestionsContainer);\n\n            container.appendTo(options.appendTo);\n\n            // Only set width if it was provided:\n            if (options.width !== 'auto') {\n                container.width(options.width);\n            }\n\n            // Listen for mouse over event on suggestions list:\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\n                that.activate($(this).data('index'));\n            });\n\n            // Deselect active element when mouse leaves suggestions container:\n            container.on('mouseout.autocomplete', function () {\n                that.selectedIndex = -1;\n                container.children('.' + selected).removeClass(selected);\n            });\n\n            // Listen for click event on suggestions list:\n            container.on('click.autocomplete', suggestionSelector, function () {\n                that.select($(this).data('index'));\n            });\n\n            that.fixPosition();\n\n            that.fixPositionCapture = function () {\n                if (that.visible) {\n                    that.fixPosition();\n                }\n            };\n\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\n\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\n            that.el.on('focus.autocomplete', function () { that.onFocus(); });\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\n        },\n\n        onFocus: function () {\n            var that = this;\n            that.fixPosition();\n            if (that.options.minChars <= that.el.val().length) {\n                that.onValueChange();\n            }\n        },\n\n        onBlur: function () {\n            this.enableKillerFn();\n        },\n\n        setOptions: function (suppliedOptions) {\n            var that = this,\n                options = that.options;\n\n            $.extend(options, suppliedOptions);\n\n            that.isLocal = $.isArray(options.lookup);\n\n            if (that.isLocal) {\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\n            }\n\n            // Adjust height, width and z-index:\n            $(that.suggestionsContainer).css({\n                'max-height': options.maxHeight + 'px',\n                'width': options.width + 'px',\n                'z-index': options.zIndex\n            });\n        },\n\n        clearCache: function () {\n            this.cachedResponse = {};\n            this.badQueries = [];\n        },\n\n        clear: function () {\n            this.clearCache();\n            this.currentValue = '';\n            this.suggestions = [];\n        },\n\n        disable: function () {\n            var that = this;\n            that.disabled = true;\n            if (that.currentRequest) {\n                that.currentRequest.abort();\n            }\n        },\n\n        enable: function () {\n            this.disabled = false;\n        },\n\n        fixPosition: function () {\n            var that = this,\n                offset,\n                styles;\n\n            // Don't adjsut position if custom container has been specified:\n            if (that.options.appendTo !== 'body') {\n                return;\n            }\n\n            offset = that.el.offset();\n\n            styles = {\n                top: (offset.top + that.el.outerHeight()) + 'px',\n                left: offset.left + 'px'\n            };\n\n            if (that.options.width === 'auto') {\n                styles.width = (that.el.outerWidth() - 2) + 'px';\n            }\n\n            $(that.suggestionsContainer).css(styles);\n        },\n\n        enableKillerFn: function () {\n            var that = this;\n            $(document).on('click.autocomplete', that.killerFn);\n        },\n\n        disableKillerFn: function () {\n            var that = this;\n            $(document).off('click.autocomplete', that.killerFn);\n        },\n\n        killSuggestions: function () {\n            var that = this;\n            that.stopKillSuggestions();\n            that.intervalId = window.setInterval(function () {\n                that.hide();\n                that.stopKillSuggestions();\n            }, 50);\n        },\n\n        stopKillSuggestions: function () {\n            window.clearInterval(this.intervalId);\n        },\n\n        isCursorAtEnd: function () {\n            var that = this,\n                valLength = that.el.val().length,\n                selectionStart = that.element.selectionStart,\n                range;\n\n            if (typeof selectionStart === 'number') {\n                return selectionStart === valLength;\n            }\n            if (document.selection) {\n                range = document.selection.createRange();\n                range.moveStart('character', -valLength);\n                return valLength === range.text.length;\n            }\n            return true;\n        },\n\n        onKeyPress: function (e) {\n            var that = this;\n\n            // If suggestions are hidden and user presses arrow down, display suggestions:\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n                that.suggest();\n                return;\n            }\n\n            if (that.disabled || !that.visible) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.ESC:\n                    that.el.val(that.currentValue);\n                    that.hide();\n                    break;\n                case keys.RIGHT:\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n                        that.selectHint();\n                        break;\n                    }\n                    return;\n                case keys.TAB:\n                    if (that.hint && that.options.onHint) {\n                        that.selectHint();\n                        return;\n                    }\n                    // Fall through to RETURN\n                case keys.RETURN:\n                    if (that.selectedIndex === -1) {\n                        that.hide();\n                        return;\n                    }\n                    that.select(that.selectedIndex);\n                    if (e.which === keys.TAB && that.options.tabDisabled === false) {\n                        return;\n                    }\n                    break;\n                case keys.UP:\n                    that.moveUp();\n                    break;\n                case keys.DOWN:\n                    that.moveDown();\n                    break;\n                default:\n                    return;\n            }\n\n            // Cancel event if function did not return:\n            e.stopImmediatePropagation();\n            e.preventDefault();\n        },\n\n        onKeyUp: function (e) {\n            var that = this;\n\n            if (that.disabled) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.UP:\n                case keys.DOWN:\n                    return;\n            }\n\n            clearInterval(that.onChangeInterval);\n\n            if (that.currentValue !== that.el.val()) {\n                that.findBestHint();\n                if (that.options.deferRequestBy > 0) {\n                    // Defer lookup in case when value changes very quickly:\n                    that.onChangeInterval = setInterval(function () {\n                        that.onValueChange();\n                    }, that.options.deferRequestBy);\n                } else {\n                    that.onValueChange();\n                }\n            }\n        },\n\n        onValueChange: function () {\n            var that = this,\n                options = that.options,\n                value = that.el.val(),\n                query = that.getQuery(value),\n                index;\n\n            if (that.selection) {\n                that.selection = null;\n                (options.onInvalidateSelection || $.noop).call(that.element);\n            }\n\n            clearInterval(that.onChangeInterval);\n            that.currentValue = value;\n            that.selectedIndex = -1;\n\n            // Check existing suggestion for the match before proceeding:\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(query);\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            }\n\n            if (query.length < options.minChars) {\n                that.hide();\n            } else {\n                that.getSuggestions(query);\n            }\n        },\n\n        findSuggestionIndex: function (query) {\n            var that = this,\n                index = -1,\n                queryLowerCase = query.toLowerCase();\n\n            $.each(that.suggestions, function (i, suggestion) {\n                if (suggestion.value.toLowerCase() === queryLowerCase) {\n                    index = i;\n                    return false;\n                }\n            });\n\n            return index;\n        },\n\n        getQuery: function (value) {\n            var delimiter = this.options.delimiter,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n            parts = value.split(delimiter);\n            return $.trim(parts[parts.length - 1]);\n        },\n\n        getSuggestionsLocal: function (query) {\n            var that = this,\n                options = that.options,\n                queryLowerCase = query.toLowerCase(),\n                filter = options.lookupFilter,\n                limit = parseInt(options.lookupLimit, 10),\n                data;\n\n            data = {\n                suggestions: $.grep(options.lookup, function (suggestion) {\n                    return filter(suggestion, query, queryLowerCase);\n                })\n            };\n\n            if (limit && data.suggestions.length > limit) {\n                data.suggestions = data.suggestions.slice(0, limit);\n            }\n\n            return data;\n        },\n\n        getSuggestions: function (q) {\n            var response,\n                that = this,\n                options = that.options,\n                serviceUrl = options.serviceUrl,\n                data,\n                cacheKey;\n\n            options.params[options.paramName] = q;\n            data = options.ignoreParams ? null : options.params;\n\n            if (that.isLocal) {\n                response = that.getSuggestionsLocal(q);\n            } else {\n                if ($.isFunction(serviceUrl)) {\n                    serviceUrl = serviceUrl.call(that.element, q);\n                }\n                cacheKey = serviceUrl + '?' + $.param(data || {});\n                response = that.cachedResponse[cacheKey];\n            }\n\n            if (response && $.isArray(response.suggestions)) {\n                that.suggestions = response.suggestions;\n                that.suggest();\n            } else if (!that.isBadQuery(q)) {\n                if (options.onSearchStart.call(that.element, options.params) === false) {\n                    return;\n                }\n                if (that.currentRequest) {\n                    that.currentRequest.abort();\n                }\n                that.currentRequest = $.ajax({\n                    url: serviceUrl,\n                    data: data,\n                    type: options.type,\n                    dataType: options.dataType\n                }).done(function (data) {\n                    that.currentRequest = null;\n                    that.processResponse(data, q, cacheKey);\n                    options.onSearchComplete.call(that.element, q);\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n                });\n            }\n        },\n\n        isBadQuery: function (q) {\n            var badQueries = this.badQueries,\n                i = badQueries.length;\n\n            while (i--) {\n                if (q.indexOf(badQueries[i]) === 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        hide: function () {\n            var that = this;\n            that.visible = false;\n            that.selectedIndex = -1;\n            $(that.suggestionsContainer).hide();\n            that.signalHint(null);\n        },\n\n        suggest: function () {\n            if (this.suggestions.length === 0) {\n                this.hide();\n                return;\n            }\n\n            var that = this,\n                options = that.options,\n                formatResult = options.formatResult,\n                value = that.getQuery(that.currentValue),\n                className = that.classes.suggestion,\n                classSelected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                beforeRender = options.beforeRender,\n                html = '',\n                index,\n                width;\n\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(value);\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            }\n\n            // Build suggestions inner HTML:\n            $.each(that.suggestions, function (i, suggestion) {\n                html += '<div class=\"' + className + '\" data-index=\"' + i + '\">' + formatResult(suggestion, value) + '</div>';\n            });\n\n            // If width is auto, adjust width before displaying suggestions,\n            // because if instance was created before input had width, it will be zero.\n            // Also it adjusts if input width has changed.\n            // -2px to account for suggestions border.\n            if (options.width === 'auto') {\n                width = that.el.outerWidth() - 2;\n                container.width(width > 0 ? width : 300);\n            }\n\n            container.html(html);\n\n            // Select first value by default:\n            if (options.autoSelectFirst) {\n                that.selectedIndex = 0;\n                container.children().first().addClass(classSelected);\n            }\n\n            if ($.isFunction(beforeRender)) {\n                beforeRender.call(that.element, container);\n            }\n\n            container.show();\n            that.visible = true;\n\n            that.findBestHint();\n        },\n\n        findBestHint: function () {\n            var that = this,\n                value = that.el.val().toLowerCase(),\n                bestMatch = null;\n\n            if (!value) {\n                return;\n            }\n\n            $.each(that.suggestions, function (i, suggestion) {\n                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;\n                if (foundMatch) {\n                    bestMatch = suggestion;\n                }\n                return !foundMatch;\n            });\n\n            that.signalHint(bestMatch);\n        },\n\n        signalHint: function (suggestion) {\n            var hintValue = '',\n                that = this;\n            if (suggestion) {\n                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);\n            }\n            if (that.hintValue !== hintValue) {\n                that.hintValue = hintValue;\n                that.hint = suggestion;\n                (this.options.onHint || $.noop)(hintValue);\n            }\n        },\n\n        verifySuggestionsFormat: function (suggestions) {\n            // If suggestions is string array, convert them to supported format:\n            if (suggestions.length && typeof suggestions[0] === 'string') {\n                return $.map(suggestions, function (value) {\n                    return { value: value, data: null };\n                });\n            }\n\n            return suggestions;\n        },\n\n        processResponse: function (response, originalQuery, cacheKey) {\n            var that = this,\n                options = that.options,\n                result = options.transformResult(response, originalQuery);\n\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\n\n            // Cache results if cache is not disabled:\n            if (!options.noCache) {\n                that.cachedResponse[cacheKey] = result;\n                if (result.suggestions.length === 0) {\n                    that.badQueries.push(cacheKey);\n                }\n            }\n\n            // Return if originalQuery is not matching current query:\n            if (originalQuery !== that.getQuery(that.currentValue)) {\n                return;\n            }\n\n            that.suggestions = result.suggestions;\n            that.suggest();\n        },\n\n        activate: function (index) {\n            var that = this,\n                activeItem,\n                selected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                children = container.children();\n\n            container.children('.' + selected).removeClass(selected);\n\n            that.selectedIndex = index;\n\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n                activeItem = children.get(that.selectedIndex);\n                $(activeItem).addClass(selected);\n                return activeItem;\n            }\n\n            return null;\n        },\n\n        selectHint: function () {\n            var that = this,\n                i = $.inArray(that.hint, that.suggestions);\n\n            that.select(i);\n        },\n\n        select: function (i) {\n            var that = this;\n            that.hide();\n            that.onSelect(i);\n        },\n\n        moveUp: function () {\n            var that = this;\n\n            if (that.selectedIndex === -1) {\n                return;\n            }\n\n            if (that.selectedIndex === 0) {\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\n                that.selectedIndex = -1;\n                that.el.val(that.currentValue);\n                that.findBestHint();\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex - 1);\n        },\n\n        moveDown: function () {\n            var that = this;\n\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex + 1);\n        },\n\n        adjustScroll: function (index) {\n            var that = this,\n                activeItem = that.activate(index),\n                offsetTop,\n                upperBound,\n                lowerBound,\n                heightDelta = 25;\n\n            if (!activeItem) {\n                return;\n            }\n\n            offsetTop = activeItem.offsetTop;\n            upperBound = $(that.suggestionsContainer).scrollTop();\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n            if (offsetTop < upperBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop);\n            } else if (offsetTop > lowerBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n            }\n\n            that.el.val(that.getValue(that.suggestions[index].value));\n            that.signalHint(null);\n        },\n\n        onSelect: function (index) {\n            var that = this,\n                onSelectCallback = that.options.onSelect,\n                suggestion = that.suggestions[index];\n\n            that.currentValue = that.getValue(suggestion.value);\n            that.el.val(that.currentValue);\n            that.signalHint(null);\n            that.suggestions = [];\n            that.selection = suggestion;\n\n            if ($.isFunction(onSelectCallback)) {\n                onSelectCallback.call(that.element, suggestion);\n            }\n        },\n\n        getValue: function (value) {\n            var that = this,\n                delimiter = that.options.delimiter,\n                currentValue,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n\n            currentValue = that.currentValue;\n            parts = currentValue.split(delimiter);\n\n            if (parts.length === 1) {\n                return value;\n            }\n\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n        },\n\n        dispose: function () {\n            var that = this;\n            that.el.off('.autocomplete').removeData('autocomplete');\n            that.disableKillerFn();\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\n            $(that.suggestionsContainer).remove();\n        }\n    };\n\n    // Create chainable jQuery plugin:\n    $.fn.autocomplete = function (options, args) {\n        var dataKey = 'autocomplete';\n        // If function invoked without argument return\n        // instance of the first matched element:\n        if (arguments.length === 0) {\n            return this.first().data(dataKey);\n        }\n\n        return this.each(function () {\n            var inputElement = $(this),\n                instance = inputElement.data(dataKey);\n\n            if (typeof options === 'string') {\n                if (instance && typeof instance[options] === 'function') {\n                    instance[options](args);\n                }\n            } else {\n                // If instance already exists, destroy it:\n                if (instance && instance.dispose) {\n                    instance.dispose();\n                }\n                instance = new Autocomplete(this, options);\n                inputElement.data(dataKey, instance);\n            }\n        });\n    };\n}));\n"]},"hash":"aa08d1df26cd2b39d2c5861c41fbbe6657bc72a5"}
