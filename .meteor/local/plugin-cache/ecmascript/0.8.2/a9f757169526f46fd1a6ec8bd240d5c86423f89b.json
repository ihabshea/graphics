{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]}],"exports":{"exported":["MediaQuery"],"specifiers":[{"kind":"local","local":"MediaQuery","exported":"MediaQuery"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.util.mediaQuery"},"ignored":false,"code":"'use strict';\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  MediaQuery: function () {\n    return MediaQuery;\n  }\n});\nvar $ = void 0;\nmodule.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\n// Default set of media queries\nvar defaultQueries = {\n  'default': 'only screen',\n  landscape: 'only screen and (orientation: landscape)',\n  portrait: 'only screen and (orientation: portrait)',\n  retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n}; // matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n\nvar matchMedia = window.matchMedia || function () {\n  'use strict'; // For browsers that support matchMedium api such as IE 9 and webkit\n\n  var styleMedia = window.styleMedia || window.media; // For those that don't support matchMedium\n\n  if (!styleMedia) {\n    var style = document.createElement('style'),\n        script = document.getElementsByTagName('script')[0],\n        info = null;\n    style.type = 'text/css';\n    style.id = 'matchmediajs-test';\n    script && script.parentNode && script.parentNode.insertBefore(style, script); // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n\n    info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n    styleMedia = {\n      matchMedium: function (media) {\n        var text = \"@media \" + media + \"{ #matchmediajs-test { width: 1px; } }\"; // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n\n        if (style.styleSheet) {\n          style.styleSheet.cssText = text;\n        } else {\n          style.textContent = text;\n        } // Test if media query is true or false\n\n\n        return info.width === '1px';\n      }\n    };\n  }\n\n  return function (media) {\n    return {\n      matches: styleMedia.matchMedium(media || 'all'),\n      media: media || 'all'\n    };\n  };\n}();\n\nvar MediaQuery = {\n  queries: [],\n  current: '',\n  /**\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n   * @function\n   * @private\n   */_init: function () {\n    var self = this;\n    var $meta = $('meta.foundation-mq');\n\n    if (!$meta.length) {\n      $('<meta class=\"foundation-mq\">').appendTo(document.head);\n    }\n\n    var extractedStyles = $('.foundation-mq').css('font-family');\n    var namedQueries;\n    namedQueries = parseStyleToObject(extractedStyles);\n\n    for (var key in meteorBabelHelpers.sanitizeForInObject(namedQueries)) {\n      if (namedQueries.hasOwnProperty(key)) {\n        self.queries.push({\n          name: key,\n          value: \"only screen and (min-width: \" + namedQueries[key] + \")\"\n        });\n      }\n    }\n\n    this.current = this._getCurrentSize();\n\n    this._watcher();\n  },\n  /**\n   * Checks if the screen is at least as wide as a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n   */atLeast: function (size) {\n    var query = this.get(size);\n\n    if (query) {\n      return matchMedia(query).matches;\n    }\n\n    return false;\n  },\n  /**\n   * Checks if the screen matches to a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n   */is: function (size) {\n    size = size.trim().split(' ');\n\n    if (size.length > 1 && size[1] === 'only') {\n      if (size[0] === this._getCurrentSize()) return true;\n    } else {\n      return this.atLeast(size[0]);\n    }\n\n    return false;\n  },\n  /**\n   * Gets the media query of a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to get.\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n   */get: function (size) {\n    for (var i in meteorBabelHelpers.sanitizeForInObject(this.queries)) {\n      if (this.queries.hasOwnProperty(i)) {\n        var query = this.queries[i];\n        if (size === query.name) return query.value;\n      }\n    }\n\n    return null;\n  },\n  /**\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n   * @function\n   * @private\n   * @returns {String} Name of the current breakpoint.\n   */_getCurrentSize: function () {\n    var matched;\n\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n\n      if (matchMedia(query.value).matches) {\n        matched = query;\n      }\n    }\n\n    if ((typeof matched === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(matched)) === 'object') {\n      return matched.name;\n    } else {\n      return matched;\n    }\n  },\n  /**\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n   * @function\n   * @private\n   */_watcher: function () {\n    var _this = this;\n\n    $(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {\n      var newSize = _this._getCurrentSize(),\n          currentSize = _this.current;\n\n      if (newSize !== currentSize) {\n        // Change the current media query\n        _this.current = newSize; // Broadcast the media query change on the window\n\n        $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n      }\n    });\n  }\n}; // Thank you: https://github.com/sindresorhus/query-string\n\nfunction parseStyleToObject(str) {\n  var styleObject = {};\n\n  if (typeof str !== 'string') {\n    return styleObject;\n  }\n\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n  if (!str) {\n    return styleObject;\n  }\n\n  styleObject = str.split('&').reduce(function (ret, param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = parts[0];\n    var val = parts[1];\n    key = decodeURIComponent(key); // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n    val = val === undefined ? null : decodeURIComponent(val);\n\n    if (!ret.hasOwnProperty(key)) {\n      ret[key] = val;\n    } else if (Array.isArray(ret[key])) {\n      ret[key].push(val);\n    } else {\n      ret[key] = [ret[key], val];\n    }\n\n    return ret;\n  }, {});\n  return styleObject;\n}","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js"],"names":["module","export","MediaQuery","$","watch","require","v","defaultQueries","landscape","portrait","retina","matchMedia","window","styleMedia","media","style","document","createElement","script","getElementsByTagName","info","type","id","parentNode","insertBefore","getComputedStyle","currentStyle","matchMedium","text","styleSheet","cssText","textContent","width","matches","queries","current","_init","self","$meta","length","appendTo","head","extractedStyles","css","namedQueries","parseStyleToObject","key","hasOwnProperty","push","name","value","_getCurrentSize","_watcher","atLeast","size","query","get","is","trim","split","i","matched","off","on","newSize","currentSize","trigger","str","styleObject","slice","reduce","ret","param","parts","replace","val","decodeURIComponent","undefined","Array","isArray"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.util.mediaQuery.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\n\n// Default set of media queries\nconst defaultQueries = {\n  'default' : 'only screen',\n  landscape : 'only screen and (orientation: landscape)',\n  portrait : 'only screen and (orientation: portrait)',\n  retina : 'only screen and (-webkit-min-device-pixel-ratio: 2),' +\n    'only screen and (min--moz-device-pixel-ratio: 2),' +\n    'only screen and (-o-min-device-pixel-ratio: 2/1),' +\n    'only screen and (min-device-pixel-ratio: 2),' +\n    'only screen and (min-resolution: 192dpi),' +\n    'only screen and (min-resolution: 2dppx)'\n  };\n\n\n// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\nlet matchMedia = window.matchMedia || (function() {\n  'use strict';\n\n  // For browsers that support matchMedium api such as IE 9 and webkit\n  var styleMedia = (window.styleMedia || window.media);\n\n  // For those that don't support matchMedium\n  if (!styleMedia) {\n    var style   = document.createElement('style'),\n    script      = document.getElementsByTagName('script')[0],\n    info        = null;\n\n    style.type  = 'text/css';\n    style.id    = 'matchmediajs-test';\n\n    script && script.parentNode && script.parentNode.insertBefore(style, script);\n\n    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n    info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n    styleMedia = {\n      matchMedium(media) {\n        var text = `@media ${media}{ #matchmediajs-test { width: 1px; } }`;\n\n        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n        if (style.styleSheet) {\n          style.styleSheet.cssText = text;\n        } else {\n          style.textContent = text;\n        }\n\n        // Test if media query is true or false\n        return info.width === '1px';\n      }\n    }\n  }\n\n  return function(media) {\n    return {\n      matches: styleMedia.matchMedium(media || 'all'),\n      media: media || 'all'\n    };\n  }\n})();\n\nvar MediaQuery = {\n  queries: [],\n\n  current: '',\n\n  /**\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n   * @function\n   * @private\n   */\n  _init() {\n    var self = this;\n    var $meta = $('meta.foundation-mq');\n    if(!$meta.length){\n      $('<meta class=\"foundation-mq\">').appendTo(document.head);\n    }\n\n    var extractedStyles = $('.foundation-mq').css('font-family');\n    var namedQueries;\n\n    namedQueries = parseStyleToObject(extractedStyles);\n\n    for (var key in namedQueries) {\n      if(namedQueries.hasOwnProperty(key)) {\n        self.queries.push({\n          name: key,\n          value: `only screen and (min-width: ${namedQueries[key]})`\n        });\n      }\n    }\n\n    this.current = this._getCurrentSize();\n\n    this._watcher();\n  },\n\n  /**\n   * Checks if the screen is at least as wide as a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n   */\n  atLeast(size) {\n    var query = this.get(size);\n\n    if (query) {\n      return matchMedia(query).matches;\n    }\n\n    return false;\n  },\n\n  /**\n   * Checks if the screen matches to a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n   */\n  is(size) {\n    size = size.trim().split(' ');\n    if(size.length > 1 && size[1] === 'only') {\n      if(size[0] === this._getCurrentSize()) return true;\n    } else {\n      return this.atLeast(size[0]);\n    }\n    return false;\n  },\n\n  /**\n   * Gets the media query of a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to get.\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n   */\n  get(size) {\n    for (var i in this.queries) {\n      if(this.queries.hasOwnProperty(i)) {\n        var query = this.queries[i];\n        if (size === query.name) return query.value;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n   * @function\n   * @private\n   * @returns {String} Name of the current breakpoint.\n   */\n  _getCurrentSize() {\n    var matched;\n\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n\n      if (matchMedia(query.value).matches) {\n        matched = query;\n      }\n    }\n\n    if (typeof matched === 'object') {\n      return matched.name;\n    } else {\n      return matched;\n    }\n  },\n\n  /**\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n   * @function\n   * @private\n   */\n  _watcher() {\n    $(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', () => {\n      var newSize = this._getCurrentSize(), currentSize = this.current;\n\n      if (newSize !== currentSize) {\n        // Change the current media query\n        this.current = newSize;\n\n        // Broadcast the media query change on the window\n        $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n      }\n    });\n  }\n};\n\n\n\n// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str) {\n  var styleObject = {};\n\n  if (typeof str !== 'string') {\n    return styleObject;\n  }\n\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n  if (!str) {\n    return styleObject;\n  }\n\n  styleObject = str.split('&').reduce(function(ret, param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = parts[0];\n    var val = parts[1];\n    key = decodeURIComponent(key);\n\n    // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    val = val === undefined ? null : decodeURIComponent(val);\n\n    if (!ret.hasOwnProperty(key)) {\n      ret[key] = val;\n    } else if (Array.isArray(ret[key])) {\n      ret[key].push(val);\n    } else {\n      ret[key] = [ret[key], val];\n    }\n    return ret;\n  }, {});\n\n  return styleObject;\n}\n\nexport {MediaQuery};\n"]},"hash":"a9f757169526f46fd1a6ec8bd240d5c86423f89b"}
