{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.util.keyboard","imported":["Keyboard"],"specifiers":[{"kind":"named","imported":"Keyboard","local":"Keyboard"}]},{"source":"./foundation.util.motion","imported":["Move"],"specifiers":[{"kind":"named","imported":"Move","local":"Move"}]},{"source":"./foundation.util.core","imported":["GetYoDigits","rtl"],"specifiers":[{"kind":"named","imported":"GetYoDigits","local":"GetYoDigits"},{"kind":"named","imported":"rtl","local":"Rtl"}]},{"source":"./foundation.plugin","imported":["Plugin"],"specifiers":[{"kind":"named","imported":"Plugin","local":"Plugin"}]},{"source":"./foundation.util.touch","imported":["Touch"],"specifiers":[{"kind":"named","imported":"Touch","local":"Touch"}]},{"source":"./foundation.util.triggers","imported":["Triggers"],"specifiers":[{"kind":"named","imported":"Triggers","local":"Triggers"}]}],"exports":{"exported":["Slider"],"specifiers":[{"kind":"local","local":"Slider","exported":"Slider"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.slider.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.slider.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.slider.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.slider.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.slider"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nmodule1.export({\n  Slider: function () {\n    return Slider;\n  }\n});\nvar $ = void 0;\nmodule1.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar Keyboard = void 0;\nmodule1.watch(require(\"./foundation.util.keyboard\"), {\n  Keyboard: function (v) {\n    Keyboard = v;\n  }\n}, 1);\nvar Move = void 0;\nmodule1.watch(require(\"./foundation.util.motion\"), {\n  Move: function (v) {\n    Move = v;\n  }\n}, 2);\nvar GetYoDigits = void 0,\n    Rtl = void 0;\nmodule1.watch(require(\"./foundation.util.core\"), {\n  GetYoDigits: function (v) {\n    GetYoDigits = v;\n  },\n  rtl: function (v) {\n    Rtl = v;\n  }\n}, 3);\nvar Plugin = void 0;\nmodule1.watch(require(\"./foundation.plugin\"), {\n  Plugin: function (v) {\n    Plugin = v;\n  }\n}, 4);\nvar Touch = void 0;\nmodule1.watch(require(\"./foundation.util.touch\"), {\n  Touch: function (v) {\n    Touch = v;\n  }\n}, 5);\nvar Triggers = void 0;\nmodule1.watch(require(\"./foundation.util.triggers\"), {\n  Triggers: function (v) {\n    Triggers = v;\n  }\n}, 6);\n\n/**\n * Slider module.\n * @module foundation.slider\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n * @requires foundation.util.keyboard\n * @requires foundation.util.touch\n */var Slider = function (_Plugin) {\n  (0, _inherits3.default)(Slider, _Plugin);\n\n  function Slider() {\n    (0, _classCallCheck3.default)(this, Slider);\n    return (0, _possibleConstructorReturn3.default)(this, _Plugin.apply(this, arguments));\n  }\n\n  /**\n   * Creates a new instance of a slider control.\n   * @class\n   * @name Slider\n   * @param {jQuery} element - jQuery object to make into a slider control.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */Slider.prototype._setup = function () {\n    function _setup(element, options) {\n      this.$element = element;\n      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n      this.className = 'Slider'; // ie9 back compat\n      // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.\n\n      Touch.init($);\n      Triggers.init($);\n\n      this._init();\n\n      Keyboard.register('Slider', {\n        'ltr': {\n          'ARROW_RIGHT': 'increase',\n          'ARROW_UP': 'increase',\n          'ARROW_DOWN': 'decrease',\n          'ARROW_LEFT': 'decrease',\n          'SHIFT_ARROW_RIGHT': 'increase_fast',\n          'SHIFT_ARROW_UP': 'increase_fast',\n          'SHIFT_ARROW_DOWN': 'decrease_fast',\n          'SHIFT_ARROW_LEFT': 'decrease_fast',\n          'HOME': 'min',\n          'END': 'max'\n        },\n        'rtl': {\n          'ARROW_LEFT': 'increase',\n          'ARROW_RIGHT': 'decrease',\n          'SHIFT_ARROW_LEFT': 'increase_fast',\n          'SHIFT_ARROW_RIGHT': 'decrease_fast'\n        }\n      });\n    }\n\n    return _setup;\n  }(); /**\n        * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n        * @function\n        * @private\n        */\n\n  Slider.prototype._init = function () {\n    function _init() {\n      this.inputs = this.$element.find('input');\n      this.handles = this.$element.find('[data-slider-handle]');\n      this.$handle = this.handles.eq(0);\n      this.$input = this.inputs.length ? this.inputs.eq(0) : $(\"#\" + this.$handle.attr('aria-controls'));\n      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n      var isDbl = false,\n          _this = this;\n\n      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n        this.options.disabled = true;\n        this.$element.addClass(this.options.disabledClass);\n      }\n\n      if (!this.inputs.length) {\n        this.inputs = $().add(this.$input);\n        this.options.binding = true;\n      }\n\n      this._setInitAttr(0);\n\n      if (this.handles[1]) {\n        this.options.doubleSided = true;\n        this.$handle2 = this.handles.eq(1);\n        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(\"#\" + this.$handle2.attr('aria-controls'));\n\n        if (!this.inputs[1]) {\n          this.inputs = this.inputs.add(this.$input2);\n        }\n\n        isDbl = true; // this.$handle.triggerHandler('click.zf.slider');\n\n        this._setInitAttr(1);\n      } // Set handle positions\n\n\n      this.setHandles();\n\n      this._events();\n    }\n\n    return _init;\n  }();\n\n  Slider.prototype.setHandles = function () {\n    function setHandles() {\n      var _this3 = this;\n\n      if (this.handles[1]) {\n        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {\n          _this3._setHandlePos(_this3.$handle2, _this3.inputs.eq(1).val(), true);\n        });\n      } else {\n        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\n      }\n    }\n\n    return setHandles;\n  }();\n\n  Slider.prototype._reflow = function () {\n    function _reflow() {\n      this.setHandles();\n    }\n\n    return _reflow;\n  }(); /**\n       * @function\n       * @private\n       * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\n       */\n\n  Slider.prototype._pctOfBar = function () {\n    function _pctOfBar(value) {\n      var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);\n\n      switch (this.options.positionValueFunction) {\n        case \"pow\":\n          pctOfBar = this._logTransform(pctOfBar);\n          break;\n\n        case \"log\":\n          pctOfBar = this._powTransform(pctOfBar);\n          break;\n      }\n\n      return pctOfBar.toFixed(2);\n    }\n\n    return _pctOfBar;\n  }(); /**\n       * @function\n       * @private\n       * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\n       */\n\n  Slider.prototype._value = function () {\n    function _value(pctOfBar) {\n      switch (this.options.positionValueFunction) {\n        case \"pow\":\n          pctOfBar = this._powTransform(pctOfBar);\n          break;\n\n        case \"log\":\n          pctOfBar = this._logTransform(pctOfBar);\n          break;\n      }\n\n      var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;\n      return value;\n    }\n\n    return _value;\n  }(); /**\n       * @function\n       * @private\n       * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\n       */\n\n  Slider.prototype._logTransform = function () {\n    function _logTransform(value) {\n      return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);\n    }\n\n    return _logTransform;\n  }(); /**\n       * @function\n       * @private\n       * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\n       */\n\n  Slider.prototype._powTransform = function () {\n    function _powTransform(value) {\n      return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);\n    }\n\n    return _powTransform;\n  }(); /**\n        * Sets the position of the selected handle and fill bar.\n        * @function\n        * @private\n        * @param {jQuery} $hndl - the selected handle to move.\n        * @param {Number} location - floating point between the start and end values of the slider bar.\n        * @param {Function} cb - callback function to fire on completion.\n        * @fires Slider#moved\n        * @fires Slider#changed\n        */\n\n  Slider.prototype._setHandlePos = function () {\n    function _setHandlePos($hndl, location, noInvert, cb) {\n      // don't move if the slider has been disabled since its initialization\n      if (this.$element.hasClass(this.options.disabledClass)) {\n        return;\n      } //might need to alter that slightly for bars that will have odd number selections.\n\n\n      location = parseFloat(location); //on input change events, convert string to number...grumble.\n      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\n\n      if (location < this.options.start) {\n        location = this.options.start;\n      } else if (location > this.options.end) {\n        location = this.options.end;\n      }\n\n      var isDbl = this.options.doubleSided;\n\n      if (isDbl) {\n        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\n        if (this.handles.index($hndl) === 0) {\n          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n          location = location >= h2Val ? h2Val - this.options.step : location;\n        } else {\n          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n          location = location <= h1Val ? h1Val + this.options.step : location;\n        }\n      } //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n      //for click and drag events, it's weird due to the scale(-1, 1) css property\n\n\n      if (this.options.vertical && !noInvert) {\n        location = this.options.end - location;\n      }\n\n      var _this = this,\n          vert = this.options.vertical,\n          hOrW = vert ? 'height' : 'width',\n          lOrT = vert ? 'top' : 'left',\n          handleDim = $hndl[0].getBoundingClientRect()[hOrW],\n          elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n          //percentage of bar min/max value based on click or drag point\n      pctOfBar = this._pctOfBar(location),\n          //number of actual pixels to shift the handle, based on the percentage obtained above\n      pxToMove = (elemDim - handleDim) * pctOfBar,\n          //percentage of bar to shift the handle\n      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal); //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\n\n\n      location = parseFloat(location.toFixed(this.options.decimal)); // declare empty object for css adjustments, only used with 2 handled-sliders\n\n      var css = {};\n\n      this._setValues($hndl, location); // TODO update to calculate based on values set to respective inputs??\n\n\n      if (isDbl) {\n        var isLeftHndl = this.handles.index($hndl) === 0,\n            //empty variable, will be used for min-height/width for fill bar\n        dim,\n            //percentage w/h of the handle compared to the slider bar\n        handlePct = ~~(percent(handleDim, elemDim) * 100); //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\n\n        if (isLeftHndl) {\n          //left or top percentage value to apply to the fill bar.\n          css[lOrT] = movement + \"%\"; //calculate the new min-height/width for the fill bar.\n\n          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct; //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\n\n          if (cb && typeof cb === 'function') {\n            cb();\n          } //this is only needed for the initialization of 2 handled sliders\n\n        } else {\n          //just caching the value of the left/bottom handle's left/top property\n          var handlePos = parseFloat(this.$handle[0].style[lOrT]); //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\n\n          dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;\n        } // assign the min-height/width to our css object\n\n\n        css[\"min-\" + hOrW] = dim + \"%\";\n      }\n\n      this.$element.one('finished.zf.animate', function () {\n        /**\n         * Fires when the handle is done moving.\n         * @event Slider#moved\n         */_this.$element.trigger('moved.zf.slider', [$hndl]);\n      }); //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\n\n      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;\n      Move(moveTime, $hndl, function () {\n        // adjusting the left/top property of the handle, based on the percentage calculated above\n        // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\n        // fall back to next best guess.\n        if (isNaN(movement)) {\n          $hndl.css(lOrT, pctOfBar * 100 + \"%\");\n        } else {\n          $hndl.css(lOrT, movement + \"%\");\n        }\n\n        if (!_this.options.doubleSided) {\n          //if single-handled, a simple method to expand the fill bar\n          _this.$fill.css(hOrW, pctOfBar * 100 + \"%\");\n        } else {\n          //otherwise, use the css object we created above\n          _this.$fill.css(css);\n        }\n      }); /**\n           * Fires when the value has not been change for a given time.\n           * @event Slider#changed\n           */\n      clearTimeout(_this.timeout);\n      _this.timeout = setTimeout(function () {\n        _this.$element.trigger('changed.zf.slider', [$hndl]);\n      }, _this.options.changedDelay);\n    }\n\n    return _setHandlePos;\n  }(); /**\n        * Sets the initial attribute for the slider element.\n        * @function\n        * @private\n        * @param {Number} idx - index of the current handle/input to use.\n        */\n\n  Slider.prototype._setInitAttr = function () {\n    function _setInitAttr(idx) {\n      var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;\n      var id = this.inputs.eq(idx).attr('id') || GetYoDigits(6, 'slider');\n      this.inputs.eq(idx).attr({\n        'id': id,\n        'max': this.options.end,\n        'min': this.options.start,\n        'step': this.options.step\n      });\n      this.inputs.eq(idx).val(initVal);\n      this.handles.eq(idx).attr({\n        'role': 'slider',\n        'aria-controls': id,\n        'aria-valuemax': this.options.end,\n        'aria-valuemin': this.options.start,\n        'aria-valuenow': initVal,\n        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n        'tabindex': 0\n      });\n    }\n\n    return _setInitAttr;\n  }(); /**\n        * Sets the input and `aria-valuenow` values for the slider element.\n        * @function\n        * @private\n        * @param {jQuery} $handle - the currently selected handle.\n        * @param {Number} val - floating point of the new value.\n        */\n\n  Slider.prototype._setValues = function () {\n    function _setValues($handle, val) {\n      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n      this.inputs.eq(idx).val(val);\n      $handle.attr('aria-valuenow', val);\n    }\n\n    return _setValues;\n  }(); /**\n        * Handles events on the slider element.\n        * Calculates the new location of the current handle.\n        * If there are two handles and the bar was clicked, it determines which handle to move.\n        * @function\n        * @private\n        * @param {Object} e - the `event` object passed from the listener.\n        * @param {jQuery} $handle - the current handle to calculate for, if selected.\n        * @param {Number} val - floating point number for the new value of the slider.\n        * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n        */\n\n  Slider.prototype._handleEvent = function () {\n    function _handleEvent(e, $handle, val) {\n      var value, hasVal;\n\n      if (!val) {\n        //click or drag events\n        e.preventDefault();\n\n        var _this = this,\n            vertical = this.options.vertical,\n            param = vertical ? 'height' : 'width',\n            direction = vertical ? 'top' : 'left',\n            eventOffset = vertical ? e.pageY : e.pageX,\n            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n            barDim = this.$element[0].getBoundingClientRect()[param],\n            windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\n\n        var elemOffset = this.$element.offset()[direction]; // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n        // best way to guess this is simulated is if clientY == pageY\n\n        if (e.clientY === e.pageY) {\n          eventOffset = eventOffset + windowScroll;\n        }\n\n        var eventFromBar = eventOffset - elemOffset;\n        var barXY;\n\n        if (eventFromBar < 0) {\n          barXY = 0;\n        } else if (eventFromBar > barDim) {\n          barXY = barDim;\n        } else {\n          barXY = eventFromBar;\n        }\n\n        var offsetPct = percent(barXY, barDim);\n        value = this._value(offsetPct); // turn everything around for RTL, yay math!\n\n        if (Rtl() && !this.options.vertical) {\n          value = this.options.end - value;\n        }\n\n        value = _this._adjustValue(null, value); //boolean flag for the setHandlePos fn, specifically for vertical sliders\n\n        hasVal = false;\n\n        if (!$handle) {\n          //figure out which handle it is, pass it to the next function.\n          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n        }\n      } else {\n        //change event on input\n        value = this._adjustValue(null, val);\n        hasVal = true;\n      }\n\n      this._setHandlePos($handle, value, hasVal);\n    }\n\n    return _handleEvent;\n  }(); /**\n        * Adjustes value for handle in regard to step value. returns adjusted value\n        * @function\n        * @private\n        * @param {jQuery} $handle - the selected handle.\n        * @param {Number} value - value to adjust. used if $handle is falsy\n        */\n\n  Slider.prototype._adjustValue = function () {\n    function _adjustValue($handle, value) {\n      var val,\n          step = this.options.step,\n          div = parseFloat(step / 2),\n          left,\n          prev_val,\n          next_val;\n\n      if (!!$handle) {\n        val = parseFloat($handle.attr('aria-valuenow'));\n      } else {\n        val = value;\n      }\n\n      left = val % step;\n      prev_val = val - left;\n      next_val = prev_val + step;\n\n      if (left === 0) {\n        return val;\n      }\n\n      val = val >= prev_val + div ? next_val : prev_val;\n      return val;\n    }\n\n    return _adjustValue;\n  }(); /**\n        * Adds event listeners to the slider elements.\n        * @function\n        * @private\n        */\n\n  Slider.prototype._events = function () {\n    function _events() {\n      this._eventsForHandle(this.$handle);\n\n      if (this.handles[1]) {\n        this._eventsForHandle(this.$handle2);\n      }\n    }\n\n    return _events;\n  }(); /**\n        * Adds event listeners a particular handle\n        * @function\n        * @private\n        * @param {jQuery} $handle - the current handle to apply listeners to.\n        */\n\n  Slider.prototype._eventsForHandle = function () {\n    function _eventsForHandle($handle) {\n      var _this = this,\n          curHandle,\n          timer;\n\n      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\n        var idx = _this.inputs.index($(this));\n\n        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n      });\n\n      if (this.options.clickSelect) {\n        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\n          if (_this.$element.data('dragging')) {\n            return false;\n          }\n\n          if (!$(e.target).is('[data-slider-handle]')) {\n            if (_this.options.doubleSided) {\n              _this._handleEvent(e);\n            } else {\n              _this._handleEvent(e, _this.$handle);\n            }\n          }\n        });\n      }\n\n      if (this.options.draggable) {\n        this.handles.addTouch();\n        var $body = $('body');\n        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\n          $handle.addClass('is-dragging');\n\n          _this.$fill.addClass('is-dragging'); //\n\n\n          _this.$element.data('dragging', true);\n\n          curHandle = $(e.currentTarget);\n          $body.on('mousemove.zf.slider', function (e) {\n            e.preventDefault();\n\n            _this._handleEvent(e, curHandle);\n          }).on('mouseup.zf.slider', function (e) {\n            _this._handleEvent(e, curHandle);\n\n            $handle.removeClass('is-dragging');\n\n            _this.$fill.removeClass('is-dragging');\n\n            _this.$element.data('dragging', false);\n\n            $body.off('mousemove.zf.slider mouseup.zf.slider');\n          });\n        }) // prevent events triggered by touch\n        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {\n          e.preventDefault();\n        });\n      }\n\n      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\n        var _$handle = $(this),\n            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\n            oldValue = parseFloat(_this.inputs.eq(idx).val()),\n            newValue; // handle keyboard event with keyboard util\n\n\n        Keyboard.handleKey(e, 'Slider', {\n          decrease: function () {\n            newValue = oldValue - _this.options.step;\n          },\n          increase: function () {\n            newValue = oldValue + _this.options.step;\n          },\n          decrease_fast: function () {\n            newValue = oldValue - _this.options.step * 10;\n          },\n          increase_fast: function () {\n            newValue = oldValue + _this.options.step * 10;\n          },\n          min: function () {\n            newValue = _this.options.start;\n          },\n          max: function () {\n            newValue = _this.options.end;\n          },\n          handled: function () {\n            // only set handle pos when event was handled specially\n            e.preventDefault();\n\n            _this._setHandlePos(_$handle, newValue, true);\n          }\n        }); /*if (newValue) { // if pressed key has special function, update value\n              e.preventDefault();\n              _this._setHandlePos(_$handle, newValue);\n            }*/\n      });\n    }\n\n    return _eventsForHandle;\n  }(); /**\n        * Destroys the slider plugin.\n        */\n\n  Slider.prototype._destroy = function () {\n    function _destroy() {\n      this.handles.off('.zf.slider');\n      this.inputs.off('.zf.slider');\n      this.$element.off('.zf.slider');\n      clearTimeout(this.timeout);\n    }\n\n    return _destroy;\n  }();\n\n  return Slider;\n}(Plugin);\n\nSlider.defaults = {\n  /**\n   * Minimum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 0\n   */start: 0,\n  /**\n   * Maximum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 100\n   */end: 100,\n  /**\n   * Minimum value change per change event.\n   * @option\n   * @type {number}\n   * @default 1\n   */step: 1,\n  /**\n   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 0\n   */initialStart: 0,\n  /**\n   * Value at which the right handle/second input should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 100\n   */initialEnd: 100,\n  /**\n   * Allows the input to be located outside the container and visible. Set to by the JS\n   * @option\n   * @type {boolean}\n   * @default false\n   */binding: false,\n  /**\n   * Allows the user to click/tap on the slider bar to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */clickSelect: true,\n  /**\n   * Set to true and use the `vertical` class to change alignment to vertical.\n   * @option\n   * @type {boolean}\n   * @default false\n   */vertical: false,\n  /**\n   * Allows the user to drag the slider handle(s) to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */draggable: true,\n  /**\n   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n   * @option\n   * @type {boolean}\n   * @default false\n   */disabled: false,\n  /**\n   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n   * @option\n   * @type {boolean}\n   * @default false\n   */doubleSided: false,\n  /**\n   * Potential future feature.\n   */ // steps: 100,\n  /**\n   * Number of decimal places the plugin should go to for floating point precision.\n   * @option\n   * @type {number}\n   * @default 2\n   */decimal: 2,\n  /**\n   * Time delay for dragged elements.\n   */ // dragDelay: 0,\n  /**\n   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n   * @option\n   * @type {number}\n   * @default 200\n   */moveTime: 200,\n  //update this if changing the transition time in the sass\n  /**\n   * Class applied to disabled sliders.\n   * @option\n   * @type {string}\n   * @default 'disabled'\n   */disabledClass: 'disabled',\n  /**\n   * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n   * @option\n   * @type {boolean}\n   * @default false\n   */invertVertical: false,\n  /**\n   * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n   * @option\n   * @type {number}\n   * @default 500\n   */changedDelay: 500,\n  /**\n  * Basevalue for non-linear sliders\n  * @option\n  * @type {number}\n  * @default 5\n  */nonLinearBase: 5,\n  /**\n  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.\n  * @option\n  * @type {string}\n  * @default 'linear'\n  */positionValueFunction: 'linear'\n};\n\nfunction percent(frac, num) {\n  return frac / num;\n}\n\nfunction absPosition($handle, dir, clickPos, param) {\n  return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\n}\n\nfunction baseLog(base, value) {\n  return Math.log(value) / Math.log(base);\n}","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.slider.js"],"names":["module1","module","export","Slider","$","watch","require","v","Keyboard","Move","GetYoDigits","Rtl","rtl","Plugin","Touch","Triggers","_setup","element","options","$element","extend","defaults","data","className","init","_init","register","inputs","find","handles","$handle","eq","$input","length","attr","$fill","css","vertical","isDbl","_this","disabled","hasClass","disabledClass","addClass","add","binding","_setInitAttr","doubleSided","$handle2","$input2","setHandles","_events","_setHandlePos","val","_reflow","_pctOfBar","value","pctOfBar","percent","start","end","positionValueFunction","_logTransform","_powTransform","toFixed","_value","baseLog","nonLinearBase","Math","pow","$hndl","location","noInvert","cb","parseFloat","index","h2Val","step","h1Val","vert","hOrW","lOrT","handleDim","getBoundingClientRect","elemDim","pxToMove","movement","decimal","_setValues","isLeftHndl","dim","handlePct","style","handlePos","isNaN","initialStart","one","trigger","moveTime","clearTimeout","timeout","setTimeout","changedDelay","idx","initVal","initialEnd","id","_handleEvent","e","hasVal","preventDefault","param","direction","eventOffset","pageY","pageX","halfOfHandle","barDim","windowScroll","window","scrollTop","scrollLeft","elemOffset","offset","clientY","eventFromBar","barXY","offsetPct","_adjustValue","firstHndlPos","absPosition","secndHndlPos","div","left","prev_val","next_val","_eventsForHandle","curHandle","timer","off","on","clickSelect","target","is","draggable","addTouch","$body","currentTarget","removeClass","_$handle","oldValue","newValue","handleKey","decrease","increase","decrease_fast","increase_fast","min","max","handled","_destroy","invertVertical","frac","num","dir","clickPos","abs","position","base","log"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.slider.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Move } from './foundation.util.motion';\nimport { GetYoDigits, rtl as Rtl } from './foundation.util.core';\n\nimport { Plugin } from './foundation.plugin';\n\nimport { Touch } from './foundation.util.touch';\n\nimport { Triggers } from './foundation.util.triggers';\n/**\n * Slider module.\n * @module foundation.slider\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n * @requires foundation.util.keyboard\n * @requires foundation.util.touch\n */\n\nclass Slider extends Plugin {\n  /**\n   * Creates a new instance of a slider control.\n   * @class\n   * @name Slider\n   * @param {jQuery} element - jQuery object to make into a slider control.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n    this.className = 'Slider'; // ie9 back compat\n\n  // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.\n    Touch.init($);\n    Triggers.init($);\n\n    this._init();\n\n    Keyboard.register('Slider', {\n      'ltr': {\n        'ARROW_RIGHT': 'increase',\n        'ARROW_UP': 'increase',\n        'ARROW_DOWN': 'decrease',\n        'ARROW_LEFT': 'decrease',\n        'SHIFT_ARROW_RIGHT': 'increase_fast',\n        'SHIFT_ARROW_UP': 'increase_fast',\n        'SHIFT_ARROW_DOWN': 'decrease_fast',\n        'SHIFT_ARROW_LEFT': 'decrease_fast',\n        'HOME': 'min',\n        'END': 'max'\n      },\n      'rtl': {\n        'ARROW_LEFT': 'increase',\n        'ARROW_RIGHT': 'decrease',\n        'SHIFT_ARROW_LEFT': 'increase_fast',\n        'SHIFT_ARROW_RIGHT': 'decrease_fast'\n      }\n    });\n  }\n\n  /**\n   * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n   * @function\n   * @private\n   */\n  _init() {\n    this.inputs = this.$element.find('input');\n    this.handles = this.$element.find('[data-slider-handle]');\n\n    this.$handle = this.handles.eq(0);\n    this.$input = this.inputs.length ? this.inputs.eq(0) : $(`#${this.$handle.attr('aria-controls')}`);\n    this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n    var isDbl = false,\n        _this = this;\n    if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n      this.options.disabled = true;\n      this.$element.addClass(this.options.disabledClass);\n    }\n    if (!this.inputs.length) {\n      this.inputs = $().add(this.$input);\n      this.options.binding = true;\n    }\n\n    this._setInitAttr(0);\n\n    if (this.handles[1]) {\n      this.options.doubleSided = true;\n      this.$handle2 = this.handles.eq(1);\n      this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(`#${this.$handle2.attr('aria-controls')}`);\n\n      if (!this.inputs[1]) {\n        this.inputs = this.inputs.add(this.$input2);\n      }\n      isDbl = true;\n\n      // this.$handle.triggerHandler('click.zf.slider');\n      this._setInitAttr(1);\n    }\n\n    // Set handle positions\n    this.setHandles();\n\n    this._events();\n  }\n\n  setHandles() {\n    if(this.handles[1]) {\n      this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, () => {\n        this._setHandlePos(this.$handle2, this.inputs.eq(1).val(), true);\n      });\n    } else {\n      this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\n    }\n  }\n\n  _reflow() {\n    this.setHandles();\n  }\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\n  */\n  _pctOfBar(value) {\n    var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start)\n\n    switch(this.options.positionValueFunction) {\n    case \"pow\":\n      pctOfBar = this._logTransform(pctOfBar);\n      break;\n    case \"log\":\n      pctOfBar = this._powTransform(pctOfBar);\n      break;\n    }\n\n    return pctOfBar.toFixed(2)\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\n  */\n  _value(pctOfBar) {\n    switch(this.options.positionValueFunction) {\n    case \"pow\":\n      pctOfBar = this._powTransform(pctOfBar);\n      break;\n    case \"log\":\n      pctOfBar = this._logTransform(pctOfBar);\n      break;\n    }\n    var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;\n\n    return value\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\n  */\n  _logTransform(value) {\n    return baseLog(this.options.nonLinearBase, ((value*(this.options.nonLinearBase-1))+1))\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\n  */\n  _powTransform(value) {\n    return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1)\n  }\n\n  /**\n   * Sets the position of the selected handle and fill bar.\n   * @function\n   * @private\n   * @param {jQuery} $hndl - the selected handle to move.\n   * @param {Number} location - floating point between the start and end values of the slider bar.\n   * @param {Function} cb - callback function to fire on completion.\n   * @fires Slider#moved\n   * @fires Slider#changed\n   */\n  _setHandlePos($hndl, location, noInvert, cb) {\n    // don't move if the slider has been disabled since its initialization\n    if (this.$element.hasClass(this.options.disabledClass)) {\n      return;\n    }\n    //might need to alter that slightly for bars that will have odd number selections.\n    location = parseFloat(location);//on input change events, convert string to number...grumble.\n\n    // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\n    if (location < this.options.start) { location = this.options.start; }\n    else if (location > this.options.end) { location = this.options.end; }\n\n    var isDbl = this.options.doubleSided;\n\n    if (isDbl) { //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\n      if (this.handles.index($hndl) === 0) {\n        var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n        location = location >= h2Val ? h2Val - this.options.step : location;\n      } else {\n        var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n        location = location <= h1Val ? h1Val + this.options.step : location;\n      }\n    }\n\n    //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n    //for click and drag events, it's weird due to the scale(-1, 1) css property\n    if (this.options.vertical && !noInvert) {\n      location = this.options.end - location;\n    }\n\n    var _this = this,\n        vert = this.options.vertical,\n        hOrW = vert ? 'height' : 'width',\n        lOrT = vert ? 'top' : 'left',\n        handleDim = $hndl[0].getBoundingClientRect()[hOrW],\n        elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n        //percentage of bar min/max value based on click or drag point\n        pctOfBar = this._pctOfBar(location),\n        //number of actual pixels to shift the handle, based on the percentage obtained above\n        pxToMove = (elemDim - handleDim) * pctOfBar,\n        //percentage of bar to shift the handle\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\n        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\n        location = parseFloat(location.toFixed(this.options.decimal));\n        // declare empty object for css adjustments, only used with 2 handled-sliders\n    var css = {};\n\n    this._setValues($hndl, location);\n\n    // TODO update to calculate based on values set to respective inputs??\n    if (isDbl) {\n      var isLeftHndl = this.handles.index($hndl) === 0,\n          //empty variable, will be used for min-height/width for fill bar\n          dim,\n          //percentage w/h of the handle compared to the slider bar\n          handlePct =  ~~(percent(handleDim, elemDim) * 100);\n      //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\n      if (isLeftHndl) {\n        //left or top percentage value to apply to the fill bar.\n        css[lOrT] = `${movement}%`;\n        //calculate the new min-height/width for the fill bar.\n        dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\n        //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n        //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\n        if (cb && typeof cb === 'function') { cb(); }//this is only needed for the initialization of 2 handled sliders\n      } else {\n        //just caching the value of the left/bottom handle's left/top property\n        var handlePos = parseFloat(this.$handle[0].style[lOrT]);\n        //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n        //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\n        dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start)/((this.options.end-this.options.start)/100) : handlePos) + handlePct;\n      }\n      // assign the min-height/width to our css object\n      css[`min-${hOrW}`] = `${dim}%`;\n    }\n\n    this.$element.one('finished.zf.animate', function() {\n                    /**\n                     * Fires when the handle is done moving.\n                     * @event Slider#moved\n                     */\n                    _this.$element.trigger('moved.zf.slider', [$hndl]);\n                });\n\n    //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\n    var moveTime = this.$element.data('dragging') ? 1000/60 : this.options.moveTime;\n\n    Move(moveTime, $hndl, function() {\n      // adjusting the left/top property of the handle, based on the percentage calculated above\n      // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\n      // fall back to next best guess.\n      if (isNaN(movement)) {\n        $hndl.css(lOrT, `${pctOfBar * 100}%`);\n      }\n      else {\n        $hndl.css(lOrT, `${movement}%`);\n      }\n\n      if (!_this.options.doubleSided) {\n        //if single-handled, a simple method to expand the fill bar\n        _this.$fill.css(hOrW, `${pctOfBar * 100}%`);\n      } else {\n        //otherwise, use the css object we created above\n        _this.$fill.css(css);\n      }\n    });\n\n\n    /**\n     * Fires when the value has not been change for a given time.\n     * @event Slider#changed\n     */\n    clearTimeout(_this.timeout);\n    _this.timeout = setTimeout(function(){\n      _this.$element.trigger('changed.zf.slider', [$hndl]);\n    }, _this.options.changedDelay);\n  }\n\n  /**\n   * Sets the initial attribute for the slider element.\n   * @function\n   * @private\n   * @param {Number} idx - index of the current handle/input to use.\n   */\n  _setInitAttr(idx) {\n    var initVal = (idx === 0 ? this.options.initialStart : this.options.initialEnd)\n    var id = this.inputs.eq(idx).attr('id') || GetYoDigits(6, 'slider');\n    this.inputs.eq(idx).attr({\n      'id': id,\n      'max': this.options.end,\n      'min': this.options.start,\n      'step': this.options.step\n    });\n    this.inputs.eq(idx).val(initVal);\n    this.handles.eq(idx).attr({\n      'role': 'slider',\n      'aria-controls': id,\n      'aria-valuemax': this.options.end,\n      'aria-valuemin': this.options.start,\n      'aria-valuenow': initVal,\n      'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n      'tabindex': 0\n    });\n  }\n\n  /**\n   * Sets the input and `aria-valuenow` values for the slider element.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the currently selected handle.\n   * @param {Number} val - floating point of the new value.\n   */\n  _setValues($handle, val) {\n    var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n    this.inputs.eq(idx).val(val);\n    $handle.attr('aria-valuenow', val);\n  }\n\n  /**\n   * Handles events on the slider element.\n   * Calculates the new location of the current handle.\n   * If there are two handles and the bar was clicked, it determines which handle to move.\n   * @function\n   * @private\n   * @param {Object} e - the `event` object passed from the listener.\n   * @param {jQuery} $handle - the current handle to calculate for, if selected.\n   * @param {Number} val - floating point number for the new value of the slider.\n   * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n   */\n  _handleEvent(e, $handle, val) {\n    var value, hasVal;\n    if (!val) {//click or drag events\n      e.preventDefault();\n      var _this = this,\n          vertical = this.options.vertical,\n          param = vertical ? 'height' : 'width',\n          direction = vertical ? 'top' : 'left',\n          eventOffset = vertical ? e.pageY : e.pageX,\n          halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n          barDim = this.$element[0].getBoundingClientRect()[param],\n          windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\n\n\n      var elemOffset = this.$element.offset()[direction];\n\n      // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n      // best way to guess this is simulated is if clientY == pageY\n      if (e.clientY === e.pageY) { eventOffset = eventOffset + windowScroll; }\n      var eventFromBar = eventOffset - elemOffset;\n      var barXY;\n      if (eventFromBar < 0) {\n        barXY = 0;\n      } else if (eventFromBar > barDim) {\n        barXY = barDim;\n      } else {\n        barXY = eventFromBar;\n      }\n      var offsetPct = percent(barXY, barDim);\n\n      value = this._value(offsetPct);\n\n      // turn everything around for RTL, yay math!\n      if (Rtl() && !this.options.vertical) {value = this.options.end - value;}\n\n      value = _this._adjustValue(null, value);\n      //boolean flag for the setHandlePos fn, specifically for vertical sliders\n      hasVal = false;\n\n      if (!$handle) {//figure out which handle it is, pass it to the next function.\n        var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n            secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n      }\n\n    } else {//change event on input\n      value = this._adjustValue(null, val);\n      hasVal = true;\n    }\n\n    this._setHandlePos($handle, value, hasVal);\n  }\n\n  /**\n   * Adjustes value for handle in regard to step value. returns adjusted value\n   * @function\n   * @private\n   * @param {jQuery} $handle - the selected handle.\n   * @param {Number} value - value to adjust. used if $handle is falsy\n   */\n  _adjustValue($handle, value) {\n    var val,\n      step = this.options.step,\n      div = parseFloat(step/2),\n      left, prev_val, next_val;\n    if (!!$handle) {\n      val = parseFloat($handle.attr('aria-valuenow'));\n    }\n    else {\n      val = value;\n    }\n    left = val % step;\n    prev_val = val - left;\n    next_val = prev_val + step;\n    if (left === 0) {\n      return val;\n    }\n    val = val >= prev_val + div ? next_val : prev_val;\n    return val;\n  }\n\n  /**\n   * Adds event listeners to the slider elements.\n   * @function\n   * @private\n   */\n  _events() {\n    this._eventsForHandle(this.$handle);\n    if(this.handles[1]) {\n      this._eventsForHandle(this.$handle2);\n    }\n  }\n\n\n  /**\n   * Adds event listeners a particular handle\n   * @function\n   * @private\n   * @param {jQuery} $handle - the current handle to apply listeners to.\n   */\n  _eventsForHandle($handle) {\n    var _this = this,\n        curHandle,\n        timer;\n\n      this.inputs.off('change.zf.slider').on('change.zf.slider', function(e) {\n        var idx = _this.inputs.index($(this));\n        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n      });\n\n      if (this.options.clickSelect) {\n        this.$element.off('click.zf.slider').on('click.zf.slider', function(e) {\n          if (_this.$element.data('dragging')) { return false; }\n\n          if (!$(e.target).is('[data-slider-handle]')) {\n            if (_this.options.doubleSided) {\n              _this._handleEvent(e);\n            } else {\n              _this._handleEvent(e, _this.$handle);\n            }\n          }\n        });\n      }\n\n    if (this.options.draggable) {\n      this.handles.addTouch();\n\n      var $body = $('body');\n      $handle\n        .off('mousedown.zf.slider')\n        .on('mousedown.zf.slider', function(e) {\n          $handle.addClass('is-dragging');\n          _this.$fill.addClass('is-dragging');//\n          _this.$element.data('dragging', true);\n\n          curHandle = $(e.currentTarget);\n\n          $body.on('mousemove.zf.slider', function(e) {\n            e.preventDefault();\n            _this._handleEvent(e, curHandle);\n\n          }).on('mouseup.zf.slider', function(e) {\n            _this._handleEvent(e, curHandle);\n\n            $handle.removeClass('is-dragging');\n            _this.$fill.removeClass('is-dragging');\n            _this.$element.data('dragging', false);\n\n            $body.off('mousemove.zf.slider mouseup.zf.slider');\n          });\n      })\n      // prevent events triggered by touch\n      .on('selectstart.zf.slider touchmove.zf.slider', function(e) {\n        e.preventDefault();\n      });\n    }\n\n    $handle.off('keydown.zf.slider').on('keydown.zf.slider', function(e) {\n      var _$handle = $(this),\n          idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\n          oldValue = parseFloat(_this.inputs.eq(idx).val()),\n          newValue;\n\n      // handle keyboard event with keyboard util\n      Keyboard.handleKey(e, 'Slider', {\n        decrease: function() {\n          newValue = oldValue - _this.options.step;\n        },\n        increase: function() {\n          newValue = oldValue + _this.options.step;\n        },\n        decrease_fast: function() {\n          newValue = oldValue - _this.options.step * 10;\n        },\n        increase_fast: function() {\n          newValue = oldValue + _this.options.step * 10;\n        },\n        min: function() {\n          newValue = _this.options.start;\n        },\n        max: function() {\n          newValue = _this.options.end;\n        },\n        handled: function() { // only set handle pos when event was handled specially\n          e.preventDefault();\n          _this._setHandlePos(_$handle, newValue, true);\n        }\n      });\n      /*if (newValue) { // if pressed key has special function, update value\n        e.preventDefault();\n        _this._setHandlePos(_$handle, newValue);\n      }*/\n    });\n  }\n\n  /**\n   * Destroys the slider plugin.\n   */\n  _destroy() {\n    this.handles.off('.zf.slider');\n    this.inputs.off('.zf.slider');\n    this.$element.off('.zf.slider');\n\n    clearTimeout(this.timeout);\n  }\n}\n\nSlider.defaults = {\n  /**\n   * Minimum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  start: 0,\n  /**\n   * Maximum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 100\n   */\n  end: 100,\n  /**\n   * Minimum value change per change event.\n   * @option\n   * @type {number}\n   * @default 1\n   */\n  step: 1,\n  /**\n   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  initialStart: 0,\n  /**\n   * Value at which the right handle/second input should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 100\n   */\n  initialEnd: 100,\n  /**\n   * Allows the input to be located outside the container and visible. Set to by the JS\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  binding: false,\n  /**\n   * Allows the user to click/tap on the slider bar to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  clickSelect: true,\n  /**\n   * Set to true and use the `vertical` class to change alignment to vertical.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  vertical: false,\n  /**\n   * Allows the user to drag the slider handle(s) to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  draggable: true,\n  /**\n   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  disabled: false,\n  /**\n   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  doubleSided: false,\n  /**\n   * Potential future feature.\n   */\n  // steps: 100,\n  /**\n   * Number of decimal places the plugin should go to for floating point precision.\n   * @option\n   * @type {number}\n   * @default 2\n   */\n  decimal: 2,\n  /**\n   * Time delay for dragged elements.\n   */\n  // dragDelay: 0,\n  /**\n   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n   * @option\n   * @type {number}\n   * @default 200\n   */\n  moveTime: 200,//update this if changing the transition time in the sass\n  /**\n   * Class applied to disabled sliders.\n   * @option\n   * @type {string}\n   * @default 'disabled'\n   */\n  disabledClass: 'disabled',\n  /**\n   * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  invertVertical: false,\n  /**\n   * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n   * @option\n   * @type {number}\n   * @default 500\n   */\n  changedDelay: 500,\n  /**\n  * Basevalue for non-linear sliders\n  * @option\n  * @type {number}\n  * @default 5\n  */\n  nonLinearBase: 5,\n  /**\n  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.\n  * @option\n  * @type {string}\n  * @default 'linear'\n  */\n  positionValueFunction: 'linear',\n};\n\nfunction percent(frac, num) {\n  return (frac / num);\n}\nfunction absPosition($handle, dir, clickPos, param) {\n  return Math.abs(($handle.position()[dir] + ($handle[param]() / 2)) - clickPos);\n}\nfunction baseLog(base, value) {\n  return Math.log(value)/Math.log(base)\n}\n\nexport {Slider};\n"]},"hash":"a2bfa4c5a180393e714083f8dba6cb25b7aad1d2"}
