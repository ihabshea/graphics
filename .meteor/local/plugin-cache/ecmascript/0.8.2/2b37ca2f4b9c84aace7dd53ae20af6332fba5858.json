{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"demo"},"ignored":false,"code":"/*jslint  browser: true, white: true, plusplus: true */ /*global $, countries */$(function () {\n    'use strict';\n\n    var countriesArray = $.map(countries, function (value, key) {\n        return {\n            value: value,\n            data: key\n        };\n    }); // Setup jQuery ajax mock:\n\n    $.mockjax({\n        url: '*',\n        responseTime: 2000,\n        response: function (settings) {\n            var query = settings.data.query,\n                queryLowerCase = query.toLowerCase(),\n                re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi'),\n                suggestions = $.grep(countriesArray, function (country) {\n                // return country.value.toLowerCase().indexOf(queryLowerCase) === 0;\n                return re.test(country.value);\n            }),\n                response = {\n                query: query,\n                suggestions: suggestions\n            };\n            this.responseText = JSON.stringify(response);\n        }\n    }); // Initialize ajax autocomplete:\n\n    $('#autocomplete-ajax').autocomplete({\n        // serviceUrl: '/autosuggest/service/url',\n        lookup: countriesArray,\n        lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\n            var re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');\n            return re.test(suggestion.value);\n        },\n        onSelect: function (suggestion) {\n            $('#selction-ajax').html('You selected: ' + suggestion.value + ', ' + suggestion.data);\n        },\n        onHint: function (hint) {\n            $('#autocomplete-ajax-x').val(hint);\n        },\n        onInvalidateSelection: function () {\n            $('#selction-ajax').html('You selected: none');\n        }\n    }); // Initialize autocomplete with local lookup:\n\n    $('#autocomplete').autocomplete({\n        lookup: countriesArray,\n        minChars: 0,\n        onSelect: function (suggestion) {\n            $('#selection').html('You selected: ' + suggestion.value + ', ' + suggestion.data);\n        }\n    }); // Initialize autocomplete with custom appendTo:\n\n    $('#autocomplete-custom-append').autocomplete({\n        lookup: countriesArray,\n        appendTo: '#suggestions-container'\n    }); // Initialize autocomplete with custom appendTo:\n\n    $('#autocomplete-dynamic').autocomplete({\n        lookup: countriesArray\n    });\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js"],"names":["$","countriesArray","map","countries","value","key","data","mockjax","url","responseTime","response","settings","query","queryLowerCase","toLowerCase","re","RegExp","Autocomplete","utils","escapeRegExChars","suggestions","grep","country","test","responseText","JSON","stringify","autocomplete","lookup","lookupFilter","suggestion","originalQuery","onSelect","html","onHint","hint","val","onInvalidateSelection","minChars","appendTo"],"mappings":"AAAC,uD,CACD,wBAEAA,EAAE,YAAY;AACV;;AAEA,QAAIC,iBAAiBD,EAAEE,GAAF,CAAMC,SAAN,EAAiB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAAE,eAAO;AAAED,mBAAOA,KAAT;AAAgBE,kBAAMD;AAAtB,SAAP;AAAqC,KAA9E,CAArB,CAHU,CAKV;;AACAL,MAAEO,OAAF,CAAU;AACNC,aAAK,GADC;AAENC,sBAAc,IAFR;AAGNC,kBAAU,UAAUC,QAAV,EAAoB;AAC1B,gBAAIC,QAAQD,SAASL,IAAT,CAAcM,KAA1B;AAAA,gBACIC,iBAAiBD,MAAME,WAAN,EADrB;AAAA,gBAEIC,KAAK,IAAIC,MAAJ,CAAW,QAAQhB,EAAEiB,YAAF,CAAeC,KAAf,CAAqBC,gBAArB,CAAsCN,cAAtC,CAAnB,EAA0E,IAA1E,CAFT;AAAA,gBAGIO,cAAcpB,EAAEqB,IAAF,CAAOpB,cAAP,EAAuB,UAAUqB,OAAV,EAAmB;AACnD;AACD,uBAAOP,GAAGQ,IAAH,CAAQD,QAAQlB,KAAhB,CAAP;AACH,aAHa,CAHlB;AAAA,gBAOIM,WAAW;AACPE,uBAAOA,KADA;AAEPQ,6BAAaA;AAFN,aAPf;AAYA,iBAAKI,YAAL,GAAoBC,KAAKC,SAAL,CAAehB,QAAf,CAApB;AACH;AAjBK,KAAV,EANU,CA0BV;;AACAV,MAAE,oBAAF,EAAwB2B,YAAxB,CAAqC;AACjC;AACAC,gBAAQ3B,cAFyB;AAGjC4B,sBAAc,UAASC,UAAT,EAAqBC,aAArB,EAAoClB,cAApC,EAAoD;AAC9D,gBAAIE,KAAK,IAAIC,MAAJ,CAAW,QAAQhB,EAAEiB,YAAF,CAAeC,KAAf,CAAqBC,gBAArB,CAAsCN,cAAtC,CAAnB,EAA0E,IAA1E,CAAT;AACA,mBAAOE,GAAGQ,IAAH,CAAQO,WAAW1B,KAAnB,CAAP;AACH,SANgC;AAOjC4B,kBAAU,UAASF,UAAT,EAAqB;AAC3B9B,cAAE,gBAAF,EAAoBiC,IAApB,CAAyB,mBAAmBH,WAAW1B,KAA9B,GAAsC,IAAtC,GAA6C0B,WAAWxB,IAAjF;AACH,SATgC;AAUjC4B,gBAAQ,UAAUC,IAAV,EAAgB;AACpBnC,cAAE,sBAAF,EAA0BoC,GAA1B,CAA8BD,IAA9B;AACH,SAZgC;AAajCE,+BAAuB,YAAW;AAC9BrC,cAAE,gBAAF,EAAoBiC,IAApB,CAAyB,oBAAzB;AACH;AAfgC,KAArC,EA3BU,CA6CV;;AACAjC,MAAE,eAAF,EAAmB2B,YAAnB,CAAgC;AAC5BC,gBAAQ3B,cADoB;AAE5BqC,kBAAU,CAFkB;AAG5BN,kBAAU,UAAUF,UAAV,EAAsB;AAC5B9B,cAAE,YAAF,EAAgBiC,IAAhB,CAAqB,mBAAmBH,WAAW1B,KAA9B,GAAsC,IAAtC,GAA6C0B,WAAWxB,IAA7E;AACH;AAL2B,KAAhC,EA9CU,CAsDV;;AACAN,MAAE,6BAAF,EAAiC2B,YAAjC,CAA8C;AAC1CC,gBAAQ3B,cADkC;AAE1CsC,kBAAU;AAFgC,KAA9C,EAvDU,CA4DV;;AACAvC,MAAE,uBAAF,EAA2B2B,YAA3B,CAAwC;AACpCC,gBAAQ3B;AAD4B,KAAxC;AAGH,CAhED","file":"packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/demo.js.map","sourcesContent":["ï»¿/*jslint  browser: true, white: true, plusplus: true */\n/*global $, countries */\n\n$(function () {\n    'use strict';\n\n    var countriesArray = $.map(countries, function (value, key) { return { value: value, data: key }; });\n\n    // Setup jQuery ajax mock:\n    $.mockjax({\n        url: '*',\n        responseTime: 2000,\n        response: function (settings) {\n            var query = settings.data.query,\n                queryLowerCase = query.toLowerCase(),\n                re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi'),\n                suggestions = $.grep(countriesArray, function (country) {\n                     // return country.value.toLowerCase().indexOf(queryLowerCase) === 0;\n                    return re.test(country.value);\n                }),\n                response = {\n                    query: query,\n                    suggestions: suggestions\n                };\n\n            this.responseText = JSON.stringify(response);\n        }\n    });\n\n    // Initialize ajax autocomplete:\n    $('#autocomplete-ajax').autocomplete({\n        // serviceUrl: '/autosuggest/service/url',\n        lookup: countriesArray,\n        lookupFilter: function(suggestion, originalQuery, queryLowerCase) {\n            var re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');\n            return re.test(suggestion.value);\n        },\n        onSelect: function(suggestion) {\n            $('#selction-ajax').html('You selected: ' + suggestion.value + ', ' + suggestion.data);\n        },\n        onHint: function (hint) {\n            $('#autocomplete-ajax-x').val(hint);\n        },\n        onInvalidateSelection: function() {\n            $('#selction-ajax').html('You selected: none');\n        }\n    });\n\n    // Initialize autocomplete with local lookup:\n    $('#autocomplete').autocomplete({\n        lookup: countriesArray,\n        minChars: 0,\n        onSelect: function (suggestion) {\n            $('#selection').html('You selected: ' + suggestion.value + ', ' + suggestion.data);\n        }\n    });\n    \n    // Initialize autocomplete with custom appendTo:\n    $('#autocomplete-custom-append').autocomplete({\n        lookup: countriesArray,\n        appendTo: '#suggestions-container'\n    });\n\n    // Initialize autocomplete with custom appendTo:\n    $('#autocomplete-dynamic').autocomplete({\n        lookup: countriesArray\n    });\n});"]},"hash":"2b37ca2f4b9c84aace7dd53ae20af6332fba5858"}
