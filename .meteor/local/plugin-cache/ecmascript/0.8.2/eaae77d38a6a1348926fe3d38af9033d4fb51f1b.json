{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js","filenameRelative":"packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"jsonp"},"ignored":false,"code":"define([\"../core\", \"./var/nonce\", \"./var/rquery\", \"../ajax\"], function (jQuery, nonce, rquery) {\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function () {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t}); // Detect, normalize options and install callbacks for jsonp requests\n\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t} // Use data converter to retrieve json after script execution\n\n\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\n\t\t\t\treturn responseContainer[0];\n\t\t\t}; // force json dataType\n\n\n\t\t\ts.dataTypes[0] = \"json\"; // Install callback\n\n\t\t\toverwritten = window[callbackName];\n\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t}; // Clean-up function (fires after converters)\n\n\n\t\t\tjqXHR.always(function () {\n\t\t\t\t// Restore preexisting value\n\t\t\t\twindow[callbackName] = overwritten; // Save back as free\n\n\t\t\t\tif (s[callbackName]) {\n\t\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use\n\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t} // Call if it was a function and we have a response\n\n\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t}); // Delegate to script\n\n\t\t\treturn \"script\";\n\t\t}\n\t});\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js"],"names":["define","jQuery","nonce","rquery","oldCallbacks","rjsonp","ajaxSetup","jsonp","jsonpCallback","callback","pop","expando","ajaxPrefilter","s","originalSettings","jqXHR","callbackName","overwritten","responseContainer","jsonProp","test","url","data","contentType","indexOf","dataTypes","isFunction","replace","converters","error","window","arguments","always","push","undefined"],"mappings":"AAAAA,OAAO,CACN,SADM,EAEN,aAFM,EAGN,cAHM,EAIN,SAJM,CAAP,EAKG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAkC;AAErC,KAAIC,eAAe,EAAnB;AAAA,KACCC,SAAS,mBADV,CAFqC,CAKrC;;AACAJ,QAAOK,SAAP,CAAiB;AAChBC,SAAO,UADS;AAEhBC,iBAAe,YAAW;AACzB,OAAIC,WAAWL,aAAaM,GAAb,MAAwBT,OAAOU,OAAP,GAAiB,GAAjB,GAAyBT,OAAhE;AACA,QAAMO,QAAN,IAAmB,IAAnB;AACA,UAAOA,QAAP;AACA;AANe,EAAjB,EANqC,CAerC;;AACAR,QAAOW,aAAP,CAAsB,YAAtB,EAAoC,UAAUC,CAAV,EAAaC,gBAAb,EAA+BC,KAA/B,EAAuC;AAE1E,MAAIC,YAAJ;AAAA,MAAkBC,WAAlB;AAAA,MAA+BC,iBAA/B;AAAA,MACCC,WAAWN,EAAEN,KAAF,KAAY,KAAZ,KAAuBF,OAAOe,IAAP,CAAaP,EAAEQ,GAAf,IACjC,KADiC,GAEjC,OAAOR,EAAES,IAAT,KAAkB,QAAlB,IAA8B,CAAC,CAAET,EAAEU,WAAF,IAAiB,EAAnB,EAAwBC,OAAxB,CAAgC,mCAAhC,CAA/B,IAAuGnB,OAAOe,IAAP,CAAaP,EAAES,IAAf,CAAvG,IAAgI,MAFtH,CADZ,CAF0E,CAQ1E;;AACA,MAAKH,YAAYN,EAAEY,SAAF,CAAa,CAAb,MAAqB,OAAtC,EAAgD;AAE/C;AACAT,kBAAeH,EAAEL,aAAF,GAAkBP,OAAOyB,UAAP,CAAmBb,EAAEL,aAArB,IAChCK,EAAEL,aAAF,EADgC,GAEhCK,EAAEL,aAFH,CAH+C,CAO/C;;AACA,OAAKW,QAAL,EAAgB;AACfN,MAAGM,QAAH,IAAgBN,EAAGM,QAAH,EAAcQ,OAAd,CAAuBtB,MAAvB,EAA+B,OAAOW,YAAtC,CAAhB;AACA,IAFD,MAEO,IAAKH,EAAEN,KAAF,KAAY,KAAjB,EAAyB;AAC/BM,MAAEQ,GAAF,IAAS,CAAElB,OAAOiB,IAAP,CAAaP,EAAEQ,GAAf,IAAuB,GAAvB,GAA6B,GAA/B,IAAuCR,EAAEN,KAAzC,GAAiD,GAAjD,GAAuDS,YAAhE;AACA,IAZ8C,CAc/C;;;AACAH,KAAEe,UAAF,CAAa,aAAb,IAA8B,YAAW;AACxC,QAAK,CAACV,iBAAN,EAA0B;AACzBjB,YAAO4B,KAAP,CAAcb,eAAe,iBAA7B;AACA;;AACD,WAAOE,kBAAmB,CAAnB,CAAP;AACA,IALD,CAf+C,CAsB/C;;;AACAL,KAAEY,SAAF,CAAa,CAAb,IAAmB,MAAnB,CAvB+C,CAyB/C;;AACAR,iBAAca,OAAQd,YAAR,CAAd;;AACAc,UAAQd,YAAR,IAAyB,YAAW;AACnCE,wBAAoBa,SAApB;AACA,IAFD,CA3B+C,CA+B/C;;;AACAhB,SAAMiB,MAAN,CAAa,YAAW;AACvB;AACAF,WAAQd,YAAR,IAAyBC,WAAzB,CAFuB,CAIvB;;AACA,QAAKJ,EAAGG,YAAH,CAAL,EAAyB;AACxB;AACAH,OAAEL,aAAF,GAAkBM,iBAAiBN,aAAnC,CAFwB,CAIxB;;AACAJ,kBAAa6B,IAAb,CAAmBjB,YAAnB;AACA,KAXsB,CAavB;;;AACA,QAAKE,qBAAqBjB,OAAOyB,UAAP,CAAmBT,WAAnB,CAA1B,EAA6D;AAC5DA,iBAAaC,kBAAmB,CAAnB,CAAb;AACA;;AAEDA,wBAAoBD,cAAciB,SAAlC;AACA,IAnBD,EAhC+C,CAqD/C;;AACA,UAAO,QAAP;AACA;AACD,EAjED;AAmEC,CAxFD","file":"packages/zurb:foundation-sites/vendor/jquery/src/ajax/jsonp.js.map","sourcesContent":["define([\n\t\"../core\",\n\t\"./var/nonce\",\n\t\"./var/rquery\",\n\t\"../ajax\"\n], function( jQuery, nonce, rquery ) {\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup({\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n});\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[\"script json\"] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always(function() {\n\t\t\t// Restore preexisting value\n\t\t\twindow[ callbackName ] = overwritten;\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t});\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n});\n\n});\n"]},"hash":"eaae77d38a6a1348926fe3d38af9033d4fb51f1b"}
