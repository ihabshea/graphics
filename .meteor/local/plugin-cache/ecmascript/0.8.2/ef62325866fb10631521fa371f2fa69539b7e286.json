{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/gulp/tasks/sass.js","filenameRelative":"packages/zurb:foundation-sites/gulp/tasks/sass.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/gulp/tasks/sass.js.map","sourceFileName":"packages/zurb:foundation-sites/gulp/tasks/sass.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"sass"},"ignored":false,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar gulp = require('gulp');\n\nvar Parker = require('parker/lib/Parker');\n\nvar prettyJSON = require('prettyjson');\n\nvar sass = require('gulp-sass');\n\nvar plumber = require('gulp-plumber');\n\nvar sourcemaps = require('gulp-sourcemaps');\n\nvar sassLint = require('gulp-sass-lint');\n\nvar postcss = require('gulp-postcss');\n\nvar autoprefixer = require('autoprefixer');\n\nvar CONFIG = require('../config.js'); // Compiles Sass files into CSS\n\n\ngulp.task('sass', ['sass:foundation', 'sass:docs']); // Prepare dependencies\n\ngulp.task('sass:deps', function () {\n  return gulp.src(CONFIG.SASS_DEPS_FILES).pipe(gulp.dest('_vendor'));\n}); // Compiles Foundation Sass\n\ngulp.task('sass:foundation', ['sass:deps'], function () {\n  return gulp.src(['assets/*']).pipe(sourcemaps.init()).pipe(plumber()).pipe(sass().on('error', sass.logError)).pipe(postcss([autoprefixer({\n    browsers: CONFIG.CSS_COMPATIBILITY\n  })])).pipe(sourcemaps.write('.')).pipe(gulp.dest('_build/assets/css')).on('finish', function () {\n    gulp.src(CONFIG.SASS_LINT_FILES).pipe(sassLint({\n      config: './.sass-lint.yml'\n    })).pipe(sassLint.format());\n  });\n}); // Compiles docs Sass (includes Foundation code also)\n\ngulp.task('sass:docs', ['sass:deps'], function () {\n  return gulp.src('docs/assets/scss/docs.scss').pipe(sourcemaps.init()).pipe(sass({\n    includePaths: CONFIG.SASS_DOC_PATHS\n  }).on('error', sass.logError)).pipe(postcss([autoprefixer({\n    browsers: CONFIG.CSS_COMPATIBILITY\n  })])).pipe(sourcemaps.write('.')).pipe(gulp.dest('_build/assets/css'));\n}); // Audits CSS filesize, selector count, specificity, etc.\n\ngulp.task('sass:audit', ['sass:foundation'], function (cb) {\n  fs.readFile('./_build/assets/css/foundation.css', function (err, data) {\n    var parker = new Parker(require('parker/metrics/All'));\n    var results = parker.run(data.toString());\n    console.log(prettyJSON.render(results));\n    cb();\n  });\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/gulp/tasks/sass.js"],"names":["fs","require","gulp","Parker","prettyJSON","sass","plumber","sourcemaps","sassLint","postcss","autoprefixer","CONFIG","task","src","SASS_DEPS_FILES","pipe","dest","init","on","logError","browsers","CSS_COMPATIBILITY","write","SASS_LINT_FILES","config","format","includePaths","SASS_DOC_PATHS","cb","readFile","err","data","parker","results","run","toString","console","log","render"],"mappings":"AAAA;;AAEA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AACA,IAAIE,SAASF,QAAQ,mBAAR,CAAb;;AACA,IAAIG,aAAaH,QAAQ,YAAR,CAAjB;;AACA,IAAII,OAAOJ,QAAQ,WAAR,CAAX;;AACA,IAAIK,UAAUL,QAAQ,cAAR,CAAd;;AACA,IAAIM,aAAaN,QAAQ,iBAAR,CAAjB;;AACA,IAAIO,WAAWP,QAAQ,gBAAR,CAAf;;AACA,IAAIQ,UAAUR,QAAQ,cAAR,CAAd;;AACA,IAAIS,eAAeT,QAAQ,cAAR,CAAnB;;AAEA,IAAIU,SAASV,QAAQ,cAAR,CAAb,C,CAEA;;;AACAC,KAAKU,IAAL,CAAU,MAAV,EAAkB,CAAC,iBAAD,EAAoB,WAApB,CAAlB,E,CAEA;;AACAV,KAAKU,IAAL,CAAU,WAAV,EAAuB,YAAW;AAChC,SAAOV,KAAKW,GAAL,CAASF,OAAOG,eAAhB,EACJC,IADI,CACCb,KAAKc,IAAL,CAAU,SAAV,CADD,CAAP;AAED,CAHD,E,CAKA;;AACAd,KAAKU,IAAL,CAAU,iBAAV,EAA6B,CAAC,WAAD,CAA7B,EAA4C,YAAW;AACrD,SAAOV,KAAKW,GAAL,CAAS,CAAC,UAAD,CAAT,EACJE,IADI,CACCR,WAAWU,IAAX,EADD,EAEJF,IAFI,CAECT,SAFD,EAGJS,IAHI,CAGCV,OAAOa,EAAP,CAAU,OAAV,EAAmBb,KAAKc,QAAxB,CAHD,EAIJJ,IAJI,CAICN,QAAQ,CAACC,aAAa;AAC1BU,cAAUT,OAAOU;AADS,GAAb,CAAD,CAAR,CAJD,EAOJN,IAPI,CAOCR,WAAWe,KAAX,CAAiB,GAAjB,CAPD,EAQJP,IARI,CAQCb,KAAKc,IAAL,CAAU,mBAAV,CARD,EASJE,EATI,CASD,QATC,EASS,YAAW;AACvBhB,SAAKW,GAAL,CAASF,OAAOY,eAAhB,EACGR,IADH,CACQP,SAAS;AACXgB,cAAQ;AADG,KAAT,CADR,EAIGT,IAJH,CAIQP,SAASiB,MAAT,EAJR;AAKD,GAfI,CAAP;AAgBD,CAjBD,E,CAmBA;;AACAvB,KAAKU,IAAL,CAAU,WAAV,EAAuB,CAAC,WAAD,CAAvB,EAAsC,YAAW;AAC/C,SAAOV,KAAKW,GAAL,CAAS,4BAAT,EACJE,IADI,CACCR,WAAWU,IAAX,EADD,EAEJF,IAFI,CAECV,KAAK;AACTqB,kBAAcf,OAAOgB;AADZ,GAAL,EAEHT,EAFG,CAEA,OAFA,EAESb,KAAKc,QAFd,CAFD,EAKJJ,IALI,CAKCN,QAAQ,CAACC,aAAa;AAC1BU,cAAUT,OAAOU;AADS,GAAb,CAAD,CAAR,CALD,EAQJN,IARI,CAQCR,WAAWe,KAAX,CAAiB,GAAjB,CARD,EASJP,IATI,CASCb,KAAKc,IAAL,CAAU,mBAAV,CATD,CAAP;AAUD,CAXD,E,CAaA;;AACAd,KAAKU,IAAL,CAAU,YAAV,EAAwB,CAAC,iBAAD,CAAxB,EAA6C,UAASgB,EAAT,EAAa;AACxD5B,KAAG6B,QAAH,CAAY,oCAAZ,EAAkD,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACpE,QAAIC,SAAS,IAAI7B,MAAJ,CAAWF,QAAQ,oBAAR,CAAX,CAAb;AACA,QAAIgC,UAAUD,OAAOE,GAAP,CAAWH,KAAKI,QAAL,EAAX,CAAd;AACAC,YAAQC,GAAR,CAAYjC,WAAWkC,MAAX,CAAkBL,OAAlB,CAAZ;AACAL;AACD,GALD;AAMD,CAPD","file":"packages/zurb:foundation-sites/gulp/tasks/sass.js.map","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar gulp = require('gulp');\nvar Parker = require('parker/lib/Parker');\nvar prettyJSON = require('prettyjson');\nvar sass = require('gulp-sass');\nvar plumber = require('gulp-plumber');\nvar sourcemaps = require('gulp-sourcemaps');\nvar sassLint = require('gulp-sass-lint');\nvar postcss = require('gulp-postcss');\nvar autoprefixer = require('autoprefixer');\n\nvar CONFIG = require('../config.js');\n\n// Compiles Sass files into CSS\ngulp.task('sass', ['sass:foundation', 'sass:docs']);\n\n// Prepare dependencies\ngulp.task('sass:deps', function() {\n  return gulp.src(CONFIG.SASS_DEPS_FILES)\n    .pipe(gulp.dest('_vendor'));\n});\n\n// Compiles Foundation Sass\ngulp.task('sass:foundation', ['sass:deps'], function() {\n  return gulp.src(['assets/*'])\n    .pipe(sourcemaps.init())\n    .pipe(plumber())\n    .pipe(sass().on('error', sass.logError))\n    .pipe(postcss([autoprefixer({\n      browsers: CONFIG.CSS_COMPATIBILITY\n    })]))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('_build/assets/css'))\n    .on('finish', function() {\n      gulp.src(CONFIG.SASS_LINT_FILES)\n        .pipe(sassLint({\n            config: './.sass-lint.yml'\n          }))\n        .pipe(sassLint.format());\n    });\n});\n\n// Compiles docs Sass (includes Foundation code also)\ngulp.task('sass:docs', ['sass:deps'], function() {\n  return gulp.src('docs/assets/scss/docs.scss')\n    .pipe(sourcemaps.init())\n    .pipe(sass({\n      includePaths: CONFIG.SASS_DOC_PATHS\n    }).on('error', sass.logError))\n    .pipe(postcss([autoprefixer({\n      browsers: CONFIG.CSS_COMPATIBILITY\n    })]))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('_build/assets/css'));\n});\n\n// Audits CSS filesize, selector count, specificity, etc.\ngulp.task('sass:audit', ['sass:foundation'], function(cb) {\n  fs.readFile('./_build/assets/css/foundation.css', function(err, data) {\n    var parker = new Parker(require('parker/metrics/All'));\n    var results = parker.run(data.toString());\n    console.log(prettyJSON.render(results));\n    cb();\n  });\n});\n"]},"hash":"ef62325866fb10631521fa371f2fa69539b7e286"}
