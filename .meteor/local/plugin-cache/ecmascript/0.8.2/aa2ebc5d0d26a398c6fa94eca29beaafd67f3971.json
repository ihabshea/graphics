{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.plugin","imported":["Plugin"],"specifiers":[{"kind":"named","imported":"Plugin","local":"Plugin"}]}],"exports":{"exported":["Abide"],"specifiers":[{"kind":"local","local":"Abide","exported":"Abide"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.abide.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.abide.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.abide.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.abide.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.abide"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nmodule1.export({\n  Abide: function () {\n    return Abide;\n  }\n});\nvar $ = void 0;\nmodule1.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar Plugin = void 0;\nmodule1.watch(require(\"./foundation.plugin\"), {\n  Plugin: function (v) {\n    Plugin = v;\n  }\n}, 1);\n\n/**\n * Abide module.\n * @module foundation.abide\n */var Abide = function (_Plugin) {\n  (0, _inherits3.default)(Abide, _Plugin);\n\n  function Abide() {\n    (0, _classCallCheck3.default)(this, Abide);\n    return (0, _possibleConstructorReturn3.default)(this, _Plugin.apply(this, arguments));\n  }\n\n  /**\n   * Creates a new instance of Abide.\n   * @class\n   * @name Abide\n   * @fires Abide#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */Abide.prototype._setup = function () {\n    function _setup(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.$element = element;\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n      this.className = 'Abide'; // ie9 back compat\n\n      this._init();\n    }\n\n    return _setup;\n  }(); /**\n        * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n        * @private\n        */\n\n  Abide.prototype._init = function () {\n    function _init() {\n      this.$inputs = this.$element.find('input, textarea, select');\n\n      this._events();\n    }\n\n    return _init;\n  }(); /**\n        * Initializes events for Abide.\n        * @private\n        */\n\n  Abide.prototype._events = function () {\n    function _events() {\n      var _this3 = this;\n\n      this.$element.off('.abide').on('reset.zf.abide', function () {\n        _this3.resetForm();\n      }).on('submit.zf.abide', function () {\n        return _this3.validateForm();\n      });\n\n      if (this.options.validateOn === 'fieldChange') {\n        this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n          _this3.validateInput($(e.target));\n        });\n      }\n\n      if (this.options.liveValidate) {\n        this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n          _this3.validateInput($(e.target));\n        });\n      }\n\n      if (this.options.validateOnBlur) {\n        this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {\n          _this3.validateInput($(e.target));\n        });\n      }\n    }\n\n    return _events;\n  }(); /**\n        * Calls necessary functions to update Abide upon DOM change\n        * @private\n        */\n\n  Abide.prototype._reflow = function () {\n    function _reflow() {\n      this._init();\n    }\n\n    return _reflow;\n  }(); /**\n        * Checks whether or not a form element has the required attribute and if it's checked or not\n        * @param {Object} element - jQuery object to check for required attribute\n        * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n        */\n\n  Abide.prototype.requiredCheck = function () {\n    function requiredCheck($el) {\n      if (!$el.attr('required')) return true;\n      var isGood = true;\n\n      switch ($el[0].type) {\n        case 'checkbox':\n          isGood = $el[0].checked;\n          break;\n\n        case 'select':\n        case 'select-one':\n        case 'select-multiple':\n          var opt = $el.find('option:selected');\n          if (!opt.length || !opt.val()) isGood = false;\n          break;\n\n        default:\n          if (!$el.val() || !$el.val().length) isGood = false;\n      }\n\n      return isGood;\n    }\n\n    return requiredCheck;\n  }(); /**\n        * Get:\n        * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:\n        *   1. The element's direct sibling('s).\n        *   2. The element's parent's children.\n        * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.\n        *\n        * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n        *\n        * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n        * @returns {Object} jQuery object with the selector.\n        */\n\n  Abide.prototype.findFormError = function () {\n    function findFormError($el) {\n      var id = $el[0].id;\n      var $error = $el.siblings(this.options.formErrorSelector);\n\n      if (!$error.length) {\n        $error = $el.parent().find(this.options.formErrorSelector);\n      }\n\n      $error = $error.add(this.$element.find(\"[data-form-error-for=\\\"\" + id + \"\\\"]\"));\n      return $error;\n    }\n\n    return findFormError;\n  }(); /**\n        * Get the first element in this order:\n        * 2. The <label> with the attribute `[for=\"someInputId\"]`\n        * 3. The `.closest()` <label>\n        *\n        * @param {Object} $el - jQuery object to check for required attribute\n        * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n        */\n\n  Abide.prototype.findLabel = function () {\n    function findLabel($el) {\n      var id = $el[0].id;\n      var $label = this.$element.find(\"label[for=\\\"\" + id + \"\\\"]\");\n\n      if (!$label.length) {\n        return $el.closest('label');\n      }\n\n      return $label;\n    }\n\n    return findLabel;\n  }(); /**\n        * Get the set of labels associated with a set of radio els in this order\n        * 2. The <label> with the attribute `[for=\"someInputId\"]`\n        * 3. The `.closest()` <label>\n        *\n        * @param {Object} $el - jQuery object to check for required attribute\n        * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n        */\n\n  Abide.prototype.findRadioLabels = function () {\n    function findRadioLabels($els) {\n      var _this4 = this;\n\n      var labels = $els.map(function (i, el) {\n        var id = el.id;\n\n        var $label = _this4.$element.find(\"label[for=\\\"\" + id + \"\\\"]\");\n\n        if (!$label.length) {\n          $label = $(el).closest('label');\n        }\n\n        return $label[0];\n      });\n      return $(labels);\n    }\n\n    return findRadioLabels;\n  }(); /**\n        * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n        * @param {Object} $el - jQuery object to add the class to\n        */\n\n  Abide.prototype.addErrorClasses = function () {\n    function addErrorClasses($el) {\n      var $label = this.findLabel($el);\n      var $formError = this.findFormError($el);\n\n      if ($label.length) {\n        $label.addClass(this.options.labelErrorClass);\n      }\n\n      if ($formError.length) {\n        $formError.addClass(this.options.formErrorClass);\n      }\n\n      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n    }\n\n    return addErrorClasses;\n  }(); /**\n        * Remove CSS error classes etc from an entire radio button group\n        * @param {String} groupName - A string that specifies the name of a radio button group\n        *\n        */\n\n  Abide.prototype.removeRadioErrorClasses = function () {\n    function removeRadioErrorClasses(groupName) {\n      var $els = this.$element.find(\":radio[name=\\\"\" + groupName + \"\\\"]\");\n      var $labels = this.findRadioLabels($els);\n      var $formErrors = this.findFormError($els);\n\n      if ($labels.length) {\n        $labels.removeClass(this.options.labelErrorClass);\n      }\n\n      if ($formErrors.length) {\n        $formErrors.removeClass(this.options.formErrorClass);\n      }\n\n      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n    }\n\n    return removeRadioErrorClasses;\n  }(); /**\n        * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n        * @param {Object} $el - jQuery object to remove the class from\n        */\n\n  Abide.prototype.removeErrorClasses = function () {\n    function removeErrorClasses($el) {\n      // radios need to clear all of the els\n      if ($el[0].type == 'radio') {\n        return this.removeRadioErrorClasses($el.attr('name'));\n      }\n\n      var $label = this.findLabel($el);\n      var $formError = this.findFormError($el);\n\n      if ($label.length) {\n        $label.removeClass(this.options.labelErrorClass);\n      }\n\n      if ($formError.length) {\n        $formError.removeClass(this.options.formErrorClass);\n      }\n\n      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n    }\n\n    return removeErrorClasses;\n  }(); /**\n        * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.\n        * Ignores inputs with data-abide-ignore, type=\"hidden\" or disabled attributes set\n        * @fires Abide#invalid\n        * @fires Abide#valid\n        * @param {Object} element - jQuery object to validate, should be an HTML input\n        * @returns {Boolean} goodToGo - If the input is valid or not.\n        */\n\n  Abide.prototype.validateInput = function () {\n    function validateInput($el) {\n      var clearRequire = this.requiredCheck($el),\n          validated = false,\n          customValidator = true,\n          validator = $el.attr('data-validator'),\n          equalTo = true; // don't validate ignored inputs or hidden inputs or disabled inputs\n\n      if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]') || $el.is('[disabled]')) {\n        return true;\n      }\n\n      switch ($el[0].type) {\n        case 'radio':\n          validated = this.validateRadio($el.attr('name'));\n          break;\n\n        case 'checkbox':\n          validated = clearRequire;\n          break;\n\n        case 'select':\n        case 'select-one':\n        case 'select-multiple':\n          validated = clearRequire;\n          break;\n\n        default:\n          validated = this.validateText($el);\n      }\n\n      if (validator) {\n        customValidator = this.matchValidation($el, validator, $el.attr('required'));\n      }\n\n      if ($el.attr('data-equalto')) {\n        equalTo = this.options.validators.equalTo($el);\n      }\n\n      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n      if (goodToGo) {\n        // Re-validate inputs that depend on this one with equalto\n        var dependentElements = this.$element.find(\"[data-equalto=\\\"\" + $el.attr('id') + \"\\\"]\");\n\n        if (dependentElements.length) {\n          var _this = this;\n\n          dependentElements.each(function () {\n            if ($(this).val()) {\n              _this.validateInput($(this));\n            }\n          });\n        }\n      }\n\n      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el); /**\n                                                                       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n                                                                       * Trigger includes the DOM element of the input.\n                                                                       * @event Abide#valid\n                                                                       * @event Abide#invalid\n                                                                       */\n      $el.trigger(message, [$el]);\n      return goodToGo;\n    }\n\n    return validateInput;\n  }(); /**\n        * Goes through a form and if there are any invalid inputs, it will display the form error element\n        * @returns {Boolean} noError - true if no errors were detected...\n        * @fires Abide#formvalid\n        * @fires Abide#forminvalid\n        */\n\n  Abide.prototype.validateForm = function () {\n    function validateForm() {\n      var acc = [];\n\n      var _this = this;\n\n      this.$inputs.each(function () {\n        acc.push(_this.validateInput($(this)));\n      });\n      var noError = acc.indexOf(false) === -1;\n      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block'); /**\n                                                                                            * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n                                                                                            * Trigger includes the element of the form.\n                                                                                            * @event Abide#formvalid\n                                                                                            * @event Abide#forminvalid\n                                                                                            */\n      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n      return noError;\n    }\n\n    return validateForm;\n  }(); /**\n        * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n        * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n        * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n        * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n        */\n\n  Abide.prototype.validateText = function () {\n    function validateText($el, pattern) {\n      // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n      pattern = pattern || $el.attr('pattern') || $el.attr('type');\n      var inputText = $el.val();\n      var valid = false;\n\n      if (inputText.length) {\n        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n        if (this.options.patterns.hasOwnProperty(pattern)) {\n          valid = this.options.patterns[pattern].test(inputText);\n        } // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n        else if (pattern !== $el.attr('type')) {\n            valid = new RegExp(pattern).test(inputText);\n          } else {\n            valid = true;\n          }\n      } // An empty field is valid if it's not required\n      else if (!$el.prop('required')) {\n          valid = true;\n        }\n\n      return valid;\n    }\n\n    return validateText;\n  }(); /**\n        * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n        * @param {String} groupName - A string that specifies the name of a radio button group\n        * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n        */\n\n  Abide.prototype.validateRadio = function () {\n    function validateRadio(groupName) {\n      // If at least one radio in the group has the `required` attribute, the group is considered required\n      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n      var $group = this.$element.find(\":radio[name=\\\"\" + groupName + \"\\\"]\");\n      var valid = false,\n          required = false; // For the group to be required, at least one radio needs to be required\n\n      $group.each(function (i, e) {\n        if ($(e).attr('required')) {\n          required = true;\n        }\n      });\n      if (!required) valid = true;\n\n      if (!valid) {\n        // For the group to be valid, at least one radio needs to be checked\n        $group.each(function (i, e) {\n          if ($(e).prop('checked')) {\n            valid = true;\n          }\n        });\n      }\n\n      ;\n      return valid;\n    }\n\n    return validateRadio;\n  }(); /**\n        * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n        * @param {Object} $el - jQuery input element.\n        * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n        * @param {Boolean} required - self explanatory?\n        * @returns {Boolean} - true if validations passed.\n        */\n\n  Abide.prototype.matchValidation = function () {\n    function matchValidation($el, validators, required) {\n      var _this5 = this;\n\n      required = required ? true : false;\n      var clear = validators.split(' ').map(function (v) {\n        return _this5.options.validators[v]($el, required, $el.parent());\n      });\n      return clear.indexOf(false) === -1;\n    }\n\n    return matchValidation;\n  }(); /**\n        * Resets form inputs and styles\n        * @fires Abide#formreset\n        */\n\n  Abide.prototype.resetForm = function () {\n    function resetForm() {\n      var $form = this.$element,\n          opts = this.options;\n      $(\".\" + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n      $(\".\" + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n      $(opts.formErrorSelector + \".\" + opts.formErrorClass).removeClass(opts.formErrorClass);\n      $form.find('[data-abide-error]').css('display', 'none');\n      $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n      $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n      $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid'); /**\n                                                                                                                 * Fires when the form has been reset.\n                                                                                                                 * @event Abide#formreset\n                                                                                                                 */\n      $form.trigger('formreset.zf.abide', [$form]);\n    }\n\n    return resetForm;\n  }(); /**\n        * Destroys an instance of Abide.\n        * Removes error styles and classes from elements, without resetting their values.\n        */\n\n  Abide.prototype._destroy = function () {\n    function _destroy() {\n      var _this = this;\n\n      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n      this.$inputs.off('.abide').each(function () {\n        _this.removeErrorClasses($(this));\n      });\n    }\n\n    return _destroy;\n  }();\n\n  return Abide;\n}(Plugin); /**\n            * Default settings for plugin\n            */\n\nAbide.defaults = {\n  /**\n   * The default event to validate inputs. Checkboxes and radios validate immediately.\n   * Remove or change this value for manual validation.\n   * @option\n   * @type {?string}\n   * @default 'fieldChange'\n   */validateOn: 'fieldChange',\n  /**\n   * Class to be applied to input labels on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-label'\n   */labelErrorClass: 'is-invalid-label',\n  /**\n   * Class to be applied to inputs on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-input'\n   */inputErrorClass: 'is-invalid-input',\n  /**\n   * Class selector to use to target Form Errors for show/hide.\n   * @option\n   * @type {string}\n   * @default '.form-error'\n   */formErrorSelector: '.form-error',\n  /**\n   * Class added to Form Errors on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-visible'\n   */formErrorClass: 'is-visible',\n  /**\n   * Set to true to validate text inputs on any value change.\n   * @option\n   * @type {boolean}\n   * @default false\n   */liveValidate: false,\n  /**\n   * Set to true to validate inputs on blur.\n   * @option\n   * @type {boolean}\n   * @default false\n   */validateOnBlur: false,\n  patterns: {\n    alpha: /^[a-zA-Z]+$/,\n    alpha_numeric: /^[a-zA-Z0-9]+$/,\n    integer: /^[-+]?\\d+$/,\n    number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n    // amex, visa, diners\n    card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n    cvv: /^([0-9]){3,4}$/,\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n    email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n    url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n    // abc.de\n    domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n    datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n    // YYYY-MM-DD\n    date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n    // HH:MM:SS\n    time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n    dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n    // MM/DD/YYYY\n    month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n    // DD/MM/YYYY\n    day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n    // #FFF or #FFFFFF\n    color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n    // Domain || URL\n    website: {\n      test: function (text) {\n        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);\n      }\n    }\n  },\n  /**\n   * Optional validation functions to be used. `equalTo` being the only default included function.\n   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n   * el : The jQuery element to validate.\n   * required : Boolean value of the required attribute be present or not.\n   * parent : The direct parent of the input.\n   * @option\n   */validators: {\n    equalTo: function (el, required, parent) {\n      return $(\"#\" + el.attr('data-equalto')).val() === el.val();\n    }\n  }\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.abide.js"],"names":["module1","module","export","Abide","$","watch","require","v","Plugin","_setup","element","options","$element","extend","defaults","data","className","_init","$inputs","find","_events","off","on","resetForm","validateForm","validateOn","e","validateInput","target","liveValidate","validateOnBlur","_reflow","requiredCheck","$el","attr","isGood","type","checked","opt","length","val","findFormError","id","$error","siblings","formErrorSelector","parent","add","findLabel","$label","closest","findRadioLabels","$els","labels","map","i","el","addErrorClasses","$formError","addClass","labelErrorClass","formErrorClass","inputErrorClass","removeRadioErrorClasses","groupName","$labels","$formErrors","removeClass","removeAttr","removeErrorClasses","clearRequire","validated","customValidator","validator","equalTo","is","validateRadio","validateText","matchValidation","validators","goodToGo","indexOf","message","dependentElements","_this","each","trigger","acc","push","noError","css","pattern","inputText","valid","patterns","hasOwnProperty","test","RegExp","prop","$group","required","clear","split","$form","opts","not","_destroy","alpha","alpha_numeric","integer","number","card","cvv","email","url","domain","datetime","date","time","dateISO","month_day_year","day_month_year","color","website","text"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.abide.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Abide module.\n * @module foundation.abide\n */\n\nclass Abide extends Plugin {\n  /**\n   * Creates a new instance of Abide.\n   * @class\n   * @name Abide\n   * @fires Abide#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options = {}) {\n    this.$element = element;\n    this.options  = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n    this.className = 'Abide'; // ie9 back compat\n    this._init();\n  }\n\n  /**\n   * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n   * @private\n   */\n  _init() {\n    this.$inputs = this.$element.find('input, textarea, select');\n\n    this._events();\n  }\n\n  /**\n   * Initializes events for Abide.\n   * @private\n   */\n  _events() {\n    this.$element.off('.abide')\n      .on('reset.zf.abide', () => {\n        this.resetForm();\n      })\n      .on('submit.zf.abide', () => {\n        return this.validateForm();\n      });\n\n    if (this.options.validateOn === 'fieldChange') {\n      this.$inputs\n        .off('change.zf.abide')\n        .on('change.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n\n    if (this.options.liveValidate) {\n      this.$inputs\n        .off('input.zf.abide')\n        .on('input.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n\n    if (this.options.validateOnBlur) {\n      this.$inputs\n        .off('blur.zf.abide')\n        .on('blur.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n  }\n\n  /**\n   * Calls necessary functions to update Abide upon DOM change\n   * @private\n   */\n  _reflow() {\n    this._init();\n  }\n\n  /**\n   * Checks whether or not a form element has the required attribute and if it's checked or not\n   * @param {Object} element - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  requiredCheck($el) {\n    if (!$el.attr('required')) return true;\n\n    var isGood = true;\n\n    switch ($el[0].type) {\n      case 'checkbox':\n        isGood = $el[0].checked;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        var opt = $el.find('option:selected');\n        if (!opt.length || !opt.val()) isGood = false;\n        break;\n\n      default:\n        if(!$el.val() || !$el.val().length) isGood = false;\n    }\n\n    return isGood;\n  }\n\n  /**\n   * Get:\n   * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:\n   *   1. The element's direct sibling('s).\n   *   2. The element's parent's children.\n   * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.\n   *\n   * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n   *\n   * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n   * @returns {Object} jQuery object with the selector.\n   */\n  findFormError($el) {\n    var id = $el[0].id;\n    var $error = $el.siblings(this.options.formErrorSelector);\n\n    if (!$error.length) {\n      $error = $el.parent().find(this.options.formErrorSelector);\n    }\n\n    $error = $error.add(this.$element.find(`[data-form-error-for=\"${id}\"]`));\n\n    return $error;\n  }\n\n  /**\n   * Get the first element in this order:\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findLabel($el) {\n    var id = $el[0].id;\n    var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n    if (!$label.length) {\n      return $el.closest('label');\n    }\n\n    return $label;\n  }\n\n  /**\n   * Get the set of labels associated with a set of radio els in this order\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findRadioLabels($els) {\n    var labels = $els.map((i, el) => {\n      var id = el.id;\n      var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n      if (!$label.length) {\n        $label = $(el).closest('label');\n      }\n      return $label[0];\n    });\n\n    return $(labels);\n  }\n\n  /**\n   * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n   * @param {Object} $el - jQuery object to add the class to\n   */\n  addErrorClasses($el) {\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.addClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.addClass(this.options.formErrorClass);\n    }\n\n    $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n  }\n\n  /**\n   * Remove CSS error classes etc from an entire radio button group\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   *\n   */\n\n  removeRadioErrorClasses(groupName) {\n    var $els = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var $labels = this.findRadioLabels($els);\n    var $formErrors = this.findFormError($els);\n\n    if ($labels.length) {\n      $labels.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formErrors.length) {\n      $formErrors.removeClass(this.options.formErrorClass);\n    }\n\n    $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n\n  }\n\n  /**\n   * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n   * @param {Object} $el - jQuery object to remove the class from\n   */\n  removeErrorClasses($el) {\n    // radios need to clear all of the els\n    if($el[0].type == 'radio') {\n      return this.removeRadioErrorClasses($el.attr('name'));\n    }\n\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.removeClass(this.options.formErrorClass);\n    }\n\n    $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n  }\n\n  /**\n   * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.\n   * Ignores inputs with data-abide-ignore, type=\"hidden\" or disabled attributes set\n   * @fires Abide#invalid\n   * @fires Abide#valid\n   * @param {Object} element - jQuery object to validate, should be an HTML input\n   * @returns {Boolean} goodToGo - If the input is valid or not.\n   */\n  validateInput($el) {\n    var clearRequire = this.requiredCheck($el),\n        validated = false,\n        customValidator = true,\n        validator = $el.attr('data-validator'),\n        equalTo = true;\n\n    // don't validate ignored inputs or hidden inputs or disabled inputs\n    if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]') || $el.is('[disabled]')) {\n      return true;\n    }\n\n    switch ($el[0].type) {\n      case 'radio':\n        validated = this.validateRadio($el.attr('name'));\n        break;\n\n      case 'checkbox':\n        validated = clearRequire;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        validated = clearRequire;\n        break;\n\n      default:\n        validated = this.validateText($el);\n    }\n\n    if (validator) {\n      customValidator = this.matchValidation($el, validator, $el.attr('required'));\n    }\n\n    if ($el.attr('data-equalto')) {\n      equalTo = this.options.validators.equalTo($el);\n    }\n\n\n    var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n    var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n    if (goodToGo) {\n      // Re-validate inputs that depend on this one with equalto\n      const dependentElements = this.$element.find(`[data-equalto=\"${$el.attr('id')}\"]`);\n      if (dependentElements.length) {\n        let _this = this;\n        dependentElements.each(function() {\n          if ($(this).val()) {\n            _this.validateInput($(this));\n          }\n        });\n      }\n    }\n\n    this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n    /**\n     * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n     * Trigger includes the DOM element of the input.\n     * @event Abide#valid\n     * @event Abide#invalid\n     */\n    $el.trigger(message, [$el]);\n\n    return goodToGo;\n  }\n\n  /**\n   * Goes through a form and if there are any invalid inputs, it will display the form error element\n   * @returns {Boolean} noError - true if no errors were detected...\n   * @fires Abide#formvalid\n   * @fires Abide#forminvalid\n   */\n  validateForm() {\n    var acc = [];\n    var _this = this;\n\n    this.$inputs.each(function() {\n      acc.push(_this.validateInput($(this)));\n    });\n\n    var noError = acc.indexOf(false) === -1;\n\n    this.$element.find('[data-abide-error]').css('display', (noError ? 'none' : 'block'));\n\n    /**\n     * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n     * Trigger includes the element of the form.\n     * @event Abide#formvalid\n     * @event Abide#forminvalid\n     */\n    this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n    return noError;\n  }\n\n  /**\n   * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n   * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n   * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n   * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n   */\n  validateText($el, pattern) {\n    // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n    pattern = (pattern || $el.attr('pattern') || $el.attr('type'));\n    var inputText = $el.val();\n    var valid = false;\n\n    if (inputText.length) {\n      // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n      if (this.options.patterns.hasOwnProperty(pattern)) {\n        valid = this.options.patterns[pattern].test(inputText);\n      }\n      // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n      else if (pattern !== $el.attr('type')) {\n        valid = new RegExp(pattern).test(inputText);\n      }\n      else {\n        valid = true;\n      }\n    }\n    // An empty field is valid if it's not required\n    else if (!$el.prop('required')) {\n      valid = true;\n    }\n\n    return valid;\n   }\n\n  /**\n   * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n   */\n  validateRadio(groupName) {\n    // If at least one radio in the group has the `required` attribute, the group is considered required\n    // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n    var $group = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var valid = false, required = false;\n\n    // For the group to be required, at least one radio needs to be required\n    $group.each((i, e) => {\n      if ($(e).attr('required')) {\n        required = true;\n      }\n    });\n    if(!required) valid=true;\n\n    if (!valid) {\n      // For the group to be valid, at least one radio needs to be checked\n      $group.each((i, e) => {\n        if ($(e).prop('checked')) {\n          valid = true;\n        }\n      });\n    };\n\n    return valid;\n  }\n\n  /**\n   * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n   * @param {Object} $el - jQuery input element.\n   * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n   * @param {Boolean} required - self explanatory?\n   * @returns {Boolean} - true if validations passed.\n   */\n  matchValidation($el, validators, required) {\n    required = required ? true : false;\n\n    var clear = validators.split(' ').map((v) => {\n      return this.options.validators[v]($el, required, $el.parent());\n    });\n    return clear.indexOf(false) === -1;\n  }\n\n  /**\n   * Resets form inputs and styles\n   * @fires Abide#formreset\n   */\n  resetForm() {\n    var $form = this.$element,\n        opts = this.options;\n\n    $(`.${opts.labelErrorClass}`, $form).not('small').removeClass(opts.labelErrorClass);\n    $(`.${opts.inputErrorClass}`, $form).not('small').removeClass(opts.inputErrorClass);\n    $(`${opts.formErrorSelector}.${opts.formErrorClass}`).removeClass(opts.formErrorClass);\n    $form.find('[data-abide-error]').css('display', 'none');\n    $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n    $(':input:radio', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    /**\n     * Fires when the form has been reset.\n     * @event Abide#formreset\n     */\n    $form.trigger('formreset.zf.abide', [$form]);\n  }\n\n  /**\n   * Destroys an instance of Abide.\n   * Removes error styles and classes from elements, without resetting their values.\n   */\n  _destroy() {\n    var _this = this;\n    this.$element\n      .off('.abide')\n      .find('[data-abide-error]')\n        .css('display', 'none');\n\n    this.$inputs\n      .off('.abide')\n      .each(function() {\n        _this.removeErrorClasses($(this));\n      });\n  }\n}\n\n/**\n * Default settings for plugin\n */\nAbide.defaults = {\n  /**\n   * The default event to validate inputs. Checkboxes and radios validate immediately.\n   * Remove or change this value for manual validation.\n   * @option\n   * @type {?string}\n   * @default 'fieldChange'\n   */\n  validateOn: 'fieldChange',\n\n  /**\n   * Class to be applied to input labels on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-label'\n   */\n  labelErrorClass: 'is-invalid-label',\n\n  /**\n   * Class to be applied to inputs on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-input'\n   */\n  inputErrorClass: 'is-invalid-input',\n\n  /**\n   * Class selector to use to target Form Errors for show/hide.\n   * @option\n   * @type {string}\n   * @default '.form-error'\n   */\n  formErrorSelector: '.form-error',\n\n  /**\n   * Class added to Form Errors on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-visible'\n   */\n  formErrorClass: 'is-visible',\n\n  /**\n   * Set to true to validate text inputs on any value change.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  liveValidate: false,\n\n  /**\n   * Set to true to validate inputs on blur.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  validateOnBlur: false,\n\n  patterns: {\n    alpha : /^[a-zA-Z]+$/,\n    alpha_numeric : /^[a-zA-Z0-9]+$/,\n    integer : /^[-+]?\\d+$/,\n    number : /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n    // amex, visa, diners\n    card : /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n    cvv : /^([0-9]){3,4}$/,\n\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n    email : /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n    url : /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n    // abc.de\n    domain : /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n    datetime : /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n    // YYYY-MM-DD\n    date : /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n    // HH:MM:SS\n    time : /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n    dateISO : /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n    // MM/DD/YYYY\n    month_day_year : /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n    // DD/MM/YYYY\n    day_month_year : /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n    // #FFF or #FFFFFF\n    color : /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n\n    // Domain || URL\n    website: {\n      test: (text) => {\n        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);\n      }\n    }\n  },\n\n  /**\n   * Optional validation functions to be used. `equalTo` being the only default included function.\n   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n   * el : The jQuery element to validate.\n   * required : Boolean value of the required attribute be present or not.\n   * parent : The direct parent of the input.\n   * @option\n   */\n  validators: {\n    equalTo: function (el, required, parent) {\n      return $(`#${el.attr('data-equalto')}`).val() === el.val();\n    }\n  }\n}\n\nexport {Abide};\n"]},"hash":"aa2ebc5d0d26a398c6fa94eca29beaafd67f3971"}
