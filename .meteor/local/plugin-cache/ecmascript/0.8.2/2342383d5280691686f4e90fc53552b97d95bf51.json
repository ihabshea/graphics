{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.util.mediaQuery","imported":["MediaQuery"],"specifiers":[{"kind":"named","imported":"MediaQuery","local":"MediaQuery"}]},{"source":"./foundation.plugin","imported":["Plugin"],"specifiers":[{"kind":"named","imported":"Plugin","local":"Plugin"}]},{"source":"./foundation.util.core","imported":["GetYoDigits"],"specifiers":[{"kind":"named","imported":"GetYoDigits","local":"GetYoDigits"}]}],"exports":{"exported":["Interchange"],"specifiers":[{"kind":"local","local":"Interchange","exported":"Interchange"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.interchange.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.interchange.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.interchange.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.interchange.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.interchange"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nmodule1.export({\n  Interchange: function () {\n    return Interchange;\n  }\n});\nvar $ = void 0;\nmodule1.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar MediaQuery = void 0;\nmodule1.watch(require(\"./foundation.util.mediaQuery\"), {\n  MediaQuery: function (v) {\n    MediaQuery = v;\n  }\n}, 1);\nvar Plugin = void 0;\nmodule1.watch(require(\"./foundation.plugin\"), {\n  Plugin: function (v) {\n    Plugin = v;\n  }\n}, 2);\nvar GetYoDigits = void 0;\nmodule1.watch(require(\"./foundation.util.core\"), {\n  GetYoDigits: function (v) {\n    GetYoDigits = v;\n  }\n}, 3);\n\n/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n */var Interchange = function (_Plugin) {\n  (0, _inherits3.default)(Interchange, _Plugin);\n\n  function Interchange() {\n    (0, _classCallCheck3.default)(this, Interchange);\n    return (0, _possibleConstructorReturn3.default)(this, _Plugin.apply(this, arguments));\n  }\n\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @name Interchange\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */Interchange.prototype._setup = function () {\n    function _setup(element, options) {\n      this.$element = element;\n      this.options = $.extend({}, Interchange.defaults, options);\n      this.rules = [];\n      this.currentPath = '';\n      this.className = 'Interchange'; // ie9 back compat\n\n      this._init();\n\n      this._events();\n    }\n\n    return _setup;\n  }(); /**\n        * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n        * @function\n        * @private\n        */\n\n  Interchange.prototype._init = function () {\n    function _init() {\n      MediaQuery._init();\n\n      var id = this.$element[0].id || GetYoDigits(6, 'interchange');\n      this.$element.attr({\n        'data-resize': id,\n        'id': id\n      });\n\n      this._addBreakpoints();\n\n      this._generateRules();\n\n      this._reflow();\n    }\n\n    return _init;\n  }(); /**\n        * Initializes events for Interchange.\n        * @function\n        * @private\n        */\n\n  Interchange.prototype._events = function () {\n    function _events() {\n      var _this3 = this;\n\n      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {\n        return _this3._reflow();\n      });\n    }\n\n    return _events;\n  }(); /**\n        * Calls necessary functions to update Interchange upon DOM change\n        * @function\n        * @private\n        */\n\n  Interchange.prototype._reflow = function () {\n    function _reflow() {\n      var match; // Iterate through each rule, but only save the last match\n\n      for (var i in meteorBabelHelpers.sanitizeForInObject(this.rules)) {\n        if (this.rules.hasOwnProperty(i)) {\n          var rule = this.rules[i];\n\n          if (window.matchMedia(rule.query).matches) {\n            match = rule;\n          }\n        }\n      }\n\n      if (match) {\n        this.replace(match.path);\n      }\n    }\n\n    return _reflow;\n  }(); /**\n        * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n        * @function\n        * @private\n        */\n\n  Interchange.prototype._addBreakpoints = function () {\n    function _addBreakpoints() {\n      for (var i in meteorBabelHelpers.sanitizeForInObject(MediaQuery.queries)) {\n        if (MediaQuery.queries.hasOwnProperty(i)) {\n          var query = MediaQuery.queries[i];\n          Interchange.SPECIAL_QUERIES[query.name] = query.value;\n        }\n      }\n    }\n\n    return _addBreakpoints;\n  }(); /**\n        * Checks the Interchange element for the provided media query + content pairings\n        * @function\n        * @private\n        * @param {Object} element - jQuery object that is an Interchange instance\n        * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n        */\n\n  Interchange.prototype._generateRules = function () {\n    function _generateRules(element) {\n      var rulesList = [];\n      var rules;\n\n      if (this.options.rules) {\n        rules = this.options.rules;\n      } else {\n        rules = this.$element.data('interchange');\n      }\n\n      rules = typeof rules === 'string' ? rules.match(/\\[.*?\\]/g) : rules;\n\n      for (var i in meteorBabelHelpers.sanitizeForInObject(rules)) {\n        if (rules.hasOwnProperty(i)) {\n          var rule = rules[i].slice(1, -1).split(', ');\n          var path = rule.slice(0, -1).join('');\n          var query = rule[rule.length - 1];\n\n          if (Interchange.SPECIAL_QUERIES[query]) {\n            query = Interchange.SPECIAL_QUERIES[query];\n          }\n\n          rulesList.push({\n            path: path,\n            query: query\n          });\n        }\n      }\n\n      this.rules = rulesList;\n    }\n\n    return _generateRules;\n  }(); /**\n        * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n        * @function\n        * @param {String} path - Path to the image or HTML partial.\n        * @fires Interchange#replaced\n        */\n\n  Interchange.prototype.replace = function () {\n    function replace(path) {\n      if (this.currentPath === path) return;\n\n      var _this = this,\n          trigger = 'replaced.zf.interchange'; // Replacing images\n\n\n      if (this.$element[0].nodeName === 'IMG') {\n        this.$element.attr('src', path).on('load', function () {\n          _this.currentPath = path;\n        }).trigger(trigger);\n      } // Replacing background images\n      else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n          path = path.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n          this.$element.css({\n            'background-image': 'url(' + path + ')'\n          }).trigger(trigger);\n        } // Replacing HTML\n        else {\n            $.get(path, function (response) {\n              _this.$element.html(response).trigger(trigger);\n\n              $(response).foundation();\n              _this.currentPath = path;\n            });\n          } /**\n             * Fires when content in an Interchange element is done being loaded.\n             * @event Interchange#replaced\n             */ // this.$element.trigger('replaced.zf.interchange');\n\n    }\n\n    return replace;\n  }(); /**\n        * Destroys an instance of interchange.\n        * @function\n        */\n\n  Interchange.prototype._destroy = function () {\n    function _destroy() {\n      this.$element.off('resizeme.zf.trigger');\n    }\n\n    return _destroy;\n  }();\n\n  return Interchange;\n}(Plugin); /**\n            * Default settings for plugin\n            */\n\nInterchange.defaults = {\n  /**\n   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n   * @option\n   * @type {?array}\n   * @default null\n   */rules: null\n};\nInterchange.SPECIAL_QUERIES = {\n  'landscape': 'screen and (orientation: landscape)',\n  'portrait': 'screen and (orientation: portrait)',\n  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.interchange.js"],"names":["module1","module","export","Interchange","$","watch","require","v","MediaQuery","Plugin","GetYoDigits","_setup","element","options","$element","extend","defaults","rules","currentPath","className","_init","_events","id","attr","_addBreakpoints","_generateRules","_reflow","off","on","match","i","hasOwnProperty","rule","window","matchMedia","query","matches","replace","path","queries","SPECIAL_QUERIES","name","value","rulesList","data","slice","split","join","length","push","_this","trigger","nodeName","css","get","response","html","foundation","_destroy"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.interchange.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Plugin } from './foundation.plugin';\nimport { GetYoDigits } from './foundation.util.core';\n\n\n/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n */\n\nclass Interchange extends Plugin {\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @name Interchange\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Interchange.defaults, options);\n    this.rules = [];\n    this.currentPath = '';\n    this.className = 'Interchange'; // ie9 back compat\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n   * @function\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n\n    var id = this.$element[0].id || GetYoDigits(6, 'interchange');\n    this.$element.attr({\n      'data-resize': id,\n      'id': id\n    });\n\n    this._addBreakpoints();\n    this._generateRules();\n    this._reflow();\n  }\n\n  /**\n   * Initializes events for Interchange.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', () => this._reflow());\n  }\n\n  /**\n   * Calls necessary functions to update Interchange upon DOM change\n   * @function\n   * @private\n   */\n  _reflow() {\n    var match;\n\n    // Iterate through each rule, but only save the last match\n    for (var i in this.rules) {\n      if(this.rules.hasOwnProperty(i)) {\n        var rule = this.rules[i];\n        if (window.matchMedia(rule.query).matches) {\n          match = rule;\n        }\n      }\n    }\n\n    if (match) {\n      this.replace(match.path);\n    }\n  }\n\n  /**\n   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n   * @function\n   * @private\n   */\n  _addBreakpoints() {\n    for (var i in MediaQuery.queries) {\n      if (MediaQuery.queries.hasOwnProperty(i)) {\n        var query = MediaQuery.queries[i];\n        Interchange.SPECIAL_QUERIES[query.name] = query.value;\n      }\n    }\n  }\n\n  /**\n   * Checks the Interchange element for the provided media query + content pairings\n   * @function\n   * @private\n   * @param {Object} element - jQuery object that is an Interchange instance\n   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n   */\n  _generateRules(element) {\n    var rulesList = [];\n    var rules;\n\n    if (this.options.rules) {\n      rules = this.options.rules;\n    }\n    else {\n      rules = this.$element.data('interchange');\n    }\n\n    rules =  typeof rules === 'string' ? rules.match(/\\[.*?\\]/g) : rules;\n\n    for (var i in rules) {\n      if(rules.hasOwnProperty(i)) {\n        var rule = rules[i].slice(1, -1).split(', ');\n        var path = rule.slice(0, -1).join('');\n        var query = rule[rule.length - 1];\n\n        if (Interchange.SPECIAL_QUERIES[query]) {\n          query = Interchange.SPECIAL_QUERIES[query];\n        }\n\n        rulesList.push({\n          path: path,\n          query: query\n        });\n      }\n    }\n\n    this.rules = rulesList;\n  }\n\n  /**\n   * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n   * @function\n   * @param {String} path - Path to the image or HTML partial.\n   * @fires Interchange#replaced\n   */\n  replace(path) {\n    if (this.currentPath === path) return;\n\n    var _this = this,\n        trigger = 'replaced.zf.interchange';\n\n    // Replacing images\n    if (this.$element[0].nodeName === 'IMG') {\n      this.$element.attr('src', path).on('load', function() {\n        _this.currentPath = path;\n      })\n      .trigger(trigger);\n    }\n    // Replacing background images\n    else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n      path = path.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n      this.$element.css({ 'background-image': 'url('+path+')' })\n          .trigger(trigger);\n    }\n    // Replacing HTML\n    else {\n      $.get(path, function(response) {\n        _this.$element.html(response)\n             .trigger(trigger);\n        $(response).foundation();\n        _this.currentPath = path;\n      });\n    }\n\n    /**\n     * Fires when content in an Interchange element is done being loaded.\n     * @event Interchange#replaced\n     */\n    // this.$element.trigger('replaced.zf.interchange');\n  }\n\n  /**\n   * Destroys an instance of interchange.\n   * @function\n   */\n  _destroy() {\n    this.$element.off('resizeme.zf.trigger')\n  }\n}\n\n/**\n * Default settings for plugin\n */\nInterchange.defaults = {\n  /**\n   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n   * @option\n   * @type {?array}\n   * @default null\n   */\n  rules: null\n};\n\nInterchange.SPECIAL_QUERIES = {\n  'landscape': 'screen and (orientation: landscape)',\n  'portrait': 'screen and (orientation: portrait)',\n  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n};\n\nexport {Interchange};\n"]},"hash":"2342383d5280691686f4e90fc53552b97d95bf51"}
