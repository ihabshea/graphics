{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.util.core","imported":["rtl"],"specifiers":[{"kind":"named","imported":"rtl","local":"Rtl"}]}],"exports":{"exported":["Keyboard"],"specifiers":[{"kind":"local","local":"Keyboard","exported":"Keyboard"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.util.keyboard.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.util.keyboard.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.util.keyboard.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.util.keyboard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.util.keyboard"},"ignored":false,"code":"/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/'use strict';\n\nmodule.export({\n  Keyboard: function () {\n    return Keyboard;\n  }\n});\nvar $ = void 0;\nmodule.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar Rtl = void 0;\nmodule.watch(require(\"./foundation.util.core\"), {\n  rtl: function (v) {\n    Rtl = v;\n  }\n}, 1);\nvar keyCodes = {\n  9: 'TAB',\n  13: 'ENTER',\n  27: 'ESCAPE',\n  32: 'SPACE',\n  35: 'END',\n  36: 'HOME',\n  37: 'ARROW_LEFT',\n  38: 'ARROW_UP',\n  39: 'ARROW_RIGHT',\n  40: 'ARROW_DOWN'\n};\nvar commands = {}; // Functions pulled out to be referenceable from internals\n\nfunction findFocusable($element) {\n  if (!$element) {\n    return false;\n  }\n\n  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n    if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n      return false;\n    } //only have visible elements and those that have a tabindex greater or equal 0\n\n\n    return true;\n  });\n}\n\nfunction parseKey(event) {\n  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase(); // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\n\n  key = key.replace(/\\W+/, '');\n  if (event.shiftKey) key = \"SHIFT_\" + key;\n  if (event.ctrlKey) key = \"CTRL_\" + key;\n  if (event.altKey) key = \"ALT_\" + key; // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\n\n  key = key.replace(/_$/, '');\n  return key;\n}\n\nvar Keyboard = {\n  keys: getKeyCodes(keyCodes),\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */parseKey: parseKey,\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */handleKey: function (event, component, functions) {\n    var commandList = commands[component],\n        keyCode = this.parseKey(event),\n        cmds,\n        command,\n        fn;\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') {\n      // this component does not differentiate between ltr and rtl\n      cmds = commandList; // use plain list\n    } else {\n      // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n      if (Rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n    }\n\n    command = cmds[keyCode];\n    fn = functions[command];\n\n    if (fn && typeof fn === 'function') {\n      // execute function  if exists\n      var returnValue = fn.apply();\n\n      if (functions.handled || typeof functions.handled === 'function') {\n        // execute function when event was handled\n        functions.handled(returnValue);\n      }\n    } else {\n      if (functions.unhandled || typeof functions.unhandled === 'function') {\n        // execute function when event was not handled\n        functions.unhandled();\n      }\n    }\n  },\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */findFocusable: findFocusable,\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */register: function (componentName, cmds) {\n    commands[componentName] = cmds;\n  },\n  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?\n  //\n  /**\n   * Traps the focus in the given element.\n   * @param  {jQuery} $element  jQuery object to trap the foucs into.\n   */trapFocus: function ($element) {\n    var $focusable = findFocusable($element),\n        $firstFocusable = $focusable.eq(0),\n        $lastFocusable = $focusable.eq(-1);\n    $element.on('keydown.zf.trapfocus', function (event) {\n      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {\n        event.preventDefault();\n        $firstFocusable.focus();\n      } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {\n        event.preventDefault();\n        $lastFocusable.focus();\n      }\n    });\n  },\n  /**\n   * Releases the trapped focus from the given element.\n   * @param  {jQuery} $element  jQuery object to release the focus for.\n   */releaseFocus: function ($element) {\n    $element.off('keydown.zf.trapfocus');\n  }\n}; /*\n    * Constants for easier comparing.\n    * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n    */\n\nfunction getKeyCodes(kcs) {\n  var k = {};\n\n  for (var kc in meteorBabelHelpers.sanitizeForInObject(kcs)) {\n    k[kcs[kc]] = kcs[kc];\n  }\n\n  return k;\n}","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.util.keyboard.js"],"names":["module","export","Keyboard","$","watch","require","v","Rtl","rtl","keyCodes","commands","findFocusable","$element","find","filter","is","attr","parseKey","event","key","which","keyCode","String","fromCharCode","toUpperCase","replace","shiftKey","ctrlKey","altKey","keys","getKeyCodes","handleKey","component","functions","commandList","cmds","command","fn","console","warn","ltr","extend","returnValue","apply","handled","unhandled","register","componentName","trapFocus","$focusable","$firstFocusable","eq","$lastFocusable","on","target","preventDefault","focus","releaseFocus","off","kcs","k","kc"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.util.keyboard.js.map","sourcesContent":["/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\nimport $ from 'jquery';\nimport { rtl as Rtl } from './foundation.util.core';\n\nconst keyCodes = {\n  9: 'TAB',\n  13: 'ENTER',\n  27: 'ESCAPE',\n  32: 'SPACE',\n  35: 'END',\n  36: 'HOME',\n  37: 'ARROW_LEFT',\n  38: 'ARROW_UP',\n  39: 'ARROW_RIGHT',\n  40: 'ARROW_DOWN'\n}\n\nvar commands = {}\n\n// Functions pulled out to be referenceable from internals\nfunction findFocusable($element) {\n  if(!$element) {return false; }\n  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {\n    if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; } //only have visible elements and those that have a tabindex greater or equal 0\n    return true;\n  });\n}\n\nfunction parseKey(event) {\n  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n\n  // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\n  key = key.replace(/\\W+/, '');\n\n  if (event.shiftKey) key = `SHIFT_${key}`;\n  if (event.ctrlKey) key = `CTRL_${key}`;\n  if (event.altKey) key = `ALT_${key}`;\n\n  // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\n  key = key.replace(/_$/, '');\n\n  return key;\n}\n\nvar Keyboard = {\n  keys: getKeyCodes(keyCodes),\n\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */\n  parseKey: parseKey,\n\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */\n  handleKey(event, component, functions) {\n    var commandList = commands[component],\n      keyCode = this.parseKey(event),\n      cmds,\n      command,\n      fn;\n\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n    } else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);\n\n        else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n    }\n    command = cmds[keyCode];\n\n    fn = functions[command];\n    if (fn && typeof fn === 'function') { // execute function  if exists\n      var returnValue = fn.apply();\n      if (functions.handled || typeof functions.handled === 'function') { // execute function when event was handled\n          functions.handled(returnValue);\n      }\n    } else {\n      if (functions.unhandled || typeof functions.unhandled === 'function') { // execute function when event was not handled\n          functions.unhandled();\n      }\n    }\n  },\n\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */\n\n  findFocusable: findFocusable,\n\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */\n\n  register(componentName, cmds) {\n    commands[componentName] = cmds;\n  },\n\n\n  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?\n  //\n  /**\n   * Traps the focus in the given element.\n   * @param  {jQuery} $element  jQuery object to trap the foucs into.\n   */\n  trapFocus($element) {\n    var $focusable = findFocusable($element),\n        $firstFocusable = $focusable.eq(0),\n        $lastFocusable = $focusable.eq(-1);\n\n    $element.on('keydown.zf.trapfocus', function(event) {\n      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {\n        event.preventDefault();\n        $firstFocusable.focus();\n      }\n      else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {\n        event.preventDefault();\n        $lastFocusable.focus();\n      }\n    });\n  },\n  /**\n   * Releases the trapped focus from the given element.\n   * @param  {jQuery} $element  jQuery object to release the focus for.\n   */\n  releaseFocus($element) {\n    $element.off('keydown.zf.trapfocus');\n  }\n}\n\n/*\n * Constants for easier comparing.\n * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n */\nfunction getKeyCodes(kcs) {\n  var k = {};\n  for (var kc in kcs) k[kcs[kc]] = kcs[kc];\n  return k;\n}\n\nexport {Keyboard};\n"]},"hash":"cd9405c808fc83424975530e3fc454c6baef6033"}
