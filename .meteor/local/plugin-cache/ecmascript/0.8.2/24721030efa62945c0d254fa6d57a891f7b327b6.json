{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"./foundation.util.mediaQuery","imported":["MediaQuery"],"specifiers":[{"kind":"named","imported":"MediaQuery","local":"MediaQuery"}]},{"source":"./foundation.util.imageLoader","imported":["onImagesLoaded"],"specifiers":[{"kind":"named","imported":"onImagesLoaded","local":"onImagesLoaded"}]},{"source":"./foundation.util.core","imported":["GetYoDigits"],"specifiers":[{"kind":"named","imported":"GetYoDigits","local":"GetYoDigits"}]},{"source":"./foundation.plugin","imported":["Plugin"],"specifiers":[{"kind":"named","imported":"Plugin","local":"Plugin"}]}],"exports":{"exported":["Equalizer"],"specifiers":[{"kind":"local","local":"Equalizer","exported":"Equalizer"}]}}},"options":{"filename":"packages/zurb:foundation-sites/js/foundation.equalizer.js","filenameRelative":"packages/zurb:foundation-sites/js/foundation.equalizer.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/js/foundation.equalizer.js.map","sourceFileName":"packages/zurb:foundation-sites/js/foundation.equalizer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"foundation.equalizer"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = module;\nmodule1.export({\n  Equalizer: function () {\n    return Equalizer;\n  }\n});\nvar $ = void 0;\nmodule1.watch(require(\"jquery\"), {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 0);\nvar MediaQuery = void 0;\nmodule1.watch(require(\"./foundation.util.mediaQuery\"), {\n  MediaQuery: function (v) {\n    MediaQuery = v;\n  }\n}, 1);\nvar onImagesLoaded = void 0;\nmodule1.watch(require(\"./foundation.util.imageLoader\"), {\n  onImagesLoaded: function (v) {\n    onImagesLoaded = v;\n  }\n}, 2);\nvar GetYoDigits = void 0;\nmodule1.watch(require(\"./foundation.util.core\"), {\n  GetYoDigits: function (v) {\n    GetYoDigits = v;\n  }\n}, 3);\nvar Plugin = void 0;\nmodule1.watch(require(\"./foundation.plugin\"), {\n  Plugin: function (v) {\n    Plugin = v;\n  }\n}, 4);\n\n/**\n * Equalizer module.\n * @module foundation.equalizer\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.imageLoader if equalizer contains images\n */var Equalizer = function (_Plugin) {\n  (0, _inherits3.default)(Equalizer, _Plugin);\n\n  function Equalizer() {\n    (0, _classCallCheck3.default)(this, Equalizer);\n    return (0, _possibleConstructorReturn3.default)(this, _Plugin.apply(this, arguments));\n  }\n\n  /**\n   * Creates a new instance of Equalizer.\n   * @class\n   * @name Equalizer\n   * @fires Equalizer#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */Equalizer.prototype._setup = function () {\n    function _setup(element, options) {\n      this.$element = element;\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n      this.className = 'Equalizer'; // ie9 back compat\n\n      this._init();\n    }\n\n    return _setup;\n  }(); /**\n        * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n        * @private\n        */\n\n  Equalizer.prototype._init = function () {\n    function _init() {\n      var eqId = this.$element.attr('data-equalizer') || '';\n      var $watched = this.$element.find(\"[data-equalizer-watch=\\\"\" + eqId + \"\\\"]\");\n\n      MediaQuery._init();\n\n      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n      this.$element.attr('data-resize', eqId || GetYoDigits(6, 'eq'));\n      this.$element.attr('data-mutate', eqId || GetYoDigits(6, 'eq'));\n      this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n      this.isOn = false;\n      this._bindHandler = {\n        onResizeMeBound: this._onResizeMe.bind(this),\n        onPostEqualizedBound: this._onPostEqualized.bind(this)\n      };\n      var imgs = this.$element.find('img');\n      var tooSmall;\n\n      if (this.options.equalizeOn) {\n        tooSmall = this._checkMQ();\n        $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n      } else {\n        this._events();\n      }\n\n      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n        if (imgs.length) {\n          onImagesLoaded(imgs, this._reflow.bind(this));\n        } else {\n          this._reflow();\n        }\n      }\n    }\n\n    return _init;\n  }(); /**\n        * Removes event listeners if the breakpoint is too small.\n        * @private\n        */\n\n  Equalizer.prototype._pauseEvents = function () {\n    function _pauseEvents() {\n      this.isOn = false;\n      this.$element.off({\n        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\n        'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\n      });\n    }\n\n    return _pauseEvents;\n  }(); /**\n        * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n        * @private\n        */\n\n  Equalizer.prototype._onResizeMe = function () {\n    function _onResizeMe(e) {\n      this._reflow();\n    }\n\n    return _onResizeMe;\n  }(); /**\n        * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n        * @private\n        */\n\n  Equalizer.prototype._onPostEqualized = function () {\n    function _onPostEqualized(e) {\n      if (e.target !== this.$element[0]) {\n        this._reflow();\n      }\n    }\n\n    return _onPostEqualized;\n  }(); /**\n        * Initializes events for Equalizer.\n        * @private\n        */\n\n  Equalizer.prototype._events = function () {\n    function _events() {\n      var _this = this;\n\n      this._pauseEvents();\n\n      if (this.hasNested) {\n        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n      } else {\n        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n        this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\n      }\n\n      this.isOn = true;\n    }\n\n    return _events;\n  }(); /**\n        * Checks the current breakpoint to the minimum required size.\n        * @private\n        */\n\n  Equalizer.prototype._checkMQ = function () {\n    function _checkMQ() {\n      var tooSmall = !MediaQuery.is(this.options.equalizeOn);\n\n      if (tooSmall) {\n        if (this.isOn) {\n          this._pauseEvents();\n\n          this.$watched.css('height', 'auto');\n        }\n      } else {\n        if (!this.isOn) {\n          this._events();\n        }\n      }\n\n      return tooSmall;\n    }\n\n    return _checkMQ;\n  }(); /**\n        * A noop version for the plugin\n        * @private\n        */\n\n  Equalizer.prototype._killswitch = function () {\n    function _killswitch() {\n      return;\n    }\n\n    return _killswitch;\n  }(); /**\n        * Calls necessary functions to update Equalizer upon DOM change\n        * @private\n        */\n\n  Equalizer.prototype._reflow = function () {\n    function _reflow() {\n      if (!this.options.equalizeOnStack) {\n        if (this._isStacked()) {\n          this.$watched.css('height', 'auto');\n          return false;\n        }\n      }\n\n      if (this.options.equalizeByRow) {\n        this.getHeightsByRow(this.applyHeightByRow.bind(this));\n      } else {\n        this.getHeights(this.applyHeight.bind(this));\n      }\n    }\n\n    return _reflow;\n  }(); /**\n        * Manually determines if the first 2 elements are *NOT* stacked.\n        * @private\n        */\n\n  Equalizer.prototype._isStacked = function () {\n    function _isStacked() {\n      if (!this.$watched[0] || !this.$watched[1]) {\n        return true;\n      }\n\n      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n    }\n\n    return _isStacked;\n  }(); /**\n        * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n        * @param {Function} cb - A non-optional callback to return the heights array to.\n        * @returns {Array} heights - An array of heights of children within Equalizer container\n        */\n\n  Equalizer.prototype.getHeights = function () {\n    function getHeights(cb) {\n      var heights = [];\n\n      for (var i = 0, len = this.$watched.length; i < len; i++) {\n        this.$watched[i].style.height = 'auto';\n        heights.push(this.$watched[i].offsetHeight);\n      }\n\n      cb(heights);\n    }\n\n    return getHeights;\n  }(); /**\n        * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n        * @param {Function} cb - A non-optional callback to return the heights array to.\n        * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n        */\n\n  Equalizer.prototype.getHeightsByRow = function () {\n    function getHeightsByRow(cb) {\n      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n          groups = [],\n          group = 0; //group by Row\n\n      groups[group] = [];\n\n      for (var i = 0, len = this.$watched.length; i < len; i++) {\n        this.$watched[i].style.height = 'auto'; //maybe could use this.$watched[i].offsetTop\n\n        var elOffsetTop = $(this.$watched[i]).offset().top;\n\n        if (elOffsetTop != lastElTopOffset) {\n          group++;\n          groups[group] = [];\n          lastElTopOffset = elOffsetTop;\n        }\n\n        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n      }\n\n      for (var j = 0, ln = groups.length; j < ln; j++) {\n        var heights = $(groups[j]).map(function () {\n          return this[1];\n        }).get();\n        var max = Math.max.apply(null, heights);\n        groups[j].push(max);\n      }\n\n      cb(groups);\n    }\n\n    return getHeightsByRow;\n  }(); /**\n        * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n        * @param {array} heights - An array of heights of children within Equalizer container\n        * @fires Equalizer#preequalized\n        * @fires Equalizer#postequalized\n        */\n\n  Equalizer.prototype.applyHeight = function () {\n    function applyHeight(heights) {\n      var max = Math.max.apply(null, heights); /**\n                                                * Fires before the heights are applied\n                                                * @event Equalizer#preequalized\n                                                */\n      this.$element.trigger('preequalized.zf.equalizer');\n      this.$watched.css('height', max); /**\n                                         * Fires when the heights have been applied\n                                         * @event Equalizer#postequalized\n                                         */\n      this.$element.trigger('postequalized.zf.equalizer');\n    }\n\n    return applyHeight;\n  }(); /**\n        * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n        * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n        * @fires Equalizer#preequalized\n        * @fires Equalizer#preequalizedrow\n        * @fires Equalizer#postequalizedrow\n        * @fires Equalizer#postequalized\n        */\n\n  Equalizer.prototype.applyHeightByRow = function () {\n    function applyHeightByRow(groups) {\n      /**\n       * Fires before the heights are applied\n       */this.$element.trigger('preequalized.zf.equalizer');\n\n      for (var i = 0, len = groups.length; i < len; i++) {\n        var groupsILength = groups[i].length,\n            max = groups[i][groupsILength - 1];\n\n        if (groupsILength <= 2) {\n          $(groups[i][0][0]).css({\n            'height': 'auto'\n          });\n          continue;\n        } /**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedrow\n            */\n\n        this.$element.trigger('preequalizedrow.zf.equalizer');\n\n        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n          $(groups[i][j][0]).css({\n            'height': max\n          });\n        } /**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedrow\n            */\n\n        this.$element.trigger('postequalizedrow.zf.equalizer');\n      } /**\n         * Fires when the heights have been applied\n         */\n\n      this.$element.trigger('postequalized.zf.equalizer');\n    }\n\n    return applyHeightByRow;\n  }(); /**\n        * Destroys an instance of Equalizer.\n        * @function\n        */\n\n  Equalizer.prototype._destroy = function () {\n    function _destroy() {\n      this._pauseEvents();\n\n      this.$watched.css('height', 'auto');\n    }\n\n    return _destroy;\n  }();\n\n  return Equalizer;\n}(Plugin); /**\n            * Default settings for plugin\n            */\n\nEqualizer.defaults = {\n  /**\n   * Enable height equalization when stacked on smaller screens.\n   * @option\n   * @type {boolean}\n   * @default false\n   */equalizeOnStack: false,\n  /**\n   * Enable height equalization row by row.\n   * @option\n   * @type {boolean}\n   * @default false\n   */equalizeByRow: false,\n  /**\n   * String representing the minimum breakpoint size the plugin should equalize heights on.\n   * @option\n   * @type {string}\n   * @default ''\n   */equalizeOn: ''\n};","map":{"version":3,"sources":["packages/zurb:foundation-sites/js/foundation.equalizer.js"],"names":["module1","module","export","Equalizer","$","watch","require","v","MediaQuery","onImagesLoaded","GetYoDigits","Plugin","_setup","element","options","$element","extend","defaults","data","className","_init","eqId","attr","$watched","find","length","hasNested","isNested","parentsUntil","document","body","isOn","_bindHandler","onResizeMeBound","_onResizeMe","bind","onPostEqualizedBound","_onPostEqualized","imgs","tooSmall","equalizeOn","_checkMQ","window","on","_events","undefined","_reflow","_pauseEvents","off","e","target","_this","is","css","_killswitch","equalizeOnStack","_isStacked","equalizeByRow","getHeightsByRow","applyHeightByRow","getHeights","applyHeight","getBoundingClientRect","top","cb","heights","i","len","style","height","push","offsetHeight","lastElTopOffset","first","offset","groups","group","elOffsetTop","j","ln","map","get","max","Math","apply","trigger","groupsILength","lenJ","_destroy"],"mappings":"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","file":"packages/zurb:foundation-sites/js/foundation.equalizer.js.map","sourcesContent":["'use strict';\n\nimport $ from 'jquery';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { onImagesLoaded } from './foundation.util.imageLoader';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Equalizer module.\n * @module foundation.equalizer\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.imageLoader if equalizer contains images\n */\n\nclass Equalizer extends Plugin {\n  /**\n   * Creates a new instance of Equalizer.\n   * @class\n   * @name Equalizer\n   * @fires Equalizer#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options){\n    this.$element = element;\n    this.options  = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n    this.className = 'Equalizer'; // ie9 back compat\n\n    this._init();\n  }\n\n  /**\n   * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n   * @private\n   */\n  _init() {\n    var eqId = this.$element.attr('data-equalizer') || '';\n    var $watched = this.$element.find(`[data-equalizer-watch=\"${eqId}\"]`);\n\n    MediaQuery._init();\n\n    this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n    this.$element.attr('data-resize', (eqId || GetYoDigits(6, 'eq')));\n    this.$element.attr('data-mutate', (eqId || GetYoDigits(6, 'eq')));\n\n    this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n    this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n    this.isOn = false;\n    this._bindHandler = {\n      onResizeMeBound: this._onResizeMe.bind(this),\n      onPostEqualizedBound: this._onPostEqualized.bind(this)\n    };\n\n    var imgs = this.$element.find('img');\n    var tooSmall;\n    if(this.options.equalizeOn){\n      tooSmall = this._checkMQ();\n      $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n    }else{\n      this._events();\n    }\n    if((tooSmall !== undefined && tooSmall === false) || tooSmall === undefined){\n      if(imgs.length){\n        onImagesLoaded(imgs, this._reflow.bind(this));\n      }else{\n        this._reflow();\n      }\n    }\n  }\n\n  /**\n   * Removes event listeners if the breakpoint is too small.\n   * @private\n   */\n  _pauseEvents() {\n    this.isOn = false;\n    this.$element.off({\n      '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n      'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\n\t  'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\n    });\n  }\n\n  /**\n   * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n   * @private\n   */\n  _onResizeMe(e) {\n    this._reflow();\n  }\n\n  /**\n   * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n   * @private\n   */\n  _onPostEqualized(e) {\n    if(e.target !== this.$element[0]){ this._reflow(); }\n  }\n\n  /**\n   * Initializes events for Equalizer.\n   * @private\n   */\n  _events() {\n    var _this = this;\n    this._pauseEvents();\n    if(this.hasNested){\n      this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n    }else{\n      this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n\t  this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\n    }\n    this.isOn = true;\n  }\n\n  /**\n   * Checks the current breakpoint to the minimum required size.\n   * @private\n   */\n  _checkMQ() {\n    var tooSmall = !MediaQuery.is(this.options.equalizeOn);\n    if(tooSmall){\n      if(this.isOn){\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n      }\n    }else{\n      if(!this.isOn){\n        this._events();\n      }\n    }\n    return tooSmall;\n  }\n\n  /**\n   * A noop version for the plugin\n   * @private\n   */\n  _killswitch() {\n    return;\n  }\n\n  /**\n   * Calls necessary functions to update Equalizer upon DOM change\n   * @private\n   */\n  _reflow() {\n    if(!this.options.equalizeOnStack){\n      if(this._isStacked()){\n        this.$watched.css('height', 'auto');\n        return false;\n      }\n    }\n    if (this.options.equalizeByRow) {\n      this.getHeightsByRow(this.applyHeightByRow.bind(this));\n    }else{\n      this.getHeights(this.applyHeight.bind(this));\n    }\n  }\n\n  /**\n   * Manually determines if the first 2 elements are *NOT* stacked.\n   * @private\n   */\n  _isStacked() {\n    if (!this.$watched[0] || !this.$watched[1]) {\n      return true;\n    }\n    return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} heights - An array of heights of children within Equalizer container\n   */\n  getHeights(cb) {\n    var heights = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      heights.push(this.$watched[i].offsetHeight);\n    }\n    cb(heights);\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   */\n  getHeightsByRow(cb) {\n    var lastElTopOffset = (this.$watched.length ? this.$watched.first().offset().top : 0),\n        groups = [],\n        group = 0;\n    //group by Row\n    groups[group] = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      //maybe could use this.$watched[i].offsetTop\n      var elOffsetTop = $(this.$watched[i]).offset().top;\n      if (elOffsetTop!=lastElTopOffset) {\n        group++;\n        groups[group] = [];\n        lastElTopOffset=elOffsetTop;\n      }\n      groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);\n    }\n\n    for (var j = 0, ln = groups.length; j < ln; j++) {\n      var heights = $(groups[j]).map(function(){ return this[1]; }).get();\n      var max         = Math.max.apply(null, heights);\n      groups[j].push(max);\n    }\n    cb(groups);\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n   * @param {array} heights - An array of heights of children within Equalizer container\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#postequalized\n   */\n  applyHeight(heights) {\n    var max = Math.max.apply(null, heights);\n    /**\n     * Fires before the heights are applied\n     * @event Equalizer#preequalized\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n\n    this.$watched.css('height', max);\n\n    /**\n     * Fires when the heights have been applied\n     * @event Equalizer#postequalized\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n   * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#preequalizedrow\n   * @fires Equalizer#postequalizedrow\n   * @fires Equalizer#postequalized\n   */\n  applyHeightByRow(groups) {\n    /**\n     * Fires before the heights are applied\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n    for (var i = 0, len = groups.length; i < len ; i++) {\n      var groupsILength = groups[i].length,\n          max = groups[i][groupsILength - 1];\n      if (groupsILength<=2) {\n        $(groups[i][0][0]).css({'height':'auto'});\n        continue;\n      }\n      /**\n        * Fires before the heights per row are applied\n        * @event Equalizer#preequalizedrow\n        */\n      this.$element.trigger('preequalizedrow.zf.equalizer');\n      for (var j = 0, lenJ = (groupsILength-1); j < lenJ ; j++) {\n        $(groups[i][j][0]).css({'height':max});\n      }\n      /**\n        * Fires when the heights per row have been applied\n        * @event Equalizer#postequalizedrow\n        */\n      this.$element.trigger('postequalizedrow.zf.equalizer');\n    }\n    /**\n     * Fires when the heights have been applied\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Destroys an instance of Equalizer.\n   * @function\n   */\n  _destroy() {\n    this._pauseEvents();\n    this.$watched.css('height', 'auto');\n  }\n}\n\n/**\n * Default settings for plugin\n */\nEqualizer.defaults = {\n  /**\n   * Enable height equalization when stacked on smaller screens.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  equalizeOnStack: false,\n  /**\n   * Enable height equalization row by row.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  equalizeByRow: false,\n  /**\n   * String representing the minimum breakpoint size the plugin should equalize heights on.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  equalizeOn: ''\n};\n\nexport {Equalizer};\n"]},"hash":"24721030efa62945c0d254fa6d57a891f7b327b6"}
