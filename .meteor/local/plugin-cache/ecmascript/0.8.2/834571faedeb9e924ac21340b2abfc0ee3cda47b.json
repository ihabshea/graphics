{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js","filenameRelative":"packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js.map","sourceFileName":"packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"run-qunit"},"ignored":false,"code":"/**\n* Wait until the test condition is true or a timeout occurs. Useful for waiting\n* on a server response or for a ui change (fadeIn, etc.) to occur.\n*\n* @param testFx javascript condition that evaluates to a boolean,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param onReady what to do when testFx condition is fulfilled,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.\n*/function waitFor(testFx, onReady, timeOutMillis) {\n    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001,\n        //< Default Max Timout is 3s\n    start = new Date().getTime(),\n        condition = false,\n        interval = setInterval(function () {\n        if (new Date().getTime() - start < maxtimeOutMillis && !condition) {\n            // If not time-out yet and condition not yet fulfilled\n            condition = typeof testFx === \"string\" ? eval(testFx) : testFx(); //< defensive code\n        } else {\n            if (!condition) {\n                // If condition still not fulfilled (timeout but condition is 'false')\n                console.log(\"'waitFor()' timeout\");\n                phantom.exit(1);\n            } else {\n                // Condition fulfilled (timeout and/or condition is 'true')\n                typeof onReady === \"string\" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled\n\n                clearInterval(interval); //< Stop this interval\n            }\n        }\n    }, 100); //< repeat check every 250ms\n}\n\n;\n\nif (phantom.args.length === 0 || phantom.args.length > 2) {\n    console.log('Usage: run-qunit.js URL');\n    phantom.exit();\n}\n\nvar page = new WebPage(); // Route \"console.log()\" calls from within the Page context to the main Phantom context (i.e. current \"this\")\n\npage.onConsoleMessage = function (msg) {\n    console.log(msg);\n};\n\npage.open(phantom.args[0], function (status) {\n    if (status !== \"success\") {\n        console.log(\"Unable to access network\");\n        phantom.exit();\n    } else {\n        waitFor(function () {\n            return page.evaluate(function () {\n                var el = document.getElementById('qunit-testresult');\n\n                if (el && el.innerText.match('completed')) {\n                    return true;\n                }\n\n                return false;\n            });\n        }, function () {\n            var failedNum = page.evaluate(function () {\n                var el = document.getElementById('qunit-testresult');\n\n                try {\n                    return el.getElementsByClassName('failed')[0].innerHTML;\n                } catch (e) {}\n\n                return 10000;\n            });\n            phantom.exit(parseInt(failedNum, 10) > 0 ? 1 : 0);\n        });\n    }\n});","map":{"version":3,"sources":["packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js"],"names":["waitFor","testFx","onReady","timeOutMillis","maxtimeOutMillis","start","Date","getTime","condition","interval","setInterval","eval","console","log","phantom","exit","clearInterval","args","length","page","WebPage","onConsoleMessage","msg","open","status","evaluate","el","document","getElementById","innerText","match","failedNum","getElementsByClassName","innerHTML","e","parseInt"],"mappings":"AAAA;;;;;;;;;;;EAYA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,OAAzB,EAAkCC,aAAlC,EAAiD;AAC7C,QAAIC,mBAAmBD,gBAAgBA,aAAhB,GAAgC,IAAvD;AAAA,QAA6D;AACzDE,YAAQ,IAAIC,IAAJ,GAAWC,OAAX,EADZ;AAAA,QAEIC,YAAY,KAFhB;AAAA,QAGIC,WAAWC,YAAY,YAAW;AAC9B,YAAM,IAAIJ,IAAJ,GAAWC,OAAX,KAAuBF,KAAvB,GAA+BD,gBAAhC,IAAqD,CAACI,SAA3D,EAAuE;AACnE;AACAA,wBAAa,OAAOP,MAAP,KAAmB,QAAnB,GAA8BU,KAAKV,MAAL,CAA9B,GAA6CA,QAA1D,CAFmE,CAEE;AACxE,SAHD,MAGO;AACH,gBAAG,CAACO,SAAJ,EAAe;AACX;AACAI,wBAAQC,GAAR,CAAY,qBAAZ;AACAC,wBAAQC,IAAR,CAAa,CAAb;AACH,aAJD,MAIO;AACH;AACA,uBAAOb,OAAP,KAAoB,QAApB,GAA+BS,KAAKT,OAAL,CAA/B,GAA+CA,SAA/C,CAFG,CAEuD;;AAC1Dc,8BAAcP,QAAd,EAHG,CAGsB;AAC5B;AACJ;AACJ,KAfU,EAeR,GAfQ,CAHf,CAD6C,CAmBhC;AAChB;;AAAA;;AAGD,IAAIK,QAAQG,IAAR,CAAaC,MAAb,KAAwB,CAAxB,IAA6BJ,QAAQG,IAAR,CAAaC,MAAb,GAAsB,CAAvD,EAA0D;AACtDN,YAAQC,GAAR,CAAY,yBAAZ;AACAC,YAAQC,IAAR;AACH;;AAED,IAAII,OAAO,IAAIC,OAAJ,EAAX,C,CAEA;;AACAD,KAAKE,gBAAL,GAAwB,UAASC,GAAT,EAAc;AAClCV,YAAQC,GAAR,CAAYS,GAAZ;AACH,CAFD;;AAIAH,KAAKI,IAAL,CAAUT,QAAQG,IAAR,CAAa,CAAb,CAAV,EAA2B,UAASO,MAAT,EAAgB;AACvC,QAAIA,WAAW,SAAf,EAA0B;AACtBZ,gBAAQC,GAAR,CAAY,0BAAZ;AACAC,gBAAQC,IAAR;AACH,KAHD,MAGO;AACHf,gBAAQ,YAAU;AACd,mBAAOmB,KAAKM,QAAL,CAAc,YAAU;AAC3B,oBAAIC,KAAKC,SAASC,cAAT,CAAwB,kBAAxB,CAAT;;AACA,oBAAIF,MAAMA,GAAGG,SAAH,CAAaC,KAAb,CAAmB,WAAnB,CAAV,EAA2C;AACvC,2BAAO,IAAP;AACH;;AACD,uBAAO,KAAP;AACH,aANM,CAAP;AAOH,SARD,EAQG,YAAU;AACT,gBAAIC,YAAYZ,KAAKM,QAAL,CAAc,YAAU;AACpC,oBAAIC,KAAKC,SAASC,cAAT,CAAwB,kBAAxB,CAAT;;AACA,oBAAI;AACA,2BAAOF,GAAGM,sBAAH,CAA0B,QAA1B,EAAoC,CAApC,EAAuCC,SAA9C;AACH,iBAFD,CAEE,OAAOC,CAAP,EAAU,CAAG;;AACf,uBAAO,KAAP;AACH,aANe,CAAhB;AAOApB,oBAAQC,IAAR,CAAcoB,SAASJ,SAAT,EAAoB,EAApB,IAA0B,CAA3B,GAAgC,CAAhC,GAAoC,CAAjD;AACH,SAjBD;AAkBH;AACJ,CAxBD","file":"packages/zurb:foundation-sites/vendor/modernizr/test/qunit/run-qunit.js.map","sourcesContent":["/**\n* Wait until the test condition is true or a timeout occurs. Useful for waiting\n* on a server response or for a ui change (fadeIn, etc.) to occur.\n*\n* @param testFx javascript condition that evaluates to a boolean,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param onReady what to do when testFx condition is fulfilled,\n* it can be passed in as a string (e.g.: \"1 == 1\" or \"$('#bar').is(':visible')\" or\n* as a callback function.\n* @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.\n*/\nfunction waitFor(testFx, onReady, timeOutMillis) {\n    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001, //< Default Max Timout is 3s\n        start = new Date().getTime(),\n        condition = false,\n        interval = setInterval(function() {\n            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {\n                // If not time-out yet and condition not yet fulfilled\n                condition = (typeof(testFx) === \"string\" ? eval(testFx) : testFx()); //< defensive code\n            } else {\n                if(!condition) {\n                    // If condition still not fulfilled (timeout but condition is 'false')\n                    console.log(\"'waitFor()' timeout\");\n                    phantom.exit(1);\n                } else {\n                    // Condition fulfilled (timeout and/or condition is 'true')\n                    typeof(onReady) === \"string\" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled\n                    clearInterval(interval); //< Stop this interval\n                }\n            }\n        }, 100); //< repeat check every 250ms\n};\n\n\nif (phantom.args.length === 0 || phantom.args.length > 2) {\n    console.log('Usage: run-qunit.js URL');\n    phantom.exit();\n}\n\nvar page = new WebPage();\n\n// Route \"console.log()\" calls from within the Page context to the main Phantom context (i.e. current \"this\")\npage.onConsoleMessage = function(msg) {\n    console.log(msg);\n};\n\npage.open(phantom.args[0], function(status){\n    if (status !== \"success\") {\n        console.log(\"Unable to access network\");\n        phantom.exit();\n    } else {\n        waitFor(function(){\n            return page.evaluate(function(){\n                var el = document.getElementById('qunit-testresult');\n                if (el && el.innerText.match('completed')) {\n                    return true;\n                }\n                return false;\n            });\n        }, function(){\n            var failedNum = page.evaluate(function(){\n                var el = document.getElementById('qunit-testresult');\n                try {\n                    return el.getElementsByClassName('failed')[0].innerHTML;\n                } catch (e) { }\n                return 10000;\n            });\n            phantom.exit((parseInt(failedNum, 10) > 0) ? 1 : 0);\n        });\n    }\n});"]},"hash":"834571faedeb9e924ac21340b2abfc0ee3cda47b"}
