{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js","filenameRelative":"packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js.map","sourceFileName":"packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"keyboard-event-mock"},"ignored":false,"code":"(function (global) {\n  var keyCodes = {\n    'A': 65,\n    'TAB': 9,\n    'ENTER': 13,\n    'ESCAPE': 27,\n    'SPACE': 32,\n    'END': 35,\n    'HOME': 36,\n    'ARROW_LEFT': 37,\n    'ARROW_UP': 38,\n    'ARROW_RIGHT': 39,\n    'ARROW_DOWN': 40\n  }; /**\n      * Creates a dummy event to parse.\n      * Uses jQuery Event class constructor.\n      * @param  {number} keyCode Key code of the key that is simulated.\n      * @param  {object} opts    Options that say if modifiers are pressed.\n      * @return {Event}          Event to use.\n      */\n\n  global.mockKeyboardEvent = mockKeyboardEvent = function (keyCode, opts) {\n    var options = opts || {},\n        isCtrl = !!options.ctrl,\n        isAlt = !!options.alt,\n        isShift = !!options.shift,\n        isMeta = !!options.meta,\n        keyCode = typeof keyCode === 'number' ? keyCode : keyCodes[keyCode],\n        event = {\n      shiftKey: isShift,\n      altKey: isAlt,\n      ctrlKey: isCtrl,\n      metaKey: isMeta,\n      keyCode: keyCode,\n      which: keyCode\n    };\n    return new $.Event('keydown', event);\n  };\n})(window);","map":{"version":3,"sources":["packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js"],"names":["global","keyCodes","mockKeyboardEvent","keyCode","opts","options","isCtrl","ctrl","isAlt","alt","isShift","shift","isMeta","meta","event","shiftKey","altKey","ctrlKey","metaKey","which","$","Event","window"],"mappings":"AAAA,CAAC,UAASA,MAAT,EAAiB;AAChB,MAAIC,WAAW;AACb,SAAK,EADQ;AAEb,WAAO,CAFM;AAGb,aAAS,EAHI;AAIb,cAAU,EAJG;AAKb,aAAS,EALI;AAMb,WAAO,EANM;AAOb,YAAQ,EAPK;AAQb,kBAAc,EARD;AASb,gBAAY,EATC;AAUb,mBAAe,EAVF;AAWb,kBAAc;AAXD,GAAf,CADgB,CAehB;;;;;;;;AAOAD,SAAOE,iBAAP,GAA4BA,oBAAoB,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;AACtE,QAAIC,UAAUD,QAAQ,EAAtB;AAAA,QACIE,SAAS,CAAC,CAACD,QAAQE,IADvB;AAAA,QAEIC,QAAQ,CAAC,CAACH,QAAQI,GAFtB;AAAA,QAGIC,UAAU,CAAC,CAACL,QAAQM,KAHxB;AAAA,QAIIC,SAAS,CAAC,CAACP,QAAQQ,IAJvB;AAAA,QAKIV,UAAU,OAAOA,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCF,SAASE,OAAT,CALtD;AAAA,QAMIW,QAAQ;AACNC,gBAAUL,OADJ;AAENM,cAAQR,KAFF;AAGNS,eAASX,MAHH;AAINY,eAASN,MAJH;AAKNT,eAASA,OALH;AAMNgB,aAAOhB;AAND,KANZ;AAcA,WAAO,IAAIiB,EAAEC,KAAN,CAAY,SAAZ,EAAuBP,KAAvB,CAAP;AACD,GAhBD;AAiBD,CAvCD,EAuCGQ,MAvCH","file":"packages/zurb:foundation-sites/test/javascript/lib/keyboard-event-mock.js.map","sourcesContent":["(function(global) {\n  var keyCodes = {\n    'A': 65,\n    'TAB': 9,\n    'ENTER': 13,\n    'ESCAPE': 27,\n    'SPACE': 32,\n    'END': 35,\n    'HOME': 36,\n    'ARROW_LEFT': 37,\n    'ARROW_UP': 38,\n    'ARROW_RIGHT': 39,\n    'ARROW_DOWN': 40\n  };\n\n  /**\n   * Creates a dummy event to parse.\n   * Uses jQuery Event class constructor.\n   * @param  {number} keyCode Key code of the key that is simulated.\n   * @param  {object} opts    Options that say if modifiers are pressed.\n   * @return {Event}          Event to use.\n   */\n  global.mockKeyboardEvent =  mockKeyboardEvent = function(keyCode, opts) {\n    var options = opts || {},\n        isCtrl = !!options.ctrl,\n        isAlt = !!options.alt,\n        isShift = !!options.shift,\n        isMeta = !!options.meta,\n        keyCode = typeof keyCode === 'number' ? keyCode : keyCodes[keyCode],\n        event = {\n          shiftKey: isShift,\n          altKey: isAlt,\n          ctrlKey: isCtrl,\n          metaKey: isMeta,\n          keyCode: keyCode,\n          which: keyCode\n        };\n    return new $.Event('keydown', event);\n  };\n})(window);"]},"hash":"bce9a1515eb7ad81704e66410ae006115e71fb7d"}
