{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zurb:foundation-sites/bower_components/what-input/what-input.js","filenameRelative":"packages/zurb:foundation-sites/bower_components/what-input/what-input.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zurb:foundation-sites/bower_components/what-input/what-input.js.map","sourceFileName":"packages/zurb:foundation-sites/bower_components/what-input/what-input.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"what-input"},"ignored":false,"code":"window.whatInput = function () {\n  'use strict'; /*\n                  ---------------\n                  variables\n                  ---------------\n                */ // array of actively pressed keys\n\n  var activeKeys = []; // cache document.body\n\n  var body; // boolean: true if touch buffer timer is running\n\n  var buffer = false; // the last used input type\n\n  var currentInput = null; // `input` types that don't accept text\n\n  var nonTypingInputs = ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit']; // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\n  var mouseWheel = detectWheel(); // list of modifier keys commonly used with the mouse and\n  // can be safely ignored to prevent false keyboard detection\n\n  var ignoreMap = [16, // shift\n  17, // control\n  18, // alt\n  91, // Windows key / left Apple cmd\n  93 // Windows menu / right Apple cmd\n  ]; // mapping of events to input types\n\n  var inputMap = {\n    'keydown': 'keyboard',\n    'keyup': 'keyboard',\n    'mousedown': 'mouse',\n    'mousemove': 'mouse',\n    'MSPointerDown': 'pointer',\n    'MSPointerMove': 'pointer',\n    'pointerdown': 'pointer',\n    'pointermove': 'pointer',\n    'touchstart': 'touch'\n  }; // add correct mouse wheel event mapping to `inputMap`\n\n  inputMap[detectWheel()] = 'mouse'; // array of all used input types\n\n  var inputTypes = []; // mapping of key codes to a common name\n\n  var keyMap = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down'\n  }; // map of IE 10 pointer events\n\n  var pointerMap = {\n    2: 'touch',\n    3: 'touch',\n    // treat pen like touch\n    4: 'mouse'\n  }; // touch buffer timer\n\n  var timer; /*\n               ---------------\n               functions\n               ---------------\n             */ // allows events that are also triggered to be filtered out for `touchstart`\n\n  function eventBuffer() {\n    clearTimer();\n    setInput(event);\n    buffer = true;\n    timer = window.setTimeout(function () {\n      buffer = false;\n    }, 650);\n  }\n\n  function bufferedEvent(event) {\n    if (!buffer) setInput(event);\n  }\n\n  function unBufferedEvent(event) {\n    clearTimer();\n    setInput(event);\n  }\n\n  function clearTimer() {\n    window.clearTimeout(timer);\n  }\n\n  function setInput(event) {\n    var eventKey = key(event);\n    var value = inputMap[event.type];\n    if (value === 'pointer') value = pointerType(event); // don't do anything if the value matches the input type already set\n\n    if (currentInput !== value) {\n      var eventTarget = target(event);\n      var eventTargetNode = eventTarget.nodeName.toLowerCase();\n      var eventTargetType = eventTargetNode === 'input' ? eventTarget.getAttribute('type') : null;\n\n      if ( // only if the user flag to allow typing in form fields isn't set\n      !body.hasAttribute('data-whatinput-formtyping') && // only if currentInput has a value\n      currentInput && // only if the input is `keyboard`\n      value === 'keyboard' && // not if the key is `TAB`\n      keyMap[eventKey] !== 'tab' && ( // only if the target is a form input that accepts text\n      eventTargetNode === 'textarea' || eventTargetNode === 'select' || eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0) || // ignore modifier keys\n      ignoreMap.indexOf(eventKey) > -1) {// ignore keyboard typing\n      } else {\n        switchInput(value);\n      }\n    }\n\n    if (value === 'keyboard') logKeys(eventKey);\n  }\n\n  function switchInput(string) {\n    currentInput = string;\n    body.setAttribute('data-whatinput', currentInput);\n    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);\n  }\n\n  function key(event) {\n    return event.keyCode ? event.keyCode : event.which;\n  }\n\n  function target(event) {\n    return event.target || event.srcElement;\n  }\n\n  function pointerType(event) {\n    if (typeof event.pointerType === 'number') {\n      return pointerMap[event.pointerType];\n    } else {\n      return event.pointerType === 'pen' ? 'touch' : event.pointerType; // treat pen like touch\n    }\n  } // keyboard logging\n\n\n  function logKeys(eventKey) {\n    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);\n  }\n\n  function unLogKeys(event) {\n    var eventKey = key(event);\n    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);\n    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);\n  }\n\n  function bindEvents() {\n    body = document.body; // pointer events (mouse, pen, touch)\n\n    if (window.PointerEvent) {\n      body.addEventListener('pointerdown', bufferedEvent);\n      body.addEventListener('pointermove', bufferedEvent);\n    } else if (window.MSPointerEvent) {\n      body.addEventListener('MSPointerDown', bufferedEvent);\n      body.addEventListener('MSPointerMove', bufferedEvent);\n    } else {\n      // mouse events\n      body.addEventListener('mousedown', bufferedEvent);\n      body.addEventListener('mousemove', bufferedEvent); // touch events\n\n      if ('ontouchstart' in window) {\n        body.addEventListener('touchstart', eventBuffer);\n      }\n    } // mouse wheel\n\n\n    body.addEventListener(mouseWheel, bufferedEvent); // keyboard events\n\n    body.addEventListener('keydown', unBufferedEvent);\n    body.addEventListener('keyup', unBufferedEvent);\n    document.addEventListener('keyup', unLogKeys);\n  } /*\n      ---------------\n      utilities\n      ---------------\n    */ // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\n\n  function detectWheel() {\n    return mouseWheel = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support \"wheel\"\n    document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n    'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n  } /*\n      ---------------\n      init\n       don't start script unless browser cuts the mustard,\n      also passes if polyfills are used\n      ---------------\n    */\n\n  if ('addEventListener' in window && Array.prototype.indexOf) {\n    // if the dom is already ready already (script was placed at bottom of <body>)\n    if (document.body) {\n      bindEvents(); // otherwise wait for the dom to load (script was placed in the <head>)\n    } else {\n      document.addEventListener('DOMContentLoaded', bindEvents);\n    }\n  } /*\n      ---------------\n      api\n      ---------------\n    */\n\n  return {\n    // returns string: the current input type\n    ask: function () {\n      return currentInput;\n    },\n    // returns array: currently pressed keys\n    keys: function () {\n      return activeKeys;\n    },\n    // returns array: all the detected input types\n    types: function () {\n      return inputTypes;\n    },\n    // accepts string: manually set the input type\n    set: switchInput\n  };\n}();","map":{"version":3,"sources":["packages/zurb:foundation-sites/bower_components/what-input/what-input.js"],"names":["window","whatInput","activeKeys","body","buffer","currentInput","nonTypingInputs","mouseWheel","detectWheel","ignoreMap","inputMap","inputTypes","keyMap","pointerMap","timer","eventBuffer","clearTimer","setInput","event","setTimeout","bufferedEvent","unBufferedEvent","clearTimeout","eventKey","key","value","type","pointerType","eventTarget","target","eventTargetNode","nodeName","toLowerCase","eventTargetType","getAttribute","hasAttribute","indexOf","switchInput","logKeys","string","setAttribute","push","keyCode","which","srcElement","unLogKeys","arrayPos","splice","bindEvents","document","PointerEvent","addEventListener","MSPointerEvent","createElement","onmousewheel","undefined","Array","prototype","ask","keys","types","set"],"mappings":"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","file":"packages/zurb:foundation-sites/bower_components/what-input/what-input.js.map","sourcesContent":["window.whatInput = (function() {\n\n  'use strict';\n\n  /*\n    ---------------\n    variables\n    ---------------\n  */\n\n  // array of actively pressed keys\n  var activeKeys = [];\n\n  // cache document.body\n  var body;\n\n  // boolean: true if touch buffer timer is running\n  var buffer = false;\n\n  // the last used input type\n  var currentInput = null;\n\n  // `input` types that don't accept text\n  var nonTypingInputs = [\n    'button',\n    'checkbox',\n    'file',\n    'image',\n    'radio',\n    'reset',\n    'submit'\n  ];\n\n  // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n  var mouseWheel = detectWheel();\n\n  // list of modifier keys commonly used with the mouse and\n  // can be safely ignored to prevent false keyboard detection\n  var ignoreMap = [\n    16, // shift\n    17, // control\n    18, // alt\n    91, // Windows key / left Apple cmd\n    93  // Windows menu / right Apple cmd\n  ];\n\n  // mapping of events to input types\n  var inputMap = {\n    'keydown': 'keyboard',\n    'keyup': 'keyboard',\n    'mousedown': 'mouse',\n    'mousemove': 'mouse',\n    'MSPointerDown': 'pointer',\n    'MSPointerMove': 'pointer',\n    'pointerdown': 'pointer',\n    'pointermove': 'pointer',\n    'touchstart': 'touch'\n  };\n\n  // add correct mouse wheel event mapping to `inputMap`\n  inputMap[detectWheel()] = 'mouse';\n\n  // array of all used input types\n  var inputTypes = [];\n\n  // mapping of key codes to a common name\n  var keyMap = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down'\n  };\n\n  // map of IE 10 pointer events\n  var pointerMap = {\n    2: 'touch',\n    3: 'touch', // treat pen like touch\n    4: 'mouse'\n  };\n\n  // touch buffer timer\n  var timer;\n\n\n  /*\n    ---------------\n    functions\n    ---------------\n  */\n\n  // allows events that are also triggered to be filtered out for `touchstart`\n  function eventBuffer() {\n    clearTimer();\n    setInput(event);\n\n    buffer = true;\n    timer = window.setTimeout(function() {\n      buffer = false;\n    }, 650);\n  }\n\n  function bufferedEvent(event) {\n    if (!buffer) setInput(event);\n  }\n\n  function unBufferedEvent(event) {\n    clearTimer();\n    setInput(event);\n  }\n\n  function clearTimer() {\n    window.clearTimeout(timer);\n  }\n\n  function setInput(event) {\n    var eventKey = key(event);\n    var value = inputMap[event.type];\n    if (value === 'pointer') value = pointerType(event);\n\n    // don't do anything if the value matches the input type already set\n    if (currentInput !== value) {\n      var eventTarget = target(event);\n      var eventTargetNode = eventTarget.nodeName.toLowerCase();\n      var eventTargetType = (eventTargetNode === 'input') ? eventTarget.getAttribute('type') : null;\n\n      if (\n        (// only if the user flag to allow typing in form fields isn't set\n        !body.hasAttribute('data-whatinput-formtyping') &&\n\n        // only if currentInput has a value\n        currentInput &&\n\n        // only if the input is `keyboard`\n        value === 'keyboard' &&\n\n        // not if the key is `TAB`\n        keyMap[eventKey] !== 'tab' &&\n\n        // only if the target is a form input that accepts text\n        (\n           eventTargetNode === 'textarea' ||\n           eventTargetNode === 'select' ||\n           (eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0)\n        )) || (\n          // ignore modifier keys\n          ignoreMap.indexOf(eventKey) > -1\n        )\n      ) {\n        // ignore keyboard typing\n      } else {\n        switchInput(value);\n      }\n    }\n\n    if (value === 'keyboard') logKeys(eventKey);\n  }\n\n  function switchInput(string) {\n    currentInput = string;\n    body.setAttribute('data-whatinput', currentInput);\n\n    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);\n  }\n\n  function key(event) {\n    return (event.keyCode) ? event.keyCode : event.which;\n  }\n\n  function target(event) {\n    return event.target || event.srcElement;\n  }\n\n  function pointerType(event) {\n    if (typeof event.pointerType === 'number') {\n      return pointerMap[event.pointerType];\n    } else {\n      return (event.pointerType === 'pen') ? 'touch' : event.pointerType; // treat pen like touch\n    }\n  }\n\n  // keyboard logging\n  function logKeys(eventKey) {\n    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);\n  }\n\n  function unLogKeys(event) {\n    var eventKey = key(event);\n    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);\n\n    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);\n  }\n\n  function bindEvents() {\n    body = document.body;\n\n    // pointer events (mouse, pen, touch)\n    if (window.PointerEvent) {\n      body.addEventListener('pointerdown', bufferedEvent);\n      body.addEventListener('pointermove', bufferedEvent);\n    } else if (window.MSPointerEvent) {\n      body.addEventListener('MSPointerDown', bufferedEvent);\n      body.addEventListener('MSPointerMove', bufferedEvent);\n    } else {\n\n      // mouse events\n      body.addEventListener('mousedown', bufferedEvent);\n      body.addEventListener('mousemove', bufferedEvent);\n\n      // touch events\n      if ('ontouchstart' in window) {\n        body.addEventListener('touchstart', eventBuffer);\n      }\n    }\n\n    // mouse wheel\n    body.addEventListener(mouseWheel, bufferedEvent);\n\n    // keyboard events\n    body.addEventListener('keydown', unBufferedEvent);\n    body.addEventListener('keyup', unBufferedEvent);\n    document.addEventListener('keyup', unLogKeys);\n  }\n\n\n  /*\n    ---------------\n    utilities\n    ---------------\n  */\n\n  // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n  function detectWheel() {\n    return mouseWheel = 'onwheel' in document.createElement('div') ?\n      'wheel' : // Modern browsers support \"wheel\"\n\n      document.onmousewheel !== undefined ?\n        'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n  }\n\n\n  /*\n    ---------------\n    init\n\n    don't start script unless browser cuts the mustard,\n    also passes if polyfills are used\n    ---------------\n  */\n\n  if (\n    'addEventListener' in window &&\n    Array.prototype.indexOf\n  ) {\n\n    // if the dom is already ready already (script was placed at bottom of <body>)\n    if (document.body) {\n      bindEvents();\n\n    // otherwise wait for the dom to load (script was placed in the <head>)\n    } else {\n      document.addEventListener('DOMContentLoaded', bindEvents);\n    }\n  }\n\n\n  /*\n    ---------------\n    api\n    ---------------\n  */\n\n  return {\n\n    // returns string: the current input type\n    ask: function() { return currentInput; },\n\n    // returns array: currently pressed keys\n    keys: function() { return activeKeys; },\n\n    // returns array: all the detected input types\n    types: function() { return inputTypes; },\n\n    // accepts string: manually set the input type\n    set: switchInput\n  };\n\n}());\n"]},"hash":"ecac1c06414a522b630349e6a8e25784bca986f2"}
