//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var meteorInstall = Package.modules.meteorInstall;
var process = Package.modules.process;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var Symbol = Package['ecmascript-runtime-client'].Symbol;
var Map = Package['ecmascript-runtime-client'].Map;
var Set = Package['ecmascript-runtime-client'].Set;

var require = meteorInstall({"node_modules":{"meteor":{"zurb:foundation-sites":{"dist":{"js":{"foundation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/zurb_foundation-sites/dist/js/foundation.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/******/(function (modules) {                                                                                          // 1
  // webpackBootstrap                                                                                                  // 1
  /******/ // The module cache                                                                                         // 2
  /******/var installedModules = {}; /******/ /******/ // The require function                                         // 3
  /******/                                                                                                             // 6
                                                                                                                       //
  function __webpack_require__(moduleId) {                                                                             // 6
    /******/ /******/ // Check if module is in cache                                                                   // 7
    /******/if (installedModules[moduleId]) {                                                                          // 9
      /******/return installedModules[moduleId].exports; /******/                                                      // 10
    } /******/ // Create a new module (and put it into the cache)                                                      // 11
    /******/                                                                                                           // 13
                                                                                                                       //
    var module = installedModules[moduleId] = {                                                                        // 13
      /******/i: moduleId,                                                                                             // 14
      /******/l: false,                                                                                                // 15
      /******/exports: {} /******/                                                                                     // 16
    }; /******/ /******/ // Execute the module function                                                                // 13
    /******/                                                                                                           // 20
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Flag the module as loaded
    /******/                                                                                                           // 23
    module.l = true; /******/ /******/ // Return the exports of the module                                             // 23
    /******/                                                                                                           // 26
    return module.exports; /******/                                                                                    // 26
  } /******/ /******/ /******/ // expose the modules object (__webpack_modules__)                                      // 27
  /******/                                                                                                             // 31
                                                                                                                       //
  __webpack_require__.m = modules; /******/ /******/ // expose the module cache                                        // 31
  /******/                                                                                                             // 34
  __webpack_require__.c = installedModules; /******/ /******/ // identity function for calling harmony imports with the correct context
  /******/                                                                                                             // 37
                                                                                                                       //
  __webpack_require__.i = function (value) {                                                                           // 37
    return value;                                                                                                      // 37
  }; /******/ /******/ // define getter function for harmony exports                                                   // 37
  /******/                                                                                                             // 40
                                                                                                                       //
  __webpack_require__.d = function (exports, name, getter) {                                                           // 40
    /******/if (!__webpack_require__.o(exports, name)) {                                                               // 41
      /******/Object.defineProperty(exports, name, {                                                                   // 42
        /******/configurable: false,                                                                                   // 43
        /******/enumerable: true,                                                                                      // 44
        /******/get: getter /******/                                                                                   // 45
      }); /******/                                                                                                     // 42
    } /******/                                                                                                         // 47
  }; /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules                         // 48
  /******/                                                                                                             // 51
                                                                                                                       //
  __webpack_require__.n = function (module) {                                                                          // 51
    /******/var getter = module && module.__esModule ? /******/function () {                                           // 52
      function getDefault() {                                                                                          // 53
        return module['default'];                                                                                      // 53
      }                                                                                                                // 53
                                                                                                                       //
      return getDefault;                                                                                               // 52
    }() : /******/function () {                                                                                        // 52
      function getModuleExports() {                                                                                    // 54
        return module;                                                                                                 // 54
      }                                                                                                                // 54
                                                                                                                       //
      return getModuleExports;                                                                                         // 52
    }(); /******/                                                                                                      // 52
                                                                                                                       //
    __webpack_require__.d(getter, 'a', getter); /******/                                                               // 55
                                                                                                                       //
    return getter; /******/                                                                                            // 56
  }; /******/ /******/ // Object.prototype.hasOwnProperty.call                                                         // 57
  /******/                                                                                                             // 60
                                                                                                                       //
  __webpack_require__.o = function (object, property) {                                                                // 60
    return Object.prototype.hasOwnProperty.call(object, property);                                                     // 60
  }; /******/ /******/ // __webpack_public_path__                                                                      // 60
  /******/                                                                                                             // 63
                                                                                                                       //
  __webpack_require__.p = ""; /******/ /******/ // Load entry module and return exports                                // 63
  /******/                                                                                                             // 66
  return __webpack_require__(__webpack_require__.s = 36); /******/                                                     // 66
})( /************************************************************************/ /******/[/* 0 */ /***/function (module, exports) {
  module.exports = jQuery; /***/                                                                                       // 73
}, /* 1 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 75
  "use strict"; /* harmony export (binding) */                                                                         // 79
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 80
    return rtl;                                                                                                        // 80
  }); /* harmony export (binding) */                                                                                   // 80
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "b", function () {                                                        // 81
    return GetYoDigits;                                                                                                // 81
  }); /* harmony export (binding) */                                                                                   // 81
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "c", function () {                                                        // 82
    return transitionend;                                                                                              // 82
  }); /* harmony import */                                                                                             // 82
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 83
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); // Core Foundation Utilities, utilized in a number of places.
  /**                                                                                                                  // 91
   * Returns a boolean for RTL support                                                                                 //
   */                                                                                                                  //
                                                                                                                       //
  function rtl() {                                                                                                     // 94
    return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html').attr('dir') === 'rtl';                               // 95
  } /**                                                                                                                // 96
     * returns a random base-36 uid with namespacing                                                                   //
     * @function                                                                                                       //
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.             //
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.                                 //
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.                           //
     * @returns {String} - unique id                                                                                   //
     */                                                                                                                //
                                                                                                                       //
  function GetYoDigits(length, namespace) {                                                                            // 106
    length = length || 6;                                                                                              // 107
    return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
  }                                                                                                                    // 109
                                                                                                                       //
  function transitionend($elem) {                                                                                      // 111
    var transitions = {                                                                                                // 112
      'transition': 'transitionend',                                                                                   // 113
      'WebkitTransition': 'webkitTransitionEnd',                                                                       // 114
      'MozTransition': 'transitionend',                                                                                // 115
      'OTransition': 'otransitionend'                                                                                  // 116
    };                                                                                                                 // 112
    var elem = document.createElement('div'),                                                                          // 118
        end;                                                                                                           // 118
                                                                                                                       //
    for (var t in meteorBabelHelpers.sanitizeForInObject(transitions)) {                                               // 121
      if (typeof elem.style[t] !== 'undefined') {                                                                      // 122
        end = transitions[t];                                                                                          // 123
      }                                                                                                                // 124
    }                                                                                                                  // 125
                                                                                                                       //
    if (end) {                                                                                                         // 126
      return end;                                                                                                      // 127
    } else {                                                                                                           // 128
      end = setTimeout(function () {                                                                                   // 129
        $elem.triggerHandler('transitionend', [$elem]);                                                                // 130
      }, 1);                                                                                                           // 131
      return 'transitionend';                                                                                          // 132
    }                                                                                                                  // 133
  } /***/                                                                                                              // 134
}, /* 2 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 138
  "use strict"; /* harmony export (binding) */                                                                         // 142
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 143
    return Plugin;                                                                                                     // 143
  }); /* harmony import */                                                                                             // 143
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 144
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);                                    // 146
                                                                                                                       //
  var _createClass = function () {                                                                                     // 149
    function defineProperties(target, props) {                                                                         // 149
      for (var i = 0; i < props.length; i++) {                                                                         // 149
        var descriptor = props[i];                                                                                     // 149
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 149
        descriptor.configurable = true;                                                                                // 149
        if ("value" in descriptor) descriptor.writable = true;                                                         // 149
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 149
      }                                                                                                                // 149
    }                                                                                                                  // 149
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 149
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 149
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 149
      return Constructor;                                                                                              // 149
    };                                                                                                                 // 149
  }();                                                                                                                 // 149
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 151
    if (!(instance instanceof Constructor)) {                                                                          // 151
      throw new TypeError("Cannot call a class as a function");                                                        // 151
    }                                                                                                                  // 151
  } // Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST                                 // 151
  // {function} _setup (replaces previous constructor),                                                                // 157
  // {function} _destroy (replaces previous destroy)                                                                   // 158
                                                                                                                       //
                                                                                                                       //
  var Plugin = function () {                                                                                           // 160
    function Plugin(element, options) {                                                                                // 161
      _classCallCheck(this, Plugin);                                                                                   // 162
                                                                                                                       //
      this._setup(element, options);                                                                                   // 164
                                                                                                                       //
      var pluginName = getPluginName(this);                                                                            // 165
      this.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);
                                                                                                                       //
      if (!this.$element.attr('data-' + pluginName)) {                                                                 // 168
        this.$element.attr('data-' + pluginName, this.uuid);                                                           // 169
      }                                                                                                                // 170
                                                                                                                       //
      if (!this.$element.data('zfPlugin')) {                                                                           // 171
        this.$element.data('zfPlugin', this);                                                                          // 172
      } /**                                                                                                            // 173
         * Fires when the plugin has initialized.                                                                      //
         * @event Plugin#init                                                                                          //
         */                                                                                                            //
                                                                                                                       //
      this.$element.trigger('init.zf.' + pluginName);                                                                  // 178
    }                                                                                                                  // 179
                                                                                                                       //
    _createClass(Plugin, [{                                                                                            // 181
      key: 'destroy',                                                                                                  // 182
      value: function () {                                                                                             // 183
        function destroy() {                                                                                           // 183
          this._destroy();                                                                                             // 184
                                                                                                                       //
          var pluginName = getPluginName(this);                                                                        // 185
          this.$element.removeAttr('data-' + pluginName).removeData('zfPlugin') /**                                    // 186
                                                                                 * Fires when the plugin has been destroyed.
                                                                                 * @event Plugin#destroyed             //
                                                                                 */.trigger('destroyed.zf.' + pluginName);
                                                                                                                       //
          for (var prop in meteorBabelHelpers.sanitizeForInObject(this)) {                                             // 192
            this[prop] = null; //clean up script to prep for garbage collection.                                       // 193
          }                                                                                                            // 194
        }                                                                                                              // 195
                                                                                                                       //
        return destroy;                                                                                                // 183
      }()                                                                                                              // 183
    }]);                                                                                                               // 181
                                                                                                                       //
    return Plugin;                                                                                                     // 198
  }(); // Convert PascalCase to kebab-case                                                                             // 199
  // Thank you: http://stackoverflow.com/a/8955580                                                                     // 202
                                                                                                                       //
                                                                                                                       //
  function hyphenate(str) {                                                                                            // 205
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();                                                      // 206
  }                                                                                                                    // 207
                                                                                                                       //
  function getPluginName(obj) {                                                                                        // 209
    if (typeof obj.constructor.name !== 'undefined') {                                                                 // 210
      return hyphenate(obj.constructor.name);                                                                          // 211
    } else {                                                                                                           // 212
      return hyphenate(obj.className);                                                                                 // 213
    }                                                                                                                  // 214
  } /***/                                                                                                              // 215
}, /* 3 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 219
  "use strict"; /* harmony export (binding) */                                                                         // 223
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 224
    return Keyboard;                                                                                                   // 224
  }); /* harmony import */                                                                                             // 224
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 225
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /*******************************************
                                                                                     *                                         *
                                                                                     * This util was created by Marius Olbertz *
                                                                                     * Please thank Marius on GitHub /owlbertz *
                                                                                     * or the web http://www.mariusolbertz.de/ *
                                                                                     *                                         *
                                                                                     ******************************************/
                                                                                                                       //
  var keyCodes = {                                                                                                     // 241
    9: 'TAB',                                                                                                          // 242
    13: 'ENTER',                                                                                                       // 243
    27: 'ESCAPE',                                                                                                      // 244
    32: 'SPACE',                                                                                                       // 245
    35: 'END',                                                                                                         // 246
    36: 'HOME',                                                                                                        // 247
    37: 'ARROW_LEFT',                                                                                                  // 248
    38: 'ARROW_UP',                                                                                                    // 249
    39: 'ARROW_RIGHT',                                                                                                 // 250
    40: 'ARROW_DOWN'                                                                                                   // 251
  };                                                                                                                   // 241
  var commands = {}; // Functions pulled out to be referenceable from internals                                        // 254
                                                                                                                       //
  function findFocusable($element) {                                                                                   // 257
    if (!$element) {                                                                                                   // 258
      return false;                                                                                                    // 259
    }                                                                                                                  // 260
                                                                                                                       //
    return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
      if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':visible') || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('tabindex') < 0) {
        return false;                                                                                                  // 263
      } //only have visible elements and those that have a tabindex greater or equal 0                                 // 264
                                                                                                                       //
                                                                                                                       //
      return true;                                                                                                     // 265
    });                                                                                                                // 266
  }                                                                                                                    // 267
                                                                                                                       //
  function parseKey(event) {                                                                                           // 269
    var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase(); // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
                                                                                                                       //
    key = key.replace(/\W+/, '');                                                                                      // 273
    if (event.shiftKey) key = 'SHIFT_' + key;                                                                          // 275
    if (event.ctrlKey) key = 'CTRL_' + key;                                                                            // 276
    if (event.altKey) key = 'ALT_' + key; // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
                                                                                                                       //
    key = key.replace(/_$/, '');                                                                                       // 280
    return key;                                                                                                        // 282
  }                                                                                                                    // 283
                                                                                                                       //
  var Keyboard = {                                                                                                     // 285
    keys: getKeyCodes(keyCodes),                                                                                       // 286
    /**                                                                                                                // 288
     * Parses the (keyboard) event and returns a String that represents its key                                        //
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                           //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @return String key - String that represents the key pressed                                                     //
     */parseKey: parseKey,                                                                                             //
    /**                                                                                                                // 296
     * Handles the given (keyboard) event                                                                              //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal                                  //
     * @param {Objects} functions - collection of functions that are to be executed                                    //
     */handleKey: function (event, component, functions) {                                                             //
      var commandList = commands[component],                                                                           // 303
          keyCode = this.parseKey(event),                                                                              // 303
          cmds,                                                                                                        // 303
          command,                                                                                                     // 303
          fn;                                                                                                          // 303
      if (!commandList) return console.warn('Component not defined!');                                                 // 309
                                                                                                                       //
      if (typeof commandList.ltr === 'undefined') {                                                                    // 311
        // this component does not differentiate between ltr and rtl                                                   // 312
        cmds = commandList; // use plain list                                                                          // 313
      } else {                                                                                                         // 314
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa                                    // 315
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["a" /* rtl */])()) cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.ltr, commandList.rtl);else cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.rtl, commandList.ltr);
      }                                                                                                                // 317
                                                                                                                       //
      command = cmds[keyCode];                                                                                         // 318
      fn = functions[command];                                                                                         // 320
                                                                                                                       //
      if (fn && typeof fn === 'function') {                                                                            // 321
        // execute function  if exists                                                                                 // 322
        var returnValue = fn.apply();                                                                                  // 323
                                                                                                                       //
        if (functions.handled || typeof functions.handled === 'function') {                                            // 324
          // execute function when event was handled                                                                   // 325
          functions.handled(returnValue);                                                                              // 326
        }                                                                                                              // 327
      } else {                                                                                                         // 328
        if (functions.unhandled || typeof functions.unhandled === 'function') {                                        // 329
          // execute function when event was not handled                                                               // 330
          functions.unhandled();                                                                                       // 331
        }                                                                                                              // 332
      }                                                                                                                // 333
    },                                                                                                                 // 334
    /**                                                                                                                // 337
     * Finds all focusable elements within the given `$element`                                                        //
     * @param {jQuery} $element - jQuery object to search within                                                       //
     * @return {jQuery} $focusable - all focusable elements within `$element`                                          //
     */findFocusable: findFocusable,                                                                                   //
    /**                                                                                                                // 345
     * Returns the component name name                                                                                 //
     * @param {Object} component - Foundation component, e.g. Slider or Reveal                                         //
     * @return String componentName                                                                                    //
     */register: function (componentName, cmds) {                                                                      //
      commands[componentName] = cmds;                                                                                  // 352
    },                                                                                                                 // 353
    // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?            // 356
    //                                                                                                                 // 357
    /**                                                                                                                // 358
     * Traps the focus in the given element.                                                                           //
     * @param  {jQuery} $element  jQuery object to trap the foucs into.                                                //
     */trapFocus: function ($element) {                                                                                //
      var $focusable = findFocusable($element),                                                                        // 363
          $firstFocusable = $focusable.eq(0),                                                                          // 363
          $lastFocusable = $focusable.eq(-1);                                                                          // 363
      $element.on('keydown.zf.trapfocus', function (event) {                                                           // 367
        if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {                                         // 368
          event.preventDefault();                                                                                      // 369
          $firstFocusable.focus();                                                                                     // 370
        } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {                           // 371
          event.preventDefault();                                                                                      // 372
          $lastFocusable.focus();                                                                                      // 373
        }                                                                                                              // 374
      });                                                                                                              // 375
    },                                                                                                                 // 376
    /**                                                                                                                // 378
     * Releases the trapped focus from the given element.                                                              //
     * @param  {jQuery} $element  jQuery object to release the focus for.                                              //
     */releaseFocus: function ($element) {                                                                             //
      $element.off('keydown.zf.trapfocus');                                                                            // 383
    }                                                                                                                  // 384
  }; /*                                                                                                                // 285
      * Constants for easier comparing.                                                                                //
      * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                          //
      */                                                                                                               //
                                                                                                                       //
  function getKeyCodes(kcs) {                                                                                          // 391
    var k = {};                                                                                                        // 392
                                                                                                                       //
    for (var kc in meteorBabelHelpers.sanitizeForInObject(kcs)) {                                                      // 393
      k[kcs[kc]] = kcs[kc];                                                                                            // 394
    }                                                                                                                  // 395
                                                                                                                       //
    return k;                                                                                                          // 395
  } /***/                                                                                                              // 396
}, /* 4 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 400
  "use strict"; /* harmony export (binding) */                                                                         // 404
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 405
    return MediaQuery;                                                                                                 // 405
  }); /* harmony import */                                                                                             // 405
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 406
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); // Default set of media queries
                                                                                                                       //
                                                                                                                       //
  var defaultQueries = {                                                                                               // 413
    'default': 'only screen',                                                                                          // 414
    landscape: 'only screen and (orientation: landscape)',                                                             // 415
    portrait: 'only screen and (orientation: portrait)',                                                               // 416
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  }; // matchMedia() polyfill - Test a CSS media type/query in JS.                                                     // 413
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license          // 421
                                                                                                                       //
  var matchMedia = window.matchMedia || function () {                                                                  // 422
    'use strict'; // For browsers that support matchMedium api such as IE 9 and webkit                                 // 423
                                                                                                                       //
    var styleMedia = window.styleMedia || window.media; // For those that don't support matchMedium                    // 427
                                                                                                                       //
    if (!styleMedia) {                                                                                                 // 430
      var style = document.createElement('style'),                                                                     // 431
          script = document.getElementsByTagName('script')[0],                                                         // 431
          info = null;                                                                                                 // 431
      style.type = 'text/css';                                                                                         // 435
      style.id = 'matchmediajs-test';                                                                                  // 436
      script && script.parentNode && script.parentNode.insertBefore(style, script); // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
                                                                                                                       //
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;               // 441
      styleMedia = {                                                                                                   // 443
        matchMedium: function (media) {                                                                                // 444
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }'; // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                                                                                                                       //
          if (style.styleSheet) {                                                                                      // 448
            style.styleSheet.cssText = text;                                                                           // 449
          } else {                                                                                                     // 450
            style.textContent = text;                                                                                  // 451
          } // Test if media query is true or false                                                                    // 452
                                                                                                                       //
                                                                                                                       //
          return info.width === '1px';                                                                                 // 455
        }                                                                                                              // 456
      };                                                                                                               // 443
    }                                                                                                                  // 458
                                                                                                                       //
    return function (media) {                                                                                          // 460
      return {                                                                                                         // 461
        matches: styleMedia.matchMedium(media || 'all'),                                                               // 462
        media: media || 'all'                                                                                          // 463
      };                                                                                                               // 461
    };                                                                                                                 // 465
  }();                                                                                                                 // 466
                                                                                                                       //
  var MediaQuery = {                                                                                                   // 468
    queries: [],                                                                                                       // 469
    current: '',                                                                                                       // 471
    /**                                                                                                                // 473
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */_init: function () {                                                                                            //
      var self = this;                                                                                                 // 479
                                                                                                                       //
      var $meta = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');                                // 480
                                                                                                                       //
      if (!$meta.length) {                                                                                             // 481
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class="foundation-mq">').appendTo(document.head);        // 482
      }                                                                                                                // 483
                                                                                                                       //
      var extractedStyles = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');       // 485
                                                                                                                       //
      var namedQueries;                                                                                                // 486
      namedQueries = parseStyleToObject(extractedStyles);                                                              // 488
                                                                                                                       //
      for (var key in meteorBabelHelpers.sanitizeForInObject(namedQueries)) {                                          // 490
        if (namedQueries.hasOwnProperty(key)) {                                                                        // 491
          self.queries.push({                                                                                          // 492
            name: key,                                                                                                 // 493
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'                                            // 494
          });                                                                                                          // 492
        }                                                                                                              // 496
      }                                                                                                                // 497
                                                                                                                       //
      this.current = this._getCurrentSize();                                                                           // 499
                                                                                                                       //
      this._watcher();                                                                                                 // 501
    },                                                                                                                 // 502
    /**                                                                                                                // 505
     * Checks if the screen is at least as wide as a breakpoint.                                                       //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to check.                                                         //
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.                                   //
     */atLeast: function (size) {                                                                                      //
      var query = this.get(size);                                                                                      // 512
                                                                                                                       //
      if (query) {                                                                                                     // 514
        return matchMedia(query).matches;                                                                              // 515
      }                                                                                                                // 516
                                                                                                                       //
      return false;                                                                                                    // 518
    },                                                                                                                 // 519
    /**                                                                                                                // 522
     * Checks if the screen matches to a breakpoint.                                                                   //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.                                    //
     */is: function (size) {                                                                                           //
      size = size.trim().split(' ');                                                                                   // 529
                                                                                                                       //
      if (size.length > 1 && size[1] === 'only') {                                                                     // 530
        if (size[0] === this._getCurrentSize()) return true;                                                           // 531
      } else {                                                                                                         // 532
        return this.atLeast(size[0]);                                                                                  // 533
      }                                                                                                                // 534
                                                                                                                       //
      return false;                                                                                                    // 535
    },                                                                                                                 // 536
    /**                                                                                                                // 539
     * Gets the media query of a breakpoint.                                                                           //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to get.                                                           //
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.          //
     */get: function (size) {                                                                                          //
      for (var i in meteorBabelHelpers.sanitizeForInObject(this.queries)) {                                            // 546
        if (this.queries.hasOwnProperty(i)) {                                                                          // 547
          var query = this.queries[i];                                                                                 // 548
          if (size === query.name) return query.value;                                                                 // 549
        }                                                                                                              // 550
      }                                                                                                                // 551
                                                                                                                       //
      return null;                                                                                                     // 553
    },                                                                                                                 // 554
    /**                                                                                                                // 557
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function                                                                                                       //
     * @private                                                                                                        //
     * @returns {String} Name of the current breakpoint.                                                               //
     */_getCurrentSize: function () {                                                                                  //
      var matched;                                                                                                     // 564
                                                                                                                       //
      for (var i = 0; i < this.queries.length; i++) {                                                                  // 566
        var query = this.queries[i];                                                                                   // 567
                                                                                                                       //
        if (matchMedia(query.value).matches) {                                                                         // 569
          matched = query;                                                                                             // 570
        }                                                                                                              // 571
      }                                                                                                                // 572
                                                                                                                       //
      if ((typeof matched === "undefined" ? "undefined" : (0, _typeof3.default)(matched)) === 'object') {              // 574
        return matched.name;                                                                                           // 575
      } else {                                                                                                         // 576
        return matched;                                                                                                // 577
      }                                                                                                                // 578
    },                                                                                                                 // 579
    /**                                                                                                                // 582
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.           //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */_watcher: function () {                                                                                         //
      var _this = this;                                                                                                // 588
                                                                                                                       //
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),                                                                         // 591
            currentSize = _this.current;                                                                               // 591
                                                                                                                       //
        if (newSize !== currentSize) {                                                                                 // 594
          // Change the current media query                                                                            // 595
          _this.current = newSize; // Broadcast the media query change on the window                                   // 596
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }                                                                                                              // 600
      });                                                                                                              // 601
    }                                                                                                                  // 602
  }; // Thank you: https://github.com/sindresorhus/query-string                                                        // 468
                                                                                                                       //
  function parseStyleToObject(str) {                                                                                   // 606
    var styleObject = {};                                                                                              // 607
                                                                                                                       //
    if (typeof str !== 'string') {                                                                                     // 609
      return styleObject;                                                                                              // 610
    }                                                                                                                  // 611
                                                                                                                       //
    str = str.trim().slice(1, -1); // browsers re-quote string style values                                            // 613
                                                                                                                       //
    if (!str) {                                                                                                        // 615
      return styleObject;                                                                                              // 616
    }                                                                                                                  // 617
                                                                                                                       //
    styleObject = str.split('&').reduce(function (ret, param) {                                                        // 619
      var parts = param.replace(/\+/g, ' ').split('=');                                                                // 620
      var key = parts[0];                                                                                              // 621
      var val = parts[1];                                                                                              // 622
      key = decodeURIComponent(key); // missing `=` should be `null`:                                                  // 623
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters                                                 // 626
                                                                                                                       //
      val = val === undefined ? null : decodeURIComponent(val);                                                        // 627
                                                                                                                       //
      if (!ret.hasOwnProperty(key)) {                                                                                  // 629
        ret[key] = val;                                                                                                // 630
      } else if (Array.isArray(ret[key])) {                                                                            // 631
        ret[key].push(val);                                                                                            // 632
      } else {                                                                                                         // 633
        ret[key] = [ret[key], val];                                                                                    // 634
      }                                                                                                                // 635
                                                                                                                       //
      return ret;                                                                                                      // 636
    }, {});                                                                                                            // 637
    return styleObject;                                                                                                // 639
  } /***/                                                                                                              // 640
}, /* 5 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 644
  "use strict"; /* harmony export (binding) */                                                                         // 648
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 649
    return Triggers;                                                                                                   // 649
  }); /* harmony import */                                                                                             // 649
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 650
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(6);                                  // 652
                                                                                                                       //
  var MutationObserver = function () {                                                                                 // 658
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];                                                                   // 659
                                                                                                                       //
    for (var i = 0; i < prefixes.length; i++) {                                                                        // 660
      if (prefixes[i] + 'MutationObserver' in window) {                                                                // 661
        return window[prefixes[i] + 'MutationObserver'];                                                               // 662
      }                                                                                                                // 663
    }                                                                                                                  // 664
                                                                                                                       //
    return false;                                                                                                      // 665
  }();                                                                                                                 // 666
                                                                                                                       //
  var triggers = function (el, type) {                                                                                 // 668
    el.data(type).split(' ').forEach(function (id) {                                                                   // 669
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
    });                                                                                                                // 671
  };                                                                                                                   // 672
                                                                                                                       //
  var Triggers = {                                                                                                     // 674
    Listeners: {                                                                                                       // 675
      Basic: {},                                                                                                       // 676
      Global: {}                                                                                                       // 677
    },                                                                                                                 // 675
    Initializers: {}                                                                                                   // 679
  };                                                                                                                   // 674
  Triggers.Listeners.Basic = {                                                                                         // 682
    openListener: function () {                                                                                        // 683
      triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');                                          // 684
    },                                                                                                                 // 685
    closeListener: function () {                                                                                       // 686
      var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');                                     // 687
                                                                                                                       //
      if (id) {                                                                                                        // 688
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');                                       // 689
      } else {                                                                                                         // 690
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');                              // 691
      }                                                                                                                // 692
    },                                                                                                                 // 693
    toggleListener: function () {                                                                                      // 694
      var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');                                    // 695
                                                                                                                       //
      if (id) {                                                                                                        // 696
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');                                      // 697
      } else {                                                                                                         // 698
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');                             // 699
      }                                                                                                                // 700
    },                                                                                                                 // 701
    closeableListener: function (e) {                                                                                  // 702
      e.stopPropagation();                                                                                             // 703
                                                                                                                       //
      var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');                           // 704
                                                                                                                       //
      if (animation !== '') {                                                                                          // 706
        __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["a" /* Motion */].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');                                   // 708
        });                                                                                                            // 709
      } else {                                                                                                         // 710
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');                           // 711
      }                                                                                                                // 712
    },                                                                                                                 // 713
    toggleFocusListener: function () {                                                                                 // 714
      var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');                              // 715
                                                                                                                       //
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
    }                                                                                                                  // 717
  }; // Elements with [data-open] will reveal a plugin that supports it when clicked.                                  // 682
                                                                                                                       //
  Triggers.Initializers.addOpenListener = function ($elem) {                                                           // 721
    $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);                                              // 722
    $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);                                // 723
  }; // Elements with [data-close] will close a plugin that supports it when clicked.                                  // 724
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.          // 727
                                                                                                                       //
                                                                                                                       //
  Triggers.Initializers.addCloseListener = function ($elem) {                                                          // 728
    $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);                                             // 729
    $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);                              // 730
  }; // Elements with [data-toggle] will toggle a plugin that supports it when clicked.                                // 731
                                                                                                                       //
                                                                                                                       //
  Triggers.Initializers.addToggleListener = function ($elem) {                                                         // 734
    $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);                                            // 735
    $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);                            // 736
  }; // Elements with [data-closable] will respond to close.zf.trigger events.                                         // 737
                                                                                                                       //
                                                                                                                       //
  Triggers.Initializers.addCloseableListener = function ($elem) {                                                      // 740
    $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);                                         // 741
    $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);     // 742
  }; // Elements with [data-toggle-focus] will respond to coming in and out of focus                                   // 743
                                                                                                                       //
                                                                                                                       //
  Triggers.Initializers.addToggleFocusListener = function ($elem) {                                                    // 746
    $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);                       // 747
    $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
  }; // More Global/complex listeners and triggers                                                                     // 749
                                                                                                                       //
                                                                                                                       //
  Triggers.Listeners.Global = {                                                                                        // 752
    resizeListener: function ($nodes) {                                                                                // 753
      if (!MutationObserver) {                                                                                         // 754
        //fallback for IE 9                                                                                            // 755
        $nodes.each(function () {                                                                                      // 756
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');                  // 757
        });                                                                                                            // 758
      } //trigger all listening elements and signal a resize event                                                     // 759
                                                                                                                       //
                                                                                                                       //
      $nodes.attr('data-events', "resize");                                                                            // 761
    },                                                                                                                 // 762
    scrollListener: function ($nodes) {                                                                                // 763
      if (!MutationObserver) {                                                                                         // 764
        //fallback for IE 9                                                                                            // 765
        $nodes.each(function () {                                                                                      // 766
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');                  // 767
        });                                                                                                            // 768
      } //trigger all listening elements and signal a scroll event                                                     // 769
                                                                                                                       //
                                                                                                                       //
      $nodes.attr('data-events', "scroll");                                                                            // 771
    },                                                                                                                 // 772
    closeMeListener: function (e, pluginId) {                                                                          // 773
      var plugin = e.namespace.split('.')[0];                                                                          // 774
                                                                                                                       //
      var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');
                                                                                                                       //
      plugins.each(function () {                                                                                       // 777
        var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);                                              // 778
                                                                                                                       //
        _this.triggerHandler('close.zf.trigger', [_this]);                                                             // 779
      });                                                                                                              // 780
    }                                                                                                                  // 781
  }; // Global, parses whole document.                                                                                 // 752
                                                                                                                       //
  Triggers.Initializers.addClosemeListener = function (pluginName) {                                                   // 785
    var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),                                 // 786
        plugNames = ['dropdown', 'tooltip', 'reveal'];                                                                 // 786
                                                                                                                       //
    if (pluginName) {                                                                                                  // 789
      if (typeof pluginName === 'string') {                                                                            // 790
        plugNames.push(pluginName);                                                                                    // 791
      } else if ((typeof pluginName === "undefined" ? "undefined" : (0, _typeof3.default)(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);                                                                                  // 793
      } else {                                                                                                         // 794
        console.error('Plugin names must be strings');                                                                 // 795
      }                                                                                                                // 796
    }                                                                                                                  // 797
                                                                                                                       //
    if (yetiBoxes.length) {                                                                                            // 798
      var listeners = plugNames.map(function (name) {                                                                  // 799
        return 'closeme.zf.' + name;                                                                                   // 800
      }).join(' ');                                                                                                    // 801
                                                                                                                       //
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
    }                                                                                                                  // 804
  };                                                                                                                   // 805
                                                                                                                       //
  function debounceGlobalListener(debounce, trigger, listener) {                                                       // 807
    var timer = void 0,                                                                                                // 808
        args = Array.prototype.slice.call(arguments, 3);                                                               // 808
                                                                                                                       //
    __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {                     // 810
      if (timer) {                                                                                                     // 811
        clearTimeout(timer);                                                                                           // 812
      }                                                                                                                // 813
                                                                                                                       //
      timer = setTimeout(function () {                                                                                 // 814
        listener.apply(null, args);                                                                                    // 815
      }, debounce || 10); //default time to emit scroll event                                                          // 816
    });                                                                                                                // 817
  }                                                                                                                    // 818
                                                                                                                       //
  Triggers.Initializers.addResizeListener = function (debounce) {                                                      // 820
    var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');                                      // 821
                                                                                                                       //
    if ($nodes.length) {                                                                                               // 822
      debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);         // 823
    }                                                                                                                  // 824
  };                                                                                                                   // 825
                                                                                                                       //
  Triggers.Initializers.addScrollListener = function (debounce) {                                                      // 827
    var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');                                      // 828
                                                                                                                       //
    if ($nodes.length) {                                                                                               // 829
      debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);         // 830
    }                                                                                                                  // 831
  };                                                                                                                   // 832
                                                                                                                       //
  Triggers.Initializers.addMutationEventsListener = function ($elem) {                                                 // 834
    if (!MutationObserver) {                                                                                           // 835
      return false;                                                                                                    // 836
    }                                                                                                                  // 837
                                                                                                                       //
    var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]'); //element callback                         // 838
                                                                                                                       //
    var listeningElementsMutation = function (mutationRecordsList) {                                                   // 841
      var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target); //trigger the event handler for the element depending on type
                                                                                                                       //
                                                                                                                       //
      switch (mutationRecordsList[0].type) {                                                                           // 845
        case "attributes":                                                                                             // 846
          if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {    // 847
            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);                              // 848
          }                                                                                                            // 849
                                                                                                                       //
          if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {    // 850
            $target.triggerHandler('resizeme.zf.trigger', [$target]);                                                  // 851
          }                                                                                                            // 852
                                                                                                                       //
          if (mutationRecordsList[0].attributeName === "style") {                                                      // 853
            $target.closest("[data-mutate]").attr("data-events", "mutate");                                            // 854
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          }                                                                                                            // 856
                                                                                                                       //
          break;                                                                                                       // 857
                                                                                                                       //
        case "childList":                                                                                              // 859
          $target.closest("[data-mutate]").attr("data-events", "mutate");                                              // 860
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);  // 861
          break;                                                                                                       // 862
                                                                                                                       //
        default:                                                                                                       // 864
          return false;                                                                                                // 865
        //nothing                                                                                                      // 866
      }                                                                                                                // 845
    };                                                                                                                 // 868
                                                                                                                       //
    if ($nodes.length) {                                                                                               // 870
      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer               // 871
      for (var i = 0; i <= $nodes.length - 1; i++) {                                                                   // 872
        var elementObserver = new MutationObserver(listeningElementsMutation);                                         // 873
        elementObserver.observe($nodes[i], {                                                                           // 874
          attributes: true,                                                                                            // 874
          childList: true,                                                                                             // 874
          characterData: false,                                                                                        // 874
          subtree: true,                                                                                               // 874
          attributeFilter: ["data-events", "style"]                                                                    // 874
        });                                                                                                            // 874
      }                                                                                                                // 875
    }                                                                                                                  // 876
  };                                                                                                                   // 877
                                                                                                                       //
  Triggers.Initializers.addSimpleListeners = function () {                                                             // 879
    var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);                                          // 880
                                                                                                                       //
    Triggers.Initializers.addOpenListener($document);                                                                  // 882
    Triggers.Initializers.addCloseListener($document);                                                                 // 883
    Triggers.Initializers.addToggleListener($document);                                                                // 884
    Triggers.Initializers.addCloseableListener($document);                                                             // 885
    Triggers.Initializers.addToggleFocusListener($document);                                                           // 886
  };                                                                                                                   // 887
                                                                                                                       //
  Triggers.Initializers.addGlobalListeners = function () {                                                             // 889
    var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);                                          // 890
                                                                                                                       //
    Triggers.Initializers.addMutationEventsListener($document);                                                        // 891
    Triggers.Initializers.addResizeListener();                                                                         // 892
    Triggers.Initializers.addScrollListener();                                                                         // 893
    Triggers.Initializers.addClosemeListener();                                                                        // 894
  };                                                                                                                   // 895
                                                                                                                       //
  Triggers.init = function ($, Foundation) {                                                                           // 897
    if (typeof $.triggersInitialized === 'undefined') {                                                                // 898
      var $document = $(document);                                                                                     // 899
                                                                                                                       //
      if (document.readyState === "complete") {                                                                        // 901
        Triggers.Initializers.addSimpleListeners();                                                                    // 902
        Triggers.Initializers.addGlobalListeners();                                                                    // 903
      } else {                                                                                                         // 904
        $(window).on('load', function () {                                                                             // 905
          Triggers.Initializers.addSimpleListeners();                                                                  // 906
          Triggers.Initializers.addGlobalListeners();                                                                  // 907
        });                                                                                                            // 908
      }                                                                                                                // 909
                                                                                                                       //
      $.triggersInitialized = true;                                                                                    // 911
    }                                                                                                                  // 912
                                                                                                                       //
    if (Foundation) {                                                                                                  // 914
      Foundation.Triggers = Triggers; // Legacy included to be backwards compatible for now.                           // 915
                                                                                                                       //
      Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;                                                  // 917
    }                                                                                                                  // 918
  }; /***/                                                                                                             // 919
}, /* 6 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 923
  "use strict"; /* harmony export (binding) */                                                                         // 927
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "b", function () {                                                        // 928
    return Move;                                                                                                       // 928
  }); /* harmony export (binding) */                                                                                   // 928
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 929
    return Motion;                                                                                                     // 929
  }); /* harmony import */                                                                                             // 929
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 930
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /**                                // 932
                                                                                     * Motion module.                  //
                                                                                     * @module foundation.motion       //
                                                                                     */                                //
                                                                                                                       //
  var initClasses = ['mui-enter', 'mui-leave'];                                                                        // 943
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];                                                        // 944
  var Motion = {                                                                                                       // 946
    animateIn: function (element, animation, cb) {                                                                     // 947
      animate(true, element, animation, cb);                                                                           // 948
    },                                                                                                                 // 949
    animateOut: function (element, animation, cb) {                                                                    // 951
      animate(false, element, animation, cb);                                                                          // 952
    }                                                                                                                  // 953
  };                                                                                                                   // 946
                                                                                                                       //
  function Move(duration, elem, fn) {                                                                                  // 956
    var anim,                                                                                                          // 957
        prog,                                                                                                          // 957
        start = null; // console.log('called');                                                                        // 957
                                                                                                                       //
    if (duration === 0) {                                                                                              // 962
      fn.apply(elem);                                                                                                  // 963
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);                       // 964
      return;                                                                                                          // 965
    }                                                                                                                  // 966
                                                                                                                       //
    function move(ts) {                                                                                                // 968
      if (!start) start = ts; // console.log(start, ts);                                                               // 969
                                                                                                                       //
      prog = ts - start;                                                                                               // 971
      fn.apply(elem);                                                                                                  // 972
                                                                                                                       //
      if (prog < duration) {                                                                                           // 974
        anim = window.requestAnimationFrame(move, elem);                                                               // 975
      } else {                                                                                                         // 976
        window.cancelAnimationFrame(anim);                                                                             // 977
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);                     // 978
      }                                                                                                                // 979
    }                                                                                                                  // 980
                                                                                                                       //
    anim = window.requestAnimationFrame(move);                                                                         // 981
  } /**                                                                                                                // 982
     * Animates an element in or out using a CSS transition class.                                                     //
     * @function                                                                                                       //
     * @private                                                                                                        //
     * @param {Boolean} isIn - Defines if the animation is in or out.                                                  //
     * @param {Object} element - jQuery or HTML object to animate.                                                     //
     * @param {String} animation - CSS class to use.                                                                   //
     * @param {Function} cb - Callback to run when animation is finished.                                              //
     */                                                                                                                //
                                                                                                                       //
  function animate(isIn, element, animation, cb) {                                                                     // 993
    element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element).eq(0);                                           // 994
    if (!element.length) return;                                                                                       // 996
    var initClass = isIn ? initClasses[0] : initClasses[1];                                                            // 998
    var activeClass = isIn ? activeClasses[0] : activeClasses[1]; // Set up the animation                              // 999
                                                                                                                       //
    reset();                                                                                                           // 1002
    element.addClass(animation).css('transition', 'none');                                                             // 1004
    requestAnimationFrame(function () {                                                                                // 1006
      element.addClass(initClass);                                                                                     // 1007
      if (isIn) element.show();                                                                                        // 1008
    }); // Start the animation                                                                                         // 1009
                                                                                                                       //
    requestAnimationFrame(function () {                                                                                // 1012
      element[0].offsetWidth;                                                                                          // 1013
      element.css('transition', '').addClass(activeClass);                                                             // 1014
    }); // Clean up the animation when it finishes                                                                     // 1015
                                                                                                                       //
    element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["c" /* transitionend */])(element), finish); // Hides the element (for out animations), resets the element, and runs a callback
                                                                                                                       //
    function finish() {                                                                                                // 1021
      if (!isIn) element.hide();                                                                                       // 1022
      reset();                                                                                                         // 1023
      if (cb) cb.apply(element);                                                                                       // 1024
    } // Resets transitions and removes motion-specific classes                                                        // 1025
                                                                                                                       //
                                                                                                                       //
    function reset() {                                                                                                 // 1028
      element[0].style.transitionDuration = 0;                                                                         // 1029
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);                                            // 1030
    }                                                                                                                  // 1031
  } /***/                                                                                                              // 1032
}, /* 7 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 1036
  "use strict"; /* harmony export (binding) */                                                                         // 1040
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1041
    return Box;                                                                                                        // 1041
  }); /* harmony import */                                                                                             // 1041
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core__ = __webpack_require__(1);                                    // 1042
                                                                                                                       //
  var Box = {                                                                                                          // 1047
    ImNotTouchingYou: ImNotTouchingYou,                                                                                // 1048
    OverlapArea: OverlapArea,                                                                                          // 1049
    GetDimensions: GetDimensions,                                                                                      // 1050
    GetOffsets: GetOffsets,                                                                                            // 1051
    GetExplicitOffsets: GetExplicitOffsets                                                                             // 1052
  }; /**                                                                                                               // 1047
      * Compares the dimensions of an element to a container and determines collision events with container.           //
      * @function                                                                                                      //
      * @param {jQuery} element - jQuery object to test for collisions.                                                //
      * @param {jQuery} parent - jQuery object to use as bounding container.                                           //
      * @param {Boolean} lrOnly - set to true to check left and right values only.                                     //
      * @param {Boolean} tbOnly - set to true to check top and bottom values only.                                     //
      * @default if no parent object passed, detects collisions with `window`.                                         //
      * @returns {Boolean} - true if collision free, false if a collision in any direction.                            //
      */                                                                                                               //
                                                                                                                       //
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {                                           // 1065
    return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;                                           // 1066
  }                                                                                                                    // 1067
                                                                                                                       //
  ;                                                                                                                    // 1067
                                                                                                                       //
  function OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {                                                // 1069
    var eleDims = GetDimensions(element),                                                                              // 1070
        topOver,                                                                                                       // 1070
        bottomOver,                                                                                                    // 1070
        leftOver,                                                                                                      // 1070
        rightOver;                                                                                                     // 1070
                                                                                                                       //
    if (parent) {                                                                                                      // 1075
      var parDims = GetDimensions(parent);                                                                             // 1076
      bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);                        // 1078
      topOver = eleDims.offset.top - parDims.offset.top;                                                               // 1079
      leftOver = eleDims.offset.left - parDims.offset.left;                                                            // 1080
      rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);                         // 1081
    } else {                                                                                                           // 1082
      bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);  // 1083
      topOver = eleDims.offset.top - eleDims.windowDims.offset.top;                                                    // 1084
      leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;                                                 // 1085
      rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);                                    // 1086
    }                                                                                                                  // 1087
                                                                                                                       //
    bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);                                                           // 1089
    topOver = Math.min(topOver, 0);                                                                                    // 1090
    leftOver = Math.min(leftOver, 0);                                                                                  // 1091
    rightOver = Math.min(rightOver, 0);                                                                                // 1092
                                                                                                                       //
    if (lrOnly) {                                                                                                      // 1094
      return leftOver + rightOver;                                                                                     // 1095
    }                                                                                                                  // 1096
                                                                                                                       //
    if (tbOnly) {                                                                                                      // 1097
      return topOver + bottomOver;                                                                                     // 1098
    } // use sum of squares b/c we care about overlap area.                                                            // 1099
                                                                                                                       //
                                                                                                                       //
    return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);       // 1102
  } /**                                                                                                                // 1103
     * Uses native methods to return an object of dimension values.                                                    //
     * @function                                                                                                       //
     * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
     * @returns {Object} - nested object of integer pixel values                                                       //
     * TODO - if element is window, return only those values.                                                          //
     */                                                                                                                //
                                                                                                                       //
  function GetDimensions(elem, test) {                                                                                 // 1112
    elem = elem.length ? elem[0] : elem;                                                                               // 1113
                                                                                                                       //
    if (elem === window || elem === document) {                                                                        // 1115
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");                                                 // 1116
    }                                                                                                                  // 1117
                                                                                                                       //
    var rect = elem.getBoundingClientRect(),                                                                           // 1119
        parRect = elem.parentNode.getBoundingClientRect(),                                                             // 1119
        winRect = document.body.getBoundingClientRect(),                                                               // 1119
        winY = window.pageYOffset,                                                                                     // 1119
        winX = window.pageXOffset;                                                                                     // 1119
    return {                                                                                                           // 1125
      width: rect.width,                                                                                               // 1126
      height: rect.height,                                                                                             // 1127
      offset: {                                                                                                        // 1128
        top: rect.top + winY,                                                                                          // 1129
        left: rect.left + winX                                                                                         // 1130
      },                                                                                                               // 1128
      parentDims: {                                                                                                    // 1132
        width: parRect.width,                                                                                          // 1133
        height: parRect.height,                                                                                        // 1134
        offset: {                                                                                                      // 1135
          top: parRect.top + winY,                                                                                     // 1136
          left: parRect.left + winX                                                                                    // 1137
        }                                                                                                              // 1135
      },                                                                                                               // 1132
      windowDims: {                                                                                                    // 1140
        width: winRect.width,                                                                                          // 1141
        height: winRect.height,                                                                                        // 1142
        offset: {                                                                                                      // 1143
          top: winY,                                                                                                   // 1144
          left: winX                                                                                                   // 1145
        }                                                                                                              // 1143
      }                                                                                                                // 1140
    };                                                                                                                 // 1125
  } /**                                                                                                                // 1149
     * Returns an object of top and left integer pixel values for dynamically rendered elements,                       //
     * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where                       //
     * you don't know alignment, but generally from                                                                    //
     * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.                  //
     * @function                                                                                                       //
     * @param {jQuery} element - jQuery object for the element being positioned.                                       //
     * @param {jQuery} anchor - jQuery object for the element's anchor point.                                          //
     * @param {String} position - a string relating to the desired position of the element, relative to it's anchor    //
     * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.        //
     * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.      //
     * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
     * TODO alter/rewrite to work with `em` values as well/instead of pixels                                           //
     */                                                                                                                //
                                                                                                                       //
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {                                       // 1165
    console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");           // 1166
                                                                                                                       //
    switch (position) {                                                                                                // 1167
      case 'top':                                                                                                      // 1168
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["a" /* rtl */])() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);
                                                                                                                       //
      case 'bottom':                                                                                                   // 1170
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["a" /* rtl */])() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
                                                                                                                       //
      case 'center top':                                                                                               // 1172
        return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);                     // 1173
                                                                                                                       //
      case 'center bottom':                                                                                            // 1174
        return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);                  // 1175
                                                                                                                       //
      case 'center left':                                                                                              // 1176
        return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);                    // 1177
                                                                                                                       //
      case 'center right':                                                                                             // 1178
        return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);                   // 1179
                                                                                                                       //
      case 'left bottom':                                                                                              // 1180
        return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);                    // 1181
                                                                                                                       //
      case 'right bottom':                                                                                             // 1182
        return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);                   // 1183
      // Backwards compatibility... this along with the reveal and reveal full                                         // 1184
      // classes are the only ones that didn't reference anchor                                                        // 1185
                                                                                                                       //
      case 'center':                                                                                                   // 1186
        return {                                                                                                       // 1187
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,        // 1188
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)       // 1189
        };                                                                                                             // 1187
                                                                                                                       //
      case 'reveal':                                                                                                   // 1191
        return {                                                                                                       // 1192
          left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,                                            // 1193
          top: $eleDims.windowDims.offset.top + vOffset                                                                // 1194
        };                                                                                                             // 1192
                                                                                                                       //
      case 'reveal full':                                                                                              // 1196
        return {                                                                                                       // 1197
          left: $eleDims.windowDims.offset.left,                                                                       // 1198
          top: $eleDims.windowDims.offset.top                                                                          // 1199
        };                                                                                                             // 1197
        break;                                                                                                         // 1201
                                                                                                                       //
      default:                                                                                                         // 1202
        return {                                                                                                       // 1203
          left: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["a" /* rtl */])() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset                                                   // 1205
        };                                                                                                             // 1203
    }                                                                                                                  // 1167
  }                                                                                                                    // 1209
                                                                                                                       //
  function GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {                    // 1211
    var $eleDims = GetDimensions(element),                                                                             // 1212
        $anchorDims = anchor ? GetDimensions(anchor) : null;                                                           // 1212
    var topVal, leftVal; // set position related attribute                                                             // 1215
                                                                                                                       //
    switch (position) {                                                                                                // 1219
      case 'top':                                                                                                      // 1220
        topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);                                                 // 1221
        break;                                                                                                         // 1222
                                                                                                                       //
      case 'bottom':                                                                                                   // 1223
        topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;                                                // 1224
        break;                                                                                                         // 1225
                                                                                                                       //
      case 'left':                                                                                                     // 1226
        leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);                                                // 1227
        break;                                                                                                         // 1228
                                                                                                                       //
      case 'right':                                                                                                    // 1229
        leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;                                               // 1230
        break;                                                                                                         // 1231
    } // set alignment related attribute                                                                               // 1219
                                                                                                                       //
                                                                                                                       //
    switch (position) {                                                                                                // 1235
      case 'top':                                                                                                      // 1236
      case 'bottom':                                                                                                   // 1237
        switch (alignment) {                                                                                           // 1238
          case 'left':                                                                                                 // 1239
            leftVal = $anchorDims.offset.left + hOffset;                                                               // 1240
            break;                                                                                                     // 1241
                                                                                                                       //
          case 'right':                                                                                                // 1242
            leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;                          // 1243
            break;                                                                                                     // 1244
                                                                                                                       //
          case 'center':                                                                                               // 1245
            leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;
            break;                                                                                                     // 1247
        }                                                                                                              // 1238
                                                                                                                       //
        break;                                                                                                         // 1249
                                                                                                                       //
      case 'right':                                                                                                    // 1250
      case 'left':                                                                                                     // 1251
        switch (alignment) {                                                                                           // 1252
          case 'bottom':                                                                                               // 1253
            topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;                          // 1254
            break;                                                                                                     // 1255
                                                                                                                       //
          case 'top':                                                                                                  // 1256
            topVal = $anchorDims.offset.top + vOffset;                                                                 // 1257
            break;                                                                                                     // 1258
                                                                                                                       //
          case 'center':                                                                                               // 1259
            topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;                  // 1260
            break;                                                                                                     // 1261
        }                                                                                                              // 1252
                                                                                                                       //
        break;                                                                                                         // 1263
    }                                                                                                                  // 1235
                                                                                                                       //
    return {                                                                                                           // 1265
      top: topVal,                                                                                                     // 1265
      left: leftVal                                                                                                    // 1265
    };                                                                                                                 // 1265
  } /***/                                                                                                              // 1266
}, /* 8 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 1270
  "use strict"; /* harmony export (binding) */                                                                         // 1274
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1275
    return onImagesLoaded;                                                                                             // 1275
  }); /* harmony import */                                                                                             // 1275
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 1276
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /**  // 1277
                                                                                                                   * Runs a callback function when images are fully loaded.
                                                                                                                   * @param {Object} images - Image(s) to check if loaded.
                                                                                                                   * @param {Func} callback - Function to execute when image is fully loaded.
                                                                                                                   */  //
                                                                                                                       //
  function onImagesLoaded(images, callback) {                                                                          // 1287
    var self = this,                                                                                                   // 1288
        unloaded = images.length;                                                                                      // 1288
                                                                                                                       //
    if (unloaded === 0) {                                                                                              // 1291
      callback();                                                                                                      // 1292
    }                                                                                                                  // 1293
                                                                                                                       //
    images.each(function () {                                                                                          // 1295
      // Check if image is loaded                                                                                      // 1296
      if (this.complete && this.naturalWidth !== undefined) {                                                          // 1297
        singleImageLoaded();                                                                                           // 1298
      } else {                                                                                                         // 1299
        // If the above check failed, simulate loading on detached element.                                            // 1300
        var image = new Image(); // Still count image as loaded if it finalizes with an error.                         // 1301
                                                                                                                       //
        var events = "load.zf.images error.zf.images";                                                                 // 1303
                                                                                                                       //
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(image).one(events, function () {                                // 1304
          function me(event) {                                                                                         // 1304
            // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.           // 1305
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off(events, me);                                      // 1306
                                                                                                                       //
            singleImageLoaded();                                                                                       // 1307
          }                                                                                                            // 1308
                                                                                                                       //
          return me;                                                                                                   // 1304
        }());                                                                                                          // 1304
                                                                                                                       //
        image.src = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('src');                                  // 1309
      }                                                                                                                // 1310
    });                                                                                                                // 1311
                                                                                                                       //
    function singleImageLoaded() {                                                                                     // 1313
      unloaded--;                                                                                                      // 1314
                                                                                                                       //
      if (unloaded === 0) {                                                                                            // 1315
        callback();                                                                                                    // 1316
      }                                                                                                                // 1317
    }                                                                                                                  // 1318
  } /***/                                                                                                              // 1319
}, /* 9 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                          // 1323
  "use strict"; /* harmony export (binding) */                                                                         // 1327
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1328
    return Nest;                                                                                                       // 1328
  }); /* harmony import */                                                                                             // 1328
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 1329
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);      // 1330
                                                                                                                       //
  var Nest = {                                                                                                         // 1335
    Feather: function (menu) {                                                                                         // 1336
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';                             // 1337
      menu.attr('role', 'menubar');                                                                                    // 1339
      var items = menu.find('li').attr({                                                                               // 1341
        'role': 'menuitem'                                                                                             // 1341
      }),                                                                                                              // 1341
          subMenuClass = 'is-' + type + '-submenu',                                                                    // 1341
          subItemClass = subMenuClass + '-item',                                                                       // 1341
          hasSubClass = 'is-' + type + '-submenu-parent',                                                              // 1341
          applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.                             // 1341
                                                                                                                       //
      items.each(function () {                                                                                         // 1347
        var $item = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                              // 1348
            $sub = $item.children('ul');                                                                               // 1348
                                                                                                                       //
        if ($sub.length) {                                                                                             // 1351
          $item.addClass(hasSubClass);                                                                                 // 1352
          $sub.addClass('submenu ' + subMenuClass).attr({                                                              // 1353
            'data-submenu': ''                                                                                         // 1353
          });                                                                                                          // 1353
                                                                                                                       //
          if (applyAria) {                                                                                             // 1354
            $item.attr({                                                                                               // 1355
              'aria-haspopup': true,                                                                                   // 1356
              'aria-label': $item.children('a:first').text()                                                           // 1357
            }); // Note:  Drilldowns behave differently in how they hide, and so need                                  // 1355
            // additional attributes.  We should look if this possibly over-generalized                                // 1360
            // utility (Nest) is appropriate when we rework menus in 6.4                                               // 1361
                                                                                                                       //
            if (type === 'drilldown') {                                                                                // 1362
              $item.attr({                                                                                             // 1363
                'aria-expanded': false                                                                                 // 1363
              });                                                                                                      // 1363
            }                                                                                                          // 1364
          }                                                                                                            // 1365
                                                                                                                       //
          $sub.addClass('submenu ' + subMenuClass).attr({                                                              // 1366
            'data-submenu': '',                                                                                        // 1367
            'role': 'menu'                                                                                             // 1368
          });                                                                                                          // 1366
                                                                                                                       //
          if (type === 'drilldown') {                                                                                  // 1370
            $sub.attr({                                                                                                // 1371
              'aria-hidden': true                                                                                      // 1371
            });                                                                                                        // 1371
          }                                                                                                            // 1372
        }                                                                                                              // 1373
                                                                                                                       //
        if ($item.parent('[data-submenu]').length) {                                                                   // 1375
          $item.addClass('is-submenu-item ' + subItemClass);                                                           // 1376
        }                                                                                                              // 1377
      });                                                                                                              // 1378
      return;                                                                                                          // 1380
    },                                                                                                                 // 1381
    Burn: function (menu, type) {                                                                                      // 1382
      var //items = menu.find('li'),                                                                                   // 1383
      subMenuClass = 'is-' + type + '-submenu',                                                                        // 1384
          subItemClass = subMenuClass + '-item',                                                                       // 1383
          hasSubClass = 'is-' + type + '-submenu-parent';                                                              // 1383
      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');
    }                                                                                                                  // 1389
  }; /***/                                                                                                             // 1335
}, /* 10 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 1394
  "use strict"; /* harmony export (binding) */                                                                         // 1398
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1399
    return Touch;                                                                                                      // 1399
  }); /* harmony import */                                                                                             // 1399
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 1400
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);      // 1401
                                                                                                                       //
  var _createClass = function () {                                                                                     // 1402
    function defineProperties(target, props) {                                                                         // 1402
      for (var i = 0; i < props.length; i++) {                                                                         // 1402
        var descriptor = props[i];                                                                                     // 1402
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 1402
        descriptor.configurable = true;                                                                                // 1402
        if ("value" in descriptor) descriptor.writable = true;                                                         // 1402
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 1402
      }                                                                                                                // 1402
    }                                                                                                                  // 1402
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 1402
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 1402
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 1402
      return Constructor;                                                                                              // 1402
    };                                                                                                                 // 1402
  }();                                                                                                                 // 1402
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 1404
    if (!(instance instanceof Constructor)) {                                                                          // 1404
      throw new TypeError("Cannot call a class as a function");                                                        // 1404
    }                                                                                                                  // 1404
  } //**************************************************                                                               // 1404
  //**Work inspired by multiple jquery swipe plugins**                                                                 // 1407
  //**Done by Yohai Ararat ***************************                                                                 // 1408
  //**************************************************                                                                 // 1409
                                                                                                                       //
                                                                                                                       //
  var Touch = {};                                                                                                      // 1413
  var startPosX,                                                                                                       // 1415
      startPosY,                                                                                                       // 1415
      startTime,                                                                                                       // 1415
      elapsedTime,                                                                                                     // 1415
      isMoving = false;                                                                                                // 1415
                                                                                                                       //
  function onTouchEnd() {                                                                                              // 1421
    //  alert(this);                                                                                                   // 1422
    this.removeEventListener('touchmove', onTouchMove);                                                                // 1423
    this.removeEventListener('touchend', onTouchEnd);                                                                  // 1424
    isMoving = false;                                                                                                  // 1425
  }                                                                                                                    // 1426
                                                                                                                       //
  function onTouchMove(e) {                                                                                            // 1428
    if (__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.preventDefault) {                                     // 1429
      e.preventDefault();                                                                                              // 1430
    }                                                                                                                  // 1431
                                                                                                                       //
    if (isMoving) {                                                                                                    // 1432
      var x = e.touches[0].pageX;                                                                                      // 1433
      var y = e.touches[0].pageY;                                                                                      // 1434
      var dx = startPosX - x;                                                                                          // 1435
      var dy = startPosY - y;                                                                                          // 1436
      var dir;                                                                                                         // 1437
      elapsedTime = new Date().getTime() - startTime;                                                                  // 1438
                                                                                                                       //
      if (Math.abs(dx) >= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.moveThreshold && elapsedTime <= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.timeThreshold) {
        dir = dx > 0 ? 'left' : 'right';                                                                               // 1440
      } // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {            // 1441
      //   dir = dy > 0 ? 'down' : 'up';                                                                               // 1443
      // }                                                                                                             // 1444
                                                                                                                       //
                                                                                                                       //
      if (dir) {                                                                                                       // 1445
        e.preventDefault();                                                                                            // 1446
        onTouchEnd.call(this);                                                                                         // 1447
                                                                                                                       //
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('swipe', dir).trigger('swipe' + dir);             // 1448
      }                                                                                                                // 1449
    }                                                                                                                  // 1450
  }                                                                                                                    // 1451
                                                                                                                       //
  function onTouchStart(e) {                                                                                           // 1453
    if (e.touches.length == 1) {                                                                                       // 1454
      startPosX = e.touches[0].pageX;                                                                                  // 1455
      startPosY = e.touches[0].pageY;                                                                                  // 1456
      isMoving = true;                                                                                                 // 1457
      startTime = new Date().getTime();                                                                                // 1458
      this.addEventListener('touchmove', onTouchMove, false);                                                          // 1459
      this.addEventListener('touchend', onTouchEnd, false);                                                            // 1460
    }                                                                                                                  // 1461
  }                                                                                                                    // 1462
                                                                                                                       //
  function init() {                                                                                                    // 1464
    this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);                                 // 1465
  }                                                                                                                    // 1466
                                                                                                                       //
  function teardown() {                                                                                                // 1468
    this.removeEventListener('touchstart', onTouchStart);                                                              // 1469
  }                                                                                                                    // 1470
                                                                                                                       //
  var SpotSwipe = function () {                                                                                        // 1472
    function SpotSwipe($) {                                                                                            // 1473
      _classCallCheck(this, SpotSwipe);                                                                                // 1474
                                                                                                                       //
      this.version = '1.0.0';                                                                                          // 1476
      this.enabled = 'ontouchstart' in document.documentElement;                                                       // 1477
      this.preventDefault = false;                                                                                     // 1478
      this.moveThreshold = 75;                                                                                         // 1479
      this.timeThreshold = 200;                                                                                        // 1480
      this.$ = $;                                                                                                      // 1481
                                                                                                                       //
      this._init();                                                                                                    // 1482
    }                                                                                                                  // 1483
                                                                                                                       //
    _createClass(SpotSwipe, [{                                                                                         // 1485
      key: '_init',                                                                                                    // 1486
      value: function () {                                                                                             // 1487
        function _init() {                                                                                             // 1487
          var $ = this.$;                                                                                              // 1488
          $.event.special.swipe = {                                                                                    // 1489
            setup: init                                                                                                // 1489
          };                                                                                                           // 1489
          $.each(['left', 'up', 'down', 'right'], function () {                                                        // 1491
            $.event.special['swipe' + this] = {                                                                        // 1492
              setup: function () {                                                                                     // 1492
                $(this).on('swipe', $.noop);                                                                           // 1493
              }                                                                                                        // 1494
            };                                                                                                         // 1492
          });                                                                                                          // 1495
        }                                                                                                              // 1496
                                                                                                                       //
        return _init;                                                                                                  // 1487
      }()                                                                                                              // 1487
    }]);                                                                                                               // 1485
                                                                                                                       //
    return SpotSwipe;                                                                                                  // 1499
  }(); /****************************************************                                                           // 1500
        * As far as I can tell, both setupSpotSwipe and    *                                                           //
        * setupTouchHandler should be idempotent,          *                                                           //
        * because they directly replace functions &        *                                                           //
        * values, and do not add event handlers directly.  *                                                           //
        ****************************************************/                                                          //
                                                                                                                       //
  Touch.setupSpotSwipe = function ($) {                                                                                // 1509
    $.spotSwipe = new SpotSwipe($);                                                                                    // 1510
  }; /****************************************************                                                             // 1511
      * Method for adding pseudo drag events to elements *                                                             //
      ***************************************************/                                                             //
                                                                                                                       //
  Touch.setupTouchHandler = function ($) {                                                                             // 1516
    $.fn.addTouch = function () {                                                                                      // 1517
      this.each(function (i, el) {                                                                                     // 1518
        $(el).bind('touchstart touchmove touchend touchcancel', function () {                                          // 1519
          //we pass the original event object because the jQuery event                                                 // 1520
          //object is normalized to w3c specs and does not provide the TouchList                                       // 1521
          handleTouch(event);                                                                                          // 1522
        });                                                                                                            // 1523
      });                                                                                                              // 1524
                                                                                                                       //
      var handleTouch = function (event) {                                                                             // 1526
        var touches = event.changedTouches,                                                                            // 1527
            first = touches[0],                                                                                        // 1527
            eventTypes = {                                                                                             // 1527
          touchstart: 'mousedown',                                                                                     // 1530
          touchmove: 'mousemove',                                                                                      // 1531
          touchend: 'mouseup'                                                                                          // 1532
        },                                                                                                             // 1529
            type = eventTypes[event.type],                                                                             // 1527
            simulatedEvent;                                                                                            // 1527
                                                                                                                       //
        if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {                                       // 1537
          simulatedEvent = new window.MouseEvent(type, {                                                               // 1538
            'bubbles': true,                                                                                           // 1539
            'cancelable': true,                                                                                        // 1540
            'screenX': first.screenX,                                                                                  // 1541
            'screenY': first.screenY,                                                                                  // 1542
            'clientX': first.clientX,                                                                                  // 1543
            'clientY': first.clientY                                                                                   // 1544
          });                                                                                                          // 1538
        } else {                                                                                                       // 1546
          simulatedEvent = document.createEvent('MouseEvent');                                                         // 1547
          simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
        }                                                                                                              // 1549
                                                                                                                       //
        first.target.dispatchEvent(simulatedEvent);                                                                    // 1550
      };                                                                                                               // 1551
    };                                                                                                                 // 1552
  };                                                                                                                   // 1553
                                                                                                                       //
  Touch.init = function ($) {                                                                                          // 1555
    if (typeof $.spotSwipe === 'undefined') {                                                                          // 1556
      Touch.setupSpotSwipe($);                                                                                         // 1557
      Touch.setupTouchHandler($);                                                                                      // 1558
    }                                                                                                                  // 1559
  }; /***/                                                                                                             // 1560
}, /* 11 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 1564
  "use strict"; /* harmony export (binding) */                                                                         // 1568
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1569
    return Accordion;                                                                                                  // 1569
  }); /* harmony import */                                                                                             // 1569
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 1570
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 1572
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 1573
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);                                       // 1574
                                                                                                                       //
  var _createClass = function () {                                                                                     // 1577
    function defineProperties(target, props) {                                                                         // 1577
      for (var i = 0; i < props.length; i++) {                                                                         // 1577
        var descriptor = props[i];                                                                                     // 1577
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 1577
        descriptor.configurable = true;                                                                                // 1577
        if ("value" in descriptor) descriptor.writable = true;                                                         // 1577
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 1577
      }                                                                                                                // 1577
    }                                                                                                                  // 1577
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 1577
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 1577
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 1577
      return Constructor;                                                                                              // 1577
    };                                                                                                                 // 1577
  }();                                                                                                                 // 1577
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 1579
    if (!(instance instanceof Constructor)) {                                                                          // 1579
      throw new TypeError("Cannot call a class as a function");                                                        // 1579
    }                                                                                                                  // 1579
  }                                                                                                                    // 1579
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 1581
    if (!self) {                                                                                                       // 1581
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 1581
    }                                                                                                                  // 1581
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 1581
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 1583
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 1583
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 1583
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 1583
      constructor: {                                                                                                   // 1583
        value: subClass,                                                                                               // 1583
        enumerable: false,                                                                                             // 1583
        writable: true,                                                                                                // 1583
        configurable: true                                                                                             // 1583
      }                                                                                                                // 1583
    });                                                                                                                // 1583
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 1583
     * Accordion module.                                                                                               //
     * @module foundation.accordion                                                                                    //
     * @requires foundation.util.keyboard                                                                              //
     */                                                                                                                //
                                                                                                                       //
  var Accordion = function (_Plugin) {                                                                                 // 1596
    _inherits(Accordion, _Plugin);                                                                                     // 1597
                                                                                                                       //
    function Accordion() {                                                                                             // 1599
      _classCallCheck(this, Accordion);                                                                                // 1600
                                                                                                                       //
      return _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).apply(this, arguments));
    }                                                                                                                  // 1603
                                                                                                                       //
    _createClass(Accordion, [{                                                                                         // 1605
      key: '_setup',                                                                                                   // 1606
      /**                                                                                                              // 1608
       * Creates a new instance of an accordion.                                                                       //
       * @class                                                                                                        //
       * @name Accordion                                                                                               //
       * @fires Accordion#init                                                                                         //
       * @param {jQuery} element - jQuery object to make into an accordion.                                            //
       * @param {Object} options - a plain object with settings to override the default options.                       //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 1616
          this.$element = element;                                                                                     // 1617
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Accordion.defaults, this.$element.data(), options);
          this.className = 'Accordion'; // ie9 back compat                                                             // 1620
                                                                                                                       //
          this._init();                                                                                                // 1621
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Accordion', {          // 1623
            'ENTER': 'toggle',                                                                                         // 1624
            'SPACE': 'toggle',                                                                                         // 1625
            'ARROW_DOWN': 'next',                                                                                      // 1626
            'ARROW_UP': 'previous'                                                                                     // 1627
          });                                                                                                          // 1623
        }                                                                                                              // 1629
                                                                                                                       //
        return _setup;                                                                                                 // 1616
      }() /**                                                                                                          // 1616
           * Initializes the accordion by animating the preset active pane(s).                                         //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 1605
      key: '_init',                                                                                                    // 1637
      value: function () {                                                                                             // 1638
        function _init() {                                                                                             // 1638
          var _this3 = this;                                                                                           // 1639
                                                                                                                       //
          this.$element.attr('role', 'tablist');                                                                       // 1641
          this.$tabs = this.$element.children('[data-accordion-item]');                                                // 1642
          this.$tabs.each(function (idx, el) {                                                                         // 1644
            var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el),                                              // 1645
                $content = $el.children('[data-tab-content]'),                                                         // 1645
                id = $content[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */])(6, 'accordion'),
                linkId = el.id || id + '-label';                                                                       // 1645
                                                                                                                       //
            $el.find('a:first').attr({                                                                                 // 1650
              'aria-controls': id,                                                                                     // 1651
              'role': 'tab',                                                                                           // 1652
              'id': linkId,                                                                                            // 1653
              'aria-expanded': false,                                                                                  // 1654
              'aria-selected': false                                                                                   // 1655
            });                                                                                                        // 1650
            $content.attr({                                                                                            // 1658
              'role': 'tabpanel',                                                                                      // 1658
              'aria-labelledby': linkId,                                                                               // 1658
              'aria-hidden': true,                                                                                     // 1658
              'id': id                                                                                                 // 1658
            });                                                                                                        // 1658
          });                                                                                                          // 1659
          var $initActive = this.$element.find('.is-active').children('[data-tab-content]');                           // 1660
          this.firstTimeInit = true;                                                                                   // 1661
                                                                                                                       //
          if ($initActive.length) {                                                                                    // 1662
            this.down($initActive, this.firstTimeInit);                                                                // 1663
            this.firstTimeInit = false;                                                                                // 1664
          }                                                                                                            // 1665
                                                                                                                       //
          this._checkDeepLink = function () {                                                                          // 1667
            var anchor = window.location.hash; //need a hash and a relevant anchor in this tabset                      // 1668
                                                                                                                       //
            if (anchor.length) {                                                                                       // 1670
              var $link = _this3.$element.find('[href$="' + anchor + '"]'),                                            // 1671
                  $anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor);                                    // 1671
                                                                                                                       //
              if ($link.length && $anchor) {                                                                           // 1674
                if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {                                    // 1675
                  _this3.down($anchor, _this3.firstTimeInit);                                                          // 1676
                                                                                                                       //
                  _this3.firstTimeInit = false;                                                                        // 1677
                }                                                                                                      // 1678
                                                                                                                       //
                ; //roll up a little to show the titles                                                                // 1678
                                                                                                                       //
                if (_this3.options.deepLinkSmudge) {                                                                   // 1681
                  var _this = _this3;                                                                                  // 1682
                                                                                                                       //
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {                            // 1683
                    var offset = _this.$element.offset();                                                              // 1684
                                                                                                                       //
                    __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({                             // 1685
                      scrollTop: offset.top                                                                            // 1685
                    }, _this.options.deepLinkSmudgeDelay);                                                             // 1685
                  });                                                                                                  // 1686
                } /**                                                                                                  // 1687
                    * Fires when the zplugin has deeplinked at pageload                                                //
                    * @event Accordion#deeplink                                                                        //
                    */                                                                                                 //
                                                                                                                       //
                _this3.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);                                    // 1693
              }                                                                                                        // 1694
            }                                                                                                          // 1695
          }; //use browser to open a tab, if it exists in this tabset                                                  // 1696
                                                                                                                       //
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 1699
            this._checkDeepLink();                                                                                     // 1700
          }                                                                                                            // 1701
                                                                                                                       //
          this._events();                                                                                              // 1703
        }                                                                                                              // 1704
                                                                                                                       //
        return _init;                                                                                                  // 1638
      }() /**                                                                                                          // 1638
           * Adds event handlers for items within the accordion.                                                       //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 1636
      key: '_events',                                                                                                  // 1712
      value: function () {                                                                                             // 1713
        function _events() {                                                                                           // 1713
          var _this = this;                                                                                            // 1714
                                                                                                                       //
          this.$tabs.each(function () {                                                                                // 1716
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);                                          // 1717
                                                                                                                       //
            var $tabContent = $elem.children('[data-tab-content]');                                                    // 1718
                                                                                                                       //
            if ($tabContent.length) {                                                                                  // 1719
              $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
                e.preventDefault();                                                                                    // 1721
                                                                                                                       //
                _this.toggle($tabContent);                                                                             // 1722
              }).on('keydown.zf.accordion', function (e) {                                                             // 1723
                __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Accordion', {
                  toggle: function () {                                                                                // 1725
                    _this.toggle($tabContent);                                                                         // 1726
                  },                                                                                                   // 1727
                  next: function () {                                                                                  // 1728
                    var $a = $elem.next().find('a').focus();                                                           // 1729
                                                                                                                       //
                    if (!_this.options.multiExpand) {                                                                  // 1730
                      $a.trigger('click.zf.accordion');                                                                // 1731
                    }                                                                                                  // 1732
                  },                                                                                                   // 1733
                  previous: function () {                                                                              // 1734
                    var $a = $elem.prev().find('a').focus();                                                           // 1735
                                                                                                                       //
                    if (!_this.options.multiExpand) {                                                                  // 1736
                      $a.trigger('click.zf.accordion');                                                                // 1737
                    }                                                                                                  // 1738
                  },                                                                                                   // 1739
                  handled: function () {                                                                               // 1740
                    e.preventDefault();                                                                                // 1741
                    e.stopPropagation();                                                                               // 1742
                  }                                                                                                    // 1743
                });                                                                                                    // 1724
              });                                                                                                      // 1745
            }                                                                                                          // 1746
          });                                                                                                          // 1747
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 1748
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);                // 1749
          }                                                                                                            // 1750
        }                                                                                                              // 1751
                                                                                                                       //
        return _events;                                                                                                // 1713
      }() /**                                                                                                          // 1713
           * Toggles the selected content pane's open/close state.                                                     //
           * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).                     //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 1711
      key: 'toggle',                                                                                                   // 1760
      value: function () {                                                                                             // 1761
        function toggle($target) {                                                                                     // 1761
          if ($target.closest('[data-accordion]').is('[disabled]')) {                                                  // 1762
            console.info('Cannot toggle an accordion that is disabled.');                                              // 1763
            return;                                                                                                    // 1764
          }                                                                                                            // 1765
                                                                                                                       //
          if ($target.parent().hasClass('is-active')) {                                                                // 1766
            this.up($target);                                                                                          // 1767
          } else {                                                                                                     // 1768
            this.down($target);                                                                                        // 1769
          } //either replace or update browser history                                                                 // 1770
                                                                                                                       //
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 1772
            var anchor = $target.prev('a').attr('href');                                                               // 1773
                                                                                                                       //
            if (this.options.updateHistory) {                                                                          // 1775
              history.pushState({}, '', anchor);                                                                       // 1776
            } else {                                                                                                   // 1777
              history.replaceState({}, '', anchor);                                                                    // 1778
            }                                                                                                          // 1779
          }                                                                                                            // 1780
        }                                                                                                              // 1781
                                                                                                                       //
        return toggle;                                                                                                 // 1761
      }() /**                                                                                                          // 1761
           * Opens the accordion tab defined by `$target`.                                                             //
           * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).                                  //
           * @param {Boolean} firstTime - flag to determine if reflow should happen.                                   //
           * @fires Accordion#down                                                                                     //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 1759
      key: 'down',                                                                                                     // 1792
      value: function () {                                                                                             // 1793
        function down($target, firstTime) {                                                                            // 1793
          var _this4 = this; /**                                                                                       // 1794
                              * checking firstTime allows for initial render of the accordion                          //
                              * to render preset is-active panes.                                                      //
                              */                                                                                       //
                                                                                                                       //
          if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime) {                                    // 1800
            console.info('Cannot call down on an accordion that is disabled.');                                        // 1801
            return;                                                                                                    // 1802
          }                                                                                                            // 1803
                                                                                                                       //
          $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');    // 1804
                                                                                                                       //
          if (!this.options.multiExpand && !firstTime) {                                                               // 1806
            var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');                  // 1807
                                                                                                                       //
            if ($currentActive.length) {                                                                               // 1808
              this.up($currentActive.not($target));                                                                    // 1809
            }                                                                                                          // 1810
          }                                                                                                            // 1811
                                                                                                                       //
          $target.slideDown(this.options.slideSpeed, function () {                                                     // 1813
            /**                                                                                                        // 1814
             * Fires when the tab is done opening.                                                                     //
             * @event Accordion#down                                                                                   //
             */_this4.$element.trigger('down.zf.accordion', [$target]);                                                //
          });                                                                                                          // 1819
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({                 // 1821
            'aria-expanded': true,                                                                                     // 1822
            'aria-selected': true                                                                                      // 1823
          });                                                                                                          // 1821
        }                                                                                                              // 1825
                                                                                                                       //
        return down;                                                                                                   // 1793
      }() /**                                                                                                          // 1793
           * Closes the tab defined by `$target`.                                                                      //
           * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).                                  //
           * @fires Accordion#up                                                                                       //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 1791
      key: 'up',                                                                                                       // 1835
      value: function () {                                                                                             // 1836
        function up($target) {                                                                                         // 1836
          if ($target.closest('[data-accordion]').is('[disabled]')) {                                                  // 1837
            console.info('Cannot call up on an accordion that is disabled.');                                          // 1838
            return;                                                                                                    // 1839
          }                                                                                                            // 1840
                                                                                                                       //
          var $aunts = $target.parent().siblings(),                                                                    // 1842
              _this = this;                                                                                            // 1842
                                                                                                                       //
          if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
            return;                                                                                                    // 1846
          }                                                                                                            // 1847
                                                                                                                       //
          $target.slideUp(_this.options.slideSpeed, function () {                                                      // 1849
            /**                                                                                                        // 1850
             * Fires when the tab is done collapsing up.                                                               //
             * @event Accordion#up                                                                                     //
             */_this.$element.trigger('up.zf.accordion', [$target]);                                                   //
          });                                                                                                          // 1855
          $target.attr('aria-hidden', true).parent().removeClass('is-active');                                         // 1857
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({                 // 1859
            'aria-expanded': false,                                                                                    // 1860
            'aria-selected': false                                                                                     // 1861
          });                                                                                                          // 1859
        }                                                                                                              // 1863
                                                                                                                       //
        return up;                                                                                                     // 1836
      }() /**                                                                                                          // 1836
           * Destroys an instance of an accordion.                                                                     //
           * @fires Accordion#destroyed                                                                                //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 1834
      key: '_destroy',                                                                                                 // 1872
      value: function () {                                                                                             // 1873
        function _destroy() {                                                                                          // 1873
          this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');                           // 1874
          this.$element.find('a').off('.zf.accordion');                                                                // 1875
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 1876
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);               // 1877
          }                                                                                                            // 1878
        }                                                                                                              // 1879
                                                                                                                       //
        return _destroy;                                                                                               // 1873
      }()                                                                                                              // 1873
    }]);                                                                                                               // 1871
                                                                                                                       //
    return Accordion;                                                                                                  // 1882
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 1883
                                                                                                                       //
  Accordion.defaults = {                                                                                               // 1885
    /**                                                                                                                // 1886
     * Amount of time to animate the opening of an accordion pane.                                                     //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 250                                                                                                    //
     */slideSpeed: 250,                                                                                                //
    /**                                                                                                                // 1893
     * Allow the accordion to have multiple open panes.                                                                //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */multiExpand: false,                                                                                             //
    /**                                                                                                                // 1900
     * Allow the accordion to close all panes.                                                                         //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */allowAllClosed: false,                                                                                          //
    /**                                                                                                                // 1907
     * Allows the window to scroll to content of pane specified by hash anchor                                         //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLink: false,                                                                                                //
    /**                                                                                                                // 1915
     * Adjust the deep link scroll to make sure the top of the accordion panel is visible                              //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLinkSmudge: false,                                                                                          //
    /**                                                                                                                // 1923
     * Animation time (ms) for the deep link adjustment                                                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 300                                                                                                    //
     */deepLinkSmudgeDelay: 300,                                                                                       //
    /**                                                                                                                // 1931
     * Update the browser history with the open accordion                                                              //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */updateHistory: false                                                                                            //
  }; /***/                                                                                                             // 1885
}, /* 12 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 1942
  "use strict"; /* harmony export (binding) */                                                                         // 1946
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 1947
    return AccordionMenu;                                                                                              // 1947
  }); /* harmony import */                                                                                             // 1947
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 1948
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 1950
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9); /* harmony import */               // 1951
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 1952
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);                                       // 1953
                                                                                                                       //
  var _createClass = function () {                                                                                     // 1956
    function defineProperties(target, props) {                                                                         // 1956
      for (var i = 0; i < props.length; i++) {                                                                         // 1956
        var descriptor = props[i];                                                                                     // 1956
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 1956
        descriptor.configurable = true;                                                                                // 1956
        if ("value" in descriptor) descriptor.writable = true;                                                         // 1956
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 1956
      }                                                                                                                // 1956
    }                                                                                                                  // 1956
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 1956
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 1956
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 1956
      return Constructor;                                                                                              // 1956
    };                                                                                                                 // 1956
  }();                                                                                                                 // 1956
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 1958
    if (!(instance instanceof Constructor)) {                                                                          // 1958
      throw new TypeError("Cannot call a class as a function");                                                        // 1958
    }                                                                                                                  // 1958
  }                                                                                                                    // 1958
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 1960
    if (!self) {                                                                                                       // 1960
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 1960
    }                                                                                                                  // 1960
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 1960
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 1962
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 1962
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 1962
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 1962
      constructor: {                                                                                                   // 1962
        value: subClass,                                                                                               // 1962
        enumerable: false,                                                                                             // 1962
        writable: true,                                                                                                // 1962
        configurable: true                                                                                             // 1962
      }                                                                                                                // 1962
    });                                                                                                                // 1962
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 1962
     * AccordionMenu module.                                                                                           //
     * @module foundation.accordionMenu                                                                                //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.nest                                                                                  //
     */                                                                                                                //
                                                                                                                       //
  var AccordionMenu = function (_Plugin) {                                                                             // 1977
    _inherits(AccordionMenu, _Plugin);                                                                                 // 1978
                                                                                                                       //
    function AccordionMenu() {                                                                                         // 1980
      _classCallCheck(this, AccordionMenu);                                                                            // 1981
                                                                                                                       //
      return _possibleConstructorReturn(this, (AccordionMenu.__proto__ || Object.getPrototypeOf(AccordionMenu)).apply(this, arguments));
    }                                                                                                                  // 1984
                                                                                                                       //
    _createClass(AccordionMenu, [{                                                                                     // 1986
      key: '_setup',                                                                                                   // 1987
      /**                                                                                                              // 1989
       * Creates a new instance of an accordion menu.                                                                  //
       * @class                                                                                                        //
       * @name AccordionMenu                                                                                           //
       * @fires AccordionMenu#init                                                                                     //
       * @param {jQuery} element - jQuery object to make into an accordion menu.                                       //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 1997
          this.$element = element;                                                                                     // 1998
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, AccordionMenu.defaults, this.$element.data(), options);
          this.className = 'AccordionMenu'; // ie9 back compat                                                         // 2000
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Feather(this.$element, 'accordion');     // 2002
                                                                                                                       //
          this._init();                                                                                                // 2004
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('AccordionMenu', {      // 2006
            'ENTER': 'toggle',                                                                                         // 2007
            'SPACE': 'toggle',                                                                                         // 2008
            'ARROW_RIGHT': 'open',                                                                                     // 2009
            'ARROW_UP': 'up',                                                                                          // 2010
            'ARROW_DOWN': 'down',                                                                                      // 2011
            'ARROW_LEFT': 'close',                                                                                     // 2012
            'ESCAPE': 'closeAll'                                                                                       // 2013
          });                                                                                                          // 2006
        }                                                                                                              // 2015
                                                                                                                       //
        return _setup;                                                                                                 // 1997
      }() /**                                                                                                          // 1997
           * Initializes the accordion menu by hiding all nested menus.                                                //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 1986
      key: '_init',                                                                                                    // 2023
      value: function () {                                                                                             // 2024
        function _init() {                                                                                             // 2024
          var _this = this;                                                                                            // 2025
                                                                                                                       //
          this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
                                                                                                                       //
          this.$element.attr({                                                                                         // 2028
            'role': 'tree',                                                                                            // 2029
            'aria-multiselectable': this.options.multiOpen                                                             // 2030
          });                                                                                                          // 2028
          this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');                                        // 2033
          this.$menuLinks.each(function () {                                                                           // 2034
            var linkId = this.id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'acc-menu-link'),
                $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                          // 2035
                $sub = $elem.children('[data-submenu]'),                                                               // 2035
                subId = $sub[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'acc-menu'),
                isActive = $sub.hasClass('is-active');                                                                 // 2035
                                                                                                                       //
            if (_this.options.submenuToggle) {                                                                         // 2041
              $elem.addClass('has-submenu-toggle');                                                                    // 2042
              $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '" title="' + _this.options.submenuToggleText + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
            } else {                                                                                                   // 2044
              $elem.attr({                                                                                             // 2045
                'aria-controls': subId,                                                                                // 2046
                'aria-expanded': isActive,                                                                             // 2047
                'id': linkId                                                                                           // 2048
              });                                                                                                      // 2045
            }                                                                                                          // 2050
                                                                                                                       //
            $sub.attr({                                                                                                // 2051
              'aria-labelledby': linkId,                                                                               // 2052
              'aria-hidden': !isActive,                                                                                // 2053
              'role': 'group',                                                                                         // 2054
              'id': subId                                                                                              // 2055
            });                                                                                                        // 2051
          });                                                                                                          // 2057
          this.$element.find('li').attr({                                                                              // 2058
            'role': 'treeitem'                                                                                         // 2059
          });                                                                                                          // 2058
          var initPanes = this.$element.find('.is-active');                                                            // 2061
                                                                                                                       //
          if (initPanes.length) {                                                                                      // 2062
            var _this = this;                                                                                          // 2063
                                                                                                                       //
            initPanes.each(function () {                                                                               // 2064
              _this.down(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));                                        // 2065
            });                                                                                                        // 2066
          }                                                                                                            // 2067
                                                                                                                       //
          this._events();                                                                                              // 2068
        }                                                                                                              // 2069
                                                                                                                       //
        return _init;                                                                                                  // 2024
      }() /**                                                                                                          // 2024
           * Adds event handlers for items within the menu.                                                            //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2022
      key: '_events',                                                                                                  // 2077
      value: function () {                                                                                             // 2078
        function _events() {                                                                                           // 2078
          var _this = this;                                                                                            // 2079
                                                                                                                       //
          this.$element.find('li').each(function () {                                                                  // 2081
            var $submenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]');            // 2082
                                                                                                                       //
            if ($submenu.length) {                                                                                     // 2084
              if (_this.options.submenuToggle) {                                                                       // 2085
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                  _this.toggle($submenu);                                                                              // 2087
                });                                                                                                    // 2088
              } else {                                                                                                 // 2089
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                  e.preventDefault();                                                                                  // 2091
                                                                                                                       //
                  _this.toggle($submenu);                                                                              // 2092
                });                                                                                                    // 2093
              }                                                                                                        // 2094
            }                                                                                                          // 2095
          }).on('keydown.zf.accordionmenu', function (e) {                                                             // 2096
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                       // 2097
                $elements = $element.parent('ul').children('li'),                                                      // 2097
                $prevElement,                                                                                          // 2097
                $nextElement,                                                                                          // 2097
                $target = $element.children('[data-submenu]');                                                         // 2097
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 2103
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {                                 // 2104
                $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();                                     // 2105
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();                  // 2106
                                                                                                                       //
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]:visible').length) {  // 2108
                  // has open sub menu                                                                                 // 2109
                  $nextElement = $element.find('li:first-child').find('a').first();                                    // 2110
                }                                                                                                      // 2111
                                                                                                                       //
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':first-child')) {                         // 2112
                  // is first element of sub menu                                                                      // 2113
                  $prevElement = $element.parents('li').first().find('a').first();                                     // 2114
                } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {             // 2115
                  // if previous element has open sub menu                                                             // 2116
                  $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();                   // 2117
                }                                                                                                      // 2118
                                                                                                                       //
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':last-child')) {                          // 2119
                  // is last element of sub menu                                                                       // 2120
                  $nextElement = $element.parents('li').first().next('li').find('a').first();                          // 2121
                }                                                                                                      // 2122
                                                                                                                       //
                return;                                                                                                // 2124
              }                                                                                                        // 2125
            });                                                                                                        // 2126
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'AccordionMenu', {
              open: function () {                                                                                      // 2129
                if ($target.is(':hidden')) {                                                                           // 2130
                  _this.down($target);                                                                                 // 2131
                                                                                                                       //
                  $target.find('li').first().find('a').first().focus();                                                // 2132
                }                                                                                                      // 2133
              },                                                                                                       // 2134
              close: function () {                                                                                     // 2135
                if ($target.length && !$target.is(':hidden')) {                                                        // 2136
                  // close active sub of this item                                                                     // 2137
                  _this.up($target);                                                                                   // 2138
                } else if ($element.parent('[data-submenu]').length) {                                                 // 2139
                  // close currently open sub                                                                          // 2140
                  _this.up($element.parent('[data-submenu]'));                                                         // 2141
                                                                                                                       //
                  $element.parents('li').first().find('a').first().focus();                                            // 2142
                }                                                                                                      // 2143
              },                                                                                                       // 2144
              up: function () {                                                                                        // 2145
                $prevElement.focus();                                                                                  // 2146
                return true;                                                                                           // 2147
              },                                                                                                       // 2148
              down: function () {                                                                                      // 2149
                $nextElement.focus();                                                                                  // 2150
                return true;                                                                                           // 2151
              },                                                                                                       // 2152
              toggle: function () {                                                                                    // 2153
                if (_this.options.submenuToggle) {                                                                     // 2154
                  return false;                                                                                        // 2155
                }                                                                                                      // 2156
                                                                                                                       //
                if ($element.children('[data-submenu]').length) {                                                      // 2157
                  _this.toggle($element.children('[data-submenu]'));                                                   // 2158
                                                                                                                       //
                  return true;                                                                                         // 2159
                }                                                                                                      // 2160
              },                                                                                                       // 2161
              closeAll: function () {                                                                                  // 2162
                _this.hideAll();                                                                                       // 2163
              },                                                                                                       // 2164
              handled: function (preventDefault) {                                                                     // 2165
                if (preventDefault) {                                                                                  // 2166
                  e.preventDefault();                                                                                  // 2167
                }                                                                                                      // 2168
                                                                                                                       //
                e.stopImmediatePropagation();                                                                          // 2169
              }                                                                                                        // 2170
            });                                                                                                        // 2128
          }); //.attr('tabindex', 0);                                                                                  // 2172
        }                                                                                                              // 2173
                                                                                                                       //
        return _events;                                                                                                // 2078
      }() /**                                                                                                          // 2078
           * Closes all panes of the menu.                                                                             //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2076
      key: 'hideAll',                                                                                                  // 2181
      value: function () {                                                                                             // 2182
        function hideAll() {                                                                                           // 2182
          this.up(this.$element.find('[data-submenu]'));                                                               // 2183
        }                                                                                                              // 2184
                                                                                                                       //
        return hideAll;                                                                                                // 2182
      }() /**                                                                                                          // 2182
           * Opens all panes of the menu.                                                                              //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2180
      key: 'showAll',                                                                                                  // 2192
      value: function () {                                                                                             // 2193
        function showAll() {                                                                                           // 2193
          this.down(this.$element.find('[data-submenu]'));                                                             // 2194
        }                                                                                                              // 2195
                                                                                                                       //
        return showAll;                                                                                                // 2193
      }() /**                                                                                                          // 2193
           * Toggles the open/close state of a submenu.                                                                //
           * @function                                                                                                 //
           * @param {jQuery} $target - the submenu to toggle                                                           //
           */                                                                                                          //
    }, {                                                                                                               // 2191
      key: 'toggle',                                                                                                   // 2204
      value: function () {                                                                                             // 2205
        function toggle($target) {                                                                                     // 2205
          if (!$target.is(':animated')) {                                                                              // 2206
            if (!$target.is(':hidden')) {                                                                              // 2207
              this.up($target);                                                                                        // 2208
            } else {                                                                                                   // 2209
              this.down($target);                                                                                      // 2210
            }                                                                                                          // 2211
          }                                                                                                            // 2212
        }                                                                                                              // 2213
                                                                                                                       //
        return toggle;                                                                                                 // 2205
      }() /**                                                                                                          // 2205
           * Opens the sub-menu defined by `$target`.                                                                  //
           * @param {jQuery} $target - Sub-menu to open.                                                               //
           * @fires AccordionMenu#down                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2203
      key: 'down',                                                                                                     // 2222
      value: function () {                                                                                             // 2223
        function down($target) {                                                                                       // 2223
          var _this = this;                                                                                            // 2224
                                                                                                                       //
          if (!this.options.multiOpen) {                                                                               // 2226
            this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));           // 2227
          }                                                                                                            // 2228
                                                                                                                       //
          $target.addClass('is-active').attr({                                                                         // 2230
            'aria-hidden': false                                                                                       // 2230
          });                                                                                                          // 2230
                                                                                                                       //
          if (this.options.submenuToggle) {                                                                            // 2232
            $target.prev('.submenu-toggle').attr({                                                                     // 2233
              'aria-expanded': true                                                                                    // 2233
            });                                                                                                        // 2233
          } else {                                                                                                     // 2234
            $target.parent('.is-accordion-submenu-parent').attr({                                                      // 2235
              'aria-expanded': true                                                                                    // 2235
            });                                                                                                        // 2235
          }                                                                                                            // 2236
                                                                                                                       //
          $target.slideDown(_this.options.slideSpeed, function () {                                                    // 2238
            /**                                                                                                        // 2239
             * Fires when the menu is done opening.                                                                    //
             * @event AccordionMenu#down                                                                               //
             */_this.$element.trigger('down.zf.accordionMenu', [$target]);                                             //
          });                                                                                                          // 2244
        }                                                                                                              // 2245
                                                                                                                       //
        return down;                                                                                                   // 2223
      }() /**                                                                                                          // 2223
           * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.         //
           * @param {jQuery} $target - Sub-menu to close.                                                              //
           * @fires AccordionMenu#up                                                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 2221
      key: 'up',                                                                                                       // 2254
      value: function () {                                                                                             // 2255
        function up($target) {                                                                                         // 2255
          var _this = this;                                                                                            // 2256
                                                                                                                       //
          $target.slideUp(_this.options.slideSpeed, function () {                                                      // 2257
            /**                                                                                                        // 2258
             * Fires when the menu is done collapsing up.                                                              //
             * @event AccordionMenu#up                                                                                 //
             */_this.$element.trigger('up.zf.accordionMenu', [$target]);                                               //
          });                                                                                                          // 2263
          var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);                  // 2265
                                                                                                                       //
          if (this.options.submenuToggle) {                                                                            // 2267
            $menus.prev('.submenu-toggle').attr('aria-expanded', false);                                               // 2268
          } else {                                                                                                     // 2269
            $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);                                // 2270
          }                                                                                                            // 2271
        }                                                                                                              // 2272
                                                                                                                       //
        return up;                                                                                                     // 2255
      }() /**                                                                                                          // 2255
           * Destroys an instance of accordion menu.                                                                   //
           * @fires AccordionMenu#destroyed                                                                            //
           */                                                                                                          //
    }, {                                                                                                               // 2253
      key: '_destroy',                                                                                                 // 2280
      value: function () {                                                                                             // 2281
        function _destroy() {                                                                                          // 2281
          this.$element.find('[data-submenu]').slideDown(0).css('display', '');                                        // 2282
          this.$element.find('a').off('click.zf.accordionMenu');                                                       // 2283
                                                                                                                       //
          if (this.options.submenuToggle) {                                                                            // 2285
            this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');                               // 2286
            this.$element.find('.submenu-toggle').remove();                                                            // 2287
          }                                                                                                            // 2288
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Burn(this.$element, 'accordion');        // 2290
        }                                                                                                              // 2291
                                                                                                                       //
        return _destroy;                                                                                               // 2281
      }()                                                                                                              // 2281
    }]);                                                                                                               // 2279
                                                                                                                       //
    return AccordionMenu;                                                                                              // 2294
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["a" /* Plugin */]);                                               // 2295
                                                                                                                       //
  AccordionMenu.defaults = {                                                                                           // 2297
    /**                                                                                                                // 2298
     * Amount of time to animate the opening of a submenu in ms.                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 250                                                                                                    //
     */slideSpeed: 250,                                                                                                //
    /**                                                                                                                // 2305
     * Adds a separate submenu toggle button. This allows the parent item to have a link.                              //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */submenuToggle: false,                                                                                           //
    /**                                                                                                                // 2311
     * The text used for the submenu toggle if enabled. This is used for screen readers only.                          //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */submenuToggleText: 'Toggle menu',                                                                               //
    /**                                                                                                                // 2317
     * Allow the menu to have multiple open panes.                                                                     //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */multiOpen: true                                                                                                 //
  }; /***/                                                                                                             // 2297
}, /* 13 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 2328
  "use strict"; /* harmony export (binding) */                                                                         // 2332
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 2333
    return Drilldown;                                                                                                  // 2333
  }); /* harmony import */                                                                                             // 2333
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 2334
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 2336
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9); /* harmony import */               // 2337
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 2338
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__ = __webpack_require__(7); /* harmony import */                // 2339
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);                                       // 2340
                                                                                                                       //
  var _createClass = function () {                                                                                     // 2343
    function defineProperties(target, props) {                                                                         // 2343
      for (var i = 0; i < props.length; i++) {                                                                         // 2343
        var descriptor = props[i];                                                                                     // 2343
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 2343
        descriptor.configurable = true;                                                                                // 2343
        if ("value" in descriptor) descriptor.writable = true;                                                         // 2343
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 2343
      }                                                                                                                // 2343
    }                                                                                                                  // 2343
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 2343
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 2343
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 2343
      return Constructor;                                                                                              // 2343
    };                                                                                                                 // 2343
  }();                                                                                                                 // 2343
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 2345
    if (!(instance instanceof Constructor)) {                                                                          // 2345
      throw new TypeError("Cannot call a class as a function");                                                        // 2345
    }                                                                                                                  // 2345
  }                                                                                                                    // 2345
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 2347
    if (!self) {                                                                                                       // 2347
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 2347
    }                                                                                                                  // 2347
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 2347
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 2349
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 2349
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 2349
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 2349
      constructor: {                                                                                                   // 2349
        value: subClass,                                                                                               // 2349
        enumerable: false,                                                                                             // 2349
        writable: true,                                                                                                // 2349
        configurable: true                                                                                             // 2349
      }                                                                                                                // 2349
    });                                                                                                                // 2349
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 2349
     * Drilldown module.                                                                                               //
     * @module foundation.drilldown                                                                                    //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.nest                                                                                  //
     * @requires foundation.util.box                                                                                   //
     */                                                                                                                //
                                                                                                                       //
  var Drilldown = function (_Plugin) {                                                                                 // 2366
    _inherits(Drilldown, _Plugin);                                                                                     // 2367
                                                                                                                       //
    function Drilldown() {                                                                                             // 2369
      _classCallCheck(this, Drilldown);                                                                                // 2370
                                                                                                                       //
      return _possibleConstructorReturn(this, (Drilldown.__proto__ || Object.getPrototypeOf(Drilldown)).apply(this, arguments));
    }                                                                                                                  // 2373
                                                                                                                       //
    _createClass(Drilldown, [{                                                                                         // 2375
      key: '_setup',                                                                                                   // 2376
      /**                                                                                                              // 2378
       * Creates a new instance of a drilldown menu.                                                                   //
       * @class                                                                                                        //
       * @name Drilldown                                                                                               //
       * @param {jQuery} element - jQuery object to make into an accordion menu.                                       //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 2385
          this.$element = element;                                                                                     // 2386
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Drilldown.defaults, this.$element.data(), options);
          this.className = 'Drilldown'; // ie9 back compat                                                             // 2388
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Feather(this.$element, 'drilldown');     // 2390
                                                                                                                       //
          this._init();                                                                                                // 2392
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Drilldown', {          // 2394
            'ENTER': 'open',                                                                                           // 2395
            'SPACE': 'open',                                                                                           // 2396
            'ARROW_RIGHT': 'next',                                                                                     // 2397
            'ARROW_UP': 'up',                                                                                          // 2398
            'ARROW_DOWN': 'down',                                                                                      // 2399
            'ARROW_LEFT': 'previous',                                                                                  // 2400
            'ESCAPE': 'close',                                                                                         // 2401
            'TAB': 'down',                                                                                             // 2402
            'SHIFT_TAB': 'up'                                                                                          // 2403
          });                                                                                                          // 2394
        }                                                                                                              // 2405
                                                                                                                       //
        return _setup;                                                                                                 // 2385
      }() /**                                                                                                          // 2385
           * Initializes the drilldown by creating jQuery collections of elements                                      //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2375
      key: '_init',                                                                                                    // 2413
      value: function () {                                                                                             // 2414
        function _init() {                                                                                             // 2414
          if (this.options.autoApplyClass) {                                                                           // 2415
            this.$element.addClass('drilldown');                                                                       // 2416
          }                                                                                                            // 2417
                                                                                                                       //
          this.$element.attr({                                                                                         // 2419
            'role': 'tree',                                                                                            // 2420
            'aria-multiselectable': false                                                                              // 2421
          });                                                                                                          // 2419
          this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');                   // 2423
          this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');         // 2424
          this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');     // 2425
          this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'drilldown'));
                                                                                                                       //
          this._prepareMenu();                                                                                         // 2428
                                                                                                                       //
          this._registerEvents();                                                                                      // 2429
                                                                                                                       //
          this._keyboardEvents();                                                                                      // 2431
        }                                                                                                              // 2432
                                                                                                                       //
        return _init;                                                                                                  // 2414
      }() /**                                                                                                          // 2414
           * prepares drilldown menu by setting attributes to links and elements                                       //
           * sets a min height to prevent content jumping                                                              //
           * wraps the element if not already wrapped                                                                  //
           * @private                                                                                                  //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2412
      key: '_prepareMenu',                                                                                             // 2443
      value: function () {                                                                                             // 2444
        function _prepareMenu() {                                                                                      // 2444
          var _this = this; // if(!this.options.holdOpen){                                                             // 2445
          //   this._menuLinkEvents();                                                                                 // 2447
          // }                                                                                                         // 2448
                                                                                                                       //
                                                                                                                       //
          this.$submenuAnchors.each(function () {                                                                      // 2449
            var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);                                          // 2450
                                                                                                                       //
            var $sub = $link.parent();                                                                                 // 2451
                                                                                                                       //
            if (_this.options.parentLink) {                                                                            // 2452
              $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
            }                                                                                                          // 2454
                                                                                                                       //
            $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);                        // 2455
            $link.children('[data-submenu]').attr({                                                                    // 2456
              'aria-hidden': true,                                                                                     // 2457
              'tabindex': 0,                                                                                           // 2458
              'role': 'group'                                                                                          // 2459
            });                                                                                                        // 2456
                                                                                                                       //
            _this._events($link);                                                                                      // 2461
          });                                                                                                          // 2462
          this.$submenus.each(function () {                                                                            // 2463
            var $menu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                          // 2464
                $back = $menu.find('.js-drilldown-back');                                                              // 2464
                                                                                                                       //
            if (!$back.length) {                                                                                       // 2466
              switch (_this.options.backButtonPosition) {                                                              // 2467
                case "bottom":                                                                                         // 2468
                  $menu.append(_this.options.backButton);                                                              // 2469
                  break;                                                                                               // 2470
                                                                                                                       //
                case "top":                                                                                            // 2471
                  $menu.prepend(_this.options.backButton);                                                             // 2472
                  break;                                                                                               // 2473
                                                                                                                       //
                default:                                                                                               // 2474
                  console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");    // 2475
              }                                                                                                        // 2467
            }                                                                                                          // 2477
                                                                                                                       //
            _this._back($menu);                                                                                        // 2478
          });                                                                                                          // 2479
          this.$submenus.addClass('invisible');                                                                        // 2481
                                                                                                                       //
          if (!this.options.autoHeight) {                                                                              // 2482
            this.$submenus.addClass('drilldown-submenu-cover-previous');                                               // 2483
          } // create a wrapper on element if it doesn't exist.                                                        // 2484
                                                                                                                       //
                                                                                                                       //
          if (!this.$element.parent().hasClass('is-drilldown')) {                                                      // 2487
            this.$wrapper = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.wrapper).addClass('is-drilldown');
            if (this.options.animateHeight) this.$wrapper.addClass('animate-height');                                  // 2489
            this.$element.wrap(this.$wrapper);                                                                         // 2490
          } // set wrapper                                                                                             // 2491
                                                                                                                       //
                                                                                                                       //
          this.$wrapper = this.$element.parent();                                                                      // 2493
          this.$wrapper.css(this._getMaxDims());                                                                       // 2494
        }                                                                                                              // 2495
                                                                                                                       //
        return _prepareMenu;                                                                                           // 2444
      }()                                                                                                              // 2444
    }, {                                                                                                               // 2442
      key: '_resize',                                                                                                  // 2497
      value: function () {                                                                                             // 2498
        function _resize() {                                                                                           // 2498
          this.$wrapper.css({                                                                                          // 2499
            'max-width': 'none',                                                                                       // 2499
            'min-height': 'none'                                                                                       // 2499
          }); // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths  // 2499
                                                                                                                       //
          this.$wrapper.css(this._getMaxDims());                                                                       // 2501
        }                                                                                                              // 2502
                                                                                                                       //
        return _resize;                                                                                                // 2498
      }() /**                                                                                                          // 2498
           * Adds event handlers to elements in the menu.                                                              //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {jQuery} $elem - the current menu item to add handlers to.                                         //
           */                                                                                                          //
    }, {                                                                                                               // 2496
      key: '_events',                                                                                                  // 2512
      value: function () {                                                                                             // 2513
        function _events($elem) {                                                                                      // 2513
          var _this = this;                                                                                            // 2514
                                                                                                                       //
          $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {                                      // 2516
            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
              e.stopImmediatePropagation();                                                                            // 2518
              e.preventDefault();                                                                                      // 2519
            } // if(e.target !== e.currentTarget.firstElementChild){                                                   // 2520
            //   return false;                                                                                         // 2523
            // }                                                                                                       // 2524
                                                                                                                       //
                                                                                                                       //
            _this._show($elem.parent('li'));                                                                           // 2525
                                                                                                                       //
            if (_this.options.closeOnClick) {                                                                          // 2527
              var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');                                      // 2528
                                                                                                                       //
              $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {                                       // 2529
                if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target)) {
                  return;                                                                                              // 2531
                }                                                                                                      // 2532
                                                                                                                       //
                e.preventDefault();                                                                                    // 2533
                                                                                                                       //
                _this._hideAll();                                                                                      // 2534
                                                                                                                       //
                $body.off('.zf.drilldown');                                                                            // 2535
              });                                                                                                      // 2536
            }                                                                                                          // 2537
          });                                                                                                          // 2538
        }                                                                                                              // 2539
                                                                                                                       //
        return _events;                                                                                                // 2513
      }() /**                                                                                                          // 2513
           * Adds event handlers to the menu element.                                                                  //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2511
      key: '_registerEvents',                                                                                          // 2548
      value: function () {                                                                                             // 2549
        function _registerEvents() {                                                                                   // 2549
          if (this.options.scrollTop) {                                                                                // 2550
            this._bindHandler = this._scrollTop.bind(this);                                                            // 2551
            this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);            // 2552
          }                                                                                                            // 2553
                                                                                                                       //
          this.$element.on('mutateme.zf.trigger', this._resize.bind(this));                                            // 2554
        }                                                                                                              // 2555
                                                                                                                       //
        return _registerEvents;                                                                                        // 2549
      }() /**                                                                                                          // 2549
           * Scroll to Top of Element or data-scroll-top-element                                                       //
           * @function                                                                                                 //
           * @fires Drilldown#scrollme                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2547
      key: '_scrollTop',                                                                                               // 2564
      value: function () {                                                                                             // 2565
        function _scrollTop() {                                                                                        // 2565
          var _this = this;                                                                                            // 2566
                                                                                                                       //
          var $scrollTopElement = _this.options.scrollTopElement != '' ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(_this.options.scrollTopElement) : _this.$element,
              scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);                // 2567
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({                            // 2569
            scrollTop: scrollPos                                                                                       // 2569
          }, _this.options.animationDuration, _this.options.animationEasing, function () {                             // 2569
            /**                                                                                                        // 2570
              * Fires after the menu has scrolled                                                                      //
              * @event Drilldown#scrollme                                                                              //
              */if (this === __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
          });                                                                                                          // 2575
        }                                                                                                              // 2576
                                                                                                                       //
        return _scrollTop;                                                                                             // 2565
      }() /**                                                                                                          // 2565
           * Adds keydown event listener to `li`'s in the menu.                                                        //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2563
      key: '_keyboardEvents',                                                                                          // 2584
      value: function () {                                                                                             // 2585
        function _keyboardEvents() {                                                                                   // 2585
          var _this = this;                                                                                            // 2586
                                                                                                                       //
          this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                       // 2589
                $elements = $element.parent('li').parent('ul').children('li').children('a'),                           // 2589
                $prevElement,                                                                                          // 2589
                $nextElement;                                                                                          // 2589
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 2594
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {                                 // 2595
                $prevElement = $elements.eq(Math.max(0, i - 1));                                                       // 2596
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                    // 2597
                return;                                                                                                // 2598
              }                                                                                                        // 2599
            });                                                                                                        // 2600
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Drilldown', {    // 2602
              next: function () {                                                                                      // 2603
                if ($element.is(_this.$submenuAnchors)) {                                                              // 2604
                  _this._show($element.parent('li'));                                                                  // 2605
                                                                                                                       //
                  $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($element), function () {
                    $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();                    // 2607
                  });                                                                                                  // 2608
                  return true;                                                                                         // 2609
                }                                                                                                      // 2610
              },                                                                                                       // 2611
              previous: function () {                                                                                  // 2612
                _this._hide($element.parent('li').parent('ul'));                                                       // 2613
                                                                                                                       //
                $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($element), function () {
                  setTimeout(function () {                                                                             // 2615
                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();                     // 2616
                  }, 1);                                                                                               // 2617
                });                                                                                                    // 2618
                return true;                                                                                           // 2619
              },                                                                                                       // 2620
              up: function () {                                                                                        // 2621
                $prevElement.focus(); // Don't tap focus on first element in root ul                                   // 2622
                                                                                                                       //
                return !$element.is(_this.$element.find('> li:first-child > a'));                                      // 2624
              },                                                                                                       // 2625
              down: function () {                                                                                      // 2626
                $nextElement.focus(); // Don't tap focus on last element in root ul                                    // 2627
                                                                                                                       //
                return !$element.is(_this.$element.find('> li:last-child > a'));                                       // 2629
              },                                                                                                       // 2630
              close: function () {                                                                                     // 2631
                // Don't close on element in root ul                                                                   // 2632
                if (!$element.is(_this.$element.find('> li > a'))) {                                                   // 2633
                  _this._hide($element.parent().parent());                                                             // 2634
                                                                                                                       //
                  $element.parent().parent().siblings('a').focus();                                                    // 2635
                }                                                                                                      // 2636
              },                                                                                                       // 2637
              open: function () {                                                                                      // 2638
                if (!$element.is(_this.$menuItems)) {                                                                  // 2639
                  // not menu item means back button                                                                   // 2640
                  _this._hide($element.parent('li').parent('ul'));                                                     // 2641
                                                                                                                       //
                  $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($element), function () {
                    setTimeout(function () {                                                                           // 2643
                      $element.parent('li').parent('ul').parent('li').children('a').first().focus();                   // 2644
                    }, 1);                                                                                             // 2645
                  });                                                                                                  // 2646
                  return true;                                                                                         // 2647
                } else if ($element.is(_this.$submenuAnchors)) {                                                       // 2648
                  _this._show($element.parent('li'));                                                                  // 2649
                                                                                                                       //
                  $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($element), function () {
                    $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();                    // 2651
                  });                                                                                                  // 2652
                  return true;                                                                                         // 2653
                }                                                                                                      // 2654
              },                                                                                                       // 2655
              handled: function (preventDefault) {                                                                     // 2656
                if (preventDefault) {                                                                                  // 2657
                  e.preventDefault();                                                                                  // 2658
                }                                                                                                      // 2659
                                                                                                                       //
                e.stopImmediatePropagation();                                                                          // 2660
              }                                                                                                        // 2661
            });                                                                                                        // 2602
          }); // end keyboardAccess                                                                                    // 2663
        }                                                                                                              // 2664
                                                                                                                       //
        return _keyboardEvents;                                                                                        // 2585
      }() /**                                                                                                          // 2585
           * Closes all open elements, and returns to root menu.                                                       //
           * @function                                                                                                 //
           * @fires Drilldown#closed                                                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 2583
      key: '_hideAll',                                                                                                 // 2673
      value: function () {                                                                                             // 2674
        function _hideAll() {                                                                                          // 2674
          var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');                    // 2675
          if (this.options.autoHeight) this.$wrapper.css({                                                             // 2676
            height: $elem.parent().closest('ul').data('calcHeight')                                                    // 2676
          });                                                                                                          // 2676
          $elem.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($elem), function (e) {
            $elem.removeClass('is-active is-closing');                                                                 // 2678
          }); /**                                                                                                      // 2679
               * Fires when the menu is fully closed.                                                                  //
               * @event Drilldown#closed                                                                               //
               */                                                                                                      //
          this.$element.trigger('closed.zf.drilldown');                                                                // 2684
        }                                                                                                              // 2685
                                                                                                                       //
        return _hideAll;                                                                                               // 2674
      }() /**                                                                                                          // 2674
           * Adds event listener for each `back` button, and closes open menus.                                        //
           * @function                                                                                                 //
           * @fires Drilldown#back                                                                                     //
           * @param {jQuery} $elem - the current sub-menu to add `back` event.                                         //
           */                                                                                                          //
    }, {                                                                                                               // 2672
      key: '_back',                                                                                                    // 2695
      value: function () {                                                                                             // 2696
        function _back($elem) {                                                                                        // 2696
          var _this = this;                                                                                            // 2697
                                                                                                                       //
          $elem.off('click.zf.drilldown');                                                                             // 2698
          $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {                                 // 2699
            e.stopImmediatePropagation(); // console.log('mouseup on back');                                           // 2700
                                                                                                                       //
            _this._hide($elem); // If there is a parent submenu, call show                                             // 2702
                                                                                                                       //
                                                                                                                       //
            var parentSubMenu = $elem.parent('li').parent('ul').parent('li');                                          // 2705
                                                                                                                       //
            if (parentSubMenu.length) {                                                                                // 2706
              _this._show(parentSubMenu);                                                                              // 2707
            }                                                                                                          // 2708
          });                                                                                                          // 2709
        }                                                                                                              // 2710
                                                                                                                       //
        return _back;                                                                                                  // 2696
      }() /**                                                                                                          // 2696
           * Adds event listener to menu items w/o submenus to close open menus on click.                              //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2694
      key: '_menuLinkEvents',                                                                                          // 2719
      value: function () {                                                                                             // 2720
        function _menuLinkEvents() {                                                                                   // 2720
          var _this = this;                                                                                            // 2721
                                                                                                                       //
          this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
            // e.stopImmediatePropagation();                                                                           // 2723
            setTimeout(function () {                                                                                   // 2724
              _this._hideAll();                                                                                        // 2725
            }, 0);                                                                                                     // 2726
          });                                                                                                          // 2727
        }                                                                                                              // 2728
                                                                                                                       //
        return _menuLinkEvents;                                                                                        // 2720
      }() /**                                                                                                          // 2720
           * Opens a submenu.                                                                                          //
           * @function                                                                                                 //
           * @fires Drilldown#open                                                                                     //
           * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.                    //
           */                                                                                                          //
    }, {                                                                                                               // 2718
      key: '_show',                                                                                                    // 2738
      value: function () {                                                                                             // 2739
        function _show($elem) {                                                                                        // 2739
          if (this.options.autoHeight) this.$wrapper.css({                                                             // 2740
            height: $elem.children('[data-submenu]').data('calcHeight')                                                // 2740
          });                                                                                                          // 2740
          $elem.attr('aria-expanded', true);                                                                           // 2741
          $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false); /**
                                                                                                                       * Fires when the submenu has opened.
                                                                                                                       * @event Drilldown#open
                                                                                                                       */
          this.$element.trigger('open.zf.drilldown', [$elem]);                                                         // 2747
        }                                                                                                              // 2748
                                                                                                                       //
        return _show;                                                                                                  // 2739
      }()                                                                                                              // 2739
    }, {                                                                                                               // 2737
      key: '_hide',                                                                                                    // 2750
      /**                                                                                                              // 2753
       * Hides a submenu                                                                                               //
       * @function                                                                                                     //
       * @fires Drilldown#hide                                                                                         //
       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.                                      //
       */value: function () {                                                                                          //
        function _hide($elem) {                                                                                        // 2759
          if (this.options.autoHeight) this.$wrapper.css({                                                             // 2760
            height: $elem.parent().closest('ul').data('calcHeight')                                                    // 2760
          });                                                                                                          // 2760
                                                                                                                       //
          var _this = this;                                                                                            // 2761
                                                                                                                       //
          $elem.parent('li').attr('aria-expanded', false);                                                             // 2762
          $elem.attr('aria-hidden', true).addClass('is-closing');                                                      // 2763
          $elem.addClass('is-closing').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])($elem), function () {
            $elem.removeClass('is-active is-closing');                                                                 // 2765
            $elem.blur().addClass('invisible');                                                                        // 2766
          }); /**                                                                                                      // 2767
               * Fires when the submenu has closed.                                                                    //
               * @event Drilldown#hide                                                                                 //
               */                                                                                                      //
          $elem.trigger('hide.zf.drilldown', [$elem]);                                                                 // 2772
        }                                                                                                              // 2773
                                                                                                                       //
        return _hide;                                                                                                  // 2759
      }() /**                                                                                                          // 2759
           * Iterates through the nested menus to calculate the min-height, and max-width for the menu.                //
           * Prevents content jumping.                                                                                 //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 2749
      key: '_getMaxDims',                                                                                              // 2783
      value: function () {                                                                                             // 2784
        function _getMaxDims() {                                                                                       // 2784
          var maxHeight = 0,                                                                                           // 2785
              result = {},                                                                                             // 2785
              _this = this;                                                                                            // 2785
                                                                                                                       //
          this.$submenus.add(this.$element).each(function () {                                                         // 2788
            var numOfElems = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('li').length;               // 2789
                                                                                                                       //
            var height = __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__["a" /* Box */].GetDimensions(this).height;
                                                                                                                       //
            maxHeight = height > maxHeight ? height : maxHeight;                                                       // 2791
                                                                                                                       //
            if (_this.options.autoHeight) {                                                                            // 2792
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('calcHeight', height);                         // 2793
                                                                                                                       //
              if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass('is-drilldown-submenu')) result['height'] = height;
            }                                                                                                          // 2795
          });                                                                                                          // 2796
          if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';                                       // 2798
          result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';                                 // 2800
          return result;                                                                                               // 2802
        }                                                                                                              // 2803
                                                                                                                       //
        return _getMaxDims;                                                                                            // 2784
      }() /**                                                                                                          // 2784
           * Destroys the Drilldown Menu                                                                               //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2782
      key: '_destroy',                                                                                                 // 2811
      value: function () {                                                                                             // 2812
        function _destroy() {                                                                                          // 2812
          if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);                           // 2813
                                                                                                                       //
          this._hideAll();                                                                                             // 2814
                                                                                                                       //
          this.$element.off('mutateme.zf.trigger');                                                                    // 2815
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Burn(this.$element, 'drilldown');        // 2816
                                                                                                                       //
          this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
          this.$submenuAnchors.each(function () {                                                                      // 2818
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off('.zf.drilldown');                                 // 2819
          });                                                                                                          // 2820
          this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');                                    // 2822
          this.$element.find('a').each(function () {                                                                   // 2824
            var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);                                          // 2825
                                                                                                                       //
            $link.removeAttr('tabindex');                                                                              // 2826
                                                                                                                       //
            if ($link.data('savedHref')) {                                                                             // 2827
              $link.attr('href', $link.data('savedHref')).removeData('savedHref');                                     // 2828
            } else {                                                                                                   // 2829
              return;                                                                                                  // 2830
            }                                                                                                          // 2831
          });                                                                                                          // 2832
        }                                                                                                              // 2833
                                                                                                                       //
        return _destroy;                                                                                               // 2812
      }()                                                                                                              // 2812
    }]);                                                                                                               // 2810
                                                                                                                       //
    return Drilldown;                                                                                                  // 2836
  }(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["a" /* Plugin */]);                                               // 2837
                                                                                                                       //
  Drilldown.defaults = {                                                                                               // 2839
    /**                                                                                                                // 2840
     * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are         //
     * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.             //
     * @option                                                                                                         //
     * @type {boolian}                                                                                                 //
     * @default true                                                                                                   //
     */autoApplyClass: true,                                                                                           //
    /**                                                                                                                // 2848
     * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'                                          //
     */backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',                                      //
    /**                                                                                                                // 2855
     * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.      //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default top                                                                                                    //
     */backButtonPosition: 'top',                                                                                      //
    /**                                                                                                                // 2862
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default '<div></div>'                                                                                          //
     */wrapper: '<div></div>',                                                                                         //
    /**                                                                                                                // 2869
     * Adds the parent link to the submenu.                                                                            //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */parentLink: false,                                                                                              //
    /**                                                                                                                // 2876
     * Allow the menu to return to root list on body click.                                                            //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */closeOnClick: false,                                                                                            //
    /**                                                                                                                // 2883
     * Allow the menu to auto adjust height.                                                                           //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */autoHeight: false,                                                                                              //
    /**                                                                                                                // 2890
     * Animate the auto adjust height.                                                                                 //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */animateHeight: false,                                                                                           //
    /**                                                                                                                // 2897
     * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button             //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */scrollTop: false,                                                                                               //
    /**                                                                                                                // 2904
     * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */scrollTopElement: '',                                                                                           //
    /**                                                                                                                // 2911
     * ScrollTop offset                                                                                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */scrollTopOffset: 0,                                                                                             //
    /**                                                                                                                // 2918
     * Scroll animation duration                                                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 500                                                                                                    //
     */animationDuration: 500,                                                                                         //
    /**                                                                                                                // 2925
     * Scroll animation easing. Can be `'swing'` or `'linear'`.                                                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @see {@link https://api.jquery.com/animate|JQuery animate}                                                      //
     * @default 'swing'                                                                                                //
     */animationEasing: 'swing' // holdOpen: false                                                                     //
                                                                                                                       //
  }; /***/                                                                                                             // 2839
}, /* 14 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 2938
  "use strict"; /* harmony export (binding) */                                                                         // 2942
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 2943
    return DropdownMenu;                                                                                               // 2943
  }); /* harmony import */                                                                                             // 2943
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 2944
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 2946
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9); /* harmony import */               // 2947
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__ = __webpack_require__(7); /* harmony import */                // 2948
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 2949
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);                                       // 2950
                                                                                                                       //
  var _createClass = function () {                                                                                     // 2953
    function defineProperties(target, props) {                                                                         // 2953
      for (var i = 0; i < props.length; i++) {                                                                         // 2953
        var descriptor = props[i];                                                                                     // 2953
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 2953
        descriptor.configurable = true;                                                                                // 2953
        if ("value" in descriptor) descriptor.writable = true;                                                         // 2953
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 2953
      }                                                                                                                // 2953
    }                                                                                                                  // 2953
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 2953
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 2953
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 2953
      return Constructor;                                                                                              // 2953
    };                                                                                                                 // 2953
  }();                                                                                                                 // 2953
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 2955
    if (!(instance instanceof Constructor)) {                                                                          // 2955
      throw new TypeError("Cannot call a class as a function");                                                        // 2955
    }                                                                                                                  // 2955
  }                                                                                                                    // 2955
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 2957
    if (!self) {                                                                                                       // 2957
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 2957
    }                                                                                                                  // 2957
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 2957
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 2959
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 2959
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 2959
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 2959
      constructor: {                                                                                                   // 2959
        value: subClass,                                                                                               // 2959
        enumerable: false,                                                                                             // 2959
        writable: true,                                                                                                // 2959
        configurable: true                                                                                             // 2959
      }                                                                                                                // 2959
    });                                                                                                                // 2959
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 2959
     * DropdownMenu module.                                                                                            //
     * @module foundation.dropdown-menu                                                                                //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.box                                                                                   //
     * @requires foundation.util.nest                                                                                  //
     */                                                                                                                //
                                                                                                                       //
  var DropdownMenu = function (_Plugin) {                                                                              // 2976
    _inherits(DropdownMenu, _Plugin);                                                                                  // 2977
                                                                                                                       //
    function DropdownMenu() {                                                                                          // 2979
      _classCallCheck(this, DropdownMenu);                                                                             // 2980
                                                                                                                       //
      return _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).apply(this, arguments));
    }                                                                                                                  // 2983
                                                                                                                       //
    _createClass(DropdownMenu, [{                                                                                      // 2985
      key: '_setup',                                                                                                   // 2986
      /**                                                                                                              // 2988
       * Creates a new instance of DropdownMenu.                                                                       //
       * @class                                                                                                        //
       * @name DropdownMenu                                                                                            //
       * @fires DropdownMenu#init                                                                                      //
       * @param {jQuery} element - jQuery object to make into a dropdown menu.                                         //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 2996
          this.$element = element;                                                                                     // 2997
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, DropdownMenu.defaults, this.$element.data(), options);
          this.className = 'DropdownMenu'; // ie9 back compat                                                          // 2999
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Feather(this.$element, 'dropdown');      // 3001
                                                                                                                       //
          this._init();                                                                                                // 3002
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('DropdownMenu', {       // 3004
            'ENTER': 'open',                                                                                           // 3005
            'SPACE': 'open',                                                                                           // 3006
            'ARROW_RIGHT': 'next',                                                                                     // 3007
            'ARROW_UP': 'up',                                                                                          // 3008
            'ARROW_DOWN': 'down',                                                                                      // 3009
            'ARROW_LEFT': 'previous',                                                                                  // 3010
            'ESCAPE': 'close'                                                                                          // 3011
          });                                                                                                          // 3004
        }                                                                                                              // 3013
                                                                                                                       //
        return _setup;                                                                                                 // 2996
      }() /**                                                                                                          // 2996
           * Initializes the plugin, and calls _prepareMenu                                                            //
           * @private                                                                                                  //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 2985
      key: '_init',                                                                                                    // 3022
      value: function () {                                                                                             // 3023
        function _init() {                                                                                             // 3023
          var subs = this.$element.find('li.is-dropdown-submenu-parent');                                              // 3024
          this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');
          this.$menuItems = this.$element.find('[role="menuitem"]');                                                   // 3027
          this.$tabs = this.$element.children('[role="menuitem"]');                                                    // 3028
          this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);                              // 3029
                                                                                                                       //
          if (this.options.alignment === 'auto') {                                                                     // 3031
            if (this.$element.hasClass(this.options.rightClass) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["a" /* rtl */])() || this.$element.parents('.top-bar-right').is('*')) {
              this.options.alignment = 'right';                                                                        // 3033
              subs.addClass('opens-left');                                                                             // 3034
            } else {                                                                                                   // 3035
              this.options.alignment = 'left';                                                                         // 3036
              subs.addClass('opens-right');                                                                            // 3037
            }                                                                                                          // 3038
          } else {                                                                                                     // 3039
            if (this.options.alignment === 'right') {                                                                  // 3040
              subs.addClass('opens-left');                                                                             // 3041
            } else {                                                                                                   // 3042
              subs.addClass('opens-right');                                                                            // 3043
            }                                                                                                          // 3044
          }                                                                                                            // 3045
                                                                                                                       //
          this.changed = false;                                                                                        // 3046
                                                                                                                       //
          this._events();                                                                                              // 3047
        }                                                                                                              // 3048
                                                                                                                       //
        return _init;                                                                                                  // 3023
      }()                                                                                                              // 3023
    }, {                                                                                                               // 3021
      key: '_isVertical',                                                                                              // 3050
      value: function () {                                                                                             // 3051
        function _isVertical() {                                                                                       // 3051
          return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';            // 3052
        }                                                                                                              // 3053
                                                                                                                       //
        return _isVertical;                                                                                            // 3051
      }()                                                                                                              // 3051
    }, {                                                                                                               // 3049
      key: '_isRtl',                                                                                                   // 3055
      value: function () {                                                                                             // 3056
        function _isRtl() {                                                                                            // 3056
          return this.$element.hasClass('align-right') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["a" /* rtl */])() && !this.$element.hasClass('align-left');
        }                                                                                                              // 3058
                                                                                                                       //
        return _isRtl;                                                                                                 // 3056
      }() /**                                                                                                          // 3056
           * Adds event listeners to elements within the menu                                                          //
           * @private                                                                                                  //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 3054
      key: '_events',                                                                                                  // 3067
      value: function () {                                                                                             // 3068
        function _events() {                                                                                           // 3068
          var _this = this,                                                                                            // 3069
              hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',                       // 3069
              parClass = 'is-dropdown-submenu-parent'; // used for onClick and in the keyboard handlers                // 3069
                                                                                                                       //
                                                                                                                       //
          var handleClickFn = function (e) {                                                                           // 3074
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '.' + parClass),   // 3075
                hasSub = $elem.hasClass(parClass),                                                                     // 3075
                hasClicked = $elem.attr('data-is-click') === 'true',                                                   // 3075
                $sub = $elem.children('.is-dropdown-submenu');                                                         // 3075
                                                                                                                       //
            if (hasSub) {                                                                                              // 3080
              if (hasClicked) {                                                                                        // 3081
                if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                  return;                                                                                              // 3083
                } else {                                                                                               // 3084
                  e.stopImmediatePropagation();                                                                        // 3085
                  e.preventDefault();                                                                                  // 3086
                                                                                                                       //
                  _this._hide($elem);                                                                                  // 3087
                }                                                                                                      // 3088
              } else {                                                                                                 // 3089
                e.preventDefault();                                                                                    // 3090
                e.stopImmediatePropagation();                                                                          // 3091
                                                                                                                       //
                _this._show($sub);                                                                                     // 3092
                                                                                                                       //
                $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);             // 3093
              }                                                                                                        // 3094
            }                                                                                                          // 3095
          };                                                                                                           // 3096
                                                                                                                       //
          if (this.options.clickOpen || hasTouch) {                                                                    // 3098
            this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);                     // 3099
          } // Handle Leaf element Clicks                                                                              // 3100
                                                                                                                       //
                                                                                                                       //
          if (_this.options.closeOnClickInside) {                                                                      // 3103
            this.$menuItems.on('click.zf.dropdownmenu', function (e) {                                                 // 3104
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                        // 3105
                  hasSub = $elem.hasClass(parClass);                                                                   // 3105
                                                                                                                       //
              if (!hasSub) {                                                                                           // 3107
                _this._hide();                                                                                         // 3108
              }                                                                                                        // 3109
            });                                                                                                        // 3110
          }                                                                                                            // 3111
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 3113
            this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {                                            // 3114
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                        // 3115
                  hasSub = $elem.hasClass(parClass);                                                                   // 3115
                                                                                                                       //
              if (hasSub) {                                                                                            // 3118
                clearTimeout($elem.data('_delay'));                                                                    // 3119
                $elem.data('_delay', setTimeout(function () {                                                          // 3120
                  _this._show($elem.children('.is-dropdown-submenu'));                                                 // 3121
                }, _this.options.hoverDelay));                                                                         // 3122
              }                                                                                                        // 3123
            }).on('mouseleave.zf.dropdownmenu', function (e) {                                                         // 3124
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                        // 3125
                  hasSub = $elem.hasClass(parClass);                                                                   // 3125
                                                                                                                       //
              if (hasSub && _this.options.autoclose) {                                                                 // 3127
                if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {                               // 3128
                  return false;                                                                                        // 3129
                }                                                                                                      // 3130
                                                                                                                       //
                clearTimeout($elem.data('_delay'));                                                                    // 3132
                $elem.data('_delay', setTimeout(function () {                                                          // 3133
                  _this._hide($elem);                                                                                  // 3134
                }, _this.options.closingTime));                                                                        // 3135
              }                                                                                                        // 3136
            });                                                                                                        // 3137
          }                                                                                                            // 3138
                                                                                                                       //
          this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {                                                 // 3139
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '[role="menuitem"]'),
                isTab = _this.$tabs.index($element) > -1,                                                              // 3140
                $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),                               // 3140
                $prevElement,                                                                                          // 3140
                $nextElement;                                                                                          // 3140
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 3146
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {                                 // 3147
                $prevElement = $elements.eq(i - 1);                                                                    // 3148
                $nextElement = $elements.eq(i + 1);                                                                    // 3149
                return;                                                                                                // 3150
              }                                                                                                        // 3151
            });                                                                                                        // 3152
                                                                                                                       //
            var nextSibling = function () {                                                                            // 3154
              if (!$element.is(':last-child')) {                                                                       // 3155
                $nextElement.children('a:first').focus();                                                              // 3156
                e.preventDefault();                                                                                    // 3157
              }                                                                                                        // 3158
            },                                                                                                         // 3159
                prevSibling = function () {                                                                            // 3154
              $prevElement.children('a:first').focus();                                                                // 3161
              e.preventDefault();                                                                                      // 3162
            },                                                                                                         // 3163
                openSub = function () {                                                                                // 3154
              var $sub = $element.children('ul.is-dropdown-submenu');                                                  // 3165
                                                                                                                       //
              if ($sub.length) {                                                                                       // 3166
                _this._show($sub);                                                                                     // 3167
                                                                                                                       //
                $element.find('li > a:first').focus();                                                                 // 3168
                e.preventDefault();                                                                                    // 3169
              } else {                                                                                                 // 3170
                return;                                                                                                // 3171
              }                                                                                                        // 3172
            },                                                                                                         // 3173
                closeSub = function () {                                                                               // 3154
              //if ($element.is(':first-child')) {                                                                     // 3175
              var close = $element.parent('ul').parent('li');                                                          // 3176
              close.children('a:first').focus();                                                                       // 3177
                                                                                                                       //
              _this._hide(close);                                                                                      // 3178
                                                                                                                       //
              e.preventDefault(); //}                                                                                  // 3179
            };                                                                                                         // 3181
                                                                                                                       //
            var functions = {                                                                                          // 3182
              open: openSub,                                                                                           // 3183
              close: function () {                                                                                     // 3184
                _this._hide(_this.$element);                                                                           // 3185
                                                                                                                       //
                _this.$menuItems.eq(0).children('a').focus(); // focus to first element                                // 3186
                                                                                                                       //
                                                                                                                       //
                e.preventDefault();                                                                                    // 3187
              },                                                                                                       // 3188
              handled: function () {                                                                                   // 3189
                e.stopImmediatePropagation();                                                                          // 3190
              }                                                                                                        // 3191
            };                                                                                                         // 3182
                                                                                                                       //
            if (isTab) {                                                                                               // 3194
              if (_this._isVertical()) {                                                                               // 3195
                // vertical menu                                                                                       // 3196
                if (_this._isRtl()) {                                                                                  // 3197
                  // right aligned                                                                                     // 3198
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                   // 3199
                    down: nextSibling,                                                                                 // 3200
                    up: prevSibling,                                                                                   // 3201
                    next: closeSub,                                                                                    // 3202
                    previous: openSub                                                                                  // 3203
                  });                                                                                                  // 3199
                } else {                                                                                               // 3205
                  // left aligned                                                                                      // 3206
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                   // 3207
                    down: nextSibling,                                                                                 // 3208
                    up: prevSibling,                                                                                   // 3209
                    next: openSub,                                                                                     // 3210
                    previous: closeSub                                                                                 // 3211
                  });                                                                                                  // 3207
                }                                                                                                      // 3213
              } else {                                                                                                 // 3214
                // horizontal menu                                                                                     // 3215
                if (_this._isRtl()) {                                                                                  // 3216
                  // right aligned                                                                                     // 3217
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                   // 3218
                    next: prevSibling,                                                                                 // 3219
                    previous: nextSibling,                                                                             // 3220
                    down: openSub,                                                                                     // 3221
                    up: closeSub                                                                                       // 3222
                  });                                                                                                  // 3218
                } else {                                                                                               // 3224
                  // left aligned                                                                                      // 3225
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                   // 3226
                    next: nextSibling,                                                                                 // 3227
                    previous: prevSibling,                                                                             // 3228
                    down: openSub,                                                                                     // 3229
                    up: closeSub                                                                                       // 3230
                  });                                                                                                  // 3226
                }                                                                                                      // 3232
              }                                                                                                        // 3233
            } else {                                                                                                   // 3234
              // not tabs -> one sub                                                                                   // 3235
              if (_this._isRtl()) {                                                                                    // 3236
                // right aligned                                                                                       // 3237
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                     // 3238
                  next: closeSub,                                                                                      // 3239
                  previous: openSub,                                                                                   // 3240
                  down: nextSibling,                                                                                   // 3241
                  up: prevSibling                                                                                      // 3242
                });                                                                                                    // 3238
              } else {                                                                                                 // 3244
                // left aligned                                                                                        // 3245
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {                                     // 3246
                  next: openSub,                                                                                       // 3247
                  previous: closeSub,                                                                                  // 3248
                  down: nextSibling,                                                                                   // 3249
                  up: prevSibling                                                                                      // 3250
                });                                                                                                    // 3246
              }                                                                                                        // 3252
            }                                                                                                          // 3253
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'DropdownMenu', functions);
          });                                                                                                          // 3255
        }                                                                                                              // 3256
                                                                                                                       //
        return _events;                                                                                                // 3068
      }() /**                                                                                                          // 3068
           * Adds an event handler to the body to close any dropdowns on a click.                                      //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3066
      key: '_addBodyHandler',                                                                                          // 3265
      value: function () {                                                                                             // 3266
        function _addBodyHandler() {                                                                                   // 3266
          var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body),                                   // 3267
              _this = this;                                                                                            // 3267
                                                                                                                       //
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
            var $link = _this.$element.find(e.target);                                                                 // 3270
                                                                                                                       //
            if ($link.length) {                                                                                        // 3271
              return;                                                                                                  // 3272
            }                                                                                                          // 3273
                                                                                                                       //
            _this._hide();                                                                                             // 3275
                                                                                                                       //
            $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');                                             // 3276
          });                                                                                                          // 3277
        }                                                                                                              // 3278
                                                                                                                       //
        return _addBodyHandler;                                                                                        // 3266
      }() /**                                                                                                          // 3266
           * Opens a dropdown pane, and checks for collisions first.                                                   //
           * @param {jQuery} $sub - ul element that is a submenu to show                                               //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @fires DropdownMenu#show                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3264
      key: '_show',                                                                                                    // 3289
      value: function () {                                                                                             // 3290
        function _show($sub) {                                                                                         // 3290
          var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {                                              // 3291
            return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).find($sub).length > 0;                           // 3292
          }));                                                                                                         // 3293
          var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');          // 3294
                                                                                                                       //
          this._hide($sibs, idx);                                                                                      // 3295
                                                                                                                       //
          $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
                                                                                                                       //
          var clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["a" /* Box */].ImNotTouchingYou($sub, null, true);
                                                                                                                       //
          if (!clear) {                                                                                                // 3298
            var oldClass = this.options.alignment === 'left' ? '-right' : '-left',                                     // 3299
                $parentLi = $sub.parent('.is-dropdown-submenu-parent');                                                // 3299
            $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);                     // 3301
            clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["a" /* Box */].ImNotTouchingYou($sub, null, true);
                                                                                                                       //
            if (!clear) {                                                                                              // 3303
              $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');                        // 3304
            }                                                                                                          // 3305
                                                                                                                       //
            this.changed = true;                                                                                       // 3306
          }                                                                                                            // 3307
                                                                                                                       //
          $sub.css('visibility', '');                                                                                  // 3308
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 3309
            this._addBodyHandler();                                                                                    // 3310
          } /**                                                                                                        // 3311
             * Fires when the new dropdown pane is visible.                                                            //
             * @event DropdownMenu#show                                                                                //
             */                                                                                                        //
                                                                                                                       //
          this.$element.trigger('show.zf.dropdownmenu', [$sub]);                                                       // 3316
        }                                                                                                              // 3317
                                                                                                                       //
        return _show;                                                                                                  // 3290
      }() /**                                                                                                          // 3290
           * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.         //
           * @function                                                                                                 //
           * @param {jQuery} $elem - element with a submenu to hide                                                    //
           * @param {Number} idx - index of the $tabs collection to hide                                               //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3288
      key: '_hide',                                                                                                    // 3328
      value: function () {                                                                                             // 3329
        function _hide($elem, idx) {                                                                                   // 3329
          var $toClose;                                                                                                // 3330
                                                                                                                       //
          if ($elem && $elem.length) {                                                                                 // 3331
            $toClose = $elem;                                                                                          // 3332
          } else if (idx !== undefined) {                                                                              // 3333
            $toClose = this.$tabs.not(function (i, el) {                                                               // 3334
              return i === idx;                                                                                        // 3335
            });                                                                                                        // 3336
          } else {                                                                                                     // 3337
            $toClose = this.$element;                                                                                  // 3338
          }                                                                                                            // 3339
                                                                                                                       //
          var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;             // 3340
                                                                                                                       //
          if (somethingToClose) {                                                                                      // 3342
            $toClose.find('li.is-active').add($toClose).attr({                                                         // 3343
              'data-is-click': false                                                                                   // 3344
            }).removeClass('is-active');                                                                               // 3343
            $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');                                  // 3347
                                                                                                                       //
            if (this.changed || $toClose.find('opens-inner').length) {                                                 // 3349
              var oldClass = this.options.alignment === 'left' ? 'right' : 'left';                                     // 3350
              $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
              this.changed = false;                                                                                    // 3352
            } /**                                                                                                      // 3353
               * Fires when the open menus are closed.                                                                 //
               * @event DropdownMenu#hide                                                                              //
               */                                                                                                      //
                                                                                                                       //
            this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);                                                 // 3358
          }                                                                                                            // 3359
        }                                                                                                              // 3360
                                                                                                                       //
        return _hide;                                                                                                  // 3329
      }() /**                                                                                                          // 3329
           * Destroys the plugin.                                                                                      //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 3327
      key: '_destroy',                                                                                                 // 3368
      value: function () {                                                                                             // 3369
        function _destroy() {                                                                                          // 3369
          this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('.zf.dropdownmenu');                       // 3371
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["a" /* Nest */].Burn(this.$element, 'dropdown');         // 3372
        }                                                                                                              // 3373
                                                                                                                       //
        return _destroy;                                                                                               // 3369
      }()                                                                                                              // 3369
    }]);                                                                                                               // 3367
                                                                                                                       //
    return DropdownMenu;                                                                                               // 3376
  }(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["a" /* Plugin */]); /**                                           // 3377
                                                                          * Default settings for plugin                //
                                                                          */                                           //
                                                                                                                       //
  DropdownMenu.defaults = {                                                                                            // 3384
    /**                                                                                                                // 3385
     * Disallows hover events from opening submenus                                                                    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */disableHover: false,                                                                                            //
    /**                                                                                                                // 3392
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.                              //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */autoclose: true,                                                                                                //
    /**                                                                                                                // 3399
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 50                                                                                                     //
     */hoverDelay: 50,                                                                                                 //
    /**                                                                                                                // 3406
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.                //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */clickOpen: false,                                                                                               //
    /**                                                                                                                // 3413
     * Amount of time to delay closing a submenu on a mouseleave event.                                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 500                                                                                                    //
     */closingTime: 500,                                                                                               //
    /**                                                                                                                // 3421
     * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */alignment: 'auto',                                                                                              //
    /**                                                                                                                // 3428
     * Allow clicks on the body to close any open submenus.                                                            //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */closeOnClick: true,                                                                                             //
    /**                                                                                                                // 3435
     * Allow clicks on leaf anchor links to close any open submenus.                                                   //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */closeOnClickInside: true,                                                                                       //
    /**                                                                                                                // 3442
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'vertical'                                                                                             //
     */verticalClass: 'vertical',                                                                                      //
    /**                                                                                                                // 3449
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'align-right'                                                                                          //
     */rightClass: 'align-right',                                                                                      //
    /**                                                                                                                // 3456
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.     //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */forceFollow: true                                                                                               //
  }; /***/                                                                                                             // 3384
}, /* 15 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 3467
  "use strict"; /* harmony export (binding) */                                                                         // 3471
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 3472
    return Positionable;                                                                                               // 3472
  }); /* harmony import */                                                                                             // 3472
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__ = __webpack_require__(7); /* harmony import */                // 3473
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 3474
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);                                    // 3475
                                                                                                                       //
  var _createClass = function () {                                                                                     // 3478
    function defineProperties(target, props) {                                                                         // 3478
      for (var i = 0; i < props.length; i++) {                                                                         // 3478
        var descriptor = props[i];                                                                                     // 3478
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 3478
        descriptor.configurable = true;                                                                                // 3478
        if ("value" in descriptor) descriptor.writable = true;                                                         // 3478
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 3478
      }                                                                                                                // 3478
    }                                                                                                                  // 3478
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 3478
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 3478
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 3478
      return Constructor;                                                                                              // 3478
    };                                                                                                                 // 3478
  }();                                                                                                                 // 3478
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 3480
    if (!(instance instanceof Constructor)) {                                                                          // 3480
      throw new TypeError("Cannot call a class as a function");                                                        // 3480
    }                                                                                                                  // 3480
  }                                                                                                                    // 3480
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 3482
    if (!self) {                                                                                                       // 3482
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 3482
    }                                                                                                                  // 3482
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 3482
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 3484
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 3484
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 3484
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 3484
      constructor: {                                                                                                   // 3484
        value: subClass,                                                                                               // 3484
        enumerable: false,                                                                                             // 3484
        writable: true,                                                                                                // 3484
        configurable: true                                                                                             // 3484
      }                                                                                                                // 3484
    });                                                                                                                // 3484
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }                                                                                                                    // 3484
                                                                                                                       //
  var POSITIONS = ['left', 'right', 'top', 'bottom'];                                                                  // 3490
  var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];                                                               // 3491
  var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];                                                             // 3492
  var ALIGNMENTS = {                                                                                                   // 3494
    'left': VERTICAL_ALIGNMENTS,                                                                                       // 3495
    'right': VERTICAL_ALIGNMENTS,                                                                                      // 3496
    'top': HORIZONTAL_ALIGNMENTS,                                                                                      // 3497
    'bottom': HORIZONTAL_ALIGNMENTS                                                                                    // 3498
  };                                                                                                                   // 3494
                                                                                                                       //
  function nextItem(item, array) {                                                                                     // 3501
    var currentIdx = array.indexOf(item);                                                                              // 3502
                                                                                                                       //
    if (currentIdx === array.length - 1) {                                                                             // 3503
      return array[0];                                                                                                 // 3504
    } else {                                                                                                           // 3505
      return array[currentIdx + 1];                                                                                    // 3506
    }                                                                                                                  // 3507
  }                                                                                                                    // 3508
                                                                                                                       //
  var Positionable = function (_Plugin) {                                                                              // 3510
    _inherits(Positionable, _Plugin);                                                                                  // 3511
                                                                                                                       //
    function Positionable() {                                                                                          // 3513
      _classCallCheck(this, Positionable);                                                                             // 3514
                                                                                                                       //
      return _possibleConstructorReturn(this, (Positionable.__proto__ || Object.getPrototypeOf(Positionable)).apply(this, arguments));
    }                                                                                                                  // 3517
                                                                                                                       //
    _createClass(Positionable, [{                                                                                      // 3519
      key: '_init',                                                                                                    // 3520
      /**                                                                                                              // 3522
       * Abstract class encapsulating the tether-like explicit positioning logic                                       //
       * including repositioning based on overlap.                                                                     //
       * Expects classes to define defaults for vOffset, hOffset, position,                                            //
       * alignment, allowOverlap, and allowBottomOverlap. They can do this by                                          //
       * extending the defaults, or (for now recommended due to the way docs are                                       //
       * generated) by explicitly declaring them.                                                                      //
       *                                                                                                               //
       **/value: function () {                                                                                         //
        function _init() {                                                                                             // 3532
          this.triedPositions = {};                                                                                    // 3533
          this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;       // 3534
          this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;   // 3535
        }                                                                                                              // 3536
                                                                                                                       //
        return _init;                                                                                                  // 3532
      }()                                                                                                              // 3532
    }, {                                                                                                               // 3519
      key: '_getDefaultPosition',                                                                                      // 3538
      value: function () {                                                                                             // 3539
        function _getDefaultPosition() {                                                                               // 3539
          return 'bottom';                                                                                             // 3540
        }                                                                                                              // 3541
                                                                                                                       //
        return _getDefaultPosition;                                                                                    // 3539
      }()                                                                                                              // 3539
    }, {                                                                                                               // 3537
      key: '_getDefaultAlignment',                                                                                     // 3543
      value: function () {                                                                                             // 3544
        function _getDefaultAlignment() {                                                                              // 3544
          switch (this.position) {                                                                                     // 3545
            case 'bottom':                                                                                             // 3546
            case 'top':                                                                                                // 3547
              return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["a" /* rtl */])() ? 'right' : 'left';
                                                                                                                       //
            case 'left':                                                                                               // 3549
            case 'right':                                                                                              // 3550
              return 'bottom';                                                                                         // 3551
          }                                                                                                            // 3545
        }                                                                                                              // 3553
                                                                                                                       //
        return _getDefaultAlignment;                                                                                   // 3544
      }() /**                                                                                                          // 3544
           * Adjusts the positionable possible positions by iterating through alignments                               //
           * and positions.                                                                                            //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3542
      key: '_reposition',                                                                                              // 3563
      value: function () {                                                                                             // 3564
        function _reposition() {                                                                                       // 3564
          if (this._alignmentsExhausted(this.position)) {                                                              // 3565
            this.position = nextItem(this.position, POSITIONS);                                                        // 3566
            this.alignment = ALIGNMENTS[this.position][0];                                                             // 3567
          } else {                                                                                                     // 3568
            this._realign();                                                                                           // 3569
          }                                                                                                            // 3570
        }                                                                                                              // 3571
                                                                                                                       //
        return _reposition;                                                                                            // 3564
      }() /**                                                                                                          // 3564
           * Adjusts the dropdown pane possible positions by iterating through alignments                              //
           * on the current position.                                                                                  //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3562
      key: '_realign',                                                                                                 // 3581
      value: function () {                                                                                             // 3582
        function _realign() {                                                                                          // 3582
          this._addTriedPosition(this.position, this.alignment);                                                       // 3583
                                                                                                                       //
          this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);                                        // 3584
        }                                                                                                              // 3585
                                                                                                                       //
        return _realign;                                                                                               // 3582
      }()                                                                                                              // 3582
    }, {                                                                                                               // 3580
      key: '_addTriedPosition',                                                                                        // 3587
      value: function () {                                                                                             // 3588
        function _addTriedPosition(position, alignment) {                                                              // 3588
          this.triedPositions[position] = this.triedPositions[position] || [];                                         // 3589
          this.triedPositions[position].push(alignment);                                                               // 3590
        }                                                                                                              // 3591
                                                                                                                       //
        return _addTriedPosition;                                                                                      // 3588
      }()                                                                                                              // 3588
    }, {                                                                                                               // 3586
      key: '_positionsExhausted',                                                                                      // 3593
      value: function () {                                                                                             // 3594
        function _positionsExhausted() {                                                                               // 3594
          var isExhausted = true;                                                                                      // 3595
                                                                                                                       //
          for (var i = 0; i < POSITIONS.length; i++) {                                                                 // 3596
            isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);                                      // 3597
          }                                                                                                            // 3598
                                                                                                                       //
          return isExhausted;                                                                                          // 3599
        }                                                                                                              // 3600
                                                                                                                       //
        return _positionsExhausted;                                                                                    // 3594
      }()                                                                                                              // 3594
    }, {                                                                                                               // 3592
      key: '_alignmentsExhausted',                                                                                     // 3602
      value: function () {                                                                                             // 3603
        function _alignmentsExhausted(position) {                                                                      // 3603
          return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
        }                                                                                                              // 3605
                                                                                                                       //
        return _alignmentsExhausted;                                                                                   // 3603
      }() // When we're trying to center, we don't want to apply offset that's going to                                // 3603
      // take us just off center, so wrap around to return 0 for the appropriate                                       // 3608
      // offset in those alignments.  TODO: Figure out if we want to make this                                         // 3609
      // configurable behavior... it feels more intuitive, especially for tooltips, but                                // 3610
      // it's possible someone might actually want to start from center and then nudge                                 // 3611
      // slightly off.                                                                                                 // 3612
                                                                                                                       //
    }, {                                                                                                               // 3601
      key: '_getVOffset',                                                                                              // 3615
      value: function () {                                                                                             // 3616
        function _getVOffset() {                                                                                       // 3616
          return this.options.vOffset;                                                                                 // 3617
        }                                                                                                              // 3618
                                                                                                                       //
        return _getVOffset;                                                                                            // 3616
      }()                                                                                                              // 3616
    }, {                                                                                                               // 3614
      key: '_getHOffset',                                                                                              // 3620
      value: function () {                                                                                             // 3621
        function _getHOffset() {                                                                                       // 3621
          return this.options.hOffset;                                                                                 // 3622
        }                                                                                                              // 3623
                                                                                                                       //
        return _getHOffset;                                                                                            // 3621
      }()                                                                                                              // 3621
    }, {                                                                                                               // 3619
      key: '_setPosition',                                                                                             // 3625
      value: function () {                                                                                             // 3626
        function _setPosition($anchor, $element, $parent) {                                                            // 3626
          if ($anchor.attr('aria-expanded') === 'false') {                                                             // 3627
            return false;                                                                                              // 3628
          }                                                                                                            // 3629
                                                                                                                       //
          var $eleDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].GetDimensions($element),    // 3630
              $anchorDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].GetDimensions($anchor);  // 3630
                                                                                                                       //
          $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
                                                                                                                       //
          if (!this.options.allowOverlap) {                                                                            // 3635
            var overlaps = {};                                                                                         // 3636
            var minOverlap = 100000000; // default coordinates to how we start, in case we can't figure out better     // 3637
                                                                                                                       //
            var minCoordinates = {                                                                                     // 3639
              position: this.position,                                                                                 // 3639
              alignment: this.alignment                                                                                // 3639
            };                                                                                                         // 3639
                                                                                                                       //
            while (!this._positionsExhausted()) {                                                                      // 3640
              var overlap = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);
                                                                                                                       //
              if (overlap === 0) {                                                                                     // 3642
                return;                                                                                                // 3643
              }                                                                                                        // 3644
                                                                                                                       //
              if (overlap < minOverlap) {                                                                              // 3646
                minOverlap = overlap;                                                                                  // 3647
                minCoordinates = {                                                                                     // 3648
                  position: this.position,                                                                             // 3648
                  alignment: this.alignment                                                                            // 3648
                };                                                                                                     // 3648
              }                                                                                                        // 3649
                                                                                                                       //
              this._reposition();                                                                                      // 3651
                                                                                                                       //
              $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
            } // If we get through the entire loop, there was no non-overlapping                                       // 3654
            // position available. Pick the version with least overlap.                                                // 3656
                                                                                                                       //
                                                                                                                       //
            this.position = minCoordinates.position;                                                                   // 3657
            this.alignment = minCoordinates.alignment;                                                                 // 3658
            $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["a" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
          }                                                                                                            // 3660
        }                                                                                                              // 3661
                                                                                                                       //
        return _setPosition;                                                                                           // 3626
      }()                                                                                                              // 3626
    }]);                                                                                                               // 3624
                                                                                                                       //
    return Positionable;                                                                                               // 3664
  }(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["a" /* Plugin */]);                                               // 3665
                                                                                                                       //
  Positionable.defaults = {                                                                                            // 3667
    /**                                                                                                                // 3668
     * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.                          //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */position: 'auto',                                                                                               //
    /**                                                                                                                // 3675
     * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.                 //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */alignment: 'auto',                                                                                              //
    /**                                                                                                                // 3682
     * Allow overlap of container/window. If false, dropdown positionable first                                        //
     * try to position as defined by data-position and data-alignment, but                                             //
     * reposition if it would cause an overflow.                                                                       //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */allowOverlap: false,                                                                                            //
    /**                                                                                                                // 3691
     * Allow overlap of only the bottom of the container. This is the most common                                      //
     * behavior for dropdowns, allowing the dropdown to extend the bottom of the                                       //
     * screen but not otherwise influence or break out of the container.                                               //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */allowBottomOverlap: true,                                                                                       //
    /**                                                                                                                // 3700
     * Number of pixels the positionable should be separated vertically from anchor                                    //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */vOffset: 0,                                                                                                     //
    /**                                                                                                                // 3707
     * Number of pixels the positionable should be separated horizontally from anchor                                  //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */hOffset: 0                                                                                                      //
  }; /***/                                                                                                             // 3667
}, /* 16 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 3718
  "use strict"; /* harmony export (binding) */                                                                         // 3722
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 3723
    return SmoothScroll;                                                                                               // 3723
  }); /* harmony import */                                                                                             // 3723
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 3724
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 3726
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);                                       // 3727
                                                                                                                       //
  var _createClass = function () {                                                                                     // 3730
    function defineProperties(target, props) {                                                                         // 3730
      for (var i = 0; i < props.length; i++) {                                                                         // 3730
        var descriptor = props[i];                                                                                     // 3730
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 3730
        descriptor.configurable = true;                                                                                // 3730
        if ("value" in descriptor) descriptor.writable = true;                                                         // 3730
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 3730
      }                                                                                                                // 3730
    }                                                                                                                  // 3730
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 3730
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 3730
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 3730
      return Constructor;                                                                                              // 3730
    };                                                                                                                 // 3730
  }();                                                                                                                 // 3730
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 3732
    if (!(instance instanceof Constructor)) {                                                                          // 3732
      throw new TypeError("Cannot call a class as a function");                                                        // 3732
    }                                                                                                                  // 3732
  }                                                                                                                    // 3732
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 3734
    if (!self) {                                                                                                       // 3734
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 3734
    }                                                                                                                  // 3734
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 3734
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 3736
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 3736
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 3736
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 3736
      constructor: {                                                                                                   // 3736
        value: subClass,                                                                                               // 3736
        enumerable: false,                                                                                             // 3736
        writable: true,                                                                                                // 3736
        configurable: true                                                                                             // 3736
      }                                                                                                                // 3736
    });                                                                                                                // 3736
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 3736
     * SmoothScroll module.                                                                                            //
     * @module foundation.smooth-scroll                                                                                //
     */                                                                                                                //
                                                                                                                       //
  var SmoothScroll = function (_Plugin) {                                                                              // 3747
    _inherits(SmoothScroll, _Plugin);                                                                                  // 3748
                                                                                                                       //
    function SmoothScroll() {                                                                                          // 3750
      _classCallCheck(this, SmoothScroll);                                                                             // 3751
                                                                                                                       //
      return _possibleConstructorReturn(this, (SmoothScroll.__proto__ || Object.getPrototypeOf(SmoothScroll)).apply(this, arguments));
    }                                                                                                                  // 3754
                                                                                                                       //
    _createClass(SmoothScroll, [{                                                                                      // 3756
      key: '_setup',                                                                                                   // 3757
      /**                                                                                                              // 3759
       * Creates a new instance of SmoothScroll.                                                                       //
       * @class                                                                                                        //
       * @name SmoothScroll                                                                                            //
       * @fires SmoothScroll#init                                                                                      //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 3767
          this.$element = element;                                                                                     // 3768
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, SmoothScroll.defaults, this.$element.data(), options);
          this.className = 'SmoothScroll'; // ie9 back compat                                                          // 3770
                                                                                                                       //
          this._init();                                                                                                // 3772
        }                                                                                                              // 3773
                                                                                                                       //
        return _setup;                                                                                                 // 3767
      }() /**                                                                                                          // 3767
           * Initialize the SmoothScroll plugin                                                                        //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3756
      key: '_init',                                                                                                    // 3781
      value: function () {                                                                                             // 3782
        function _init() {                                                                                             // 3782
          var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, 'smooth-scroll');
                                                                                                                       //
          var _this = this;                                                                                            // 3784
                                                                                                                       //
          this.$element.attr({                                                                                         // 3785
            'id': id                                                                                                   // 3786
          });                                                                                                          // 3785
                                                                                                                       //
          this._events();                                                                                              // 3789
        }                                                                                                              // 3790
                                                                                                                       //
        return _init;                                                                                                  // 3782
      }() /**                                                                                                          // 3782
           * Initializes events for SmoothScroll.                                                                      //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3780
      key: '_events',                                                                                                  // 3798
      value: function () {                                                                                             // 3799
        function _events() {                                                                                           // 3799
          var _this = this; // click handler function.                                                                 // 3800
                                                                                                                       //
                                                                                                                       //
          var handleLinkClick = function (e) {                                                                         // 3803
            // exit function if the event source isn't coming from an anchor with href attribute starts with '#'       // 3804
            if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is('a[href^="#"]')) {                            // 3805
              return false;                                                                                            // 3806
            }                                                                                                          // 3807
                                                                                                                       //
            var arrival = this.getAttribute('href');                                                                   // 3809
            _this._inTransition = true;                                                                                // 3811
            SmoothScroll.scrollToLoc(arrival, _this.options, function () {                                             // 3813
              _this._inTransition = false;                                                                             // 3814
            });                                                                                                        // 3815
            e.preventDefault();                                                                                        // 3817
          };                                                                                                           // 3818
                                                                                                                       //
          this.$element.on('click.zf.smoothScroll', handleLinkClick);                                                  // 3820
          this.$element.on('click.zf.smoothScroll', 'a[href^="#"]', handleLinkClick);                                  // 3821
        }                                                                                                              // 3822
                                                                                                                       //
        return _events;                                                                                                // 3799
      }() /**                                                                                                          // 3799
           * Function to scroll to a given location on the page.                                                       //
           * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'                            //
           * @param {Object} options - The options to use.                                                             //
           * @param {Function} callback - The callback function.                                                       //
           * @static                                                                                                   //
           * @function                                                                                                 //
           */                                                                                                          //
    }], [{                                                                                                             // 3797
      key: 'scrollToLoc',                                                                                              // 3834
      value: function () {                                                                                             // 3835
        function scrollToLoc(loc) {                                                                                    // 3835
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;     // 3836
          var callback = arguments[2]; // Do nothing if target does not exist to prevent errors                        // 3837
                                                                                                                       //
          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).length) {                                           // 3840
            return false;                                                                                              // 3841
          }                                                                                                            // 3842
                                                                                                                       //
          var scrollPos = Math.round(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).offset().top - options.threshold / 2 - options.offset);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({                            // 3846
            scrollTop: scrollPos                                                                                       // 3846
          }, options.animationDuration, options.animationEasing, function () {                                         // 3846
            if (callback && typeof callback == "function") {                                                           // 3847
              callback();                                                                                              // 3848
            }                                                                                                          // 3849
          });                                                                                                          // 3850
        }                                                                                                              // 3851
                                                                                                                       //
        return scrollToLoc;                                                                                            // 3835
      }()                                                                                                              // 3835
    }]);                                                                                                               // 3833
                                                                                                                       //
    return SmoothScroll;                                                                                               // 3854
  }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["a" /* Plugin */]); /**                                           // 3855
                                                                          * Default settings for plugin.               //
                                                                          */                                           //
                                                                                                                       //
  SmoothScroll.defaults = {                                                                                            // 3862
    /**                                                                                                                // 3863
     * Amount of time, in ms, the animated scrolling should take between locations.                                    //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 500                                                                                                    //
     */animationDuration: 500,                                                                                         //
    /**                                                                                                                // 3870
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'linear'                                                                                               //
     * @see {@link https://api.jquery.com/animate|Jquery animate}                                                      //
     */animationEasing: 'linear',                                                                                      //
    /**                                                                                                                // 3878
     * Number of pixels to use as a marker for location changes.                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 50                                                                                                     //
     */threshold: 50,                                                                                                  //
    /**                                                                                                                // 3885
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.                      //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */offset: 0                                                                                                       //
  }; /***/                                                                                                             // 3862
}, /* 17 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 3896
  "use strict"; /* harmony export (binding) */                                                                         // 3900
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 3901
    return Tabs;                                                                                                       // 3901
  }); /* harmony import */                                                                                             // 3901
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 3902
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 3904
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(8); /* harmony import */        // 3905
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);                                       // 3906
                                                                                                                       //
  var _createClass = function () {                                                                                     // 3909
    function defineProperties(target, props) {                                                                         // 3909
      for (var i = 0; i < props.length; i++) {                                                                         // 3909
        var descriptor = props[i];                                                                                     // 3909
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 3909
        descriptor.configurable = true;                                                                                // 3909
        if ("value" in descriptor) descriptor.writable = true;                                                         // 3909
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 3909
      }                                                                                                                // 3909
    }                                                                                                                  // 3909
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 3909
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 3909
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 3909
      return Constructor;                                                                                              // 3909
    };                                                                                                                 // 3909
  }();                                                                                                                 // 3909
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 3911
    if (!(instance instanceof Constructor)) {                                                                          // 3911
      throw new TypeError("Cannot call a class as a function");                                                        // 3911
    }                                                                                                                  // 3911
  }                                                                                                                    // 3911
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 3913
    if (!self) {                                                                                                       // 3913
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 3913
    }                                                                                                                  // 3913
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 3913
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 3915
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 3915
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 3915
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 3915
      constructor: {                                                                                                   // 3915
        value: subClass,                                                                                               // 3915
        enumerable: false,                                                                                             // 3915
        writable: true,                                                                                                // 3915
        configurable: true                                                                                             // 3915
      }                                                                                                                // 3915
    });                                                                                                                // 3915
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 3915
     * Tabs module.                                                                                                    //
     * @module foundation.tabs                                                                                         //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.imageLoader if tabs contain images                                                    //
     */                                                                                                                //
                                                                                                                       //
  var Tabs = function (_Plugin) {                                                                                      // 3928
    _inherits(Tabs, _Plugin);                                                                                          // 3929
                                                                                                                       //
    function Tabs() {                                                                                                  // 3931
      _classCallCheck(this, Tabs);                                                                                     // 3932
                                                                                                                       //
      return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
    }                                                                                                                  // 3935
                                                                                                                       //
    _createClass(Tabs, [{                                                                                              // 3937
      key: '_setup',                                                                                                   // 3938
      /**                                                                                                              // 3940
       * Creates a new instance of tabs.                                                                               //
       * @class                                                                                                        //
       * @name Tabs                                                                                                    //
       * @fires Tabs#init                                                                                              //
       * @param {jQuery} element - jQuery object to make into tabs.                                                    //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 3948
          this.$element = element;                                                                                     // 3949
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tabs.defaults, this.$element.data(), options);
          this.className = 'Tabs'; // ie9 back compat                                                                  // 3951
                                                                                                                       //
          this._init();                                                                                                // 3953
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Tabs', {               // 3954
            'ENTER': 'open',                                                                                           // 3955
            'SPACE': 'open',                                                                                           // 3956
            'ARROW_RIGHT': 'next',                                                                                     // 3957
            'ARROW_UP': 'previous',                                                                                    // 3958
            'ARROW_DOWN': 'next',                                                                                      // 3959
            'ARROW_LEFT': 'previous' // 'TAB': 'next',                                                                 // 3960
            // 'SHIFT_TAB': 'previous'                                                                                 // 3962
                                                                                                                       //
          });                                                                                                          // 3954
        }                                                                                                              // 3964
                                                                                                                       //
        return _setup;                                                                                                 // 3948
      }() /**                                                                                                          // 3948
           * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.                   //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3937
      key: '_init',                                                                                                    // 3972
      value: function () {                                                                                             // 3973
        function _init() {                                                                                             // 3973
          var _this3 = this;                                                                                           // 3974
                                                                                                                       //
          var _this = this;                                                                                            // 3976
                                                                                                                       //
          this.$element.attr({                                                                                         // 3978
            'role': 'tablist'                                                                                          // 3978
          });                                                                                                          // 3978
          this.$tabTitles = this.$element.find('.' + this.options.linkClass);                                          // 3979
          this.$tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content="' + this.$element[0].id + '"]');
          this.$tabTitles.each(function () {                                                                           // 3982
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                          // 3983
                $link = $elem.find('a'),                                                                               // 3983
                isActive = $elem.hasClass('' + _this.options.linkActiveClass),                                         // 3983
                hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),                                       // 3983
                linkId = $link[0].id ? $link[0].id : hash + '-label',                                                  // 3983
                $tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + hash);                              // 3983
                                                                                                                       //
            $elem.attr({                                                                                               // 3990
              'role': 'presentation'                                                                                   // 3990
            });                                                                                                        // 3990
            $link.attr({                                                                                               // 3992
              'role': 'tab',                                                                                           // 3993
              'aria-controls': hash,                                                                                   // 3994
              'aria-selected': isActive,                                                                               // 3995
              'id': linkId,                                                                                            // 3996
              'tabindex': isActive ? '0' : '-1'                                                                        // 3997
            });                                                                                                        // 3992
            $tabContent.attr({                                                                                         // 4000
              'role': 'tabpanel',                                                                                      // 4001
              'aria-labelledby': linkId                                                                                // 4002
            });                                                                                                        // 4000
                                                                                                                       //
            if (!isActive) {                                                                                           // 4005
              $tabContent.attr('aria-hidden', 'true');                                                                 // 4006
            }                                                                                                          // 4007
                                                                                                                       //
            if (isActive && _this.options.autoFocus) {                                                                 // 4009
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {                                // 4010
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({                                 // 4011
                  scrollTop: $elem.offset().top                                                                        // 4011
                }, _this.options.deepLinkSmudgeDelay, function () {                                                    // 4011
                  $link.focus();                                                                                       // 4012
                });                                                                                                    // 4013
              });                                                                                                      // 4014
            }                                                                                                          // 4015
          });                                                                                                          // 4016
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 4017
            var $images = this.$tabContent.find('img');                                                                // 4018
                                                                                                                       //
            if ($images.length) {                                                                                      // 4020
              __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["a" /* onImagesLoaded */])($images, this._setHeight.bind(this));
            } else {                                                                                                   // 4022
              this._setHeight();                                                                                       // 4023
            }                                                                                                          // 4024
          } //current context-bound function to open tabs on page load or history popstate                             // 4025
                                                                                                                       //
                                                                                                                       //
          this._checkDeepLink = function () {                                                                          // 4028
            var anchor = window.location.hash; //need a hash and a relevant anchor in this tabset                      // 4029
                                                                                                                       //
            if (anchor.length) {                                                                                       // 4031
              var $link = _this3.$element.find('[href$="' + anchor + '"]');                                            // 4032
                                                                                                                       //
              if ($link.length) {                                                                                      // 4033
                _this3.selectTab(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor), true); //roll up a little to show the titles
                                                                                                                       //
                                                                                                                       //
                if (_this3.options.deepLinkSmudge) {                                                                   // 4037
                  var offset = _this3.$element.offset();                                                               // 4038
                                                                                                                       //
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({                               // 4039
                    scrollTop: offset.top                                                                              // 4039
                  }, _this3.options.deepLinkSmudgeDelay);                                                              // 4039
                } /**                                                                                                  // 4040
                    * Fires when the zplugin has deeplinked at pageload                                                //
                    * @event Tabs#deeplink                                                                             //
                    */                                                                                                 //
                                                                                                                       //
                _this3.$element.trigger('deeplink.zf.tabs', [$link, __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor)]);
              }                                                                                                        // 4047
            }                                                                                                          // 4048
          }; //use browser to open a tab, if it exists in this tabset                                                  // 4049
                                                                                                                       //
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 4052
            this._checkDeepLink();                                                                                     // 4053
          }                                                                                                            // 4054
                                                                                                                       //
          this._events();                                                                                              // 4056
        }                                                                                                              // 4057
                                                                                                                       //
        return _init;                                                                                                  // 3973
      }() /**                                                                                                          // 3973
           * Adds event handlers for items within the tabs.                                                            //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 3971
      key: '_events',                                                                                                  // 4065
      value: function () {                                                                                             // 4066
        function _events() {                                                                                           // 4066
          this._addKeyHandler();                                                                                       // 4067
                                                                                                                       //
          this._addClickHandler();                                                                                     // 4068
                                                                                                                       //
          this._setHeightMqHandler = null;                                                                             // 4069
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 4071
            this._setHeightMqHandler = this._setHeight.bind(this);                                                     // 4072
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
          }                                                                                                            // 4075
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 4077
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);                // 4078
          }                                                                                                            // 4079
        }                                                                                                              // 4080
                                                                                                                       //
        return _events;                                                                                                // 4066
      }() /**                                                                                                          // 4066
           * Adds click handlers for items within the tabs.                                                            //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4064
      key: '_addClickHandler',                                                                                         // 4088
      value: function () {                                                                                             // 4089
        function _addClickHandler() {                                                                                  // 4089
          var _this = this;                                                                                            // 4090
                                                                                                                       //
          this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {          // 4092
            e.preventDefault();                                                                                        // 4093
            e.stopPropagation();                                                                                       // 4094
                                                                                                                       //
            _this._handleTabChange(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));                              // 4095
          });                                                                                                          // 4096
        }                                                                                                              // 4097
                                                                                                                       //
        return _addClickHandler;                                                                                       // 4089
      }() /**                                                                                                          // 4089
           * Adds keyboard event handlers for items within the tabs.                                                   //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4087
      key: '_addKeyHandler',                                                                                           // 4105
      value: function () {                                                                                             // 4106
        function _addKeyHandler() {                                                                                    // 4106
          var _this = this;                                                                                            // 4107
                                                                                                                       //
          this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {                                  // 4109
            if (e.which === 9) return;                                                                                 // 4110
                                                                                                                       //
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                       // 4112
                $elements = $element.parent('ul').children('li'),                                                      // 4112
                $prevElement,                                                                                          // 4112
                $nextElement;                                                                                          // 4112
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 4117
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {                                 // 4118
                if (_this.options.wrapOnKeys) {                                                                        // 4119
                  $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);                                     // 4120
                  $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);                 // 4121
                } else {                                                                                               // 4122
                  $prevElement = $elements.eq(Math.max(0, i - 1));                                                     // 4123
                  $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                  // 4124
                }                                                                                                      // 4125
                                                                                                                       //
                return;                                                                                                // 4126
              }                                                                                                        // 4127
            }); // handle keyboard event with keyboard util                                                            // 4128
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Tabs', {         // 4131
              open: function () {                                                                                      // 4132
                $element.find('[role="tab"]').focus();                                                                 // 4133
                                                                                                                       //
                _this._handleTabChange($element);                                                                      // 4134
              },                                                                                                       // 4135
              previous: function () {                                                                                  // 4136
                $prevElement.find('[role="tab"]').focus();                                                             // 4137
                                                                                                                       //
                _this._handleTabChange($prevElement);                                                                  // 4138
              },                                                                                                       // 4139
              next: function () {                                                                                      // 4140
                $nextElement.find('[role="tab"]').focus();                                                             // 4141
                                                                                                                       //
                _this._handleTabChange($nextElement);                                                                  // 4142
              },                                                                                                       // 4143
              handled: function () {                                                                                   // 4144
                e.stopPropagation();                                                                                   // 4145
                e.preventDefault();                                                                                    // 4146
              }                                                                                                        // 4147
            });                                                                                                        // 4131
          });                                                                                                          // 4149
        }                                                                                                              // 4150
                                                                                                                       //
        return _addKeyHandler;                                                                                         // 4106
      }() /**                                                                                                          // 4106
           * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.                                //
           * @param {jQuery} $target - Tab to open.                                                                    //
           * @param {boolean} historyHandled - browser has already handled a history update                            //
           * @fires Tabs#change                                                                                        //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 4104
      key: '_handleTabChange',                                                                                         // 4161
      value: function () {                                                                                             // 4162
        function _handleTabChange($target, historyHandled) {                                                           // 4162
          /**                                                                                                          // 4164
           * Check for active class on target. Collapse if exists.                                                     //
           */if ($target.hasClass('' + this.options.linkActiveClass)) {                                                //
            if (this.options.activeCollapse) {                                                                         // 4168
              this._collapseTab($target); /**                                                                          // 4169
                                           * Fires when the zplugin has successfully collapsed tabs.                   //
                                           * @event Tabs#collapse                                                      //
                                           */                                                                          //
                                                                                                                       //
              this.$element.trigger('collapse.zf.tabs', [$target]);                                                    // 4175
            }                                                                                                          // 4176
                                                                                                                       //
            return;                                                                                                    // 4177
          }                                                                                                            // 4178
                                                                                                                       //
          var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),         // 4180
              $tabLink = $target.find('[role="tab"]'),                                                                 // 4180
              hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),                                   // 4180
              $targetContent = this.$tabContent.find('#' + hash); //close old tab                                      // 4180
                                                                                                                       //
          this._collapseTab($oldTab); //open new tab                                                                   // 4186
                                                                                                                       //
                                                                                                                       //
          this._openTab($target); //either replace or update browser history                                           // 4189
                                                                                                                       //
                                                                                                                       //
          if (this.options.deepLink && !historyHandled) {                                                              // 4192
            var anchor = $target.find('a').attr('href');                                                               // 4193
                                                                                                                       //
            if (this.options.updateHistory) {                                                                          // 4195
              history.pushState({}, '', anchor);                                                                       // 4196
            } else {                                                                                                   // 4197
              history.replaceState({}, '', anchor);                                                                    // 4198
            }                                                                                                          // 4199
          } /**                                                                                                        // 4200
             * Fires when the plugin has successfully changed tabs.                                                    //
             * @event Tabs#change                                                                                      //
             */                                                                                                        //
                                                                                                                       //
          this.$element.trigger('change.zf.tabs', [$target, $targetContent]); //fire to children a mutation event      // 4206
                                                                                                                       //
          $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");                                         // 4209
        }                                                                                                              // 4210
                                                                                                                       //
        return _handleTabChange;                                                                                       // 4162
      }() /**                                                                                                          // 4162
           * Opens the tab `$targetContent` defined by `$target`.                                                      //
           * @param {jQuery} $target - Tab to Open.                                                                    //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 4160
      key: '_openTab',                                                                                                 // 4219
      value: function () {                                                                                             // 4220
        function _openTab($target) {                                                                                   // 4220
          var $tabLink = $target.find('[role="tab"]'),                                                                 // 4221
              hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),                                   // 4221
              $targetContent = this.$tabContent.find('#' + hash);                                                      // 4221
          $target.addClass('' + this.options.linkActiveClass);                                                         // 4225
          $tabLink.attr({                                                                                              // 4227
            'aria-selected': 'true',                                                                                   // 4228
            'tabindex': '0'                                                                                            // 4229
          });                                                                                                          // 4227
          $targetContent.addClass('' + this.options.panelActiveClass).removeAttr('aria-hidden');                       // 4232
        }                                                                                                              // 4233
                                                                                                                       //
        return _openTab;                                                                                               // 4220
      }() /**                                                                                                          // 4220
           * Collapses `$targetContent` defined by `$target`.                                                          //
           * @param {jQuery} $target - Tab to Open.                                                                    //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 4218
      key: '_collapseTab',                                                                                             // 4242
      value: function () {                                                                                             // 4243
        function _collapseTab($target) {                                                                               // 4243
          var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role="tab"]').attr({      // 4244
            'aria-selected': 'false',                                                                                  // 4245
            'tabindex': -1                                                                                             // 4246
          });                                                                                                          // 4244
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({
            'aria-hidden': 'true'                                                                                      // 4249
          });                                                                                                          // 4249
        }                                                                                                              // 4250
                                                                                                                       //
        return _collapseTab;                                                                                           // 4243
      }() /**                                                                                                          // 4243
           * Public method for selecting a content pane to display.                                                    //
           * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.                 //
           * @param {boolean} historyHandled - browser has already handled a history update                            //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 4241
      key: 'selectTab',                                                                                                // 4260
      value: function () {                                                                                             // 4261
        function selectTab(elem, historyHandled) {                                                                     // 4261
          var idStr;                                                                                                   // 4262
                                                                                                                       //
          if ((typeof elem === "undefined" ? "undefined" : (0, _typeof3.default)(elem)) === 'object') {                // 4264
            idStr = elem[0].id;                                                                                        // 4265
          } else {                                                                                                     // 4266
            idStr = elem;                                                                                              // 4267
          }                                                                                                            // 4268
                                                                                                                       //
          if (idStr.indexOf('#') < 0) {                                                                                // 4270
            idStr = '#' + idStr;                                                                                       // 4271
          }                                                                                                            // 4272
                                                                                                                       //
          var $target = this.$tabTitles.find('[href$="' + idStr + '"]').parent('.' + this.options.linkClass);          // 4274
                                                                                                                       //
          this._handleTabChange($target, historyHandled);                                                              // 4276
        }                                                                                                              // 4277
                                                                                                                       //
        return selectTab;                                                                                              // 4261
      }()                                                                                                              // 4261
    }, {                                                                                                               // 4259
      key: '_setHeight',                                                                                               // 4279
      /**                                                                                                              // 4281
       * Sets the height of each panel to the height of the tallest panel.                                             //
       * If enabled in options, gets called on media query change.                                                     //
       * If loading content via external source, can be called directly or with _reflow.                               //
       * If enabled with `data-match-height="true"`, tabs sets to equal height                                         //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */value: function () {                                                                                          //
        function _setHeight() {                                                                                        // 4289
          var max = 0,                                                                                                 // 4290
              _this = this; // Lock down the `this` value for the root tabs object                                     // 4290
                                                                                                                       //
                                                                                                                       //
          this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {                    // 4293
            var panel = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                          // 4295
                isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child
                                                                                                                       //
                                                                                                                       //
            if (!isActive) {                                                                                           // 4298
              panel.css({                                                                                              // 4299
                'visibility': 'hidden',                                                                                // 4299
                'display': 'block'                                                                                     // 4299
              });                                                                                                      // 4299
            }                                                                                                          // 4300
                                                                                                                       //
            var temp = this.getBoundingClientRect().height;                                                            // 4302
                                                                                                                       //
            if (!isActive) {                                                                                           // 4304
              panel.css({                                                                                              // 4305
                'visibility': '',                                                                                      // 4306
                'display': ''                                                                                          // 4307
              });                                                                                                      // 4305
            }                                                                                                          // 4309
                                                                                                                       //
            max = temp > max ? temp : max;                                                                             // 4311
          }).css('height', max + 'px');                                                                                // 4312
        }                                                                                                              // 4313
                                                                                                                       //
        return _setHeight;                                                                                             // 4289
      }() /**                                                                                                          // 4289
           * Destroys an instance of an tabs.                                                                          //
           * @fires Tabs#destroyed                                                                                     //
           */                                                                                                          //
    }, {                                                                                                               // 4278
      key: '_destroy',                                                                                                 // 4321
      value: function () {                                                                                             // 4322
        function _destroy() {                                                                                          // 4322
          this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 4325
            if (this._setHeightMqHandler != null) {                                                                    // 4326
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
            }                                                                                                          // 4328
          }                                                                                                            // 4329
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 4331
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);               // 4332
          }                                                                                                            // 4333
        }                                                                                                              // 4334
                                                                                                                       //
        return _destroy;                                                                                               // 4322
      }()                                                                                                              // 4322
    }]);                                                                                                               // 4320
                                                                                                                       //
    return Tabs;                                                                                                       // 4337
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 4338
                                                                                                                       //
  Tabs.defaults = {                                                                                                    // 4340
    /**                                                                                                                // 4341
     * Allows the window to scroll to content of pane specified by hash anchor                                         //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLink: false,                                                                                                //
    /**                                                                                                                // 4349
     * Adjust the deep link scroll to make sure the top of the tab panel is visible                                    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLinkSmudge: false,                                                                                          //
    /**                                                                                                                // 4357
     * Animation time (ms) for the deep link adjustment                                                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 300                                                                                                    //
     */deepLinkSmudgeDelay: 300,                                                                                       //
    /**                                                                                                                // 4365
     * Update the browser history with the open tab                                                                    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */updateHistory: false,                                                                                           //
    /**                                                                                                                // 4373
     * Allows the window to scroll to content of active pane on load if set to true.                                   //
     * Not recommended if more than one tab panel per page.                                                            //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */autoFocus: false,                                                                                               //
    /**                                                                                                                // 4382
     * Allows keyboard input to 'wrap' around the tab links.                                                           //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */wrapOnKeys: true,                                                                                               //
    /**                                                                                                                // 4390
     * Allows the tab content panes to match heights if set to true.                                                   //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */matchHeight: false,                                                                                             //
    /**                                                                                                                // 4398
     * Allows active tabs to collapse when clicked.                                                                    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */activeCollapse: false,                                                                                          //
    /**                                                                                                                // 4406
     * Class applied to `li`'s in tab link list.                                                                       //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'tabs-title'                                                                                           //
     */linkClass: 'tabs-title',                                                                                        //
    /**                                                                                                                // 4414
     * Class applied to the active `li` in tab link list.                                                              //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-active'                                                                                            //
     */linkActiveClass: 'is-active',                                                                                   //
    /**                                                                                                                // 4422
     * Class applied to the content containers.                                                                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'tabs-panel'                                                                                           //
     */panelClass: 'tabs-panel',                                                                                       //
    /**                                                                                                                // 4430
     * Class applied to the active content container.                                                                  //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-active'                                                                                            //
     */panelActiveClass: 'is-active'                                                                                   //
  }; /***/                                                                                                             // 4340
}, /* 18 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 4441
  "use strict"; /* harmony export (binding) */                                                                         // 4445
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 4446
    return Timer;                                                                                                      // 4446
  }); /* harmony import */                                                                                             // 4446
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 4447
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);      // 4448
                                                                                                                       //
  function Timer(elem, options, cb) {                                                                                  // 4453
    var _this = this,                                                                                                  // 4454
        duration = options.duration,                                                                                   // 4454
        //options is an object for easily adding features later.                                                       // 4454
    nameSpace = Object.keys(elem.data())[0] || 'timer',                                                                // 4457
        remain = -1,                                                                                                   // 4454
        start,                                                                                                         // 4454
        timer;                                                                                                         // 4454
                                                                                                                       //
    this.isPaused = false;                                                                                             // 4462
                                                                                                                       //
    this.restart = function () {                                                                                       // 4464
      remain = -1;                                                                                                     // 4465
      clearTimeout(timer);                                                                                             // 4466
      this.start();                                                                                                    // 4467
    };                                                                                                                 // 4468
                                                                                                                       //
    this.start = function () {                                                                                         // 4470
      this.isPaused = false; // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
                                                                                                                       //
      clearTimeout(timer);                                                                                             // 4473
      remain = remain <= 0 ? duration : remain;                                                                        // 4474
      elem.data('paused', false);                                                                                      // 4475
      start = Date.now();                                                                                              // 4476
      timer = setTimeout(function () {                                                                                 // 4477
        if (options.infinite) {                                                                                        // 4478
          _this.restart(); //rerun the timer.                                                                          // 4479
                                                                                                                       //
        }                                                                                                              // 4480
                                                                                                                       //
        if (cb && typeof cb === 'function') {                                                                          // 4481
          cb();                                                                                                        // 4482
        }                                                                                                              // 4483
      }, remain);                                                                                                      // 4484
      elem.trigger('timerstart.zf.' + nameSpace);                                                                      // 4485
    };                                                                                                                 // 4486
                                                                                                                       //
    this.pause = function () {                                                                                         // 4488
      this.isPaused = true; //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
                                                                                                                       //
      clearTimeout(timer);                                                                                             // 4491
      elem.data('paused', true);                                                                                       // 4492
      var end = Date.now();                                                                                            // 4493
      remain = remain - (end - start);                                                                                 // 4494
      elem.trigger('timerpaused.zf.' + nameSpace);                                                                     // 4495
    };                                                                                                                 // 4496
  } /***/                                                                                                              // 4497
}, /* 19 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 4501
  "use strict";                                                                                                        // 4505
                                                                                                                       //
  Object.defineProperty(__webpack_exports__, "__esModule", {                                                           // 4506
    value: true                                                                                                        // 4506
  }); /* harmony import */                                                                                             // 4506
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 4507
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_core__ = __webpack_require__(21); /* harmony import */                   // 4509
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 4510
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__ = __webpack_require__(7); /* harmony import */                // 4511
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__ = __webpack_require__(8); /* harmony import */        // 4512
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 4513
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_6__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 4514
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 4515
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_8__foundation_util_nest__ = __webpack_require__(9); /* harmony import */               // 4516
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_9__foundation_util_timer__ = __webpack_require__(18); /* harmony import */             // 4517
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_10__foundation_util_touch__ = __webpack_require__(10); /* harmony import */            // 4518
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_11__foundation_util_triggers__ = __webpack_require__(5); /* harmony import */          // 4519
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_12__foundation_abide__ = __webpack_require__(20); /* harmony import */                 // 4520
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_13__foundation_accordion__ = __webpack_require__(11); /* harmony import */             // 4521
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_14__foundation_accordionMenu__ = __webpack_require__(12); /* harmony import */         // 4522
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_15__foundation_drilldown__ = __webpack_require__(13); /* harmony import */             // 4523
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_16__foundation_dropdown__ = __webpack_require__(22); /* harmony import */              // 4524
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_17__foundation_dropdownMenu__ = __webpack_require__(14); /* harmony import */          // 4525
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_18__foundation_equalizer__ = __webpack_require__(23); /* harmony import */             // 4526
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_19__foundation_interchange__ = __webpack_require__(24); /* harmony import */           // 4527
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_20__foundation_magellan__ = __webpack_require__(25); /* harmony import */              // 4528
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_21__foundation_offcanvas__ = __webpack_require__(26); /* harmony import */             // 4529
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_22__foundation_orbit__ = __webpack_require__(27); /* harmony import */                 // 4530
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_23__foundation_responsiveMenu__ = __webpack_require__(29); /* harmony import */        // 4531
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_24__foundation_responsiveToggle__ = __webpack_require__(30); /* harmony import */      // 4532
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_25__foundation_reveal__ = __webpack_require__(31); /* harmony import */                // 4533
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_26__foundation_slider__ = __webpack_require__(32); /* harmony import */                // 4534
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_27__foundation_smoothScroll__ = __webpack_require__(16); /* harmony import */          // 4535
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_28__foundation_sticky__ = __webpack_require__(33); /* harmony import */                // 4536
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_29__foundation_tabs__ = __webpack_require__(17); /* harmony import */                  // 4537
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_30__foundation_toggler__ = __webpack_require__(34); /* harmony import */               // 4538
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_31__foundation_tooltip__ = __webpack_require__(35); /* harmony import */               // 4539
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_32__foundation_responsiveAccordionTabs__ = __webpack_require__(28);                    // 4540
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].addToJquery(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a); // Add Foundation Utils to Foundation global namespace for backwards
  // compatibility.                                                                                                    // 4547
                                                                                                                       //
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].rtl = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["a" /* rtl */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].GetYoDigits = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].transitionend = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["c" /* transitionend */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Box = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["a" /* Box */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].onImagesLoaded = __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__["a" /* onImagesLoaded */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Keyboard = __WEBPACK_IMPORTED_MODULE_5__foundation_util_keyboard__["a" /* Keyboard */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].MediaQuery = __WEBPACK_IMPORTED_MODULE_6__foundation_util_mediaQuery__["a" /* MediaQuery */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Motion = __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__["a" /* Motion */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Move = __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__["b" /* Move */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Nest = __WEBPACK_IMPORTED_MODULE_8__foundation_util_nest__["a" /* Nest */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Timer = __WEBPACK_IMPORTED_MODULE_9__foundation_util_timer__["a" /* Timer */]; // Touch and Triggers previously were almost purely sede effect driven,
  // so no // need to add it to Foundation, just init them.                                                            // 4572
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_10__foundation_util_touch__["a" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_11__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a, __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */]);
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_12__foundation_abide__["a" /* Abide */], 'Abide');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_13__foundation_accordion__["a" /* Accordion */], 'Accordion');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_14__foundation_accordionMenu__["a" /* AccordionMenu */], 'AccordionMenu');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_15__foundation_drilldown__["a" /* Drilldown */], 'Drilldown');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_16__foundation_dropdown__["a" /* Dropdown */], 'Dropdown');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_17__foundation_dropdownMenu__["a" /* DropdownMenu */], 'DropdownMenu');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_18__foundation_equalizer__["a" /* Equalizer */], 'Equalizer');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_19__foundation_interchange__["a" /* Interchange */], 'Interchange');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_20__foundation_magellan__["a" /* Magellan */], 'Magellan');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_21__foundation_offcanvas__["a" /* OffCanvas */], 'OffCanvas');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_22__foundation_orbit__["a" /* Orbit */], 'Orbit');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_23__foundation_responsiveMenu__["a" /* ResponsiveMenu */], 'ResponsiveMenu');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_24__foundation_responsiveToggle__["a" /* ResponsiveToggle */], 'ResponsiveToggle');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_25__foundation_reveal__["a" /* Reveal */], 'Reveal');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_26__foundation_slider__["a" /* Slider */], 'Slider');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_27__foundation_smoothScroll__["a" /* SmoothScroll */], 'SmoothScroll');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_28__foundation_sticky__["a" /* Sticky */], 'Sticky');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_29__foundation_tabs__["a" /* Tabs */], 'Tabs');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_30__foundation_toggler__["a" /* Toggler */], 'Toggler');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_31__foundation_tooltip__["a" /* Tooltip */], 'Tooltip');
                                                                                                                       //
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_32__foundation_responsiveAccordionTabs__["a" /* ResponsiveAccordionTabs */], 'ResponsiveAccordionTabs'); /***/
}, /* 20 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 4643
  "use strict"; /* harmony export (binding) */                                                                         // 4647
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 4648
    return Abide;                                                                                                      // 4648
  }); /* harmony import */                                                                                             // 4648
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 4649
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);                                       // 4651
                                                                                                                       //
  var _createClass = function () {                                                                                     // 4654
    function defineProperties(target, props) {                                                                         // 4654
      for (var i = 0; i < props.length; i++) {                                                                         // 4654
        var descriptor = props[i];                                                                                     // 4654
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 4654
        descriptor.configurable = true;                                                                                // 4654
        if ("value" in descriptor) descriptor.writable = true;                                                         // 4654
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 4654
      }                                                                                                                // 4654
    }                                                                                                                  // 4654
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 4654
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 4654
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 4654
      return Constructor;                                                                                              // 4654
    };                                                                                                                 // 4654
  }();                                                                                                                 // 4654
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 4656
    if (!(instance instanceof Constructor)) {                                                                          // 4656
      throw new TypeError("Cannot call a class as a function");                                                        // 4656
    }                                                                                                                  // 4656
  }                                                                                                                    // 4656
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 4658
    if (!self) {                                                                                                       // 4658
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 4658
    }                                                                                                                  // 4658
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 4658
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 4660
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 4660
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 4660
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 4660
      constructor: {                                                                                                   // 4660
        value: subClass,                                                                                               // 4660
        enumerable: false,                                                                                             // 4660
        writable: true,                                                                                                // 4660
        configurable: true                                                                                             // 4660
      }                                                                                                                // 4660
    });                                                                                                                // 4660
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 4660
     * Abide module.                                                                                                   //
     * @module foundation.abide                                                                                        //
     */                                                                                                                //
                                                                                                                       //
  var Abide = function (_Plugin) {                                                                                     // 4670
    _inherits(Abide, _Plugin);                                                                                         // 4671
                                                                                                                       //
    function Abide() {                                                                                                 // 4673
      _classCallCheck(this, Abide);                                                                                    // 4674
                                                                                                                       //
      return _possibleConstructorReturn(this, (Abide.__proto__ || Object.getPrototypeOf(Abide)).apply(this, arguments));
    }                                                                                                                  // 4677
                                                                                                                       //
    _createClass(Abide, [{                                                                                             // 4679
      key: '_setup',                                                                                                   // 4680
      /**                                                                                                              // 4682
       * Creates a new instance of Abide.                                                                              //
       * @class                                                                                                        //
       * @name Abide                                                                                                   //
       * @fires Abide#init                                                                                             //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element) {                                                                                     // 4690
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                        // 4691
          this.$element = element;                                                                                     // 4693
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Abide.defaults, this.$element.data(), options);
          this.className = 'Abide'; // ie9 back compat                                                                 // 4696
                                                                                                                       //
          this._init();                                                                                                // 4697
        }                                                                                                              // 4698
                                                                                                                       //
        return _setup;                                                                                                 // 4690
      }() /**                                                                                                          // 4690
           * Initializes the Abide plugin and calls functions to get Abide functioning on load.                        //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4679
      key: '_init',                                                                                                    // 4706
      value: function () {                                                                                             // 4707
        function _init() {                                                                                             // 4707
          this.$inputs = this.$element.find('input, textarea, select');                                                // 4708
                                                                                                                       //
          this._events();                                                                                              // 4710
        }                                                                                                              // 4711
                                                                                                                       //
        return _init;                                                                                                  // 4707
      }() /**                                                                                                          // 4707
           * Initializes events for Abide.                                                                             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4705
      key: '_events',                                                                                                  // 4719
      value: function () {                                                                                             // 4720
        function _events() {                                                                                           // 4720
          var _this3 = this;                                                                                           // 4721
                                                                                                                       //
          this.$element.off('.abide').on('reset.zf.abide', function () {                                               // 4723
            _this3.resetForm();                                                                                        // 4724
          }).on('submit.zf.abide', function () {                                                                       // 4725
            return _this3.validateForm();                                                                              // 4726
          });                                                                                                          // 4727
                                                                                                                       //
          if (this.options.validateOn === 'fieldChange') {                                                             // 4729
            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {                                   // 4730
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));                          // 4731
            });                                                                                                        // 4732
          }                                                                                                            // 4733
                                                                                                                       //
          if (this.options.liveValidate) {                                                                             // 4735
            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {                                     // 4736
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));                          // 4737
            });                                                                                                        // 4738
          }                                                                                                            // 4739
                                                                                                                       //
          if (this.options.validateOnBlur) {                                                                           // 4741
            this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {                                       // 4742
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));                          // 4743
            });                                                                                                        // 4744
          }                                                                                                            // 4745
        }                                                                                                              // 4746
                                                                                                                       //
        return _events;                                                                                                // 4720
      }() /**                                                                                                          // 4720
           * Calls necessary functions to update Abide upon DOM change                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4718
      key: '_reflow',                                                                                                  // 4754
      value: function () {                                                                                             // 4755
        function _reflow() {                                                                                           // 4755
          this._init();                                                                                                // 4756
        }                                                                                                              // 4757
                                                                                                                       //
        return _reflow;                                                                                                // 4755
      }() /**                                                                                                          // 4755
           * Checks whether or not a form element has the required attribute and if it's checked or not                //
           * @param {Object} element - jQuery object to check for required attribute                                   //
           * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                  //
           */                                                                                                          //
    }, {                                                                                                               // 4753
      key: 'requiredCheck',                                                                                            // 4766
      value: function () {                                                                                             // 4767
        function requiredCheck($el) {                                                                                  // 4767
          if (!$el.attr('required')) return true;                                                                      // 4768
          var isGood = true;                                                                                           // 4770
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 4772
            case 'checkbox':                                                                                           // 4773
              isGood = $el[0].checked;                                                                                 // 4774
              break;                                                                                                   // 4775
                                                                                                                       //
            case 'select':                                                                                             // 4777
            case 'select-one':                                                                                         // 4778
            case 'select-multiple':                                                                                    // 4779
              var opt = $el.find('option:selected');                                                                   // 4780
              if (!opt.length || !opt.val()) isGood = false;                                                           // 4781
              break;                                                                                                   // 4782
                                                                                                                       //
            default:                                                                                                   // 4784
              if (!$el.val() || !$el.val().length) isGood = false;                                                     // 4785
          }                                                                                                            // 4772
                                                                                                                       //
          return isGood;                                                                                               // 4788
        }                                                                                                              // 4789
                                                                                                                       //
        return requiredCheck;                                                                                          // 4767
      }() /**                                                                                                          // 4767
           * Get:                                                                                                      //
           * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:                  //
           *   1. The element's direct sibling('s).                                                                    //
           *   2. The element's parent's children.                                                                     //
           * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.                        //
           *                                                                                                           //
           * This allows for multiple form errors per input, though if none are found, no form errors will be shown.   //
           *                                                                                                           //
           * @param {Object} $el - jQuery object to use as reference to find the form error selector.                  //
           * @returns {Object} jQuery object with the selector.                                                        //
           */                                                                                                          //
    }, {                                                                                                               // 4765
      key: 'findFormError',                                                                                            // 4805
      value: function () {                                                                                             // 4806
        function findFormError($el) {                                                                                  // 4806
          var id = $el[0].id;                                                                                          // 4807
          var $error = $el.siblings(this.options.formErrorSelector);                                                   // 4808
                                                                                                                       //
          if (!$error.length) {                                                                                        // 4810
            $error = $el.parent().find(this.options.formErrorSelector);                                                // 4811
          }                                                                                                            // 4812
                                                                                                                       //
          $error = $error.add(this.$element.find('[data-form-error-for="' + id + '"]'));                               // 4814
          return $error;                                                                                               // 4816
        }                                                                                                              // 4817
                                                                                                                       //
        return findFormError;                                                                                          // 4806
      }() /**                                                                                                          // 4806
           * Get the first element in this order:                                                                      //
           * 2. The <label> with the attribute `[for="someInputId"]`                                                   //
           * 3. The `.closest()` <label>                                                                               //
           *                                                                                                           //
           * @param {Object} $el - jQuery object to check for required attribute                                       //
           * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                  //
           */                                                                                                          //
    }, {                                                                                                               // 4804
      key: 'findLabel',                                                                                                // 4829
      value: function () {                                                                                             // 4830
        function findLabel($el) {                                                                                      // 4830
          var id = $el[0].id;                                                                                          // 4831
          var $label = this.$element.find('label[for="' + id + '"]');                                                  // 4832
                                                                                                                       //
          if (!$label.length) {                                                                                        // 4834
            return $el.closest('label');                                                                               // 4835
          }                                                                                                            // 4836
                                                                                                                       //
          return $label;                                                                                               // 4838
        }                                                                                                              // 4839
                                                                                                                       //
        return findLabel;                                                                                              // 4830
      }() /**                                                                                                          // 4830
           * Get the set of labels associated with a set of radio els in this order                                    //
           * 2. The <label> with the attribute `[for="someInputId"]`                                                   //
           * 3. The `.closest()` <label>                                                                               //
           *                                                                                                           //
           * @param {Object} $el - jQuery object to check for required attribute                                       //
           * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                  //
           */                                                                                                          //
    }, {                                                                                                               // 4828
      key: 'findRadioLabels',                                                                                          // 4851
      value: function () {                                                                                             // 4852
        function findRadioLabels($els) {                                                                               // 4852
          var _this4 = this;                                                                                           // 4853
                                                                                                                       //
          var labels = $els.map(function (i, el) {                                                                     // 4855
            var id = el.id;                                                                                            // 4856
                                                                                                                       //
            var $label = _this4.$element.find('label[for="' + id + '"]');                                              // 4857
                                                                                                                       //
            if (!$label.length) {                                                                                      // 4859
              $label = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).closest('label');                            // 4860
            }                                                                                                          // 4861
                                                                                                                       //
            return $label[0];                                                                                          // 4862
          });                                                                                                          // 4863
          return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(labels);                                               // 4865
        }                                                                                                              // 4866
                                                                                                                       //
        return findRadioLabels;                                                                                        // 4852
      }() /**                                                                                                          // 4852
           * Adds the CSS error class as specified by the Abide settings to the label, input, and the form             //
           * @param {Object} $el - jQuery object to add the class to                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 4850
      key: 'addErrorClasses',                                                                                          // 4874
      value: function () {                                                                                             // 4875
        function addErrorClasses($el) {                                                                                // 4875
          var $label = this.findLabel($el);                                                                            // 4876
          var $formError = this.findFormError($el);                                                                    // 4877
                                                                                                                       //
          if ($label.length) {                                                                                         // 4879
            $label.addClass(this.options.labelErrorClass);                                                             // 4880
          }                                                                                                            // 4881
                                                                                                                       //
          if ($formError.length) {                                                                                     // 4883
            $formError.addClass(this.options.formErrorClass);                                                          // 4884
          }                                                                                                            // 4885
                                                                                                                       //
          $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');                                         // 4887
        }                                                                                                              // 4888
                                                                                                                       //
        return addErrorClasses;                                                                                        // 4875
      }() /**                                                                                                          // 4875
           * Remove CSS error classes etc from an entire radio button group                                            //
           * @param {String} groupName - A string that specifies the name of a radio button group                      //
           *                                                                                                           //
           */                                                                                                          //
    }, {                                                                                                               // 4873
      key: 'removeRadioErrorClasses',                                                                                  // 4897
      value: function () {                                                                                             // 4898
        function removeRadioErrorClasses(groupName) {                                                                  // 4898
          var $els = this.$element.find(':radio[name="' + groupName + '"]');                                           // 4899
          var $labels = this.findRadioLabels($els);                                                                    // 4900
          var $formErrors = this.findFormError($els);                                                                  // 4901
                                                                                                                       //
          if ($labels.length) {                                                                                        // 4903
            $labels.removeClass(this.options.labelErrorClass);                                                         // 4904
          }                                                                                                            // 4905
                                                                                                                       //
          if ($formErrors.length) {                                                                                    // 4907
            $formErrors.removeClass(this.options.formErrorClass);                                                      // 4908
          }                                                                                                            // 4909
                                                                                                                       //
          $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');                                   // 4911
        }                                                                                                              // 4912
                                                                                                                       //
        return removeRadioErrorClasses;                                                                                // 4898
      }() /**                                                                                                          // 4898
           * Removes CSS error class as specified by the Abide settings from the label, input, and the form            //
           * @param {Object} $el - jQuery object to remove the class from                                              //
           */                                                                                                          //
    }, {                                                                                                               // 4896
      key: 'removeErrorClasses',                                                                                       // 4920
      value: function () {                                                                                             // 4921
        function removeErrorClasses($el) {                                                                             // 4921
          // radios need to clear all of the els                                                                       // 4922
          if ($el[0].type == 'radio') {                                                                                // 4923
            return this.removeRadioErrorClasses($el.attr('name'));                                                     // 4924
          }                                                                                                            // 4925
                                                                                                                       //
          var $label = this.findLabel($el);                                                                            // 4927
          var $formError = this.findFormError($el);                                                                    // 4928
                                                                                                                       //
          if ($label.length) {                                                                                         // 4930
            $label.removeClass(this.options.labelErrorClass);                                                          // 4931
          }                                                                                                            // 4932
                                                                                                                       //
          if ($formError.length) {                                                                                     // 4934
            $formError.removeClass(this.options.formErrorClass);                                                       // 4935
          }                                                                                                            // 4936
                                                                                                                       //
          $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');                                    // 4938
        }                                                                                                              // 4939
                                                                                                                       //
        return removeErrorClasses;                                                                                     // 4921
      }() /**                                                                                                          // 4921
           * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.          //
           * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set                           //
           * @fires Abide#invalid                                                                                      //
           * @fires Abide#valid                                                                                        //
           * @param {Object} element - jQuery object to validate, should be an HTML input                              //
           * @returns {Boolean} goodToGo - If the input is valid or not.                                               //
           */                                                                                                          //
    }, {                                                                                                               // 4919
      key: 'validateInput',                                                                                            // 4951
      value: function () {                                                                                             // 4952
        function validateInput($el) {                                                                                  // 4952
          var clearRequire = this.requiredCheck($el),                                                                  // 4953
              validated = false,                                                                                       // 4953
              customValidator = true,                                                                                  // 4953
              validator = $el.attr('data-validator'),                                                                  // 4953
              equalTo = true; // don't validate ignored inputs or hidden inputs or disabled inputs                     // 4953
                                                                                                                       //
          if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {                    // 4960
            return true;                                                                                               // 4961
          }                                                                                                            // 4962
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 4964
            case 'radio':                                                                                              // 4965
              validated = this.validateRadio($el.attr('name'));                                                        // 4966
              break;                                                                                                   // 4967
                                                                                                                       //
            case 'checkbox':                                                                                           // 4969
              validated = clearRequire;                                                                                // 4970
              break;                                                                                                   // 4971
                                                                                                                       //
            case 'select':                                                                                             // 4973
            case 'select-one':                                                                                         // 4974
            case 'select-multiple':                                                                                    // 4975
              validated = clearRequire;                                                                                // 4976
              break;                                                                                                   // 4977
                                                                                                                       //
            default:                                                                                                   // 4979
              validated = this.validateText($el);                                                                      // 4980
          }                                                                                                            // 4964
                                                                                                                       //
          if (validator) {                                                                                             // 4983
            customValidator = this.matchValidation($el, validator, $el.attr('required'));                              // 4984
          }                                                                                                            // 4985
                                                                                                                       //
          if ($el.attr('data-equalto')) {                                                                              // 4987
            equalTo = this.options.validators.equalTo($el);                                                            // 4988
          }                                                                                                            // 4989
                                                                                                                       //
          var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;                    // 4991
          var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';                                                // 4992
                                                                                                                       //
          if (goodToGo) {                                                                                              // 4994
            // Re-validate inputs that depend on this one with equalto                                                 // 4995
            var dependentElements = this.$element.find('[data-equalto="' + $el.attr('id') + '"]');                     // 4996
                                                                                                                       //
            if (dependentElements.length) {                                                                            // 4997
              var _this = this;                                                                                        // 4998
                                                                                                                       //
              dependentElements.each(function () {                                                                     // 4999
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val()) {                                      // 5000
                  _this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));                           // 5001
                }                                                                                                      // 5002
              });                                                                                                      // 5003
            }                                                                                                          // 5004
          }                                                                                                            // 5005
                                                                                                                       //
          this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el); /**                                          // 5007
                                                                           * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
                                                                           * Trigger includes the DOM element of the input.
                                                                           * @event Abide#valid                        //
                                                                           * @event Abide#invalid                      //
                                                                           */                                          //
          $el.trigger(message, [$el]);                                                                                 // 5015
          return goodToGo;                                                                                             // 5017
        }                                                                                                              // 5018
                                                                                                                       //
        return validateInput;                                                                                          // 4952
      }() /**                                                                                                          // 4952
           * Goes through a form and if there are any invalid inputs, it will display the form error element           //
           * @returns {Boolean} noError - true if no errors were detected...                                           //
           * @fires Abide#formvalid                                                                                    //
           * @fires Abide#forminvalid                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 4950
      key: 'validateForm',                                                                                             // 5028
      value: function () {                                                                                             // 5029
        function validateForm() {                                                                                      // 5029
          var acc = [];                                                                                                // 5030
                                                                                                                       //
          var _this = this;                                                                                            // 5031
                                                                                                                       //
          this.$inputs.each(function () {                                                                              // 5033
            acc.push(_this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)));                       // 5034
          });                                                                                                          // 5035
          var noError = acc.indexOf(false) === -1;                                                                     // 5037
          this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block'); /**                     // 5039
                                                                                                * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
                                                                                                * Trigger includes the element of the form.
                                                                                                * @event Abide#formvalid
                                                                                                * @event Abide#forminvalid
                                                                                                */                     //
          this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);               // 5047
          return noError;                                                                                              // 5049
        }                                                                                                              // 5050
                                                                                                                       //
        return validateForm;                                                                                           // 5029
      }() /**                                                                                                          // 5029
           * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
           * @param {Object} $el - jQuery object to validate, should be a text input HTML element                      //
           * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns             //
           * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified  //
           */                                                                                                          //
    }, {                                                                                                               // 5027
      key: 'validateText',                                                                                             // 5060
      value: function () {                                                                                             // 5061
        function validateText($el, pattern) {                                                                          // 5061
          // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
          pattern = pattern || $el.attr('pattern') || $el.attr('type');                                                // 5063
          var inputText = $el.val();                                                                                   // 5064
          var valid = false;                                                                                           // 5065
                                                                                                                       //
          if (inputText.length) {                                                                                      // 5067
            // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp           // 5068
            if (this.options.patterns.hasOwnProperty(pattern)) {                                                       // 5069
              valid = this.options.patterns[pattern].test(inputText);                                                  // 5070
            } // If the pattern name isn't also the type attribute of the field, then test it as a regexp              // 5071
            else if (pattern !== $el.attr('type')) {                                                                   // 5069
                valid = new RegExp(pattern).test(inputText);                                                           // 5074
              } else {                                                                                                 // 5075
                valid = true;                                                                                          // 5076
              }                                                                                                        // 5077
          } // An empty field is valid if it's not required                                                            // 5078
          else if (!$el.prop('required')) {                                                                            // 5067
              valid = true;                                                                                            // 5081
            }                                                                                                          // 5082
                                                                                                                       //
          return valid;                                                                                                // 5084
        }                                                                                                              // 5085
                                                                                                                       //
        return validateText;                                                                                           // 5061
      }() /**                                                                                                          // 5061
           * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
           * @param {String} groupName - A string that specifies the name of a radio button group                      //
           * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
           */                                                                                                          //
    }, {                                                                                                               // 5059
      key: 'validateRadio',                                                                                            // 5094
      value: function () {                                                                                             // 5095
        function validateRadio(groupName) {                                                                            // 5095
          // If at least one radio in the group has the `required` attribute, the group is considered required         // 5096
          // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice                   // 5097
          var $group = this.$element.find(':radio[name="' + groupName + '"]');                                         // 5098
          var valid = false,                                                                                           // 5099
              required = false; // For the group to be required, at least one radio needs to be required               // 5099
                                                                                                                       //
          $group.each(function (i, e) {                                                                                // 5103
            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).attr('required')) {                                  // 5104
              required = true;                                                                                         // 5105
            }                                                                                                          // 5106
          });                                                                                                          // 5107
          if (!required) valid = true;                                                                                 // 5108
                                                                                                                       //
          if (!valid) {                                                                                                // 5110
            // For the group to be valid, at least one radio needs to be checked                                       // 5111
            $group.each(function (i, e) {                                                                              // 5112
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).prop('checked')) {                                 // 5113
                valid = true;                                                                                          // 5114
              }                                                                                                        // 5115
            });                                                                                                        // 5116
          }                                                                                                            // 5117
                                                                                                                       //
          ;                                                                                                            // 5117
          return valid;                                                                                                // 5119
        }                                                                                                              // 5120
                                                                                                                       //
        return validateRadio;                                                                                          // 5095
      }() /**                                                                                                          // 5095
           * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
           * @param {Object} $el - jQuery input element.                                                               //
           * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
           * @param {Boolean} required - self explanatory?                                                             //
           * @returns {Boolean} - true if validations passed.                                                          //
           */                                                                                                          //
    }, {                                                                                                               // 5093
      key: 'matchValidation',                                                                                          // 5131
      value: function () {                                                                                             // 5132
        function matchValidation($el, validators, required) {                                                          // 5132
          var _this5 = this;                                                                                           // 5133
                                                                                                                       //
          required = required ? true : false;                                                                          // 5135
          var clear = validators.split(' ').map(function (v) {                                                         // 5137
            return _this5.options.validators[v]($el, required, $el.parent());                                          // 5138
          });                                                                                                          // 5139
          return clear.indexOf(false) === -1;                                                                          // 5140
        }                                                                                                              // 5141
                                                                                                                       //
        return matchValidation;                                                                                        // 5132
      }() /**                                                                                                          // 5132
           * Resets form inputs and styles                                                                             //
           * @fires Abide#formreset                                                                                    //
           */                                                                                                          //
    }, {                                                                                                               // 5130
      key: 'resetForm',                                                                                                // 5149
      value: function () {                                                                                             // 5150
        function resetForm() {                                                                                         // 5150
          var $form = this.$element,                                                                                   // 5151
              opts = this.options;                                                                                     // 5151
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
                                                                                                                       //
          $form.find('[data-abide-error]').css('display', 'none');                                                     // 5157
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid'); /**
                                                                                                                                                                  * Fires when the form has been reset.
                                                                                                                                                                  * @event Abide#formreset
                                                                                                                                                                  */
                                                                                                                       //
          $form.trigger('formreset.zf.abide', [$form]);                                                                // 5165
        }                                                                                                              // 5166
                                                                                                                       //
        return resetForm;                                                                                              // 5150
      }() /**                                                                                                          // 5150
           * Destroys an instance of Abide.                                                                            //
           * Removes error styles and classes from elements, without resetting their values.                           //
           */                                                                                                          //
    }, {                                                                                                               // 5148
      key: '_destroy',                                                                                                 // 5174
      value: function () {                                                                                             // 5175
        function _destroy() {                                                                                          // 5175
          var _this = this;                                                                                            // 5176
                                                                                                                       //
          this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');                               // 5177
          this.$inputs.off('.abide').each(function () {                                                                // 5179
            _this.removeErrorClasses(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));                            // 5180
          });                                                                                                          // 5181
        }                                                                                                              // 5182
                                                                                                                       //
        return _destroy;                                                                                               // 5175
      }()                                                                                                              // 5175
    }]);                                                                                                               // 5173
                                                                                                                       //
    return Abide;                                                                                                      // 5185
  }(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["a" /* Plugin */]); /**                                           // 5186
                                                                          * Default settings for plugin                //
                                                                          */                                           //
                                                                                                                       //
  Abide.defaults = {                                                                                                   // 5193
    /**                                                                                                                // 5194
     * The default event to validate inputs. Checkboxes and radios validate immediately.                               //
     * Remove or change this value for manual validation.                                                              //
     * @option                                                                                                         //
     * @type {?string}                                                                                                 //
     * @default 'fieldChange'                                                                                          //
     */validateOn: 'fieldChange',                                                                                      //
    /**                                                                                                                // 5203
     * Class to be applied to input labels on failed validation.                                                       //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-invalid-label'                                                                                     //
     */labelErrorClass: 'is-invalid-label',                                                                            //
    /**                                                                                                                // 5211
     * Class to be applied to inputs on failed validation.                                                             //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-invalid-input'                                                                                     //
     */inputErrorClass: 'is-invalid-input',                                                                            //
    /**                                                                                                                // 5219
     * Class selector to use to target Form Errors for show/hide.                                                      //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default '.form-error'                                                                                          //
     */formErrorSelector: '.form-error',                                                                               //
    /**                                                                                                                // 5227
     * Class added to Form Errors on failed validation.                                                                //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-visible'                                                                                           //
     */formErrorClass: 'is-visible',                                                                                   //
    /**                                                                                                                // 5235
     * Set to true to validate text inputs on any value change.                                                        //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */liveValidate: false,                                                                                            //
    /**                                                                                                                // 5243
     * Set to true to validate inputs on blur.                                                                         //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */validateOnBlur: false,                                                                                          //
    patterns: {                                                                                                        // 5251
      alpha: /^[a-zA-Z]+$/,                                                                                            // 5252
      alpha_numeric: /^[a-zA-Z0-9]+$/,                                                                                 // 5253
      integer: /^[-+]?\d+$/,                                                                                           // 5254
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,                                                                              // 5255
      // amex, visa, diners                                                                                            // 5257
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,                                                                                           // 5259
      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de                                                                                                        // 5265
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,                                      // 5266
      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD                                                                                                    // 5269
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS                                                                                                      // 5271
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,                                                                // 5272
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,                                                                    // 5273
      // MM/DD/YYYY                                                                                                    // 5274
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,                                  // 5275
      // DD/MM/YYYY                                                                                                    // 5276
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,                                  // 5277
      // #FFF or #FFFFFF                                                                                               // 5279
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,                                                                    // 5280
      // Domain || URL                                                                                                 // 5282
      website: {                                                                                                       // 5283
        test: function (text) {                                                                                        // 5284
          return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);            // 5285
        }                                                                                                              // 5286
      }                                                                                                                // 5283
    },                                                                                                                 // 5251
    /**                                                                                                                // 5290
     * Optional validation functions to be used. `equalTo` being the only default included function.                   //
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.                                                                            //
     * required : Boolean value of the required attribute be present or not.                                           //
     * parent : The direct parent of the input.                                                                        //
     * @option                                                                                                         //
     */validators: {                                                                                                   //
      equalTo: function (el, required, parent) {                                                                       // 5299
        return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + el.attr('data-equalto')).val() === el.val();       // 5300
      }                                                                                                                // 5301
    }                                                                                                                  // 5298
  }; /***/                                                                                                             // 5193
}, /* 21 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 5307
  "use strict"; /* harmony export (binding) */                                                                         // 5311
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 5312
    return Foundation;                                                                                                 // 5312
  }); /* harmony import */                                                                                             // 5312
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 5313
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 5315
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);                              // 5316
                                                                                                                       //
  var FOUNDATION_VERSION = '6.4.1'; // Global Foundation object                                                        // 5323
  // This is attached to the window, or used as a module for AMD/Browserify                                            // 5326
                                                                                                                       //
  var Foundation = {                                                                                                   // 5327
    version: FOUNDATION_VERSION,                                                                                       // 5328
    /**                                                                                                                // 5330
     * Stores initialized plugins.                                                                                     //
     */_plugins: {},                                                                                                   //
    /**                                                                                                                // 5335
     * Stores generated unique ids for plugin instances                                                                //
     */_uuids: [],                                                                                                     //
    /**                                                                                                                // 5340
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.                                                         //
     */plugin: function (plugin, name) {                                                                               //
      // Object key to use when adding to global Foundation object                                                     // 5345
      // Examples: Foundation.Reveal, Foundation.OffCanvas                                                             // 5346
      var className = name || functionName(plugin); // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas                                                                        // 5349
                                                                                                                       //
      var attrName = hyphenate(className); // Add to the Foundation object and the plugins list (for reflowing)        // 5350
                                                                                                                       //
      this._plugins[attrName] = this[className] = plugin;                                                              // 5353
    },                                                                                                                 // 5354
    /**                                                                                                                // 5355
     * @function                                                                                                       //
     * Populates the _uuids array with pointers to each individual plugin instance.                                    //
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.                             //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @param {String} name - the name of the plugin, passed as a camelCased string.                                   //
     * @fires Plugin#init                                                                                              //
     */registerPlugin: function (plugin, name) {                                                                       //
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();                        // 5365
      plugin.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);
                                                                                                                       //
      if (!plugin.$element.attr('data-' + pluginName)) {                                                               // 5368
        plugin.$element.attr('data-' + pluginName, plugin.uuid);                                                       // 5369
      }                                                                                                                // 5370
                                                                                                                       //
      if (!plugin.$element.data('zfPlugin')) {                                                                         // 5371
        plugin.$element.data('zfPlugin', plugin);                                                                      // 5372
      } /**                                                                                                            // 5373
         * Fires when the plugin has initialized.                                                                      //
         * @event Plugin#init                                                                                          //
         */                                                                                                            //
                                                                                                                       //
      plugin.$element.trigger('init.zf.' + pluginName);                                                                // 5378
                                                                                                                       //
      this._uuids.push(plugin.uuid);                                                                                   // 5380
                                                                                                                       //
      return;                                                                                                          // 5382
    },                                                                                                                 // 5383
    /**                                                                                                                // 5384
     * @function                                                                                                       //
     * Removes the plugins uuid from the _uuids array.                                                                 //
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.                                 //
     * Also fires the destroyed event for the plugin, consolidating repetitive code.                                   //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @fires Plugin#destroyed                                                                                         //
     */unregisterPlugin: function (plugin) {                                                                           //
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));                          // 5393
                                                                                                                       //
      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);                                                         // 5395
                                                                                                                       //
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin') /**                                      // 5396
                                                                               * Fires when the plugin has been destroyed.
                                                                               * @event Plugin#destroyed               //
                                                                               */.trigger('destroyed.zf.' + pluginName);
                                                                                                                       //
      for (var prop in meteorBabelHelpers.sanitizeForInObject(plugin)) {                                               // 5402
        plugin[prop] = null; //clean up script to prep for garbage collection.                                         // 5403
      }                                                                                                                // 5404
                                                                                                                       //
      return;                                                                                                          // 5405
    },                                                                                                                 // 5406
    /**                                                                                                                // 5408
     * @function                                                                                                       //
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.    //
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.                                         //
     */reInit: function (plugins) {                                                                                    //
      var isJQ = plugins instanceof __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;                                    // 5415
                                                                                                                       //
      try {                                                                                                            // 5416
        if (isJQ) {                                                                                                    // 5417
          plugins.each(function () {                                                                                   // 5418
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('zfPlugin')._init();                             // 5419
          });                                                                                                          // 5420
        } else {                                                                                                       // 5421
          var type = typeof plugins === "undefined" ? "undefined" : (0, _typeof3.default)(plugins),                    // 5422
              _this = this,                                                                                            // 5422
              fns = {                                                                                                  // 5422
            'object': function (plgs) {                                                                                // 5425
              plgs.forEach(function (p) {                                                                              // 5426
                p = hyphenate(p);                                                                                      // 5427
                                                                                                                       //
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + p + ']').foundation('_init');                // 5428
              });                                                                                                      // 5429
            },                                                                                                         // 5430
            'string': function () {                                                                                    // 5431
              plugins = hyphenate(plugins);                                                                            // 5432
                                                                                                                       //
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugins + ']').foundation('_init');            // 5433
            },                                                                                                         // 5434
            'undefined': function () {                                                                                 // 5435
              this['object'](Object.keys(_this._plugins));                                                             // 5436
            }                                                                                                          // 5437
          };                                                                                                           // 5424
                                                                                                                       //
          fns[type](plugins);                                                                                          // 5439
        }                                                                                                              // 5440
      } catch (err) {                                                                                                  // 5441
        console.error(err);                                                                                            // 5442
      } finally {                                                                                                      // 5443
        return plugins;                                                                                                // 5444
      }                                                                                                                // 5445
    },                                                                                                                 // 5446
    /**                                                                                                                // 5448
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.           //
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.       //
     */reflow: function (elem, plugins) {                                                                              //
      // If plugins is undefined, just grab everything                                                                 // 5455
      if (typeof plugins === 'undefined') {                                                                            // 5456
        plugins = Object.keys(this._plugins);                                                                          // 5457
      } // If plugins is a string, convert it to an array with one item                                                // 5458
      else if (typeof plugins === 'string') {                                                                          // 5456
          plugins = [plugins];                                                                                         // 5461
        }                                                                                                              // 5462
                                                                                                                       //
      var _this = this; // Iterate through each plugin                                                                 // 5464
                                                                                                                       //
                                                                                                                       //
      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(plugins, function (i, name) {                                // 5467
        // Get the current plugin                                                                                      // 5468
        var plugin = _this._plugins[name]; // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
                                                                                                                       //
        var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(elem).find('[data-' + name + ']').addBack('[data-' + name + ']'); // For each plugin found, initialize it
                                                                                                                       //
                                                                                                                       //
        $elem.each(function () {                                                                                       // 5475
          var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                              // 5476
              opts = {}; // Don't double-dip on plugins                                                                // 5476
                                                                                                                       //
                                                                                                                       //
          if ($el.data('zfPlugin')) {                                                                                  // 5479
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");      // 5480
            return;                                                                                                    // 5481
          }                                                                                                            // 5482
                                                                                                                       //
          if ($el.attr('data-options')) {                                                                              // 5484
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {                                  // 5485
              var opt = e.split(':').map(function (el) {                                                               // 5486
                return el.trim();                                                                                      // 5487
              });                                                                                                      // 5488
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);                                                           // 5489
            });                                                                                                        // 5490
          }                                                                                                            // 5491
                                                                                                                       //
          try {                                                                                                        // 5492
            $el.data('zfPlugin', new plugin(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), opts));              // 5493
          } catch (er) {                                                                                               // 5494
            console.error(er);                                                                                         // 5495
          } finally {                                                                                                  // 5496
            return;                                                                                                    // 5497
          }                                                                                                            // 5498
        });                                                                                                            // 5499
      });                                                                                                              // 5500
    },                                                                                                                 // 5501
    getFnName: functionName,                                                                                           // 5502
    addToJquery: function ($) {                                                                                        // 5504
      // TODO: consider not making this a jQuery function                                                              // 5505
      // TODO: need way to reflow vs. re-initialize                                                                    // 5506
      /**                                                                                                              // 5507
       * The Foundation jQuery method.                                                                                 //
       * @param {String|Array} method - An action to perform on the current jQuery object.                             //
       */var foundation = function (method) {                                                                          //
        var type = typeof method === "undefined" ? "undefined" : (0, _typeof3.default)(method),                        // 5512
            $noJS = $('.no-js');                                                                                       // 5512
                                                                                                                       //
        if ($noJS.length) {                                                                                            // 5515
          $noJS.removeClass('no-js');                                                                                  // 5516
        }                                                                                                              // 5517
                                                                                                                       //
        if (type === 'undefined') {                                                                                    // 5519
          //needs to initialize the Foundation object, or an individual plugin.                                        // 5520
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 5521
                                                                                                                       //
          Foundation.reflow(this);                                                                                     // 5522
        } else if (type === 'string') {                                                                                // 5523
          //an individual method to invoke on a plugin or group of plugins                                             // 5524
          var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary               // 5525
                                                                                                                       //
          var plugClass = this.data('zfPlugin'); //determine the class of plugin                                       // 5526
                                                                                                                       //
          if (plugClass !== undefined && plugClass[method] !== undefined) {                                            // 5528
            //make sure both the class and method exist                                                                // 5529
            if (this.length === 1) {                                                                                   // 5530
              //if there's only one, call it directly.                                                                 // 5531
              plugClass[method].apply(plugClass, args);                                                                // 5532
            } else {                                                                                                   // 5533
              this.each(function (i, el) {                                                                             // 5534
                //otherwise loop through the jQuery collection and invoke the method on each                           // 5535
                plugClass[method].apply($(el).data('zfPlugin'), args);                                                 // 5536
              });                                                                                                      // 5537
            }                                                                                                          // 5538
          } else {                                                                                                     // 5539
            //error for no class or no method                                                                          // 5540
            throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
          }                                                                                                            // 5542
        } else {                                                                                                       // 5543
          //error for invalid argument type                                                                            // 5544
          throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
        }                                                                                                              // 5546
                                                                                                                       //
        return this;                                                                                                   // 5547
      };                                                                                                               // 5548
                                                                                                                       //
      $.fn.foundation = foundation;                                                                                    // 5549
      return $;                                                                                                        // 5550
    }                                                                                                                  // 5551
  };                                                                                                                   // 5327
  Foundation.util = {                                                                                                  // 5554
    /**                                                                                                                // 5555
     * Function for applying a debounce effect to a function call.                                                     //
     * @function                                                                                                       //
     * @param {Function} func - Function to be called at end of timeout.                                               //
     * @param {Number} delay - Time in ms to delay the call of `func`.                                                 //
     * @returns function                                                                                               //
     */throttle: function (func, delay) {                                                                              //
      var timer = null;                                                                                                // 5563
      return function () {                                                                                             // 5565
        var context = this,                                                                                            // 5566
            args = arguments;                                                                                          // 5566
                                                                                                                       //
        if (timer === null) {                                                                                          // 5569
          timer = setTimeout(function () {                                                                             // 5570
            func.apply(context, args);                                                                                 // 5571
            timer = null;                                                                                              // 5572
          }, delay);                                                                                                   // 5573
        }                                                                                                              // 5574
      };                                                                                                               // 5575
    }                                                                                                                  // 5576
  };                                                                                                                   // 5554
  window.Foundation = Foundation; // Polyfill for requestAnimationFrame                                                // 5579
                                                                                                                       //
  (function () {                                                                                                       // 5582
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {                                      // 5583
      return new Date().getTime();                                                                                     // 5584
    };                                                                                                                 // 5585
    var vendors = ['webkit', 'moz'];                                                                                   // 5587
                                                                                                                       //
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {                                        // 5588
      var vp = vendors[i];                                                                                             // 5589
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];                                             // 5590
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }                                                                                                                  // 5592
                                                                                                                       //
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;                                                                                                // 5594
                                                                                                                       //
      window.requestAnimationFrame = function (callback) {                                                             // 5595
        var now = Date.now();                                                                                          // 5596
        var nextTime = Math.max(lastTime + 16, now);                                                                   // 5597
        return setTimeout(function () {                                                                                // 5598
          callback(lastTime = nextTime);                                                                               // 5599
        }, nextTime - now);                                                                                            // 5600
      };                                                                                                               // 5601
                                                                                                                       //
      window.cancelAnimationFrame = clearTimeout;                                                                      // 5602
    } /**                                                                                                              // 5603
       * Polyfill for performance.now, required by rAF                                                                 //
       */                                                                                                              //
                                                                                                                       //
    if (!window.performance || !window.performance.now) {                                                              // 5607
      window.performance = {                                                                                           // 5608
        start: Date.now(),                                                                                             // 5609
        now: function () {                                                                                             // 5610
          return Date.now() - this.start;                                                                              // 5611
        }                                                                                                              // 5612
      };                                                                                                               // 5608
    }                                                                                                                  // 5614
  })();                                                                                                                // 5615
                                                                                                                       //
  if (!Function.prototype.bind) {                                                                                      // 5616
    Function.prototype.bind = function (oThis) {                                                                       // 5617
      if (typeof this !== 'function') {                                                                                // 5618
        // closest thing possible to the ECMAScript 5                                                                  // 5619
        // internal IsCallable function                                                                                // 5620
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');                   // 5621
      }                                                                                                                // 5622
                                                                                                                       //
      var aArgs = Array.prototype.slice.call(arguments, 1),                                                            // 5624
          fToBind = this,                                                                                              // 5624
          fNOP = function () {},                                                                                       // 5624
          fBound = function () {                                                                                       // 5624
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };                                                                                                               // 5629
                                                                                                                       //
      if (this.prototype) {                                                                                            // 5631
        // native functions don't have a prototype                                                                     // 5632
        fNOP.prototype = this.prototype;                                                                               // 5633
      }                                                                                                                // 5634
                                                                                                                       //
      fBound.prototype = new fNOP();                                                                                   // 5635
      return fBound;                                                                                                   // 5637
    };                                                                                                                 // 5638
  } // Polyfill to get the name of a function in IE9                                                                   // 5639
                                                                                                                       //
                                                                                                                       //
  function functionName(fn) {                                                                                          // 5641
    if (Function.prototype.name === undefined) {                                                                       // 5642
      var funcNameRegex = /function\s([^(]{1,})\(/;                                                                    // 5643
      var results = funcNameRegex.exec(fn.toString());                                                                 // 5644
      return results && results.length > 1 ? results[1].trim() : "";                                                   // 5645
    } else if (fn.prototype === undefined) {                                                                           // 5646
      return fn.constructor.name;                                                                                      // 5647
    } else {                                                                                                           // 5648
      return fn.prototype.constructor.name;                                                                            // 5649
    }                                                                                                                  // 5650
  }                                                                                                                    // 5651
                                                                                                                       //
  function parseValue(str) {                                                                                           // 5652
    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;                                                                                                        // 5654
  } // Convert PascalCase to kebab-case                                                                                // 5655
  // Thank you: http://stackoverflow.com/a/8955580                                                                     // 5657
                                                                                                                       //
                                                                                                                       //
  function hyphenate(str) {                                                                                            // 5658
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();                                                      // 5659
  } /***/                                                                                                              // 5660
}, /* 22 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 5664
  "use strict"; /* harmony export (binding) */                                                                         // 5668
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 5669
    return Dropdown;                                                                                                   // 5669
  }); /* harmony import */                                                                                             // 5669
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 5670
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 5672
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 5673
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_positionable__ = __webpack_require__(15); /* harmony import */           // 5674
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(5);                                // 5675
                                                                                                                       //
  var _createClass = function () {                                                                                     // 5678
    function defineProperties(target, props) {                                                                         // 5678
      for (var i = 0; i < props.length; i++) {                                                                         // 5678
        var descriptor = props[i];                                                                                     // 5678
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 5678
        descriptor.configurable = true;                                                                                // 5678
        if ("value" in descriptor) descriptor.writable = true;                                                         // 5678
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 5678
      }                                                                                                                // 5678
    }                                                                                                                  // 5678
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 5678
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 5678
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 5678
      return Constructor;                                                                                              // 5678
    };                                                                                                                 // 5678
  }();                                                                                                                 // 5678
                                                                                                                       //
  var _get = function () {                                                                                             // 5680
    function get(object, property, receiver) {                                                                         // 5680
      if (object === null) object = Function.prototype;                                                                // 5680
      var desc = Object.getOwnPropertyDescriptor(object, property);                                                    // 5680
                                                                                                                       //
      if (desc === undefined) {                                                                                        // 5680
        var parent = Object.getPrototypeOf(object);                                                                    // 5680
                                                                                                                       //
        if (parent === null) {                                                                                         // 5680
          return undefined;                                                                                            // 5680
        } else {                                                                                                       // 5680
          return get(parent, property, receiver);                                                                      // 5680
        }                                                                                                              // 5680
      } else if ("value" in desc) {                                                                                    // 5680
        return desc.value;                                                                                             // 5680
      } else {                                                                                                         // 5680
        var getter = desc.get;                                                                                         // 5680
                                                                                                                       //
        if (getter === undefined) {                                                                                    // 5680
          return undefined;                                                                                            // 5680
        }                                                                                                              // 5680
                                                                                                                       //
        return getter.call(receiver);                                                                                  // 5680
      }                                                                                                                // 5680
    }                                                                                                                  // 5680
                                                                                                                       //
    return get;                                                                                                        // 5680
  }();                                                                                                                 // 5680
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 5682
    if (!(instance instanceof Constructor)) {                                                                          // 5682
      throw new TypeError("Cannot call a class as a function");                                                        // 5682
    }                                                                                                                  // 5682
  }                                                                                                                    // 5682
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 5684
    if (!self) {                                                                                                       // 5684
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 5684
    }                                                                                                                  // 5684
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 5684
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 5686
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 5686
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 5686
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 5686
      constructor: {                                                                                                   // 5686
        value: subClass,                                                                                               // 5686
        enumerable: false,                                                                                             // 5686
        writable: true,                                                                                                // 5686
        configurable: true                                                                                             // 5686
      }                                                                                                                // 5686
    });                                                                                                                // 5686
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 5686
     * Dropdown module.                                                                                                //
     * @module foundation.dropdown                                                                                     //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.box                                                                                   //
     * @requires foundation.util.triggers                                                                              //
     */                                                                                                                //
                                                                                                                       //
  var Dropdown = function (_Positionable) {                                                                            // 5703
    _inherits(Dropdown, _Positionable);                                                                                // 5704
                                                                                                                       //
    function Dropdown() {                                                                                              // 5706
      _classCallCheck(this, Dropdown);                                                                                 // 5707
                                                                                                                       //
      return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));
    }                                                                                                                  // 5710
                                                                                                                       //
    _createClass(Dropdown, [{                                                                                          // 5712
      key: '_setup',                                                                                                   // 5713
      /**                                                                                                              // 5715
       * Creates a new instance of a dropdown.                                                                         //
       * @class                                                                                                        //
       * @name Dropdown                                                                                                //
       * @param {jQuery} element - jQuery object to make into a dropdown.                                              //
       *        Object should be of the dropdown panel, rather than its anchor.                                        //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 5723
          this.$element = element;                                                                                     // 5724
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Dropdown.defaults, this.$element.data(), options);
          this.className = 'Dropdown'; // ie9 back compat                                                              // 5726
          // Triggers init is idempotent, just need to make sure it is initialized                                     // 5728
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          this._init();                                                                                                // 5731
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Dropdown', {           // 5733
            'ENTER': 'open',                                                                                           // 5734
            'SPACE': 'open',                                                                                           // 5735
            'ESCAPE': 'close'                                                                                          // 5736
          });                                                                                                          // 5733
        }                                                                                                              // 5738
                                                                                                                       //
        return _setup;                                                                                                 // 5723
      }() /**                                                                                                          // 5723
           * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 5712
      key: '_init',                                                                                                    // 5747
      value: function () {                                                                                             // 5748
        function _init() {                                                                                             // 5748
          var $id = this.$element.attr('id');                                                                          // 5749
          this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + $id + '"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + $id + '"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + $id + '"]');
          this.$anchor.attr({                                                                                          // 5752
            'aria-controls': $id,                                                                                      // 5753
            'data-is-focus': false,                                                                                    // 5754
            'data-yeti-box': $id,                                                                                      // 5755
            'aria-haspopup': true,                                                                                     // 5756
            'aria-expanded': false                                                                                     // 5757
          });                                                                                                          // 5752
                                                                                                                       //
          if (this.options.parentClass) {                                                                              // 5761
            this.$parent = this.$element.parents('.' + this.options.parentClass);                                      // 5762
          } else {                                                                                                     // 5763
            this.$parent = null;                                                                                       // 5764
          }                                                                                                            // 5765
                                                                                                                       //
          this.$element.attr({                                                                                         // 5767
            'aria-hidden': 'true',                                                                                     // 5768
            'data-yeti-box': $id,                                                                                      // 5769
            'data-resize': $id,                                                                                        // 5770
            'aria-labelledby': this.$anchor[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */])(6, 'dd-anchor')
          });                                                                                                          // 5767
                                                                                                                       //
          _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_init', this).call(this);   // 5773
                                                                                                                       //
          this._events();                                                                                              // 5774
        }                                                                                                              // 5775
                                                                                                                       //
        return _init;                                                                                                  // 5748
      }()                                                                                                              // 5748
    }, {                                                                                                               // 5746
      key: '_getDefaultPosition',                                                                                      // 5777
      value: function () {                                                                                             // 5778
        function _getDefaultPosition() {                                                                               // 5778
          // handle legacy classnames                                                                                  // 5779
          var position = this.$element[0].className.match(/(top|left|right|bottom)/g);                                 // 5780
                                                                                                                       //
          if (position) {                                                                                              // 5781
            return position[0];                                                                                        // 5782
          } else {                                                                                                     // 5783
            return 'bottom';                                                                                           // 5784
          }                                                                                                            // 5785
        }                                                                                                              // 5786
                                                                                                                       //
        return _getDefaultPosition;                                                                                    // 5778
      }()                                                                                                              // 5778
    }, {                                                                                                               // 5776
      key: '_getDefaultAlignment',                                                                                     // 5788
      value: function () {                                                                                             // 5789
        function _getDefaultAlignment() {                                                                              // 5789
          // handle legacy float approach                                                                              // 5790
          var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);                                      // 5791
                                                                                                                       //
          if (horizontalPosition) {                                                                                    // 5792
            return horizontalPosition[1];                                                                              // 5793
          }                                                                                                            // 5794
                                                                                                                       //
          return _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_getDefaultAlignment', this).call(this);
        }                                                                                                              // 5797
                                                                                                                       //
        return _getDefaultAlignment;                                                                                   // 5789
      }() /**                                                                                                          // 5789
           * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
           * Recursively calls itself if a collision is detected, with a new position class.                           //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 5787
      key: '_setPosition',                                                                                             // 5807
      value: function () {                                                                                             // 5808
        function _setPosition() {                                                                                      // 5808
          _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_setPosition', this).call(this, this.$anchor, this.$element, this.$parent);
        }                                                                                                              // 5810
                                                                                                                       //
        return _setPosition;                                                                                           // 5808
      }() /**                                                                                                          // 5808
           * Adds event listeners to the element utilizing the triggers utility library.                               //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 5806
      key: '_events',                                                                                                  // 5819
      value: function () {                                                                                             // 5820
        function _events() {                                                                                           // 5820
          var _this = this;                                                                                            // 5821
                                                                                                                       //
          this.$element.on({                                                                                           // 5822
            'open.zf.trigger': this.open.bind(this),                                                                   // 5823
            'close.zf.trigger': this.close.bind(this),                                                                 // 5824
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 5825
            'resizeme.zf.trigger': this._setPosition.bind(this)                                                        // 5826
          });                                                                                                          // 5822
                                                                                                                       //
          if (this.options.hover) {                                                                                    // 5829
            this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              var bodyData = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').data();                            // 5831
                                                                                                                       //
              if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {                       // 5832
                clearTimeout(_this.timeout);                                                                           // 5833
                _this.timeout = setTimeout(function () {                                                               // 5834
                  _this.open();                                                                                        // 5835
                                                                                                                       //
                  _this.$anchor.data('hover', true);                                                                   // 5836
                }, _this.options.hoverDelay);                                                                          // 5837
              }                                                                                                        // 5838
            }).on('mouseleave.zf.dropdown', function () {                                                              // 5839
              clearTimeout(_this.timeout);                                                                             // 5840
              _this.timeout = setTimeout(function () {                                                                 // 5841
                _this.close();                                                                                         // 5842
                                                                                                                       //
                _this.$anchor.data('hover', false);                                                                    // 5843
              }, _this.options.hoverDelay);                                                                            // 5844
            });                                                                                                        // 5845
                                                                                                                       //
            if (this.options.hoverPane) {                                                                              // 5846
              this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                clearTimeout(_this.timeout);                                                                           // 5848
              }).on('mouseleave.zf.dropdown', function () {                                                            // 5849
                clearTimeout(_this.timeout);                                                                           // 5850
                _this.timeout = setTimeout(function () {                                                               // 5851
                  _this.close();                                                                                       // 5852
                                                                                                                       //
                  _this.$anchor.data('hover', false);                                                                  // 5853
                }, _this.options.hoverDelay);                                                                          // 5854
              });                                                                                                      // 5855
            }                                                                                                          // 5856
          }                                                                                                            // 5857
                                                                                                                       //
          this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {                                     // 5858
            var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                        // 5860
                visibleFocusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].findFocusable(_this.$element);
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Dropdown', {     // 5863
              open: function () {                                                                                      // 5864
                if ($target.is(_this.$anchor)) {                                                                       // 5865
                  _this.open();                                                                                        // 5866
                                                                                                                       //
                  _this.$element.attr('tabindex', -1).focus();                                                         // 5867
                                                                                                                       //
                  e.preventDefault();                                                                                  // 5868
                }                                                                                                      // 5869
              },                                                                                                       // 5870
              close: function () {                                                                                     // 5871
                _this.close();                                                                                         // 5872
                                                                                                                       //
                _this.$anchor.focus();                                                                                 // 5873
              }                                                                                                        // 5874
            });                                                                                                        // 5863
          });                                                                                                          // 5876
        }                                                                                                              // 5877
                                                                                                                       //
        return _events;                                                                                                // 5820
      }() /**                                                                                                          // 5820
           * Adds an event handler to the body to close any dropdowns on a click.                                      //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 5818
      key: '_addBodyHandler',                                                                                          // 5886
      value: function () {                                                                                             // 5887
        function _addBodyHandler() {                                                                                   // 5887
          var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).not(this.$element),                // 5888
              _this = this;                                                                                            // 5888
                                                                                                                       //
          $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {                                        // 5890
            if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {                                   // 5891
              return;                                                                                                  // 5892
            }                                                                                                          // 5893
                                                                                                                       //
            if (_this.$element.find(e.target).length) {                                                                // 5894
              return;                                                                                                  // 5895
            }                                                                                                          // 5896
                                                                                                                       //
            _this.close();                                                                                             // 5897
                                                                                                                       //
            $body.off('click.zf.dropdown');                                                                            // 5898
          });                                                                                                          // 5899
        }                                                                                                              // 5900
                                                                                                                       //
        return _addBodyHandler;                                                                                        // 5887
      }() /**                                                                                                          // 5887
           * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.                             //
           * @function                                                                                                 //
           * @fires Dropdown#closeme                                                                                   //
           * @fires Dropdown#show                                                                                      //
           */                                                                                                          //
    }, {                                                                                                               // 5885
      key: 'open',                                                                                                     // 5910
      value: function () {                                                                                             // 5911
        function open() {                                                                                              // 5911
          // var _this = this;                                                                                         // 5912
          /**                                                                                                          // 5913
           * Fires to close other open dropdowns, typically when dropdown is opening                                   //
           * @event Dropdown#closeme                                                                                   //
           */this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));                                   //
          this.$anchor.addClass('hover').attr({                                                                        // 5918
            'aria-expanded': true                                                                                      // 5918
          }); // this.$element/*.show()*/;                                                                             // 5918
                                                                                                                       //
          this.$element.addClass('is-opening');                                                                        // 5921
                                                                                                                       //
          this._setPosition();                                                                                         // 5922
                                                                                                                       //
          this.$element.removeClass('is-opening').addClass('is-open').attr({                                           // 5923
            'aria-hidden': false                                                                                       // 5923
          });                                                                                                          // 5923
                                                                                                                       //
          if (this.options.autoFocus) {                                                                                // 5925
            var $focusable = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].findFocusable(this.$element);
                                                                                                                       //
            if ($focusable.length) {                                                                                   // 5927
              $focusable.eq(0).focus();                                                                                // 5928
            }                                                                                                          // 5929
          }                                                                                                            // 5930
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 5932
            this._addBodyHandler();                                                                                    // 5933
          }                                                                                                            // 5934
                                                                                                                       //
          if (this.options.trapFocus) {                                                                                // 5936
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].trapFocus(this.$element);      // 5937
          } /**                                                                                                        // 5938
             * Fires once the dropdown is visible.                                                                     //
             * @event Dropdown#show                                                                                    //
             */                                                                                                        //
                                                                                                                       //
          this.$element.trigger('show.zf.dropdown', [this.$element]);                                                  // 5944
        }                                                                                                              // 5945
                                                                                                                       //
        return open;                                                                                                   // 5911
      }() /**                                                                                                          // 5911
           * Closes the open dropdown pane.                                                                            //
           * @function                                                                                                 //
           * @fires Dropdown#hide                                                                                      //
           */                                                                                                          //
    }, {                                                                                                               // 5909
      key: 'close',                                                                                                    // 5954
      value: function () {                                                                                             // 5955
        function close() {                                                                                             // 5955
          if (!this.$element.hasClass('is-open')) {                                                                    // 5956
            return false;                                                                                              // 5957
          }                                                                                                            // 5958
                                                                                                                       //
          this.$element.removeClass('is-open').attr({                                                                  // 5959
            'aria-hidden': true                                                                                        // 5959
          });                                                                                                          // 5959
          this.$anchor.removeClass('hover').attr('aria-expanded', false); /**                                          // 5961
                                                                           * Fires once the dropdown is no longer visible.
                                                                           * @event Dropdown#hide                      //
                                                                           */                                          //
          this.$element.trigger('hide.zf.dropdown', [this.$element]);                                                  // 5967
                                                                                                                       //
          if (this.options.trapFocus) {                                                                                // 5969
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].releaseFocus(this.$element);   // 5970
          }                                                                                                            // 5971
        }                                                                                                              // 5972
                                                                                                                       //
        return close;                                                                                                  // 5955
      }() /**                                                                                                          // 5955
           * Toggles the dropdown pane's visibility.                                                                   //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 5953
      key: 'toggle',                                                                                                   // 5980
      value: function () {                                                                                             // 5981
        function toggle() {                                                                                            // 5981
          if (this.$element.hasClass('is-open')) {                                                                     // 5982
            if (this.$anchor.data('hover')) return;                                                                    // 5983
            this.close();                                                                                              // 5984
          } else {                                                                                                     // 5985
            this.open();                                                                                               // 5986
          }                                                                                                            // 5987
        }                                                                                                              // 5988
                                                                                                                       //
        return toggle;                                                                                                 // 5981
      }() /**                                                                                                          // 5981
           * Destroys the dropdown.                                                                                    //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 5979
      key: '_destroy',                                                                                                 // 5996
      value: function () {                                                                                             // 5997
        function _destroy() {                                                                                          // 5997
          this.$element.off('.zf.trigger').hide();                                                                     // 5998
          this.$anchor.off('.zf.dropdown');                                                                            // 5999
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('click.zf.dropdown');                      // 6000
        }                                                                                                              // 6001
                                                                                                                       //
        return _destroy;                                                                                               // 5997
      }()                                                                                                              // 5997
    }]);                                                                                                               // 5995
                                                                                                                       //
    return Dropdown;                                                                                                   // 6004
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_positionable__["a" /* Positionable */]);                                   // 6005
                                                                                                                       //
  Dropdown.defaults = {                                                                                                // 6007
    /**                                                                                                                // 6008
     * Class that designates bounding container of Dropdown (default: window)                                          //
     * @option                                                                                                         //
     * @type {?string}                                                                                                 //
     * @default null                                                                                                   //
     */parentClass: null,                                                                                              //
    /**                                                                                                                // 6015
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 250                                                                                                    //
     */hoverDelay: 250,                                                                                                //
    /**                                                                                                                // 6022
     * Allow submenus to open on hover events                                                                          //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */hover: false,                                                                                                   //
    /**                                                                                                                // 6029
     * Don't close dropdown when hovering over dropdown pane                                                           //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */hoverPane: false,                                                                                               //
    /**                                                                                                                // 6036
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */vOffset: 0,                                                                                                     //
    /**                                                                                                                // 6043
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */hOffset: 0,                                                                                                     //
    /**                                                                                                                // 6050
     * DEPRECATED: Class applied to adjust open position.                                                              //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */positionClass: '',                                                                                              //
    /**                                                                                                                // 6058
     * Position of dropdown. Can be left, right, bottom, top, or auto.                                                 //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */position: 'auto',                                                                                               //
    /**                                                                                                                // 6065
     * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.                     //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */alignment: 'auto',                                                                                              //
    /**                                                                                                                // 6072
     * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */allowOverlap: false,                                                                                            //
    /**                                                                                                                // 6079
     * Allow overlap of only the bottom of the container. This is the most common                                      //
     * behavior for dropdowns, allowing the dropdown to extend the bottom of the                                       //
     * screen but not otherwise influence or break out of the container.                                               //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */allowBottomOverlap: true,                                                                                       //
    /**                                                                                                                // 6088
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.                           //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */trapFocus: false,                                                                                               //
    /**                                                                                                                // 6095
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.  //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */autoFocus: false,                                                                                               //
    /**                                                                                                                // 6102
     * Allows a click on the body to close the dropdown.                                                               //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */closeOnClick: false                                                                                             //
  }; /***/                                                                                                             // 6007
}, /* 23 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 6113
  "use strict"; /* harmony export (binding) */                                                                         // 6117
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 6118
    return Equalizer;                                                                                                  // 6118
  }); /* harmony import */                                                                                             // 6118
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 6119
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 6121
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(8); /* harmony import */        // 6122
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 6123
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);                                       // 6124
                                                                                                                       //
  var _createClass = function () {                                                                                     // 6127
    function defineProperties(target, props) {                                                                         // 6127
      for (var i = 0; i < props.length; i++) {                                                                         // 6127
        var descriptor = props[i];                                                                                     // 6127
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 6127
        descriptor.configurable = true;                                                                                // 6127
        if ("value" in descriptor) descriptor.writable = true;                                                         // 6127
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 6127
      }                                                                                                                // 6127
    }                                                                                                                  // 6127
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 6127
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 6127
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 6127
      return Constructor;                                                                                              // 6127
    };                                                                                                                 // 6127
  }();                                                                                                                 // 6127
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 6129
    if (!(instance instanceof Constructor)) {                                                                          // 6129
      throw new TypeError("Cannot call a class as a function");                                                        // 6129
    }                                                                                                                  // 6129
  }                                                                                                                    // 6129
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 6131
    if (!self) {                                                                                                       // 6131
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 6131
    }                                                                                                                  // 6131
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 6131
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 6133
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 6133
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 6133
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 6133
      constructor: {                                                                                                   // 6133
        value: subClass,                                                                                               // 6133
        enumerable: false,                                                                                             // 6133
        writable: true,                                                                                                // 6133
        configurable: true                                                                                             // 6133
      }                                                                                                                // 6133
    });                                                                                                                // 6133
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 6133
     * Equalizer module.                                                                                               //
     * @module foundation.equalizer                                                                                    //
     * @requires foundation.util.mediaQuery                                                                            //
     * @requires foundation.util.imageLoader if equalizer contains images                                              //
     */                                                                                                                //
                                                                                                                       //
  var Equalizer = function (_Plugin) {                                                                                 // 6148
    _inherits(Equalizer, _Plugin);                                                                                     // 6149
                                                                                                                       //
    function Equalizer() {                                                                                             // 6151
      _classCallCheck(this, Equalizer);                                                                                // 6152
                                                                                                                       //
      return _possibleConstructorReturn(this, (Equalizer.__proto__ || Object.getPrototypeOf(Equalizer)).apply(this, arguments));
    }                                                                                                                  // 6155
                                                                                                                       //
    _createClass(Equalizer, [{                                                                                         // 6157
      key: '_setup',                                                                                                   // 6158
      /**                                                                                                              // 6160
       * Creates a new instance of Equalizer.                                                                          //
       * @class                                                                                                        //
       * @name Equalizer                                                                                               //
       * @fires Equalizer#init                                                                                         //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 6168
          this.$element = element;                                                                                     // 6169
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Equalizer.defaults, this.$element.data(), options);
          this.className = 'Equalizer'; // ie9 back compat                                                             // 6171
                                                                                                                       //
          this._init();                                                                                                // 6173
        }                                                                                                              // 6174
                                                                                                                       //
        return _setup;                                                                                                 // 6168
      }() /**                                                                                                          // 6168
           * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.                //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6157
      key: '_init',                                                                                                    // 6182
      value: function () {                                                                                             // 6183
        function _init() {                                                                                             // 6183
          var eqId = this.$element.attr('data-equalizer') || '';                                                       // 6184
          var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');                                  // 6185
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 6187
                                                                                                                       //
          this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');                   // 6189
          this.$element.attr('data-resize', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'eq'));
          this.$element.attr('data-mutate', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'eq'));
          this.hasNested = this.$element.find('[data-equalizer]').length > 0;                                          // 6193
          this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;                    // 6194
          this.isOn = false;                                                                                           // 6195
          this._bindHandler = {                                                                                        // 6196
            onResizeMeBound: this._onResizeMe.bind(this),                                                              // 6197
            onPostEqualizedBound: this._onPostEqualized.bind(this)                                                     // 6198
          };                                                                                                           // 6196
          var imgs = this.$element.find('img');                                                                        // 6201
          var tooSmall;                                                                                                // 6202
                                                                                                                       //
          if (this.options.equalizeOn) {                                                                               // 6203
            tooSmall = this._checkMQ();                                                                                // 6204
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
          } else {                                                                                                     // 6206
            this._events();                                                                                            // 6207
          }                                                                                                            // 6208
                                                                                                                       //
          if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {                                // 6209
            if (imgs.length) {                                                                                         // 6210
              __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["a" /* onImagesLoaded */])(imgs, this._reflow.bind(this));
            } else {                                                                                                   // 6212
              this._reflow();                                                                                          // 6213
            }                                                                                                          // 6214
          }                                                                                                            // 6215
        }                                                                                                              // 6216
                                                                                                                       //
        return _init;                                                                                                  // 6183
      }() /**                                                                                                          // 6183
           * Removes event listeners if the breakpoint is too small.                                                   //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6181
      key: '_pauseEvents',                                                                                             // 6224
      value: function () {                                                                                             // 6225
        function _pauseEvents() {                                                                                      // 6225
          this.isOn = false;                                                                                           // 6226
          this.$element.off({                                                                                          // 6227
            '.zf.equalizer': this._bindHandler.onPostEqualizedBound,                                                   // 6228
            'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,                                                  // 6229
            'mutateme.zf.trigger': this._bindHandler.onResizeMeBound                                                   // 6230
          });                                                                                                          // 6227
        }                                                                                                              // 6232
                                                                                                                       //
        return _pauseEvents;                                                                                           // 6225
      }() /**                                                                                                          // 6225
           * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound         //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6223
      key: '_onResizeMe',                                                                                              // 6240
      value: function () {                                                                                             // 6241
        function _onResizeMe(e) {                                                                                      // 6241
          this._reflow();                                                                                              // 6242
        }                                                                                                              // 6243
                                                                                                                       //
        return _onResizeMe;                                                                                            // 6241
      }() /**                                                                                                          // 6241
           * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6239
      key: '_onPostEqualized',                                                                                         // 6251
      value: function () {                                                                                             // 6252
        function _onPostEqualized(e) {                                                                                 // 6252
          if (e.target !== this.$element[0]) {                                                                         // 6253
            this._reflow();                                                                                            // 6254
          }                                                                                                            // 6255
        }                                                                                                              // 6256
                                                                                                                       //
        return _onPostEqualized;                                                                                       // 6252
      }() /**                                                                                                          // 6252
           * Initializes events for Equalizer.                                                                         //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6250
      key: '_events',                                                                                                  // 6264
      value: function () {                                                                                             // 6265
        function _events() {                                                                                           // 6265
          var _this = this;                                                                                            // 6266
                                                                                                                       //
          this._pauseEvents();                                                                                         // 6267
                                                                                                                       //
          if (this.hasNested) {                                                                                        // 6268
            this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);                    // 6269
          } else {                                                                                                     // 6270
            this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);                                // 6271
            this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);                                // 6272
          }                                                                                                            // 6273
                                                                                                                       //
          this.isOn = true;                                                                                            // 6274
        }                                                                                                              // 6275
                                                                                                                       //
        return _events;                                                                                                // 6265
      }() /**                                                                                                          // 6265
           * Checks the current breakpoint to the minimum required size.                                               //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6263
      key: '_checkMQ',                                                                                                 // 6283
      value: function () {                                                                                             // 6284
        function _checkMQ() {                                                                                          // 6284
          var tooSmall = !__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].is(this.options.equalizeOn);
                                                                                                                       //
          if (tooSmall) {                                                                                              // 6286
            if (this.isOn) {                                                                                           // 6287
              this._pauseEvents();                                                                                     // 6288
                                                                                                                       //
              this.$watched.css('height', 'auto');                                                                     // 6289
            }                                                                                                          // 6290
          } else {                                                                                                     // 6291
            if (!this.isOn) {                                                                                          // 6292
              this._events();                                                                                          // 6293
            }                                                                                                          // 6294
          }                                                                                                            // 6295
                                                                                                                       //
          return tooSmall;                                                                                             // 6296
        }                                                                                                              // 6297
                                                                                                                       //
        return _checkMQ;                                                                                               // 6284
      }() /**                                                                                                          // 6284
           * A noop version for the plugin                                                                             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6282
      key: '_killswitch',                                                                                              // 6305
      value: function () {                                                                                             // 6306
        function _killswitch() {                                                                                       // 6306
          return;                                                                                                      // 6307
        }                                                                                                              // 6308
                                                                                                                       //
        return _killswitch;                                                                                            // 6306
      }() /**                                                                                                          // 6306
           * Calls necessary functions to update Equalizer upon DOM change                                             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6304
      key: '_reflow',                                                                                                  // 6316
      value: function () {                                                                                             // 6317
        function _reflow() {                                                                                           // 6317
          if (!this.options.equalizeOnStack) {                                                                         // 6318
            if (this._isStacked()) {                                                                                   // 6319
              this.$watched.css('height', 'auto');                                                                     // 6320
              return false;                                                                                            // 6321
            }                                                                                                          // 6322
          }                                                                                                            // 6323
                                                                                                                       //
          if (this.options.equalizeByRow) {                                                                            // 6324
            this.getHeightsByRow(this.applyHeightByRow.bind(this));                                                    // 6325
          } else {                                                                                                     // 6326
            this.getHeights(this.applyHeight.bind(this));                                                              // 6327
          }                                                                                                            // 6328
        }                                                                                                              // 6329
                                                                                                                       //
        return _reflow;                                                                                                // 6317
      }() /**                                                                                                          // 6317
           * Manually determines if the first 2 elements are *NOT* stacked.                                            //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6315
      key: '_isStacked',                                                                                               // 6337
      value: function () {                                                                                             // 6338
        function _isStacked() {                                                                                        // 6338
          if (!this.$watched[0] || !this.$watched[1]) {                                                                // 6339
            return true;                                                                                               // 6340
          }                                                                                                            // 6341
                                                                                                                       //
          return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;        // 6342
        }                                                                                                              // 6343
                                                                                                                       //
        return _isStacked;                                                                                             // 6338
      }() /**                                                                                                          // 6338
           * Finds the outer heights of children contained within an Equalizer parent and returns them in an array     //
           * @param {Function} cb - A non-optional callback to return the heights array to.                            //
           * @returns {Array} heights - An array of heights of children within Equalizer container                     //
           */                                                                                                          //
    }, {                                                                                                               // 6336
      key: 'getHeights',                                                                                               // 6352
      value: function () {                                                                                             // 6353
        function getHeights(cb) {                                                                                      // 6353
          var heights = [];                                                                                            // 6354
                                                                                                                       //
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 6355
            this.$watched[i].style.height = 'auto';                                                                    // 6356
            heights.push(this.$watched[i].offsetHeight);                                                               // 6357
          }                                                                                                            // 6358
                                                                                                                       //
          cb(heights);                                                                                                 // 6359
        }                                                                                                              // 6360
                                                                                                                       //
        return getHeights;                                                                                             // 6353
      }() /**                                                                                                          // 6353
           * Finds the outer heights of children contained within an Equalizer parent and returns them in an array     //
           * @param {Function} cb - A non-optional callback to return the heights array to.                            //
           * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
           */                                                                                                          //
    }, {                                                                                                               // 6351
      key: 'getHeightsByRow',                                                                                          // 6369
      value: function () {                                                                                             // 6370
        function getHeightsByRow(cb) {                                                                                 // 6370
          var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,                         // 6371
              groups = [],                                                                                             // 6371
              group = 0; //group by Row                                                                                // 6371
                                                                                                                       //
          groups[group] = [];                                                                                          // 6375
                                                                                                                       //
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 6376
            this.$watched[i].style.height = 'auto'; //maybe could use this.$watched[i].offsetTop                       // 6377
                                                                                                                       //
            var elOffsetTop = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$watched[i]).offset().top;           // 6379
                                                                                                                       //
            if (elOffsetTop != lastElTopOffset) {                                                                      // 6380
              group++;                                                                                                 // 6381
              groups[group] = [];                                                                                      // 6382
              lastElTopOffset = elOffsetTop;                                                                           // 6383
            }                                                                                                          // 6384
                                                                                                                       //
            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);                                     // 6385
          }                                                                                                            // 6386
                                                                                                                       //
          for (var j = 0, ln = groups.length; j < ln; j++) {                                                           // 6388
            var heights = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[j]).map(function () {                  // 6389
              return this[1];                                                                                          // 6390
            }).get();                                                                                                  // 6391
                                                                                                                       //
            var max = Math.max.apply(null, heights);                                                                   // 6392
            groups[j].push(max);                                                                                       // 6393
          }                                                                                                            // 6394
                                                                                                                       //
          cb(groups);                                                                                                  // 6395
        }                                                                                                              // 6396
                                                                                                                       //
        return getHeightsByRow;                                                                                        // 6370
      }() /**                                                                                                          // 6370
           * Changes the CSS height property of each child in an Equalizer parent to match the tallest                 //
           * @param {array} heights - An array of heights of children within Equalizer container                       //
           * @fires Equalizer#preequalized                                                                             //
           * @fires Equalizer#postequalized                                                                            //
           */                                                                                                          //
    }, {                                                                                                               // 6368
      key: 'applyHeight',                                                                                              // 6406
      value: function () {                                                                                             // 6407
        function applyHeight(heights) {                                                                                // 6407
          var max = Math.max.apply(null, heights); /**                                                                 // 6408
                                                    * Fires before the heights are applied                             //
                                                    * @event Equalizer#preequalized                                    //
                                                    */                                                                 //
          this.$element.trigger('preequalized.zf.equalizer');                                                          // 6413
          this.$watched.css('height', max); /**                                                                        // 6415
                                             * Fires when the heights have been applied                                //
                                             * @event Equalizer#postequalized                                          //
                                             */                                                                        //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 6421
        }                                                                                                              // 6422
                                                                                                                       //
        return applyHeight;                                                                                            // 6407
      }() /**                                                                                                          // 6407
           * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row          //
           * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
           * @fires Equalizer#preequalized                                                                             //
           * @fires Equalizer#preequalizedrow                                                                          //
           * @fires Equalizer#postequalizedrow                                                                         //
           * @fires Equalizer#postequalized                                                                            //
           */                                                                                                          //
    }, {                                                                                                               // 6405
      key: 'applyHeightByRow',                                                                                         // 6434
      value: function () {                                                                                             // 6435
        function applyHeightByRow(groups) {                                                                            // 6435
          /**                                                                                                          // 6436
           * Fires before the heights are applied                                                                      //
           */this.$element.trigger('preequalized.zf.equalizer');                                                       //
                                                                                                                       //
          for (var i = 0, len = groups.length; i < len; i++) {                                                         // 6440
            var groupsILength = groups[i].length,                                                                      // 6441
                max = groups[i][groupsILength - 1];                                                                    // 6441
                                                                                                                       //
            if (groupsILength <= 2) {                                                                                  // 6443
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][0][0]).css({                                    // 6444
                'height': 'auto'                                                                                       // 6444
              });                                                                                                      // 6444
                                                                                                                       //
              continue;                                                                                                // 6445
            } /**                                                                                                      // 6446
                * Fires before the heights per row are applied                                                         //
                * @event Equalizer#preequalizedrow                                                                     //
                */                                                                                                     //
                                                                                                                       //
            this.$element.trigger('preequalizedrow.zf.equalizer');                                                     // 6451
                                                                                                                       //
            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {                                                 // 6452
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][j][0]).css({                                    // 6453
                'height': max                                                                                          // 6453
              });                                                                                                      // 6453
            } /**                                                                                                      // 6454
                * Fires when the heights per row have been applied                                                     //
                * @event Equalizer#postequalizedrow                                                                    //
                */                                                                                                     //
                                                                                                                       //
            this.$element.trigger('postequalizedrow.zf.equalizer');                                                    // 6459
          } /**                                                                                                        // 6460
             * Fires when the heights have been applied                                                                //
             */                                                                                                        //
                                                                                                                       //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 6464
        }                                                                                                              // 6465
                                                                                                                       //
        return applyHeightByRow;                                                                                       // 6435
      }() /**                                                                                                          // 6435
           * Destroys an instance of Equalizer.                                                                        //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6433
      key: '_destroy',                                                                                                 // 6473
      value: function () {                                                                                             // 6474
        function _destroy() {                                                                                          // 6474
          this._pauseEvents();                                                                                         // 6475
                                                                                                                       //
          this.$watched.css('height', 'auto');                                                                         // 6476
        }                                                                                                              // 6477
                                                                                                                       //
        return _destroy;                                                                                               // 6474
      }()                                                                                                              // 6474
    }]);                                                                                                               // 6472
                                                                                                                       //
    return Equalizer;                                                                                                  // 6480
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["a" /* Plugin */]); /**                                           // 6481
                                                                          * Default settings for plugin                //
                                                                          */                                           //
                                                                                                                       //
  Equalizer.defaults = {                                                                                               // 6488
    /**                                                                                                                // 6489
     * Enable height equalization when stacked on smaller screens.                                                     //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */equalizeOnStack: false,                                                                                         //
    /**                                                                                                                // 6496
     * Enable height equalization row by row.                                                                          //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */equalizeByRow: false,                                                                                           //
    /**                                                                                                                // 6503
     * String representing the minimum breakpoint size the plugin should equalize heights on.                          //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */equalizeOn: ''                                                                                                  //
  }; /***/                                                                                                             // 6488
}, /* 24 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 6514
  "use strict"; /* harmony export (binding) */                                                                         // 6518
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 6519
    return Interchange;                                                                                                // 6519
  }); /* harmony import */                                                                                             // 6519
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 6520
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 6522
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 6523
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);                                    // 6524
                                                                                                                       //
  var _createClass = function () {                                                                                     // 6527
    function defineProperties(target, props) {                                                                         // 6527
      for (var i = 0; i < props.length; i++) {                                                                         // 6527
        var descriptor = props[i];                                                                                     // 6527
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 6527
        descriptor.configurable = true;                                                                                // 6527
        if ("value" in descriptor) descriptor.writable = true;                                                         // 6527
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 6527
      }                                                                                                                // 6527
    }                                                                                                                  // 6527
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 6527
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 6527
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 6527
      return Constructor;                                                                                              // 6527
    };                                                                                                                 // 6527
  }();                                                                                                                 // 6527
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 6529
    if (!(instance instanceof Constructor)) {                                                                          // 6529
      throw new TypeError("Cannot call a class as a function");                                                        // 6529
    }                                                                                                                  // 6529
  }                                                                                                                    // 6529
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 6531
    if (!self) {                                                                                                       // 6531
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 6531
    }                                                                                                                  // 6531
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 6531
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 6533
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 6533
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 6533
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 6533
      constructor: {                                                                                                   // 6533
        value: subClass,                                                                                               // 6533
        enumerable: false,                                                                                             // 6533
        writable: true,                                                                                                // 6533
        configurable: true                                                                                             // 6533
      }                                                                                                                // 6533
    });                                                                                                                // 6533
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 6533
     * Interchange module.                                                                                             //
     * @module foundation.interchange                                                                                  //
     * @requires foundation.util.mediaQuery                                                                            //
     */                                                                                                                //
                                                                                                                       //
  var Interchange = function (_Plugin) {                                                                               // 6546
    _inherits(Interchange, _Plugin);                                                                                   // 6547
                                                                                                                       //
    function Interchange() {                                                                                           // 6549
      _classCallCheck(this, Interchange);                                                                              // 6550
                                                                                                                       //
      return _possibleConstructorReturn(this, (Interchange.__proto__ || Object.getPrototypeOf(Interchange)).apply(this, arguments));
    }                                                                                                                  // 6553
                                                                                                                       //
    _createClass(Interchange, [{                                                                                       // 6555
      key: '_setup',                                                                                                   // 6556
      /**                                                                                                              // 6558
       * Creates a new instance of Interchange.                                                                        //
       * @class                                                                                                        //
       * @name Interchange                                                                                             //
       * @fires Interchange#init                                                                                       //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 6566
          this.$element = element;                                                                                     // 6567
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Interchange.defaults, options);     // 6568
          this.rules = [];                                                                                             // 6569
          this.currentPath = '';                                                                                       // 6570
          this.className = 'Interchange'; // ie9 back compat                                                           // 6571
                                                                                                                       //
          this._init();                                                                                                // 6573
                                                                                                                       //
          this._events();                                                                                              // 6574
        }                                                                                                              // 6575
                                                                                                                       //
        return _setup;                                                                                                 // 6566
      }() /**                                                                                                          // 6566
           * Initializes the Interchange plugin and calls functions to get interchange functioning on load.            //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6555
      key: '_init',                                                                                                    // 6584
      value: function () {                                                                                             // 6585
        function _init() {                                                                                             // 6585
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 6586
                                                                                                                       //
          var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'interchange');
                                                                                                                       //
          this.$element.attr({                                                                                         // 6589
            'data-resize': id,                                                                                         // 6590
            'id': id                                                                                                   // 6591
          });                                                                                                          // 6589
                                                                                                                       //
          this._addBreakpoints();                                                                                      // 6594
                                                                                                                       //
          this._generateRules();                                                                                       // 6595
                                                                                                                       //
          this._reflow();                                                                                              // 6596
        }                                                                                                              // 6597
                                                                                                                       //
        return _init;                                                                                                  // 6585
      }() /**                                                                                                          // 6585
           * Initializes events for Interchange.                                                                       //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6583
      key: '_events',                                                                                                  // 6606
      value: function () {                                                                                             // 6607
        function _events() {                                                                                           // 6607
          var _this3 = this;                                                                                           // 6608
                                                                                                                       //
          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {                             // 6610
            return _this3._reflow();                                                                                   // 6611
          });                                                                                                          // 6612
        }                                                                                                              // 6613
                                                                                                                       //
        return _events;                                                                                                // 6607
      }() /**                                                                                                          // 6607
           * Calls necessary functions to update Interchange upon DOM change                                           //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6605
      key: '_reflow',                                                                                                  // 6622
      value: function () {                                                                                             // 6623
        function _reflow() {                                                                                           // 6623
          var match; // Iterate through each rule, but only save the last match                                        // 6624
                                                                                                                       //
          for (var i in meteorBabelHelpers.sanitizeForInObject(this.rules)) {                                          // 6627
            if (this.rules.hasOwnProperty(i)) {                                                                        // 6628
              var rule = this.rules[i];                                                                                // 6629
                                                                                                                       //
              if (window.matchMedia(rule.query).matches) {                                                             // 6630
                match = rule;                                                                                          // 6631
              }                                                                                                        // 6632
            }                                                                                                          // 6633
          }                                                                                                            // 6634
                                                                                                                       //
          if (match) {                                                                                                 // 6636
            this.replace(match.path);                                                                                  // 6637
          }                                                                                                            // 6638
        }                                                                                                              // 6639
                                                                                                                       //
        return _reflow;                                                                                                // 6623
      }() /**                                                                                                          // 6623
           * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.                  //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6621
      key: '_addBreakpoints',                                                                                          // 6648
      value: function () {                                                                                             // 6649
        function _addBreakpoints() {                                                                                   // 6649
          for (var i in meteorBabelHelpers.sanitizeForInObject(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].queries)) {
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].queries.hasOwnProperty(i)) {
              var query = __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].queries[i];  // 6652
              Interchange.SPECIAL_QUERIES[query.name] = query.value;                                                   // 6653
            }                                                                                                          // 6654
          }                                                                                                            // 6655
        }                                                                                                              // 6656
                                                                                                                       //
        return _addBreakpoints;                                                                                        // 6649
      }() /**                                                                                                          // 6649
           * Checks the Interchange element for the provided media query + content pairings                            //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {Object} element - jQuery object that is an Interchange instance                                   //
           * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys      //
           */                                                                                                          //
    }, {                                                                                                               // 6647
      key: '_generateRules',                                                                                           // 6667
      value: function () {                                                                                             // 6668
        function _generateRules(element) {                                                                             // 6668
          var rulesList = [];                                                                                          // 6669
          var rules;                                                                                                   // 6670
                                                                                                                       //
          if (this.options.rules) {                                                                                    // 6672
            rules = this.options.rules;                                                                                // 6673
          } else {                                                                                                     // 6674
            rules = this.$element.data('interchange');                                                                 // 6675
          }                                                                                                            // 6676
                                                                                                                       //
          rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;                                         // 6678
                                                                                                                       //
          for (var i in meteorBabelHelpers.sanitizeForInObject(rules)) {                                               // 6680
            if (rules.hasOwnProperty(i)) {                                                                             // 6681
              var rule = rules[i].slice(1, -1).split(', ');                                                            // 6682
              var path = rule.slice(0, -1).join('');                                                                   // 6683
              var query = rule[rule.length - 1];                                                                       // 6684
                                                                                                                       //
              if (Interchange.SPECIAL_QUERIES[query]) {                                                                // 6686
                query = Interchange.SPECIAL_QUERIES[query];                                                            // 6687
              }                                                                                                        // 6688
                                                                                                                       //
              rulesList.push({                                                                                         // 6690
                path: path,                                                                                            // 6691
                query: query                                                                                           // 6692
              });                                                                                                      // 6690
            }                                                                                                          // 6694
          }                                                                                                            // 6695
                                                                                                                       //
          this.rules = rulesList;                                                                                      // 6697
        }                                                                                                              // 6698
                                                                                                                       //
        return _generateRules;                                                                                         // 6668
      }() /**                                                                                                          // 6668
           * Update the `src` property of an image, or change the HTML of a container, to the specified path.          //
           * @function                                                                                                 //
           * @param {String} path - Path to the image or HTML partial.                                                 //
           * @fires Interchange#replaced                                                                               //
           */                                                                                                          //
    }, {                                                                                                               // 6666
      key: 'replace',                                                                                                  // 6708
      value: function () {                                                                                             // 6709
        function replace(path) {                                                                                       // 6709
          if (this.currentPath === path) return;                                                                       // 6710
                                                                                                                       //
          var _this = this,                                                                                            // 6712
              trigger = 'replaced.zf.interchange'; // Replacing images                                                 // 6712
                                                                                                                       //
                                                                                                                       //
          if (this.$element[0].nodeName === 'IMG') {                                                                   // 6716
            this.$element.attr('src', path).on('load', function () {                                                   // 6717
              _this.currentPath = path;                                                                                // 6718
            }).trigger(trigger);                                                                                       // 6719
          } // Replacing background images                                                                             // 6720
          else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {                                            // 6716
              path = path.replace(/\(/g, '%28').replace(/\)/g, '%29');                                                 // 6723
              this.$element.css({                                                                                      // 6724
                'background-image': 'url(' + path + ')'                                                                // 6724
              }).trigger(trigger);                                                                                     // 6724
            } // Replacing HTML                                                                                        // 6725
            else {                                                                                                     // 6722
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.get(path, function (response) {                         // 6728
                  _this.$element.html(response).trigger(trigger);                                                      // 6729
                                                                                                                       //
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(response).foundation();                               // 6730
                                                                                                                       //
                  _this.currentPath = path;                                                                            // 6731
                });                                                                                                    // 6732
              } /**                                                                                                    // 6733
                 * Fires when content in an Interchange element is done being loaded.                                  //
                 * @event Interchange#replaced                                                                         //
                 */ // this.$element.trigger('replaced.zf.interchange');                                               //
                                                                                                                       //
        }                                                                                                              // 6740
                                                                                                                       //
        return replace;                                                                                                // 6709
      }() /**                                                                                                          // 6709
           * Destroys an instance of interchange.                                                                      //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6707
      key: '_destroy',                                                                                                 // 6748
      value: function () {                                                                                             // 6749
        function _destroy() {                                                                                          // 6749
          this.$element.off('resizeme.zf.trigger');                                                                    // 6750
        }                                                                                                              // 6751
                                                                                                                       //
        return _destroy;                                                                                               // 6749
      }()                                                                                                              // 6749
    }]);                                                                                                               // 6747
                                                                                                                       //
    return Interchange;                                                                                                // 6754
  }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["a" /* Plugin */]); /**                                           // 6755
                                                                          * Default settings for plugin                //
                                                                          */                                           //
                                                                                                                       //
  Interchange.defaults = {                                                                                             // 6762
    /**                                                                                                                // 6763
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.                    //
     * @option                                                                                                         //
     * @type {?array}                                                                                                  //
     * @default null                                                                                                   //
     */rules: null                                                                                                     //
  };                                                                                                                   // 6762
  Interchange.SPECIAL_QUERIES = {                                                                                      // 6772
    'landscape': 'screen and (orientation: landscape)',                                                                // 6773
    'portrait': 'screen and (orientation: portrait)',                                                                  // 6774
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  }; /***/                                                                                                             // 6772
}, /* 25 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 6780
  "use strict"; /* harmony export (binding) */                                                                         // 6784
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 6785
    return Magellan;                                                                                                   // 6785
  }); /* harmony import */                                                                                             // 6785
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 6786
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 6788
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 6789
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__ = __webpack_require__(16);                                // 6790
                                                                                                                       //
  var _createClass = function () {                                                                                     // 6793
    function defineProperties(target, props) {                                                                         // 6793
      for (var i = 0; i < props.length; i++) {                                                                         // 6793
        var descriptor = props[i];                                                                                     // 6793
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 6793
        descriptor.configurable = true;                                                                                // 6793
        if ("value" in descriptor) descriptor.writable = true;                                                         // 6793
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 6793
      }                                                                                                                // 6793
    }                                                                                                                  // 6793
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 6793
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 6793
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 6793
      return Constructor;                                                                                              // 6793
    };                                                                                                                 // 6793
  }();                                                                                                                 // 6793
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 6795
    if (!(instance instanceof Constructor)) {                                                                          // 6795
      throw new TypeError("Cannot call a class as a function");                                                        // 6795
    }                                                                                                                  // 6795
  }                                                                                                                    // 6795
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 6797
    if (!self) {                                                                                                       // 6797
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 6797
    }                                                                                                                  // 6797
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 6797
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 6799
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 6799
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 6799
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 6799
      constructor: {                                                                                                   // 6799
        value: subClass,                                                                                               // 6799
        enumerable: false,                                                                                             // 6799
        writable: true,                                                                                                // 6799
        configurable: true                                                                                             // 6799
      }                                                                                                                // 6799
    });                                                                                                                // 6799
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 6799
     * Magellan module.                                                                                                //
     * @module foundation.magellan                                                                                     //
     * @requires foundation.smoothScroll                                                                               //
     */                                                                                                                //
                                                                                                                       //
  var Magellan = function (_Plugin) {                                                                                  // 6812
    _inherits(Magellan, _Plugin);                                                                                      // 6813
                                                                                                                       //
    function Magellan() {                                                                                              // 6815
      _classCallCheck(this, Magellan);                                                                                 // 6816
                                                                                                                       //
      return _possibleConstructorReturn(this, (Magellan.__proto__ || Object.getPrototypeOf(Magellan)).apply(this, arguments));
    }                                                                                                                  // 6819
                                                                                                                       //
    _createClass(Magellan, [{                                                                                          // 6821
      key: '_setup',                                                                                                   // 6822
      /**                                                                                                              // 6824
       * Creates a new instance of Magellan.                                                                           //
       * @class                                                                                                        //
       * @name Magellan                                                                                                //
       * @fires Magellan#init                                                                                          //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 6832
          this.$element = element;                                                                                     // 6833
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Magellan.defaults, this.$element.data(), options);
          this.className = 'Magellan'; // ie9 back compat                                                              // 6835
                                                                                                                       //
          this._init();                                                                                                // 6837
                                                                                                                       //
          this.calcPoints();                                                                                           // 6838
        }                                                                                                              // 6839
                                                                                                                       //
        return _setup;                                                                                                 // 6832
      }() /**                                                                                                          // 6832
           * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6821
      key: '_init',                                                                                                    // 6847
      value: function () {                                                                                             // 6848
        function _init() {                                                                                             // 6848
          var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, 'magellan');
                                                                                                                       //
          var _this = this;                                                                                            // 6850
                                                                                                                       //
          this.$targets = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-magellan-target]');                    // 6851
          this.$links = this.$element.find('a');                                                                       // 6852
          this.$element.attr({                                                                                         // 6853
            'data-resize': id,                                                                                         // 6854
            'data-scroll': id,                                                                                         // 6855
            'id': id                                                                                                   // 6856
          });                                                                                                          // 6853
          this.$active = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();                                             // 6858
          this.scrollPos = parseInt(window.pageYOffset, 10);                                                           // 6859
                                                                                                                       //
          this._events();                                                                                              // 6861
        }                                                                                                              // 6862
                                                                                                                       //
        return _init;                                                                                                  // 6848
      }() /**                                                                                                          // 6848
           * Calculates an array of pixel values that are the demarcation lines between locations on the page.         //
           * Can be invoked if new elements are added or the size of a location changes.                               //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6846
      key: 'calcPoints',                                                                                               // 6871
      value: function () {                                                                                             // 6872
        function calcPoints() {                                                                                        // 6872
          var _this = this,                                                                                            // 6873
              body = document.body,                                                                                    // 6873
              html = document.documentElement;                                                                         // 6873
                                                                                                                       //
          this.points = [];                                                                                            // 6877
          this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));                                // 6878
          this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
          this.$targets.each(function () {                                                                             // 6881
            var $tar = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                           // 6882
                pt = Math.round($tar.offset().top - _this.options.threshold);                                          // 6882
                                                                                                                       //
            $tar.targetPoint = pt;                                                                                     // 6884
                                                                                                                       //
            _this.points.push(pt);                                                                                     // 6885
          });                                                                                                          // 6886
        }                                                                                                              // 6887
                                                                                                                       //
        return calcPoints;                                                                                             // 6872
      }() /**                                                                                                          // 6872
           * Initializes events for Magellan.                                                                          //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 6870
      key: '_events',                                                                                                  // 6895
      value: function () {                                                                                             // 6896
        function _events() {                                                                                           // 6896
          var _this = this,                                                                                            // 6897
              $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body'),                                    // 6897
              opts = {                                                                                                 // 6897
            duration: _this.options.animationDuration,                                                                 // 6900
            easing: _this.options.animationEasing                                                                      // 6901
          };                                                                                                           // 6899
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load', function () {                             // 6903
            if (_this.options.deepLinking) {                                                                           // 6904
              if (location.hash) {                                                                                     // 6905
                _this.scrollToLoc(location.hash);                                                                      // 6906
              }                                                                                                        // 6907
            }                                                                                                          // 6908
                                                                                                                       //
            _this.calcPoints();                                                                                        // 6909
                                                                                                                       //
            _this._updateActive();                                                                                     // 6910
          });                                                                                                          // 6911
                                                                                                                       //
          this.$element.on({                                                                                           // 6913
            'resizeme.zf.trigger': this.reflow.bind(this),                                                             // 6914
            'scrollme.zf.trigger': this._updateActive.bind(this)                                                       // 6915
          }).on('click.zf.magellan', 'a[href^="#"]', function (e) {                                                    // 6913
            e.preventDefault();                                                                                        // 6917
            var arrival = this.getAttribute('href');                                                                   // 6918
                                                                                                                       //
            _this.scrollToLoc(arrival);                                                                                // 6919
          });                                                                                                          // 6920
                                                                                                                       //
          this._deepLinkScroll = function (e) {                                                                        // 6922
            if (_this.options.deepLinking) {                                                                           // 6923
              _this.scrollToLoc(window.location.hash);                                                                 // 6924
            }                                                                                                          // 6925
          };                                                                                                           // 6926
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._deepLinkScroll);                 // 6928
        }                                                                                                              // 6929
                                                                                                                       //
        return _events;                                                                                                // 6896
      }() /**                                                                                                          // 6896
           * Function to scroll to a given location on the page.                                                       //
           * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'                            //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6894
      key: 'scrollToLoc',                                                                                              // 6938
      value: function () {                                                                                             // 6939
        function scrollToLoc(loc) {                                                                                    // 6939
          this._inTransition = true;                                                                                   // 6940
                                                                                                                       //
          var _this = this;                                                                                            // 6941
                                                                                                                       //
          var options = {                                                                                              // 6943
            animationEasing: this.options.animationEasing,                                                             // 6944
            animationDuration: this.options.animationDuration,                                                         // 6945
            threshold: this.options.threshold,                                                                         // 6946
            offset: this.options.offset                                                                                // 6947
          };                                                                                                           // 6943
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__["a" /* SmoothScroll */].scrollToLoc(loc, options, function () {
            _this._inTransition = false;                                                                               // 6951
                                                                                                                       //
            _this._updateActive();                                                                                     // 6952
          });                                                                                                          // 6953
        }                                                                                                              // 6954
                                                                                                                       //
        return scrollToLoc;                                                                                            // 6939
      }() /**                                                                                                          // 6939
           * Calls necessary functions to update Magellan upon DOM change                                              //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6937
      key: 'reflow',                                                                                                   // 6962
      value: function () {                                                                                             // 6963
        function reflow() {                                                                                            // 6963
          this.calcPoints();                                                                                           // 6964
                                                                                                                       //
          this._updateActive();                                                                                        // 6965
        }                                                                                                              // 6966
                                                                                                                       //
        return reflow;                                                                                                 // 6963
      }() /**                                                                                                          // 6963
           * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
           * @private                                                                                                  //
           * @function                                                                                                 //
           * @fires Magellan#update                                                                                    //
           */                                                                                                          //
    }, {                                                                                                               // 6961
      key: '_updateActive',                                                                                            // 6976
      value: function () {                                                                                             // 6977
        function _updateActive() /*evt, elem, scrollPos*/{                                                             // 6977
          if (this._inTransition) {                                                                                    // 6978
            return;                                                                                                    // 6979
          }                                                                                                            // 6980
                                                                                                                       //
          var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),                                               // 6981
              curIdx;                                                                                                  // 6981
                                                                                                                       //
          if (winPos + this.winHeight === this.docHeight) {                                                            // 6984
            curIdx = this.points.length - 1;                                                                           // 6985
          } else if (winPos < this.points[0]) {                                                                        // 6986
            curIdx = undefined;                                                                                        // 6987
          } else {                                                                                                     // 6988
            var isDown = this.scrollPos < winPos,                                                                      // 6989
                _this = this,                                                                                          // 6989
                curVisible = this.points.filter(function (p, i) {                                                      // 6989
              return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;
            });                                                                                                        // 6993
                                                                                                                       //
            curIdx = curVisible.length ? curVisible.length - 1 : 0;                                                    // 6994
          }                                                                                                            // 6995
                                                                                                                       //
          this.$active.removeClass(this.options.activeClass);                                                          // 6997
          this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 7000
            var hash = "";                                                                                             // 7001
                                                                                                                       //
            if (curIdx != undefined) {                                                                                 // 7002
              hash = this.$active[0].getAttribute('href');                                                             // 7003
            }                                                                                                          // 7004
                                                                                                                       //
            if (hash !== window.location.hash) {                                                                       // 7005
              if (window.history.pushState) {                                                                          // 7006
                window.history.pushState(null, null, hash);                                                            // 7007
              } else {                                                                                                 // 7008
                window.location.hash = hash;                                                                           // 7009
              }                                                                                                        // 7010
            }                                                                                                          // 7011
          }                                                                                                            // 7012
                                                                                                                       //
          this.scrollPos = winPos; /**                                                                                 // 7014
                                    * Fires when magellan is finished updating to the new active element.              //
                                    * @event Magellan#update                                                           //
                                    */                                                                                 //
          this.$element.trigger('update.zf.magellan', [this.$active]);                                                 // 7019
        }                                                                                                              // 7020
                                                                                                                       //
        return _updateActive;                                                                                          // 6977
      }() /**                                                                                                          // 6977
           * Destroys an instance of Magellan and resets the url of the window.                                        //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 6975
      key: '_destroy',                                                                                                 // 7028
      value: function () {                                                                                             // 7029
        function _destroy() {                                                                                          // 7029
          this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 7032
            var hash = this.$active[0].getAttribute('href');                                                           // 7033
            window.location.hash.replace(hash, '');                                                                    // 7034
          }                                                                                                            // 7035
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._deepLinkScroll);                // 7036
        }                                                                                                              // 7037
                                                                                                                       //
        return _destroy;                                                                                               // 7029
      }()                                                                                                              // 7029
    }]);                                                                                                               // 7027
                                                                                                                       //
    return Magellan;                                                                                                   // 7040
  }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["a" /* Plugin */]); /**                                           // 7041
                                                                          * Default settings for plugin                //
                                                                          */                                           //
                                                                                                                       //
  Magellan.defaults = {                                                                                                // 7048
    /**                                                                                                                // 7049
     * Amount of time, in ms, the animated scrolling should take between locations.                                    //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 500                                                                                                    //
     */animationDuration: 500,                                                                                         //
    /**                                                                                                                // 7056
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'linear'                                                                                               //
     * @see {@link https://api.jquery.com/animate|Jquery animate}                                                      //
     */animationEasing: 'linear',                                                                                      //
    /**                                                                                                                // 7064
     * Number of pixels to use as a marker for location changes.                                                       //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 50                                                                                                     //
     */threshold: 50,                                                                                                  //
    /**                                                                                                                // 7071
     * Class applied to the active locations link on the magellan container.                                           //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'is-active'                                                                                            //
     */activeClass: 'is-active',                                                                                       //
    /**                                                                                                                // 7078
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.               //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLinking: false,                                                                                             //
    /**                                                                                                                // 7085
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.                      //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */offset: 0                                                                                                       //
  }; /***/                                                                                                             // 7048
}, /* 26 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 7096
  "use strict"; /* harmony export (binding) */                                                                         // 7100
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 7101
    return OffCanvas;                                                                                                  // 7101
  }); /* harmony import */                                                                                             // 7101
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 7102
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 7104
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 7105
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 7106
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 7107
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(5);                                // 7108
                                                                                                                       //
  var _createClass = function () {                                                                                     // 7111
    function defineProperties(target, props) {                                                                         // 7111
      for (var i = 0; i < props.length; i++) {                                                                         // 7111
        var descriptor = props[i];                                                                                     // 7111
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 7111
        descriptor.configurable = true;                                                                                // 7111
        if ("value" in descriptor) descriptor.writable = true;                                                         // 7111
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 7111
      }                                                                                                                // 7111
    }                                                                                                                  // 7111
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 7111
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 7111
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 7111
      return Constructor;                                                                                              // 7111
    };                                                                                                                 // 7111
  }();                                                                                                                 // 7111
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 7113
    if (!(instance instanceof Constructor)) {                                                                          // 7113
      throw new TypeError("Cannot call a class as a function");                                                        // 7113
    }                                                                                                                  // 7113
  }                                                                                                                    // 7113
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 7115
    if (!self) {                                                                                                       // 7115
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 7115
    }                                                                                                                  // 7115
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 7115
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 7117
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 7117
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 7117
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 7117
      constructor: {                                                                                                   // 7117
        value: subClass,                                                                                               // 7117
        enumerable: false,                                                                                             // 7117
        writable: true,                                                                                                // 7117
        configurable: true                                                                                             // 7117
      }                                                                                                                // 7117
    });                                                                                                                // 7117
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 7117
     * OffCanvas module.                                                                                               //
     * @module foundation.offcanvas                                                                                    //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.mediaQuery                                                                            //
     * @requires foundation.util.triggers                                                                              //
     */                                                                                                                //
                                                                                                                       //
  var OffCanvas = function (_Plugin) {                                                                                 // 7135
    _inherits(OffCanvas, _Plugin);                                                                                     // 7136
                                                                                                                       //
    function OffCanvas() {                                                                                             // 7138
      _classCallCheck(this, OffCanvas);                                                                                // 7139
                                                                                                                       //
      return _possibleConstructorReturn(this, (OffCanvas.__proto__ || Object.getPrototypeOf(OffCanvas)).apply(this, arguments));
    }                                                                                                                  // 7142
                                                                                                                       //
    _createClass(OffCanvas, [{                                                                                         // 7144
      key: '_setup',                                                                                                   // 7145
      /**                                                                                                              // 7147
       * Creates a new instance of an off-canvas wrapper.                                                              //
       * @class                                                                                                        //
       * @name OffCanvas                                                                                               //
       * @fires OffCanvas#init                                                                                         //
       * @param {Object} element - jQuery object to initialize.                                                        //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 7155
          var _this3 = this;                                                                                           // 7156
                                                                                                                       //
          this.className = 'OffCanvas'; // ie9 back compat                                                             // 7158
                                                                                                                       //
          this.$element = element;                                                                                     // 7159
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, OffCanvas.defaults, this.$element.data(), options);
          this.contentClasses = {                                                                                      // 7161
            base: [],                                                                                                  // 7161
            reveal: []                                                                                                 // 7161
          };                                                                                                           // 7161
          this.$lastTrigger = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();                                        // 7162
          this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();                                           // 7163
          this.position = 'left';                                                                                      // 7164
          this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();                                            // 7165
          this.nested = !!this.options.nested; // Defines the CSS transition/position classes of the off-canvas content container.
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['push', 'overlap']).each(function (index, val) {             // 7169
            _this3.contentClasses.base.push('has-transition-' + val);                                                  // 7170
          });                                                                                                          // 7171
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['left', 'right', 'top', 'bottom']).each(function (index, val) {
            _this3.contentClasses.base.push('has-position-' + val);                                                    // 7173
                                                                                                                       //
            _this3.contentClasses.reveal.push('has-reveal-' + val);                                                    // 7174
          }); // Triggers init is idempotent, just need to make sure it is initialized                                 // 7175
                                                                                                                       //
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 7179
                                                                                                                       //
          this._init();                                                                                                // 7181
                                                                                                                       //
          this._events();                                                                                              // 7182
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('OffCanvas', {          // 7184
            'ESCAPE': 'close'                                                                                          // 7185
          });                                                                                                          // 7184
        }                                                                                                              // 7187
                                                                                                                       //
        return _setup;                                                                                                 // 7155
      }() /**                                                                                                          // 7155
           * Initializes the off-canvas wrapper by adding the exit overlay (if needed).                                //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7144
      key: '_init',                                                                                                    // 7196
      value: function () {                                                                                             // 7197
        function _init() {                                                                                             // 7197
          var id = this.$element.attr('id');                                                                           // 7198
          this.$element.attr('aria-hidden', 'true'); // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)
                                                                                                                       //
          if (this.options.contentId) {                                                                                // 7203
            this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.options.contentId);              // 7204
          } else if (this.$element.siblings('[data-off-canvas-content]').length) {                                     // 7205
            this.$content = this.$element.siblings('[data-off-canvas-content]').first();                               // 7206
          } else {                                                                                                     // 7207
            this.$content = this.$element.closest('[data-off-canvas-content]').first();                                // 7208
          }                                                                                                            // 7209
                                                                                                                       //
          if (!this.options.contentId) {                                                                               // 7211
            // Assume that the off-canvas element is nested if it isn't a sibling of the content                       // 7212
            this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;                            // 7213
          } else if (this.options.contentId && this.options.nested === null) {                                         // 7214
            // Warning if using content ID without setting the nested option                                           // 7215
            // Once the element is nested it is required to work properly in this case                                 // 7216
            console.warn('Remember to use the nested option if using the content ID option!');                         // 7217
          }                                                                                                            // 7218
                                                                                                                       //
          if (this.nested === true) {                                                                                  // 7220
            // Force transition overlap if nested                                                                      // 7221
            this.options.transition = 'overlap'; // Remove appropriate classes if already assigned in markup           // 7222
                                                                                                                       //
            this.$element.removeClass('is-transition-push');                                                           // 7224
          }                                                                                                            // 7225
                                                                                                                       //
          this.$element.addClass('is-transition-' + this.options.transition + ' is-closed'); // Find triggers that affect this element and add aria-expanded to them
                                                                                                                       //
          this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id); // Get position by checking for related CSS class
                                                                                                                       //
          this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1] : this.position; // Add an overlay over the content if necessary
                                                                                                                       //
          if (this.options.contentOverlay === true) {                                                                  // 7236
            var overlay = document.createElement('div');                                                               // 7237
            var overlayPosition = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
            overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);                                 // 7239
            this.$overlay = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(overlay);                                   // 7240
                                                                                                                       //
            if (overlayPosition === 'is-overlay-fixed') {                                                              // 7241
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$overlay).insertAfter(this.$element);                // 7242
            } else {                                                                                                   // 7243
              this.$content.append(this.$overlay);                                                                     // 7244
            }                                                                                                          // 7245
          }                                                                                                            // 7246
                                                                                                                       //
          this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);
                                                                                                                       //
          if (this.options.isRevealed === true) {                                                                      // 7250
            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
                                                                                                                       //
            this._setMQChecker();                                                                                      // 7252
          }                                                                                                            // 7253
                                                                                                                       //
          if (this.options.transitionTime) {                                                                           // 7255
            this.$element.css('transition-duration', this.options.transitionTime);                                     // 7256
          } // Initally remove all transition/position CSS classes from off-canvas content container.                  // 7257
                                                                                                                       //
                                                                                                                       //
          this._removeContentClasses();                                                                                // 7260
        }                                                                                                              // 7261
                                                                                                                       //
        return _init;                                                                                                  // 7197
      }() /**                                                                                                          // 7197
           * Adds event handlers to the off-canvas wrapper and the exit overlay.                                       //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7195
      key: '_events',                                                                                                  // 7270
      value: function () {                                                                                             // 7271
        function _events() {                                                                                           // 7271
          this.$element.off('.zf.trigger .zf.offcanvas').on({                                                          // 7272
            'open.zf.trigger': this.open.bind(this),                                                                   // 7273
            'close.zf.trigger': this.close.bind(this),                                                                 // 7274
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 7275
            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)                                                    // 7276
          });                                                                                                          // 7272
                                                                                                                       //
          if (this.options.closeOnClick === true) {                                                                    // 7279
            var $target = this.options.contentOverlay ? this.$overlay : this.$content;                                 // 7280
            $target.on({                                                                                               // 7281
              'click.zf.offcanvas': this.close.bind(this)                                                              // 7281
            });                                                                                                        // 7281
          }                                                                                                            // 7282
        }                                                                                                              // 7283
                                                                                                                       //
        return _events;                                                                                                // 7271
      }() /**                                                                                                          // 7271
           * Applies event listener for elements that will reveal at certain breakpoints.                              //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7269
      key: '_setMQChecker',                                                                                            // 7291
      value: function () {                                                                                             // 7292
        function _setMQChecker() {                                                                                     // 7292
          var _this = this;                                                                                            // 7293
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {             // 7295
            if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(_this.options.revealOn)) {
              _this.reveal(true);                                                                                      // 7297
            } else {                                                                                                   // 7298
              _this.reveal(false);                                                                                     // 7299
            }                                                                                                          // 7300
          }).one('load.zf.offcanvas', function () {                                                                    // 7301
            if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(_this.options.revealOn)) {
              _this.reveal(true);                                                                                      // 7303
            }                                                                                                          // 7304
          });                                                                                                          // 7305
        }                                                                                                              // 7306
                                                                                                                       //
        return _setMQChecker;                                                                                          // 7292
      }() /**                                                                                                          // 7292
           * Removes the CSS transition/position classes of the off-canvas content container.                          //
           * Removing the classes is important when another off-canvas gets opened that uses the same content container.
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7290
      key: '_removeContentClasses',                                                                                    // 7315
      value: function () {                                                                                             // 7316
        function _removeContentClasses(hasReveal) {                                                                    // 7316
          this.$content.removeClass(this.contentClasses.base.join(' '));                                               // 7317
                                                                                                                       //
          if (hasReveal === true) {                                                                                    // 7318
            this.$content.removeClass(this.contentClasses.reveal.join(' '));                                           // 7319
          }                                                                                                            // 7320
        }                                                                                                              // 7321
                                                                                                                       //
        return _removeContentClasses;                                                                                  // 7316
      }() /**                                                                                                          // 7316
           * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
           * Beforehand any transition/position class gets removed.                                                    //
           * @param {Boolean} hasReveal - true if related off-canvas element is revealed.                              //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7314
      key: '_addContentClasses',                                                                                       // 7331
      value: function () {                                                                                             // 7332
        function _addContentClasses(hasReveal) {                                                                       // 7332
          this._removeContentClasses();                                                                                // 7333
                                                                                                                       //
          this.$content.addClass('has-transition-' + this.options.transition + ' has-position-' + this.position);      // 7334
                                                                                                                       //
          if (hasReveal === true) {                                                                                    // 7335
            this.$content.addClass('has-reveal-' + this.position);                                                     // 7336
          }                                                                                                            // 7337
        }                                                                                                              // 7338
                                                                                                                       //
        return _addContentClasses;                                                                                     // 7332
      }() /**                                                                                                          // 7332
           * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.                         //
           * @param {Boolean} isRevealed - true if element should be revealed.                                         //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 7330
      key: 'reveal',                                                                                                   // 7347
      value: function () {                                                                                             // 7348
        function reveal(isRevealed) {                                                                                  // 7348
          if (isRevealed) {                                                                                            // 7349
            this.close();                                                                                              // 7350
            this.isRevealed = true;                                                                                    // 7351
            this.$element.attr('aria-hidden', 'false');                                                                // 7352
            this.$element.off('open.zf.trigger toggle.zf.trigger');                                                    // 7353
            this.$element.removeClass('is-closed');                                                                    // 7354
          } else {                                                                                                     // 7355
            this.isRevealed = false;                                                                                   // 7356
            this.$element.attr('aria-hidden', 'true');                                                                 // 7357
            this.$element.off('open.zf.trigger toggle.zf.trigger').on({                                                // 7358
              'open.zf.trigger': this.open.bind(this),                                                                 // 7359
              'toggle.zf.trigger': this.toggle.bind(this)                                                              // 7360
            });                                                                                                        // 7358
            this.$element.addClass('is-closed');                                                                       // 7362
          }                                                                                                            // 7363
                                                                                                                       //
          this._addContentClasses(isRevealed);                                                                         // 7364
        }                                                                                                              // 7365
                                                                                                                       //
        return reveal;                                                                                                 // 7348
      }() /**                                                                                                          // 7348
           * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.       //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7346
      key: '_stopScrolling',                                                                                           // 7373
      value: function () {                                                                                             // 7374
        function _stopScrolling(event) {                                                                               // 7374
          return false;                                                                                                // 7375
        }                                                                                                              // 7376
                                                                                                                       //
        return _stopScrolling;                                                                                         // 7374
      }() // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios        // 7374
      // Only really works for y, not sure how to extend to x or if we need to.                                        // 7379
                                                                                                                       //
    }, {                                                                                                               // 7372
      key: '_recordScrollable',                                                                                        // 7382
      value: function () {                                                                                             // 7383
        function _recordScrollable(event) {                                                                            // 7383
          var elem = this; // called from event handler context with this as elem                                      // 7384
          // If the element is scrollable (content overflows), then...                                                 // 7386
                                                                                                                       //
          if (elem.scrollHeight !== elem.clientHeight) {                                                               // 7387
            // If we're at the top, scroll down one pixel to allow scrolling up                                        // 7388
            if (elem.scrollTop === 0) {                                                                                // 7389
              elem.scrollTop = 1;                                                                                      // 7390
            } // If we're at the bottom, scroll up one pixel to allow scrolling down                                   // 7391
                                                                                                                       //
                                                                                                                       //
            if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {                                            // 7393
              elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;                                              // 7394
            }                                                                                                          // 7395
          }                                                                                                            // 7396
                                                                                                                       //
          elem.allowUp = elem.scrollTop > 0;                                                                           // 7397
          elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;                                     // 7398
          elem.lastY = event.originalEvent.pageY;                                                                      // 7399
        }                                                                                                              // 7400
                                                                                                                       //
        return _recordScrollable;                                                                                      // 7383
      }()                                                                                                              // 7383
    }, {                                                                                                               // 7381
      key: '_stopScrollPropagation',                                                                                   // 7402
      value: function () {                                                                                             // 7403
        function _stopScrollPropagation(event) {                                                                       // 7403
          var elem = this; // called from event handler context with this as elem                                      // 7404
                                                                                                                       //
          var up = event.pageY < elem.lastY;                                                                           // 7405
          var down = !up;                                                                                              // 7406
          elem.lastY = event.pageY;                                                                                    // 7407
                                                                                                                       //
          if (up && elem.allowUp || down && elem.allowDown) {                                                          // 7409
            event.stopPropagation();                                                                                   // 7410
          } else {                                                                                                     // 7411
            event.preventDefault();                                                                                    // 7412
          }                                                                                                            // 7413
        }                                                                                                              // 7414
                                                                                                                       //
        return _stopScrollPropagation;                                                                                 // 7403
      }() /**                                                                                                          // 7403
           * Opens the off-canvas menu.                                                                                //
           * @function                                                                                                 //
           * @param {Object} event - Event object passed from listener.                                                //
           * @param {jQuery} trigger - element that triggered the off-canvas to open.                                  //
           * @fires OffCanvas#opened                                                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 7401
      key: 'open',                                                                                                     // 7425
      value: function () {                                                                                             // 7426
        function open(event, trigger) {                                                                                // 7426
          if (this.$element.hasClass('is-open') || this.isRevealed) {                                                  // 7427
            return;                                                                                                    // 7428
          }                                                                                                            // 7429
                                                                                                                       //
          var _this = this;                                                                                            // 7430
                                                                                                                       //
          if (trigger) {                                                                                               // 7432
            this.$lastTrigger = trigger;                                                                               // 7433
          }                                                                                                            // 7434
                                                                                                                       //
          if (this.options.forceTo === 'top') {                                                                        // 7436
            window.scrollTo(0, 0);                                                                                     // 7437
          } else if (this.options.forceTo === 'bottom') {                                                              // 7438
            window.scrollTo(0, document.body.scrollHeight);                                                            // 7439
          }                                                                                                            // 7440
                                                                                                                       //
          if (this.options.transitionTime && this.options.transition !== 'overlap') {                                  // 7442
            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);
          } else {                                                                                                     // 7444
            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');                        // 7445
          } /**                                                                                                        // 7446
             * Fires when the off-canvas menu opens.                                                                   //
             * @event OffCanvas#opened                                                                                 //
             */                                                                                                        //
                                                                                                                       //
          this.$element.addClass('is-open').removeClass('is-closed');                                                  // 7452
          this.$triggers.attr('aria-expanded', 'true');                                                                // 7454
          this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');                                   // 7455
          this.$content.addClass('is-open-' + this.position); // If `contentScroll` is set to false, add class and disable scrolling on touch devices.
                                                                                                                       //
          if (this.options.contentScroll === false) {                                                                  // 7460
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
                                                                                                                       //
            this.$element.on('touchstart', this._recordScrollable);                                                    // 7462
            this.$element.on('touchmove', this._stopScrollPropagation);                                                // 7463
          }                                                                                                            // 7464
                                                                                                                       //
          if (this.options.contentOverlay === true) {                                                                  // 7466
            this.$overlay.addClass('is-visible');                                                                      // 7467
          }                                                                                                            // 7468
                                                                                                                       //
          if (this.options.closeOnClick === true && this.options.contentOverlay === true) {                            // 7470
            this.$overlay.addClass('is-closable');                                                                     // 7471
          }                                                                                                            // 7472
                                                                                                                       //
          if (this.options.autoFocus === true) {                                                                       // 7474
            this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])(this.$element), function () {
              if (!_this.$element.hasClass('is-open')) {                                                               // 7476
                return; // exit if prematurely closed                                                                  // 7477
              }                                                                                                        // 7478
                                                                                                                       //
              var canvasFocus = _this.$element.find('[data-autofocus]');                                               // 7479
                                                                                                                       //
              if (canvasFocus.length) {                                                                                // 7480
                canvasFocus.eq(0).focus();                                                                             // 7481
              } else {                                                                                                 // 7482
                _this.$element.find('a, button').eq(0).focus();                                                        // 7483
              }                                                                                                        // 7484
            });                                                                                                        // 7485
          }                                                                                                            // 7486
                                                                                                                       //
          if (this.options.trapFocus === true) {                                                                       // 7488
            this.$content.attr('tabindex', '-1');                                                                      // 7489
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].trapFocus(this.$element);      // 7490
          }                                                                                                            // 7491
                                                                                                                       //
          this._addContentClasses();                                                                                   // 7493
        }                                                                                                              // 7494
                                                                                                                       //
        return open;                                                                                                   // 7426
      }() /**                                                                                                          // 7426
           * Closes the off-canvas menu.                                                                               //
           * @function                                                                                                 //
           * @param {Function} cb - optional cb to fire after closure.                                                 //
           * @fires OffCanvas#closed                                                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 7424
      key: 'close',                                                                                                    // 7504
      value: function () {                                                                                             // 7505
        function close(cb) {                                                                                           // 7505
          if (!this.$element.hasClass('is-open') || this.isRevealed) {                                                 // 7506
            return;                                                                                                    // 7507
          }                                                                                                            // 7508
                                                                                                                       //
          var _this = this;                                                                                            // 7510
                                                                                                                       //
          this.$element.removeClass('is-open');                                                                        // 7512
          this.$element.attr('aria-hidden', 'true') /**                                                                // 7514
                                                     * Fires when the off-canvas menu opens.                           //
                                                     * @event OffCanvas#closed                                         //
                                                     */.trigger('closed.zf.offcanvas');                                //
          this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom'); // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
                                                                                                                       //
          if (this.options.contentScroll === false) {                                                                  // 7524
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
                                                                                                                       //
            this.$element.off('touchstart', this._recordScrollable);                                                   // 7526
            this.$element.off('touchmove', this._stopScrollPropagation);                                               // 7527
          }                                                                                                            // 7528
                                                                                                                       //
          if (this.options.contentOverlay === true) {                                                                  // 7530
            this.$overlay.removeClass('is-visible');                                                                   // 7531
          }                                                                                                            // 7532
                                                                                                                       //
          if (this.options.closeOnClick === true && this.options.contentOverlay === true) {                            // 7534
            this.$overlay.removeClass('is-closable');                                                                  // 7535
          }                                                                                                            // 7536
                                                                                                                       //
          this.$triggers.attr('aria-expanded', 'false');                                                               // 7538
                                                                                                                       //
          if (this.options.trapFocus === true) {                                                                       // 7540
            this.$content.removeAttr('tabindex');                                                                      // 7541
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].releaseFocus(this.$element);   // 7542
          } // Listen to transitionEnd and add class when done.                                                        // 7543
                                                                                                                       //
                                                                                                                       //
          this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["c" /* transitionend */])(this.$element), function (e) {
            _this.$element.addClass('is-closed');                                                                      // 7547
                                                                                                                       //
            _this._removeContentClasses();                                                                             // 7548
          });                                                                                                          // 7549
        }                                                                                                              // 7550
                                                                                                                       //
        return close;                                                                                                  // 7505
      }() /**                                                                                                          // 7505
           * Toggles the off-canvas menu open or closed.                                                               //
           * @function                                                                                                 //
           * @param {Object} event - Event object passed from listener.                                                //
           * @param {jQuery} trigger - element that triggered the off-canvas to open.                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7503
      key: 'toggle',                                                                                                   // 7560
      value: function () {                                                                                             // 7561
        function toggle(event, trigger) {                                                                              // 7561
          if (this.$element.hasClass('is-open')) {                                                                     // 7562
            this.close(event, trigger);                                                                                // 7563
          } else {                                                                                                     // 7564
            this.open(event, trigger);                                                                                 // 7565
          }                                                                                                            // 7566
        }                                                                                                              // 7567
                                                                                                                       //
        return toggle;                                                                                                 // 7561
      }() /**                                                                                                          // 7561
           * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 7559
      key: '_handleKeyboard',                                                                                          // 7576
      value: function () {                                                                                             // 7577
        function _handleKeyboard(e) {                                                                                  // 7577
          var _this4 = this;                                                                                           // 7578
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'OffCanvas', {      // 7580
            close: function () {                                                                                       // 7581
              _this4.close();                                                                                          // 7582
                                                                                                                       //
              _this4.$lastTrigger.focus();                                                                             // 7583
                                                                                                                       //
              return true;                                                                                             // 7584
            },                                                                                                         // 7585
            handled: function () {                                                                                     // 7586
              e.stopPropagation();                                                                                     // 7587
              e.preventDefault();                                                                                      // 7588
            }                                                                                                          // 7589
          });                                                                                                          // 7580
        }                                                                                                              // 7591
                                                                                                                       //
        return _handleKeyboard;                                                                                        // 7577
      }() /**                                                                                                          // 7577
           * Destroys the offcanvas plugin.                                                                            //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 7575
      key: '_destroy',                                                                                                 // 7599
      value: function () {                                                                                             // 7600
        function _destroy() {                                                                                          // 7600
          this.close();                                                                                                // 7601
          this.$element.off('.zf.trigger .zf.offcanvas');                                                              // 7602
          this.$overlay.off('.zf.offcanvas');                                                                          // 7603
        }                                                                                                              // 7604
                                                                                                                       //
        return _destroy;                                                                                               // 7600
      }()                                                                                                              // 7600
    }]);                                                                                                               // 7598
                                                                                                                       //
    return OffCanvas;                                                                                                  // 7607
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["a" /* Plugin */]);                                               // 7608
                                                                                                                       //
  OffCanvas.defaults = {                                                                                               // 7610
    /**                                                                                                                // 7611
     * Allow the user to click outside of the menu to close it.                                                        //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */closeOnClick: true,                                                                                             //
    /**                                                                                                                // 7619
     * Adds an overlay on top of `[data-off-canvas-content]`.                                                          //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */contentOverlay: true,                                                                                           //
    /**                                                                                                                // 7627
     * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
     * @option                                                                                                         //
     * @type {?string}                                                                                                 //
     * @default null                                                                                                   //
     */contentId: null,                                                                                                //
    /**                                                                                                                // 7635
     * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default null                                                                                                   //
     */nested: null,                                                                                                   //
    /**                                                                                                                // 7643
     * Enable/disable scrolling of the main content when an off canvas panel is open.                                  //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */contentScroll: true,                                                                                            //
    /**                                                                                                                // 7651
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.           //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default null                                                                                                   //
     */transitionTime: null,                                                                                           //
    /**                                                                                                                // 7659
     * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.                           //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default push                                                                                                   //
     */transition: 'push',                                                                                             //
    /**                                                                                                                // 7667
     * Force the page to scroll to top or bottom on open.                                                              //
     * @option                                                                                                         //
     * @type {?string}                                                                                                 //
     * @default null                                                                                                   //
     */forceTo: null,                                                                                                  //
    /**                                                                                                                // 7675
     * Allow the offcanvas to remain open for certain breakpoints.                                                     //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */isRevealed: false,                                                                                              //
    /**                                                                                                                // 7683
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option                                                                                                         //
     * @type {?string}                                                                                                 //
     * @default null                                                                                                   //
     */revealOn: null,                                                                                                 //
    /**                                                                                                                // 7691
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.                         //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */autoFocus: true,                                                                                                //
    /**                                                                                                                // 7699
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default reveal-for-                                                                                            //
     * @todo improve the regex testing for this.                                                                       //
     */revealClass: 'reveal-for-',                                                                                     //
    /**                                                                                                                // 7708
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */trapFocus: false                                                                                                //
  }; /***/                                                                                                             // 7610
}, /* 27 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 7719
  "use strict"; /* harmony export (binding) */                                                                         // 7723
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 7724
    return Orbit;                                                                                                      // 7724
  }); /* harmony import */                                                                                             // 7724
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 7725
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 7727
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 7728
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__ = __webpack_require__(18); /* harmony import */             // 7729
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__ = __webpack_require__(8); /* harmony import */        // 7730
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 7731
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_6__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 7732
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__ = __webpack_require__(10);                                  // 7733
                                                                                                                       //
  var _createClass = function () {                                                                                     // 7736
    function defineProperties(target, props) {                                                                         // 7736
      for (var i = 0; i < props.length; i++) {                                                                         // 7736
        var descriptor = props[i];                                                                                     // 7736
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 7736
        descriptor.configurable = true;                                                                                // 7736
        if ("value" in descriptor) descriptor.writable = true;                                                         // 7736
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 7736
      }                                                                                                                // 7736
    }                                                                                                                  // 7736
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 7736
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 7736
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 7736
      return Constructor;                                                                                              // 7736
    };                                                                                                                 // 7736
  }();                                                                                                                 // 7736
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 7738
    if (!(instance instanceof Constructor)) {                                                                          // 7738
      throw new TypeError("Cannot call a class as a function");                                                        // 7738
    }                                                                                                                  // 7738
  }                                                                                                                    // 7738
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 7740
    if (!self) {                                                                                                       // 7740
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 7740
    }                                                                                                                  // 7740
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 7740
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 7742
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 7742
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 7742
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 7742
      constructor: {                                                                                                   // 7742
        value: subClass,                                                                                               // 7742
        enumerable: false,                                                                                             // 7742
        writable: true,                                                                                                // 7742
        configurable: true                                                                                             // 7742
      }                                                                                                                // 7742
    });                                                                                                                // 7742
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 7742
     * Orbit module.                                                                                                   //
     * @module foundation.orbit                                                                                        //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.motion                                                                                //
     * @requires foundation.util.timer                                                                                 //
     * @requires foundation.util.imageLoader                                                                           //
     * @requires foundation.util.touch                                                                                 //
     */                                                                                                                //
                                                                                                                       //
  var Orbit = function (_Plugin) {                                                                                     // 7763
    _inherits(Orbit, _Plugin);                                                                                         // 7764
                                                                                                                       //
    function Orbit() {                                                                                                 // 7766
      _classCallCheck(this, Orbit);                                                                                    // 7767
                                                                                                                       //
      return _possibleConstructorReturn(this, (Orbit.__proto__ || Object.getPrototypeOf(Orbit)).apply(this, arguments));
    }                                                                                                                  // 7770
                                                                                                                       //
    _createClass(Orbit, [{                                                                                             // 7772
      key: '_setup',                                                                                                   // 7773
      /**                                                                                                              // 7775
      * Creates a new instance of an orbit carousel.                                                                   //
      * @class                                                                                                         //
      * @name Orbit                                                                                                    //
      * @param {jQuery} element - jQuery object to make into an Orbit Carousel.                                        //
      * @param {Object} options - Overrides to the default plugin settings.                                            //
      */value: function () {                                                                                           //
        function _setup(element, options) {                                                                            // 7782
          this.$element = element;                                                                                     // 7783
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Orbit.defaults, this.$element.data(), options);
          this.className = 'Orbit'; // ie9 back compat                                                                 // 7785
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__["a" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a); // Touch init is idempotent, we just need to make sure it's initialied.
                                                                                                                       //
                                                                                                                       //
          this._init();                                                                                                // 7789
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Orbit', {              // 7791
            'ltr': {                                                                                                   // 7792
              'ARROW_RIGHT': 'next',                                                                                   // 7793
              'ARROW_LEFT': 'previous'                                                                                 // 7794
            },                                                                                                         // 7792
            'rtl': {                                                                                                   // 7796
              'ARROW_LEFT': 'next',                                                                                    // 7797
              'ARROW_RIGHT': 'previous'                                                                                // 7798
            }                                                                                                          // 7796
          });                                                                                                          // 7791
        }                                                                                                              // 7801
                                                                                                                       //
        return _setup;                                                                                                 // 7782
      }() /**                                                                                                          // 7782
          * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.     //
          * @function                                                                                                  //
          * @private                                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 7772
      key: '_init',                                                                                                    // 7810
      value: function () {                                                                                             // 7811
        function _init() {                                                                                             // 7811
          // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide                                 // 7812
          this._reset();                                                                                               // 7813
                                                                                                                       //
          this.$wrapper = this.$element.find('.' + this.options.containerClass);                                       // 7815
          this.$slides = this.$element.find('.' + this.options.slideClass);                                            // 7816
                                                                                                                       //
          var $images = this.$element.find('img'),                                                                     // 7818
              initActive = this.$slides.filter('.is-active'),                                                          // 7818
              id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__foundation_util_core__["b" /* GetYoDigits */])(6, 'orbit');
                                                                                                                       //
          this.$element.attr({                                                                                         // 7822
            'data-resize': id,                                                                                         // 7823
            'id': id                                                                                                   // 7824
          });                                                                                                          // 7822
                                                                                                                       //
          if (!initActive.length) {                                                                                    // 7827
            this.$slides.eq(0).addClass('is-active');                                                                  // 7828
          }                                                                                                            // 7829
                                                                                                                       //
          if (!this.options.useMUI) {                                                                                  // 7831
            this.$slides.addClass('no-motionui');                                                                      // 7832
          }                                                                                                            // 7833
                                                                                                                       //
          if ($images.length) {                                                                                        // 7835
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__["a" /* onImagesLoaded */])($images, this._prepareForOrbit.bind(this));
          } else {                                                                                                     // 7837
            this._prepareForOrbit(); //hehe                                                                            // 7838
                                                                                                                       //
          }                                                                                                            // 7839
                                                                                                                       //
          if (this.options.bullets) {                                                                                  // 7841
            this._loadBullets();                                                                                       // 7842
          }                                                                                                            // 7843
                                                                                                                       //
          this._events();                                                                                              // 7845
                                                                                                                       //
          if (this.options.autoPlay && this.$slides.length > 1) {                                                      // 7847
            this.geoSync();                                                                                            // 7848
          }                                                                                                            // 7849
                                                                                                                       //
          if (this.options.accessible) {                                                                               // 7851
            // allow wrapper to be focusable to enable arrow navigation                                                // 7852
            this.$wrapper.attr('tabindex', 0);                                                                         // 7853
          }                                                                                                            // 7854
        }                                                                                                              // 7855
                                                                                                                       //
        return _init;                                                                                                  // 7811
      }() /**                                                                                                          // 7811
          * Creates a jQuery collection of bullets, if they are being used.                                            //
          * @function                                                                                                  //
          * @private                                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 7809
      key: '_loadBullets',                                                                                             // 7864
      value: function () {                                                                                             // 7865
        function _loadBullets() {                                                                                      // 7865
          this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');                          // 7866
        }                                                                                                              // 7867
                                                                                                                       //
        return _loadBullets;                                                                                           // 7865
      }() /**                                                                                                          // 7865
          * Sets a `timer` object on the orbit, and starts the counter for the next slide.                             //
          * @function                                                                                                  //
          */                                                                                                           //
    }, {                                                                                                               // 7863
      key: 'geoSync',                                                                                                  // 7875
      value: function () {                                                                                             // 7876
        function geoSync() {                                                                                           // 7876
          var _this = this;                                                                                            // 7877
                                                                                                                       //
          this.timer = new __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__["a" /* Timer */](this.$element, {      // 7878
            duration: this.options.timerDelay,                                                                         // 7879
            infinite: false                                                                                            // 7880
          }, function () {                                                                                             // 7878
            _this.changeSlide(true);                                                                                   // 7882
          });                                                                                                          // 7883
          this.timer.start();                                                                                          // 7884
        }                                                                                                              // 7885
                                                                                                                       //
        return geoSync;                                                                                                // 7876
      }() /**                                                                                                          // 7876
          * Sets wrapper and slide heights for the orbit.                                                              //
          * @function                                                                                                  //
          * @private                                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 7874
      key: '_prepareForOrbit',                                                                                         // 7894
      value: function () {                                                                                             // 7895
        function _prepareForOrbit() {                                                                                  // 7895
          var _this = this;                                                                                            // 7896
                                                                                                                       //
          this._setWrapperHeight();                                                                                    // 7897
        }                                                                                                              // 7898
                                                                                                                       //
        return _prepareForOrbit;                                                                                       // 7895
      }() /**                                                                                                          // 7895
          * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.     //
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Function} cb - a callback function to fire when complete.                                          //
          */                                                                                                           //
    }, {                                                                                                               // 7893
      key: '_setWrapperHeight',                                                                                        // 7908
      value: function () {                                                                                             // 7909
        function _setWrapperHeight(cb) {                                                                               // 7909
          //rewrite this to `for` loop                                                                                 // 7910
          var max = 0,                                                                                                 // 7911
              temp,                                                                                                    // 7911
              counter = 0,                                                                                             // 7911
              _this = this;                                                                                            // 7911
                                                                                                                       //
          this.$slides.each(function () {                                                                              // 7916
            temp = this.getBoundingClientRect().height;                                                                // 7917
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('data-slide', counter);                          // 7918
                                                                                                                       //
            if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {                              // 7920
              //if not the active slide, set css position and display property                                         // 7921
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css({                                               // 7922
                'position': 'relative',                                                                                // 7922
                'display': 'none'                                                                                      // 7922
              });                                                                                                      // 7922
            }                                                                                                          // 7923
                                                                                                                       //
            max = temp > max ? temp : max;                                                                             // 7924
            counter++;                                                                                                 // 7925
          });                                                                                                          // 7926
                                                                                                                       //
          if (counter === this.$slides.length) {                                                                       // 7928
            this.$wrapper.css({                                                                                        // 7929
              'height': max                                                                                            // 7929
            }); //only change the wrapper height property once.                                                        // 7929
                                                                                                                       //
            if (cb) {                                                                                                  // 7930
              cb(max);                                                                                                 // 7931
            } //fire callback with max height dimension.                                                               // 7932
                                                                                                                       //
          }                                                                                                            // 7933
        }                                                                                                              // 7934
                                                                                                                       //
        return _setWrapperHeight;                                                                                      // 7909
      }() /**                                                                                                          // 7909
          * Sets the max-height of each slide.                                                                         //
          * @function                                                                                                  //
          * @private                                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 7907
      key: '_setSlideHeight',                                                                                          // 7943
      value: function () {                                                                                             // 7944
        function _setSlideHeight(height) {                                                                             // 7944
          this.$slides.each(function () {                                                                              // 7945
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css('max-height', height);                            // 7946
          });                                                                                                          // 7947
        }                                                                                                              // 7948
                                                                                                                       //
        return _setSlideHeight;                                                                                        // 7944
      }() /**                                                                                                          // 7944
          * Adds event listeners to basically everything within the element.                                           //
          * @function                                                                                                  //
          * @private                                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 7942
      key: '_events',                                                                                                  // 7957
      value: function () {                                                                                             // 7958
        function _events() {                                                                                           // 7958
          var _this = this; //***************************************                                                  // 7959
          //**Now using custom event - thanks to:**                                                                    // 7962
          //**      Yohai Ararat of Toronto      **                                                                    // 7963
          //***************************************                                                                    // 7964
          //                                                                                                           // 7965
                                                                                                                       //
                                                                                                                       //
          this.$element.off('.resizeme.zf.trigger').on({                                                               // 7966
            'resizeme.zf.trigger': this._prepareForOrbit.bind(this)                                                    // 7967
          });                                                                                                          // 7966
                                                                                                                       //
          if (this.$slides.length > 1) {                                                                               // 7969
            if (this.options.swipe) {                                                                                  // 7971
              this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {       // 7972
                e.preventDefault();                                                                                    // 7973
                                                                                                                       //
                _this.changeSlide(true);                                                                               // 7974
              }).on('swiperight.zf.orbit', function (e) {                                                              // 7975
                e.preventDefault();                                                                                    // 7976
                                                                                                                       //
                _this.changeSlide(false);                                                                              // 7977
              });                                                                                                      // 7978
            } //***************************************                                                                // 7979
                                                                                                                       //
                                                                                                                       //
            if (this.options.autoPlay) {                                                                               // 7982
              this.$slides.on('click.zf.orbit', function () {                                                          // 7983
                _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);                     // 7984
                                                                                                                       //
                _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();                                   // 7985
              });                                                                                                      // 7986
                                                                                                                       //
              if (this.options.pauseOnHover) {                                                                         // 7988
                this.$element.on('mouseenter.zf.orbit', function () {                                                  // 7989
                  _this.timer.pause();                                                                                 // 7990
                }).on('mouseleave.zf.orbit', function () {                                                             // 7991
                  if (!_this.$element.data('clickedOn')) {                                                             // 7992
                    _this.timer.start();                                                                               // 7993
                  }                                                                                                    // 7994
                });                                                                                                    // 7995
              }                                                                                                        // 7996
            }                                                                                                          // 7997
                                                                                                                       //
            if (this.options.navButtons) {                                                                             // 7999
              var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);       // 8000
              $controls.attr('tabindex', 0) //also need to handle enter/return and spacebar key presses                // 8001
              .on('click.zf.orbit touchend.zf.orbit', function (e) {                                                   // 8001
                e.preventDefault();                                                                                    // 8004
                                                                                                                       //
                _this.changeSlide(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass(_this.options.nextClass));
              });                                                                                                      // 8006
            }                                                                                                          // 8007
                                                                                                                       //
            if (this.options.bullets) {                                                                                // 8009
              this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {                                       // 8010
                if (/is-active/g.test(this.className)) {                                                               // 8011
                  return false;                                                                                        // 8012
                } //if this is active, kick out of function.                                                           // 8013
                                                                                                                       //
                                                                                                                       //
                var idx = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('slide'),                          // 8014
                    ltr = idx > _this.$slides.filter('.is-active').data('slide'),                                      // 8014
                    $slide = _this.$slides.eq(idx);                                                                    // 8014
                                                                                                                       //
                _this.changeSlide(ltr, $slide, idx);                                                                   // 8018
              });                                                                                                      // 8019
            }                                                                                                          // 8020
                                                                                                                       //
            if (this.options.accessible) {                                                                             // 8022
              this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {                                   // 8023
                // handle keyboard event with keyboard util                                                            // 8024
                __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Orbit', {    // 8025
                  next: function () {                                                                                  // 8026
                    _this.changeSlide(true);                                                                           // 8027
                  },                                                                                                   // 8028
                  previous: function () {                                                                              // 8029
                    _this.changeSlide(false);                                                                          // 8030
                  },                                                                                                   // 8031
                  handled: function () {                                                                               // 8032
                    // if bullet is focused, make sure focus moves                                                     // 8033
                    if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is(_this.$bullets)) {                 // 8034
                      _this.$bullets.filter('.is-active').focus();                                                     // 8035
                    }                                                                                                  // 8036
                  }                                                                                                    // 8037
                });                                                                                                    // 8025
              });                                                                                                      // 8039
            }                                                                                                          // 8040
          }                                                                                                            // 8041
        }                                                                                                              // 8042
                                                                                                                       //
        return _events;                                                                                                // 7958
      }() /**                                                                                                          // 7958
           * Resets Orbit so it can be reinitialized                                                                   //
           */                                                                                                          //
    }, {                                                                                                               // 7956
      key: '_reset',                                                                                                   // 8049
      value: function () {                                                                                             // 8050
        function _reset() {                                                                                            // 8050
          // Don't do anything if there are no slides (first run)                                                      // 8051
          if (typeof this.$slides == 'undefined') {                                                                    // 8052
            return;                                                                                                    // 8053
          }                                                                                                            // 8054
                                                                                                                       //
          if (this.$slides.length > 1) {                                                                               // 8056
            // Remove old events                                                                                       // 8057
            this.$element.off('.zf.orbit').find('*').off('.zf.orbit'); // Restart timer if autoPlay is enabled         // 8058
                                                                                                                       //
            if (this.options.autoPlay) {                                                                               // 8061
              this.timer.restart();                                                                                    // 8062
            } // Reset all sliddes                                                                                     // 8063
                                                                                                                       //
                                                                                                                       //
            this.$slides.each(function (el) {                                                                          // 8066
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
            }); // Show the first slide                                                                                // 8068
                                                                                                                       //
            this.$slides.first().addClass('is-active').show(); // Triggers when the slide has finished animating       // 8071
                                                                                                                       //
            this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]); // Select first bullet if bullets are present
                                                                                                                       //
            if (this.options.bullets) {                                                                                // 8077
              this._updateBullets(0);                                                                                  // 8078
            }                                                                                                          // 8079
          }                                                                                                            // 8080
        }                                                                                                              // 8081
                                                                                                                       //
        return _reset;                                                                                                 // 8050
      }() /**                                                                                                          // 8050
          * Changes the current slide to a new one.                                                                    //
          * @function                                                                                                  //
          * @param {Boolean} isLTR - flag if the slide should move left to right.                                      //
          * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.            //
          * @param {Number} idx - the index of the new slide in its collection, if one chosen.                         //
          * @fires Orbit#slidechange                                                                                   //
          */                                                                                                           //
    }, {                                                                                                               // 8048
      key: 'changeSlide',                                                                                              // 8093
      value: function () {                                                                                             // 8094
        function changeSlide(isLTR, chosenSlide, idx) {                                                                // 8094
          if (!this.$slides) {                                                                                         // 8095
            return;                                                                                                    // 8096
          } // Don't freak out if we're in the middle of cleanup                                                       // 8097
                                                                                                                       //
                                                                                                                       //
          var $curSlide = this.$slides.filter('.is-active').eq(0);                                                     // 8098
                                                                                                                       //
          if (/mui/g.test($curSlide[0].className)) {                                                                   // 8100
            return false;                                                                                              // 8101
          } //if the slide is currently animating, kick out of the function                                            // 8102
                                                                                                                       //
                                                                                                                       //
          var $firstSlide = this.$slides.first(),                                                                      // 8104
              $lastSlide = this.$slides.last(),                                                                        // 8104
              dirIn = isLTR ? 'Right' : 'Left',                                                                        // 8104
              dirOut = isLTR ? 'Left' : 'Right',                                                                       // 8104
              _this = this,                                                                                            // 8104
              $newSlide;                                                                                               // 8104
                                                                                                                       //
          if (!chosenSlide) {                                                                                          // 8111
            //most of the time, this will be auto played or clicked from the navButtons.                               // 8112
            $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
            this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
            this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
          } else {                                                                                                     // 8116
            $newSlide = chosenSlide;                                                                                   // 8117
          }                                                                                                            // 8118
                                                                                                                       //
          if ($newSlide.length) {                                                                                      // 8120
            /**                                                                                                        // 8121
            * Triggers before the next slide starts animating in and only if a next slide has been found.              //
            * @event Orbit#beforeslidechange                                                                           //
            */this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);                             //
                                                                                                                       //
            if (this.options.bullets) {                                                                                // 8127
              idx = idx || this.$slides.index($newSlide); //grab index to update bullets                               // 8128
                                                                                                                       //
              this._updateBullets(idx);                                                                                // 8129
            }                                                                                                          // 8130
                                                                                                                       //
            if (this.options.useMUI && !this.$element.is(':hidden')) {                                                 // 8132
              __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["a" /* Motion */].animateIn($newSlide.addClass('is-active').css({
                'position': 'absolute',                                                                                // 8133
                'top': 0                                                                                               // 8133
              }), this.options['animInFrom' + dirIn], function () {                                                    // 8133
                $newSlide.css({                                                                                        // 8134
                  'position': 'relative',                                                                              // 8134
                  'display': 'block'                                                                                   // 8134
                }).attr('aria-live', 'polite');                                                                        // 8134
              });                                                                                                      // 8135
                                                                                                                       //
              __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["a" /* Motion */].animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
                $curSlide.removeAttr('aria-live');                                                                     // 8138
                                                                                                                       //
                if (_this.options.autoPlay && !_this.timer.isPaused) {                                                 // 8139
                  _this.timer.restart();                                                                               // 8140
                } //do stuff?                                                                                          // 8141
                                                                                                                       //
              });                                                                                                      // 8143
            } else {                                                                                                   // 8144
              $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();                                 // 8145
              $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();                                // 8146
                                                                                                                       //
              if (this.options.autoPlay && !this.timer.isPaused) {                                                     // 8147
                this.timer.restart();                                                                                  // 8148
              }                                                                                                        // 8149
            } /**                                                                                                      // 8150
              * Triggers when the slide has finished animating in.                                                     //
              * @event Orbit#slidechange                                                                               //
              */                                                                                                       //
                                                                                                                       //
            this.$element.trigger('slidechange.zf.orbit', [$newSlide]);                                                // 8155
          }                                                                                                            // 8156
        }                                                                                                              // 8157
                                                                                                                       //
        return changeSlide;                                                                                            // 8094
      }() /**                                                                                                          // 8094
          * Updates the active state of the bullets, if displayed.                                                     //
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Number} idx - the index of the current slide.                                                      //
          */                                                                                                           //
    }, {                                                                                                               // 8092
      key: '_updateBullets',                                                                                           // 8167
      value: function () {                                                                                             // 8168
        function _updateBullets(idx) {                                                                                 // 8168
          var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
              span = $oldBullet.find('span:last').detach(),                                                            // 8169
              $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);                                   // 8169
        }                                                                                                              // 8172
                                                                                                                       //
        return _updateBullets;                                                                                         // 8168
      }() /**                                                                                                          // 8168
          * Destroys the carousel and hides the element.                                                               //
          * @function                                                                                                  //
          */                                                                                                           //
    }, {                                                                                                               // 8166
      key: '_destroy',                                                                                                 // 8180
      value: function () {                                                                                             // 8181
        function _destroy() {                                                                                          // 8181
          this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();                                      // 8182
        }                                                                                                              // 8183
                                                                                                                       //
        return _destroy;                                                                                               // 8181
      }()                                                                                                              // 8181
    }]);                                                                                                               // 8179
                                                                                                                       //
    return Orbit;                                                                                                      // 8186
  }(__WEBPACK_IMPORTED_MODULE_6__foundation_plugin__["a" /* Plugin */]);                                               // 8187
                                                                                                                       //
  Orbit.defaults = {                                                                                                   // 8189
    /**                                                                                                                // 8190
    * Tells the JS to look for and loadBullets.                                                                        //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */bullets: true,                                                                                                   //
    /**                                                                                                                // 8197
    * Tells the JS to apply event listeners to nav buttons                                                             //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */navButtons: true,                                                                                                //
    /**                                                                                                                // 8204
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'slide-in-right'                                                                                        //
    */animInFromRight: 'slide-in-right',                                                                               //
    /**                                                                                                                // 8211
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'slide-out-right'                                                                                       //
    */animOutToRight: 'slide-out-right',                                                                               //
    /**                                                                                                                // 8218
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'slide-in-left'                                                                                         //
    *                                                                                                                  //
    */animInFromLeft: 'slide-in-left',                                                                                 //
    /**                                                                                                                // 8226
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'slide-out-left'                                                                                        //
    */animOutToLeft: 'slide-out-left',                                                                                 //
    /**                                                                                                                // 8233
    * Allows Orbit to automatically animate on page load.                                                              //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */autoPlay: true,                                                                                                  //
    /**                                                                                                                // 8240
    * Amount of time, in ms, between slide transitions                                                                 //
    * @option                                                                                                          //
     * @type {number}                                                                                                  //
    * @default 5000                                                                                                    //
    */timerDelay: 5000,                                                                                                //
    /**                                                                                                                // 8247
    * Allows Orbit to infinitely loop through the slides                                                               //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */infiniteWrap: true,                                                                                              //
    /**                                                                                                                // 8254
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library                  //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */swipe: true,                                                                                                     //
    /**                                                                                                                // 8261
    * Allows the timing function to pause animation on hover.                                                          //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */pauseOnHover: true,                                                                                              //
    /**                                                                                                                // 8268
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys                            //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */accessible: true,                                                                                                //
    /**                                                                                                                // 8275
    * Class applied to the container of Orbit                                                                          //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'orbit-container'                                                                                       //
    */containerClass: 'orbit-container',                                                                               //
    /**                                                                                                                // 8282
    * Class applied to individual slides.                                                                              //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'orbit-slide'                                                                                           //
    */slideClass: 'orbit-slide',                                                                                       //
    /**                                                                                                                // 8289
    * Class applied to the bullet container. You're welcome.                                                           //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'orbit-bullets'                                                                                         //
    */boxOfBullets: 'orbit-bullets',                                                                                   //
    /**                                                                                                                // 8296
    * Class applied to the `next` navigation button.                                                                   //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'orbit-next'                                                                                            //
    */nextClass: 'orbit-next',                                                                                         //
    /**                                                                                                                // 8303
    * Class applied to the `previous` navigation button.                                                               //
    * @option                                                                                                          //
     * @type {string}                                                                                                  //
    * @default 'orbit-previous'                                                                                        //
    */prevClass: 'orbit-previous',                                                                                     //
    /**                                                                                                                // 8310
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.             //
    * @option                                                                                                          //
     * @type {boolean}                                                                                                 //
    * @default true                                                                                                    //
    */useMUI: true                                                                                                     //
  }; /***/                                                                                                             // 8189
}, /* 28 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 8321
  "use strict"; /* harmony export (binding) */                                                                         // 8325
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 8326
    return ResponsiveAccordionTabs;                                                                                    // 8326
  }); /* harmony import */                                                                                             // 8326
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 8327
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 8329
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 8330
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 8331
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__ = __webpack_require__(11); /* harmony import */              // 8332
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__ = __webpack_require__(17);                                        // 8333
                                                                                                                       //
  var _createClass = function () {                                                                                     // 8336
    function defineProperties(target, props) {                                                                         // 8336
      for (var i = 0; i < props.length; i++) {                                                                         // 8336
        var descriptor = props[i];                                                                                     // 8336
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 8336
        descriptor.configurable = true;                                                                                // 8336
        if ("value" in descriptor) descriptor.writable = true;                                                         // 8336
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 8336
      }                                                                                                                // 8336
    }                                                                                                                  // 8336
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 8336
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 8336
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 8336
      return Constructor;                                                                                              // 8336
    };                                                                                                                 // 8336
  }();                                                                                                                 // 8336
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 8338
    if (!(instance instanceof Constructor)) {                                                                          // 8338
      throw new TypeError("Cannot call a class as a function");                                                        // 8338
    }                                                                                                                  // 8338
  }                                                                                                                    // 8338
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 8340
    if (!self) {                                                                                                       // 8340
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 8340
    }                                                                                                                  // 8340
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 8340
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 8342
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 8342
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 8342
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 8342
      constructor: {                                                                                                   // 8342
        value: subClass,                                                                                               // 8342
        enumerable: false,                                                                                             // 8342
        writable: true,                                                                                                // 8342
        configurable: true                                                                                             // 8342
      }                                                                                                                // 8342
    });                                                                                                                // 8342
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } // The plugin matches the plugin classes with these plugin instances.                                              // 8342
                                                                                                                       //
                                                                                                                       //
  var MenuPlugins = {                                                                                                  // 8353
    tabs: {                                                                                                            // 8354
      cssClass: 'tabs',                                                                                                // 8355
      plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__["a" /* Tabs */]                                           // 8356
    },                                                                                                                 // 8354
    accordion: {                                                                                                       // 8358
      cssClass: 'accordion',                                                                                           // 8359
      plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__["a" /* Accordion */]                                 // 8360
    }                                                                                                                  // 8358
  }; /**                                                                                                               // 8353
      * ResponsiveAccordionTabs module.                                                                                //
      * @module foundation.responsiveAccordionTabs                                                                     //
      * @requires foundation.util.motion                                                                               //
      * @requires foundation.accordion                                                                                 //
      * @requires foundation.tabs                                                                                      //
      */                                                                                                               //
                                                                                                                       //
  var ResponsiveAccordionTabs = function (_Plugin) {                                                                   // 8372
    _inherits(ResponsiveAccordionTabs, _Plugin);                                                                       // 8373
                                                                                                                       //
    function ResponsiveAccordionTabs() {                                                                               // 8375
      _classCallCheck(this, ResponsiveAccordionTabs);                                                                  // 8376
                                                                                                                       //
      return _possibleConstructorReturn(this, (ResponsiveAccordionTabs.__proto__ || Object.getPrototypeOf(ResponsiveAccordionTabs)).apply(this, arguments));
    }                                                                                                                  // 8379
                                                                                                                       //
    _createClass(ResponsiveAccordionTabs, [{                                                                           // 8381
      key: '_setup',                                                                                                   // 8382
      /**                                                                                                              // 8384
       * Creates a new instance of a responsive accordion tabs.                                                        //
       * @class                                                                                                        //
       * @name ResponsiveAccordionTabs                                                                                 //
       * @fires ResponsiveAccordionTabs#init                                                                           //
       * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.                               //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 8392
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);                                     // 8393
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.$element.data(), options);     // 8394
          this.rules = this.$element.data('responsive-accordion-tabs');                                                // 8395
          this.currentMq = null;                                                                                       // 8396
          this.currentPlugin = null;                                                                                   // 8397
          this.className = 'ResponsiveAccordionTabs'; // ie9 back compat                                               // 8398
                                                                                                                       //
          if (!this.$element.attr('id')) {                                                                             // 8399
            this.$element.attr('id', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */])(6, 'responsiveaccordiontabs'));
          }                                                                                                            // 8401
                                                                                                                       //
          ;                                                                                                            // 8401
                                                                                                                       //
          this._init();                                                                                                // 8403
                                                                                                                       //
          this._events();                                                                                              // 8404
        }                                                                                                              // 8405
                                                                                                                       //
        return _setup;                                                                                                 // 8392
      }() /**                                                                                                          // 8392
           * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8381
      key: '_init',                                                                                                    // 8414
      value: function () {                                                                                             // 8415
        function _init() {                                                                                             // 8415
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */]._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
                                                                                                                       //
                                                                                                                       //
          if (typeof this.rules === 'string') {                                                                        // 8419
            var rulesTree = {}; // Parse rules from "classes" pulled from data attribute                               // 8420
                                                                                                                       //
            var rules = this.rules.split(' '); // Iterate through every rule found                                     // 8423
                                                                                                                       //
            for (var i = 0; i < rules.length; i++) {                                                                   // 8426
              var rule = rules[i].split('-');                                                                          // 8427
              var ruleSize = rule.length > 1 ? rule[0] : 'small';                                                      // 8428
              var rulePlugin = rule.length > 1 ? rule[1] : rule[0];                                                    // 8429
                                                                                                                       //
              if (MenuPlugins[rulePlugin] !== null) {                                                                  // 8431
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];                                                         // 8432
              }                                                                                                        // 8433
            }                                                                                                          // 8434
                                                                                                                       //
            this.rules = rulesTree;                                                                                    // 8436
          }                                                                                                            // 8437
                                                                                                                       //
          this._getAllOptions();                                                                                       // 8439
                                                                                                                       //
          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {                             // 8441
            this._checkMediaQueries();                                                                                 // 8442
          }                                                                                                            // 8443
        }                                                                                                              // 8444
                                                                                                                       //
        return _init;                                                                                                  // 8415
      }()                                                                                                              // 8415
    }, {                                                                                                               // 8413
      key: '_getAllOptions',                                                                                           // 8446
      value: function () {                                                                                             // 8447
        function _getAllOptions() {                                                                                    // 8447
          //get all defaults and options                                                                               // 8448
          var _this = this;                                                                                            // 8449
                                                                                                                       //
          _this.allOptions = {};                                                                                       // 8450
                                                                                                                       //
          for (var key in meteorBabelHelpers.sanitizeForInObject(MenuPlugins)) {                                       // 8451
            if (MenuPlugins.hasOwnProperty(key)) {                                                                     // 8452
              var obj = MenuPlugins[key];                                                                              // 8453
                                                                                                                       //
              try {                                                                                                    // 8454
                var dummyPlugin = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<ul></ul>');                         // 8455
                                                                                                                       //
                var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);                                            // 8456
                                                                                                                       //
                for (var keyKey in meteorBabelHelpers.sanitizeForInObject(tmpPlugin.options)) {                        // 8457
                  if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {                             // 8458
                    var objObj = tmpPlugin.options[keyKey];                                                            // 8459
                    _this.allOptions[keyKey] = objObj;                                                                 // 8460
                  }                                                                                                    // 8461
                }                                                                                                      // 8462
                                                                                                                       //
                tmpPlugin.destroy();                                                                                   // 8463
              } catch (e) {}                                                                                           // 8464
            }                                                                                                          // 8465
          }                                                                                                            // 8466
        }                                                                                                              // 8467
                                                                                                                       //
        return _getAllOptions;                                                                                         // 8447
      }() /**                                                                                                          // 8447
           * Initializes events for the Menu.                                                                          //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8445
      key: '_events',                                                                                                  // 8476
      value: function () {                                                                                             // 8477
        function _events() {                                                                                           // 8477
          var _this = this;                                                                                            // 8478
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {             // 8480
            _this._checkMediaQueries();                                                                                // 8481
          });                                                                                                          // 8482
        }                                                                                                              // 8483
                                                                                                                       //
        return _events;                                                                                                // 8477
      }() /**                                                                                                          // 8477
           * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8475
      key: '_checkMediaQueries',                                                                                       // 8492
      value: function () {                                                                                             // 8493
        function _checkMediaQueries() {                                                                                // 8493
          var matchedMq,                                                                                               // 8494
              _this = this; // Iterate through each rule and find the last matching rule                               // 8494
                                                                                                                       //
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {                             // 8497
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(key)) {        // 8498
              matchedMq = key;                                                                                         // 8499
            }                                                                                                          // 8500
          }); // No match? No dice                                                                                     // 8501
                                                                                                                       //
                                                                                                                       //
          if (!matchedMq) return; // Plugin already initialized? We good                                               // 8504
                                                                                                                       //
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {                     // 8510
            _this.$element.removeClass(value.cssClass);                                                                // 8511
          }); // Add the CSS class for the new plugin                                                                  // 8512
                                                                                                                       //
                                                                                                                       //
          this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin              // 8515
                                                                                                                       //
          if (this.currentPlugin) {                                                                                    // 8518
            //don't know why but on nested elements data zfPlugin get's lost                                           // 8519
            if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
            this.currentPlugin.destroy();                                                                              // 8521
          }                                                                                                            // 8522
                                                                                                                       //
          this._handleMarkup(this.rules[matchedMq].cssClass);                                                          // 8523
                                                                                                                       //
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});                                    // 8524
          this.storezfData = this.currentPlugin.$element.data('zfPlugin');                                             // 8525
        }                                                                                                              // 8526
                                                                                                                       //
        return _checkMediaQueries;                                                                                     // 8493
      }()                                                                                                              // 8493
    }, {                                                                                                               // 8491
      key: '_handleMarkup',                                                                                            // 8528
      value: function () {                                                                                             // 8529
        function _handleMarkup(toSet) {                                                                                // 8529
          var _this = this,                                                                                            // 8530
              fromString = 'accordion';                                                                                // 8530
                                                                                                                       //
          var $panels = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + this.$element.attr('id') + ']');
                                                                                                                       //
          if ($panels.length) fromString = 'tabs';                                                                     // 8533
                                                                                                                       //
          if (fromString === toSet) {                                                                                  // 8534
            return;                                                                                                    // 8535
          }                                                                                                            // 8536
                                                                                                                       //
          ;                                                                                                            // 8536
          var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';                      // 8538
          var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';                    // 8539
          this.$element.removeAttr('role');                                                                            // 8541
          var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
          var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');                                       // 8543
                                                                                                                       //
          if (fromString === 'tabs') {                                                                                 // 8545
            $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
            $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');          // 8547
          } else {                                                                                                     // 8548
            $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');                        // 8549
          }                                                                                                            // 8550
                                                                                                                       //
          ;                                                                                                            // 8550
          $panels.css({                                                                                                // 8552
            display: '',                                                                                               // 8552
            visibility: ''                                                                                             // 8552
          });                                                                                                          // 8552
          $liHeads.css({                                                                                               // 8553
            display: '',                                                                                               // 8553
            visibility: ''                                                                                             // 8553
          });                                                                                                          // 8553
                                                                                                                       //
          if (toSet === 'accordion') {                                                                                 // 8554
            $panels.each(function (key, value) {                                                                       // 8555
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({
                height: ''                                                                                             // 8556
              });                                                                                                      // 8556
                                                                                                                       //
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').detach();
                                                                                                                       //
              $liHeads.addClass('accordion-item').attr('data-accordion-item', '');                                     // 8558
              $liHeadsA.addClass('accordion-title');                                                                   // 8559
            });                                                                                                        // 8560
          } else if (toSet === 'tabs') {                                                                               // 8561
            var $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']');
                                                                                                                       //
            var $placeholder = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#tabs-placeholder-' + _this.$element.attr('id'));
                                                                                                                       //
            if ($placeholder.length) {                                                                                 // 8564
              $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
              $placeholder.remove();                                                                                   // 8566
            } else {                                                                                                   // 8567
              $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
            }                                                                                                          // 8569
                                                                                                                       //
            ;                                                                                                          // 8569
            $panels.each(function (key, value) {                                                                       // 8570
              var tempValue = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($tabsContent).addClass(tabsPanel);
                                                                                                                       //
              var hash = $liHeadsA.get(key).hash.slice(1);                                                             // 8572
                                                                                                                       //
              var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */])(6, 'accordion');
                                                                                                                       //
              if (hash !== id) {                                                                                       // 8574
                if (hash !== '') {                                                                                     // 8575
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);                              // 8576
                } else {                                                                                               // 8577
                  hash = id;                                                                                           // 8578
                                                                                                                       //
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);                              // 8579
                                                                                                                       //
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href', __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
                }                                                                                                      // 8581
                                                                                                                       //
                ;                                                                                                      // 8581
              }                                                                                                        // 8582
                                                                                                                       //
              ;                                                                                                        // 8582
                                                                                                                       //
              var isActive = __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeads.get(key)).hasClass('is-active');  // 8583
                                                                                                                       //
              if (isActive) {                                                                                          // 8584
                tempValue.addClass('is-active');                                                                       // 8585
              }                                                                                                        // 8586
                                                                                                                       //
              ;                                                                                                        // 8586
            });                                                                                                        // 8587
            $liHeads.addClass(tabsTitle);                                                                              // 8588
          }                                                                                                            // 8589
                                                                                                                       //
          ;                                                                                                            // 8589
        }                                                                                                              // 8590
                                                                                                                       //
        return _handleMarkup;                                                                                          // 8529
      }() /**                                                                                                          // 8529
           * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 8527
      key: '_destroy',                                                                                                 // 8598
      value: function () {                                                                                             // 8599
        function _destroy() {                                                                                          // 8599
          if (this.currentPlugin) this.currentPlugin.destroy();                                                        // 8600
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveAccordionTabs');                   // 8601
        }                                                                                                              // 8602
                                                                                                                       //
        return _destroy;                                                                                               // 8599
      }()                                                                                                              // 8599
    }]);                                                                                                               // 8597
                                                                                                                       //
    return ResponsiveAccordionTabs;                                                                                    // 8605
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 8606
                                                                                                                       //
  ResponsiveAccordionTabs.defaults = {}; /***/                                                                         // 8608
}, /* 29 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 8612
  "use strict"; /* harmony export (binding) */                                                                         // 8616
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 8617
    return ResponsiveMenu;                                                                                             // 8617
  }); /* harmony import */                                                                                             // 8617
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 8618
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 8620
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 8621
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 8622
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__ = __webpack_require__(14); /* harmony import */           // 8623
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__ = __webpack_require__(13); /* harmony import */              // 8624
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__ = __webpack_require__(12);                               // 8625
                                                                                                                       //
  var _createClass = function () {                                                                                     // 8628
    function defineProperties(target, props) {                                                                         // 8628
      for (var i = 0; i < props.length; i++) {                                                                         // 8628
        var descriptor = props[i];                                                                                     // 8628
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 8628
        descriptor.configurable = true;                                                                                // 8628
        if ("value" in descriptor) descriptor.writable = true;                                                         // 8628
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 8628
      }                                                                                                                // 8628
    }                                                                                                                  // 8628
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 8628
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 8628
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 8628
      return Constructor;                                                                                              // 8628
    };                                                                                                                 // 8628
  }();                                                                                                                 // 8628
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 8630
    if (!(instance instanceof Constructor)) {                                                                          // 8630
      throw new TypeError("Cannot call a class as a function");                                                        // 8630
    }                                                                                                                  // 8630
  }                                                                                                                    // 8630
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 8632
    if (!self) {                                                                                                       // 8632
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 8632
    }                                                                                                                  // 8632
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 8632
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 8634
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 8634
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 8634
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 8634
      constructor: {                                                                                                   // 8634
        value: subClass,                                                                                               // 8634
        enumerable: false,                                                                                             // 8634
        writable: true,                                                                                                // 8634
        configurable: true                                                                                             // 8634
      }                                                                                                                // 8634
    });                                                                                                                // 8634
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }                                                                                                                    // 8634
                                                                                                                       //
  var MenuPlugins = {                                                                                                  // 8646
    dropdown: {                                                                                                        // 8647
      cssClass: 'dropdown',                                                                                            // 8648
      plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__["a" /* DropdownMenu */]                           // 8649
    },                                                                                                                 // 8647
    drilldown: {                                                                                                       // 8651
      cssClass: 'drilldown',                                                                                           // 8652
      plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__["a" /* Drilldown */]                                 // 8653
    },                                                                                                                 // 8651
    accordion: {                                                                                                       // 8655
      cssClass: 'accordion-menu',                                                                                      // 8656
      plugin: __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__["a" /* AccordionMenu */]                         // 8657
    }                                                                                                                  // 8655
  }; // import "foundation.util.triggers.js";                                                                          // 8646
  /**                                                                                                                  // 8664
   * ResponsiveMenu module.                                                                                            //
   * @module foundation.responsiveMenu                                                                                 //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var ResponsiveMenu = function (_Plugin) {                                                                            // 8671
    _inherits(ResponsiveMenu, _Plugin);                                                                                // 8672
                                                                                                                       //
    function ResponsiveMenu() {                                                                                        // 8674
      _classCallCheck(this, ResponsiveMenu);                                                                           // 8675
                                                                                                                       //
      return _possibleConstructorReturn(this, (ResponsiveMenu.__proto__ || Object.getPrototypeOf(ResponsiveMenu)).apply(this, arguments));
    }                                                                                                                  // 8678
                                                                                                                       //
    _createClass(ResponsiveMenu, [{                                                                                    // 8680
      key: '_setup',                                                                                                   // 8681
      /**                                                                                                              // 8683
       * Creates a new instance of a responsive menu.                                                                  //
       * @class                                                                                                        //
       * @name ResponsiveMenu                                                                                          //
       * @fires ResponsiveMenu#init                                                                                    //
       * @param {jQuery} element - jQuery object to make into a dropdown menu.                                         //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 8691
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);                                     // 8692
          this.rules = this.$element.data('responsive-menu');                                                          // 8693
          this.currentMq = null;                                                                                       // 8694
          this.currentPlugin = null;                                                                                   // 8695
          this.className = 'ResponsiveMenu'; // ie9 back compat                                                        // 8696
                                                                                                                       //
          this._init();                                                                                                // 8698
                                                                                                                       //
          this._events();                                                                                              // 8699
        }                                                                                                              // 8700
                                                                                                                       //
        return _setup;                                                                                                 // 8691
      }() /**                                                                                                          // 8691
           * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.      //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8680
      key: '_init',                                                                                                    // 8709
      value: function () {                                                                                             // 8710
        function _init() {                                                                                             // 8710
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */]._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
                                                                                                                       //
                                                                                                                       //
          if (typeof this.rules === 'string') {                                                                        // 8714
            var rulesTree = {}; // Parse rules from "classes" pulled from data attribute                               // 8715
                                                                                                                       //
            var rules = this.rules.split(' '); // Iterate through every rule found                                     // 8718
                                                                                                                       //
            for (var i = 0; i < rules.length; i++) {                                                                   // 8721
              var rule = rules[i].split('-');                                                                          // 8722
              var ruleSize = rule.length > 1 ? rule[0] : 'small';                                                      // 8723
              var rulePlugin = rule.length > 1 ? rule[1] : rule[0];                                                    // 8724
                                                                                                                       //
              if (MenuPlugins[rulePlugin] !== null) {                                                                  // 8726
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];                                                         // 8727
              }                                                                                                        // 8728
            }                                                                                                          // 8729
                                                                                                                       //
            this.rules = rulesTree;                                                                                    // 8731
          }                                                                                                            // 8732
                                                                                                                       //
          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {                             // 8734
            this._checkMediaQueries();                                                                                 // 8735
          } // Add data-mutate since children may need it.                                                             // 8736
                                                                                                                       //
                                                                                                                       //
          this.$element.attr('data-mutate', this.$element.attr('data-mutate') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */])(6, 'responsive-menu'));
        }                                                                                                              // 8739
                                                                                                                       //
        return _init;                                                                                                  // 8710
      }() /**                                                                                                          // 8710
           * Initializes events for the Menu.                                                                          //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8708
      key: '_events',                                                                                                  // 8748
      value: function () {                                                                                             // 8749
        function _events() {                                                                                           // 8749
          var _this = this;                                                                                            // 8750
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {             // 8752
            _this._checkMediaQueries();                                                                                // 8753
          }); // $(window).on('resize.zf.ResponsiveMenu', function() {                                                 // 8754
          //   _this._checkMediaQueries();                                                                             // 8756
          // });                                                                                                       // 8757
                                                                                                                       //
        }                                                                                                              // 8758
                                                                                                                       //
        return _events;                                                                                                // 8749
      }() /**                                                                                                          // 8749
           * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8747
      key: '_checkMediaQueries',                                                                                       // 8767
      value: function () {                                                                                             // 8768
        function _checkMediaQueries() {                                                                                // 8768
          var matchedMq,                                                                                               // 8769
              _this = this; // Iterate through each rule and find the last matching rule                               // 8769
                                                                                                                       //
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {                             // 8772
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(key)) {        // 8773
              matchedMq = key;                                                                                         // 8774
            }                                                                                                          // 8775
          }); // No match? No dice                                                                                     // 8776
                                                                                                                       //
                                                                                                                       //
          if (!matchedMq) return; // Plugin already initialized? We good                                               // 8779
                                                                                                                       //
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {                     // 8785
            _this.$element.removeClass(value.cssClass);                                                                // 8786
          }); // Add the CSS class for the new plugin                                                                  // 8787
                                                                                                                       //
                                                                                                                       //
          this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin              // 8790
                                                                                                                       //
          if (this.currentPlugin) this.currentPlugin.destroy();                                                        // 8793
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});                                    // 8794
        }                                                                                                              // 8795
                                                                                                                       //
        return _checkMediaQueries;                                                                                     // 8768
      }() /**                                                                                                          // 8768
           * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 8766
      key: '_destroy',                                                                                                 // 8803
      value: function () {                                                                                             // 8804
        function _destroy() {                                                                                          // 8804
          this.currentPlugin.destroy();                                                                                // 8805
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveMenu');                            // 8806
        }                                                                                                              // 8807
                                                                                                                       //
        return _destroy;                                                                                               // 8804
      }()                                                                                                              // 8804
    }]);                                                                                                               // 8802
                                                                                                                       //
    return ResponsiveMenu;                                                                                             // 8810
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 8811
                                                                                                                       //
  ResponsiveMenu.defaults = {}; /***/                                                                                  // 8813
}, /* 30 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 8817
  "use strict"; /* harmony export (binding) */                                                                         // 8821
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 8822
    return ResponsiveToggle;                                                                                           // 8822
  }); /* harmony import */                                                                                             // 8822
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 8823
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 8825
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 8826
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);                                       // 8827
                                                                                                                       //
  var _createClass = function () {                                                                                     // 8830
    function defineProperties(target, props) {                                                                         // 8830
      for (var i = 0; i < props.length; i++) {                                                                         // 8830
        var descriptor = props[i];                                                                                     // 8830
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 8830
        descriptor.configurable = true;                                                                                // 8830
        if ("value" in descriptor) descriptor.writable = true;                                                         // 8830
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 8830
      }                                                                                                                // 8830
    }                                                                                                                  // 8830
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 8830
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 8830
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 8830
      return Constructor;                                                                                              // 8830
    };                                                                                                                 // 8830
  }();                                                                                                                 // 8830
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 8832
    if (!(instance instanceof Constructor)) {                                                                          // 8832
      throw new TypeError("Cannot call a class as a function");                                                        // 8832
    }                                                                                                                  // 8832
  }                                                                                                                    // 8832
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 8834
    if (!self) {                                                                                                       // 8834
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 8834
    }                                                                                                                  // 8834
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 8834
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 8836
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 8836
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 8836
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 8836
      constructor: {                                                                                                   // 8836
        value: subClass,                                                                                               // 8836
        enumerable: false,                                                                                             // 8836
        writable: true,                                                                                                // 8836
        configurable: true                                                                                             // 8836
      }                                                                                                                // 8836
    });                                                                                                                // 8836
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 8836
     * ResponsiveToggle module.                                                                                        //
     * @module foundation.responsiveToggle                                                                             //
     * @requires foundation.util.mediaQuery                                                                            //
     * @requires foundation.util.motion                                                                                //
     */                                                                                                                //
                                                                                                                       //
  var ResponsiveToggle = function (_Plugin) {                                                                          // 8851
    _inherits(ResponsiveToggle, _Plugin);                                                                              // 8852
                                                                                                                       //
    function ResponsiveToggle() {                                                                                      // 8854
      _classCallCheck(this, ResponsiveToggle);                                                                         // 8855
                                                                                                                       //
      return _possibleConstructorReturn(this, (ResponsiveToggle.__proto__ || Object.getPrototypeOf(ResponsiveToggle)).apply(this, arguments));
    }                                                                                                                  // 8858
                                                                                                                       //
    _createClass(ResponsiveToggle, [{                                                                                  // 8860
      key: '_setup',                                                                                                   // 8861
      /**                                                                                                              // 8863
       * Creates a new instance of Tab Bar.                                                                            //
       * @class                                                                                                        //
       * @name ResponsiveToggle                                                                                        //
       * @fires ResponsiveToggle#init                                                                                  //
       * @param {jQuery} element - jQuery object to attach tab bar functionality to.                                   //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 8871
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);                                     // 8872
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
          this.className = 'ResponsiveToggle'; // ie9 back compat                                                      // 8874
                                                                                                                       //
          this._init();                                                                                                // 8876
                                                                                                                       //
          this._events();                                                                                              // 8877
        }                                                                                                              // 8878
                                                                                                                       //
        return _setup;                                                                                                 // 8871
      }() /**                                                                                                          // 8871
           * Initializes the tab bar by finding the target element, toggling element, and running update().            //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8860
      key: '_init',                                                                                                    // 8887
      value: function () {                                                                                             // 8888
        function _init() {                                                                                             // 8888
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 8889
                                                                                                                       //
          var targetID = this.$element.data('responsive-toggle');                                                      // 8890
                                                                                                                       //
          if (!targetID) {                                                                                             // 8891
            console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');                         // 8892
          }                                                                                                            // 8893
                                                                                                                       //
          this.$targetMenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + targetID);                           // 8895
          this.$toggler = this.$element.find('[data-toggle]').filter(function () {                                     // 8896
            var target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');                          // 8897
                                                                                                                       //
            return target === targetID || target === "";                                                               // 8898
          });                                                                                                          // 8899
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.options, this.$targetMenu.data()); // If they were set, parse the animation classes
                                                                                                                       //
          if (this.options.animate) {                                                                                  // 8903
            var input = this.options.animate.split(' ');                                                               // 8904
            this.animationIn = input[0];                                                                               // 8906
            this.animationOut = input[1] || null;                                                                      // 8907
          }                                                                                                            // 8908
                                                                                                                       //
          this._update();                                                                                              // 8910
        }                                                                                                              // 8911
                                                                                                                       //
        return _init;                                                                                                  // 8888
      }() /**                                                                                                          // 8888
           * Adds necessary event handlers for the tab bar to work.                                                    //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8886
      key: '_events',                                                                                                  // 8920
      value: function () {                                                                                             // 8921
        function _events() {                                                                                           // 8921
          var _this = this;                                                                                            // 8922
                                                                                                                       //
          this._updateMqHandler = this._update.bind(this);                                                             // 8924
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._updateMqHandler);   // 8926
                                                                                                                       //
          this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));                                   // 8928
        }                                                                                                              // 8929
                                                                                                                       //
        return _events;                                                                                                // 8921
      }() /**                                                                                                          // 8921
           * Checks the current media query to determine if the tab bar should be visible or hidden.                   //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 8919
      key: '_update',                                                                                                  // 8938
      value: function () {                                                                                             // 8939
        function _update() {                                                                                           // 8939
          // Mobile                                                                                                    // 8940
          if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(this.options.hideFor)) {
            this.$element.show();                                                                                      // 8942
            this.$targetMenu.hide();                                                                                   // 8943
          } // Desktop                                                                                                 // 8944
          else {                                                                                                       // 8941
              this.$element.hide();                                                                                    // 8948
              this.$targetMenu.show();                                                                                 // 8949
            }                                                                                                          // 8950
        }                                                                                                              // 8951
                                                                                                                       //
        return _update;                                                                                                // 8939
      }() /**                                                                                                          // 8939
           * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
           * @function                                                                                                 //
           * @fires ResponsiveToggle#toggled                                                                           //
           */                                                                                                          //
    }, {                                                                                                               // 8937
      key: 'toggleMenu',                                                                                               // 8960
      value: function () {                                                                                             // 8961
        function toggleMenu() {                                                                                        // 8961
          var _this3 = this;                                                                                           // 8962
                                                                                                                       //
          if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */].atLeast(this.options.hideFor)) {
            /**                                                                                                        // 8965
             * Fires when the element attached to the tab bar toggles.                                                 //
             * @event ResponsiveToggle#toggled                                                                         //
             */if (this.options.animate) {                                                                             //
              if (this.$targetMenu.is(':hidden')) {                                                                    // 8970
                __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["a" /* Motion */].animateIn(this.$targetMenu, this.animationIn, function () {
                  _this3.$element.trigger('toggled.zf.responsiveToggle');                                              // 8972
                                                                                                                       //
                  _this3.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');                      // 8973
                });                                                                                                    // 8974
              } else {                                                                                                 // 8975
                __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["a" /* Motion */].animateOut(this.$targetMenu, this.animationOut, function () {
                  _this3.$element.trigger('toggled.zf.responsiveToggle');                                              // 8977
                });                                                                                                    // 8978
              }                                                                                                        // 8979
            } else {                                                                                                   // 8980
              this.$targetMenu.toggle(0);                                                                              // 8981
              this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');                                   // 8982
              this.$element.trigger('toggled.zf.responsiveToggle');                                                    // 8983
            }                                                                                                          // 8984
          }                                                                                                            // 8985
        }                                                                                                              // 8986
                                                                                                                       //
        return toggleMenu;                                                                                             // 8961
      }()                                                                                                              // 8961
    }, {                                                                                                               // 8959
      key: '_destroy',                                                                                                 // 8988
      value: function () {                                                                                             // 8989
        function _destroy() {                                                                                          // 8989
          this.$element.off('.zf.responsiveToggle');                                                                   // 8990
          this.$toggler.off('.zf.responsiveToggle');                                                                   // 8991
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._updateMqHandler);  // 8993
        }                                                                                                              // 8994
                                                                                                                       //
        return _destroy;                                                                                               // 8989
      }()                                                                                                              // 8989
    }]);                                                                                                               // 8987
                                                                                                                       //
    return ResponsiveToggle;                                                                                           // 8997
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 8998
                                                                                                                       //
  ResponsiveToggle.defaults = {                                                                                        // 9000
    /**                                                                                                                // 9001
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.                                 //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'medium'                                                                                               //
     */hideFor: 'medium',                                                                                              //
    /**                                                                                                                // 9009
     * To decide if the toggle should be animated or not.                                                              //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */animate: false                                                                                                  //
  }; /***/                                                                                                             // 9000
}, /* 31 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 9020
  "use strict"; /* harmony export (binding) */                                                                         // 9024
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 9025
    return Reveal;                                                                                                     // 9025
  }); /* harmony import */                                                                                             // 9025
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 9026
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 9028
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 9029
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 9030
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 9031
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(5);                                // 9032
                                                                                                                       //
  var _createClass = function () {                                                                                     // 9035
    function defineProperties(target, props) {                                                                         // 9035
      for (var i = 0; i < props.length; i++) {                                                                         // 9035
        var descriptor = props[i];                                                                                     // 9035
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 9035
        descriptor.configurable = true;                                                                                // 9035
        if ("value" in descriptor) descriptor.writable = true;                                                         // 9035
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 9035
      }                                                                                                                // 9035
    }                                                                                                                  // 9035
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 9035
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 9035
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 9035
      return Constructor;                                                                                              // 9035
    };                                                                                                                 // 9035
  }();                                                                                                                 // 9035
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 9037
    if (!(instance instanceof Constructor)) {                                                                          // 9037
      throw new TypeError("Cannot call a class as a function");                                                        // 9037
    }                                                                                                                  // 9037
  }                                                                                                                    // 9037
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 9039
    if (!self) {                                                                                                       // 9039
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 9039
    }                                                                                                                  // 9039
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 9039
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 9041
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 9041
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 9041
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 9041
      constructor: {                                                                                                   // 9041
        value: subClass,                                                                                               // 9041
        enumerable: false,                                                                                             // 9041
        writable: true,                                                                                                // 9041
        configurable: true                                                                                             // 9041
      }                                                                                                                // 9041
    });                                                                                                                // 9041
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 9041
     * Reveal module.                                                                                                  //
     * @module foundation.reveal                                                                                       //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.triggers                                                                              //
     * @requires foundation.util.mediaQuery                                                                            //
     * @requires foundation.util.motion if using animations                                                            //
     */                                                                                                                //
                                                                                                                       //
  var Reveal = function (_Plugin) {                                                                                    // 9059
    _inherits(Reveal, _Plugin);                                                                                        // 9060
                                                                                                                       //
    function Reveal() {                                                                                                // 9062
      _classCallCheck(this, Reveal);                                                                                   // 9063
                                                                                                                       //
      return _possibleConstructorReturn(this, (Reveal.__proto__ || Object.getPrototypeOf(Reveal)).apply(this, arguments));
    }                                                                                                                  // 9066
                                                                                                                       //
    _createClass(Reveal, [{                                                                                            // 9068
      key: '_setup',                                                                                                   // 9069
      /**                                                                                                              // 9071
       * Creates a new instance of Reveal.                                                                             //
       * @class                                                                                                        //
       * @name Reveal                                                                                                  //
       * @param {jQuery} element - jQuery object to use for the modal.                                                 //
       * @param {Object} options - optional parameters.                                                                //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 9078
          this.$element = element;                                                                                     // 9079
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Reveal.defaults, this.$element.data(), options);
          this.className = 'Reveal'; // ie9 back compat                                                                // 9081
                                                                                                                       //
          this._init(); // Triggers init is idempotent, just need to make sure it is initialized                       // 9082
                                                                                                                       //
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Reveal', {             // 9087
            'ESCAPE': 'close'                                                                                          // 9088
          });                                                                                                          // 9087
        }                                                                                                              // 9090
                                                                                                                       //
        return _setup;                                                                                                 // 9078
      }() /**                                                                                                          // 9078
           * Initializes the modal by adding the overlay and close buttons, (if selected).                             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9068
      key: '_init',                                                                                                    // 9098
      value: function () {                                                                                             // 9099
        function _init() {                                                                                             // 9099
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 9100
                                                                                                                       //
          this.id = this.$element.attr('id');                                                                          // 9101
          this.isActive = false;                                                                                       // 9102
          this.cached = {                                                                                              // 9103
            mq: __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */].current                // 9103
          };                                                                                                           // 9103
          this.isMobile = mobileSniff();                                                                               // 9104
          this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + this.id + '"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + this.id + '"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + this.id + '"]');
          this.$anchor.attr({                                                                                          // 9107
            'aria-controls': this.id,                                                                                  // 9108
            'aria-haspopup': true,                                                                                     // 9109
            'tabindex': 0                                                                                              // 9110
          });                                                                                                          // 9107
                                                                                                                       //
          if (this.options.fullScreen || this.$element.hasClass('full')) {                                             // 9113
            this.options.fullScreen = true;                                                                            // 9114
            this.options.overlay = false;                                                                              // 9115
          }                                                                                                            // 9116
                                                                                                                       //
          if (this.options.overlay && !this.$overlay) {                                                                // 9117
            this.$overlay = this._makeOverlay(this.id);                                                                // 9118
          }                                                                                                            // 9119
                                                                                                                       //
          this.$element.attr({                                                                                         // 9121
            'role': 'dialog',                                                                                          // 9122
            'aria-hidden': true,                                                                                       // 9123
            'data-yeti-box': this.id,                                                                                  // 9124
            'data-resize': this.id                                                                                     // 9125
          });                                                                                                          // 9121
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 9128
            this.$element.detach().appendTo(this.$overlay);                                                            // 9129
          } else {                                                                                                     // 9130
            this.$element.detach().appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo));    // 9131
            this.$element.addClass('without-overlay');                                                                 // 9132
          }                                                                                                            // 9133
                                                                                                                       //
          this._events();                                                                                              // 9134
                                                                                                                       //
          if (this.options.deepLink && window.location.hash === '#' + this.id) {                                       // 9135
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.reveal', this.open.bind(this));        // 9136
          }                                                                                                            // 9137
        }                                                                                                              // 9138
                                                                                                                       //
        return _init;                                                                                                  // 9099
      }() /**                                                                                                          // 9099
           * Creates an overlay div to display behind the modal.                                                       //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9097
      key: '_makeOverlay',                                                                                             // 9146
      value: function () {                                                                                             // 9147
        function _makeOverlay() {                                                                                      // 9147
          var additionalOverlayClasses = '';                                                                           // 9148
                                                                                                                       //
          if (this.options.additionalOverlayClasses) {                                                                 // 9150
            additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;                                    // 9151
          }                                                                                                            // 9152
                                                                                                                       //
          return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);
        }                                                                                                              // 9155
                                                                                                                       //
        return _makeOverlay;                                                                                           // 9147
      }() /**                                                                                                          // 9147
           * Updates position of modal                                                                                 //
           * TODO:  Figure out if we actually need to cache these values or if it doesn't matter                       //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9145
      key: '_updatePosition',                                                                                          // 9164
      value: function () {                                                                                             // 9165
        function _updatePosition() {                                                                                   // 9165
          var width = this.$element.outerWidth();                                                                      // 9166
                                                                                                                       //
          var outerWidth = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).width();                             // 9167
                                                                                                                       //
          var height = this.$element.outerHeight();                                                                    // 9168
                                                                                                                       //
          var outerHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).height();                           // 9169
                                                                                                                       //
          var left, top;                                                                                               // 9170
                                                                                                                       //
          if (this.options.hOffset === 'auto') {                                                                       // 9171
            left = parseInt((outerWidth - width) / 2, 10);                                                             // 9172
          } else {                                                                                                     // 9173
            left = parseInt(this.options.hOffset, 10);                                                                 // 9174
          }                                                                                                            // 9175
                                                                                                                       //
          if (this.options.vOffset === 'auto') {                                                                       // 9176
            if (height > outerHeight) {                                                                                // 9177
              top = parseInt(Math.min(100, outerHeight / 10), 10);                                                     // 9178
            } else {                                                                                                   // 9179
              top = parseInt((outerHeight - height) / 4, 10);                                                          // 9180
            }                                                                                                          // 9181
          } else {                                                                                                     // 9182
            top = parseInt(this.options.vOffset, 10);                                                                  // 9183
          }                                                                                                            // 9184
                                                                                                                       //
          this.$element.css({                                                                                          // 9185
            top: top + 'px'                                                                                            // 9185
          }); // only worry about left if we don't have an overlay or we havea  horizontal offset,                     // 9185
          // otherwise we're perfectly in the middle                                                                   // 9187
                                                                                                                       //
          if (!this.$overlay || this.options.hOffset !== 'auto') {                                                     // 9188
            this.$element.css({                                                                                        // 9189
              left: left + 'px'                                                                                        // 9189
            });                                                                                                        // 9189
            this.$element.css({                                                                                        // 9190
              margin: '0px'                                                                                            // 9190
            });                                                                                                        // 9190
          }                                                                                                            // 9191
        }                                                                                                              // 9192
                                                                                                                       //
        return _updatePosition;                                                                                        // 9165
      }() /**                                                                                                          // 9165
           * Adds event handlers for the modal.                                                                        //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9163
      key: '_events',                                                                                                  // 9200
      value: function () {                                                                                             // 9201
        function _events() {                                                                                           // 9201
          var _this3 = this;                                                                                           // 9202
                                                                                                                       //
          var _this = this;                                                                                            // 9204
                                                                                                                       //
          this.$element.on({                                                                                           // 9206
            'open.zf.trigger': this.open.bind(this),                                                                   // 9207
            'close.zf.trigger': function (event, $element) {                                                           // 9208
              if (event.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(event.target).parents('[data-closable]')[0] === $element) {
                // only close reveal when it's explicitly called                                                       // 9210
                return _this3.close.apply(_this3);                                                                     // 9211
              }                                                                                                        // 9212
            },                                                                                                         // 9213
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 9214
            'resizeme.zf.trigger': function () {                                                                       // 9215
              _this._updatePosition();                                                                                 // 9216
            }                                                                                                          // 9217
          });                                                                                                          // 9206
                                                                                                                       //
          if (this.options.closeOnClick && this.options.overlay) {                                                     // 9220
            this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {                                       // 9221
              if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {
                return;                                                                                                // 9223
              }                                                                                                        // 9224
                                                                                                                       //
              _this.close();                                                                                           // 9225
            });                                                                                                        // 9226
          }                                                                                                            // 9227
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 9228
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
          }                                                                                                            // 9230
        }                                                                                                              // 9231
                                                                                                                       //
        return _events;                                                                                                // 9201
      }() /**                                                                                                          // 9201
           * Handles modal methods on back/forward button clicks or any other event that triggers popstate.            //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9199
      key: '_handleState',                                                                                             // 9239
      value: function () {                                                                                             // 9240
        function _handleState(e) {                                                                                     // 9240
          if (window.location.hash === '#' + this.id && !this.isActive) {                                              // 9241
            this.open();                                                                                               // 9242
          } else {                                                                                                     // 9243
            this.close();                                                                                              // 9244
          }                                                                                                            // 9245
        }                                                                                                              // 9246
                                                                                                                       //
        return _handleState;                                                                                           // 9240
      }() /**                                                                                                          // 9240
           * Opens the modal controlled by `this.$anchor`, and closes all others by default.                           //
           * @function                                                                                                 //
           * @fires Reveal#closeme                                                                                     //
           * @fires Reveal#open                                                                                        //
           */                                                                                                          //
    }, {                                                                                                               // 9238
      key: 'open',                                                                                                     // 9256
      value: function () {                                                                                             // 9257
        function open() {                                                                                              // 9257
          var _this4 = this; // either update or replace browser history                                               // 9258
                                                                                                                       //
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 9261
            var hash = '#' + this.id;                                                                                  // 9262
                                                                                                                       //
            if (window.history.pushState) {                                                                            // 9264
              if (this.options.updateHistory) {                                                                        // 9265
                window.history.pushState({}, '', hash);                                                                // 9266
              } else {                                                                                                 // 9267
                window.history.replaceState({}, '', hash);                                                             // 9268
              }                                                                                                        // 9269
            } else {                                                                                                   // 9270
              window.location.hash = hash;                                                                             // 9271
            }                                                                                                          // 9272
          }                                                                                                            // 9273
                                                                                                                       //
          this.isActive = true; // Make elements invisible, but remove display: none so we can get size and positioning
                                                                                                                       //
          this.$element.css({                                                                                          // 9278
            'visibility': 'hidden'                                                                                     // 9278
          }).show().scrollTop(0);                                                                                      // 9278
                                                                                                                       //
          if (this.options.overlay) {                                                                                  // 9279
            this.$overlay.css({                                                                                        // 9280
              'visibility': 'hidden'                                                                                   // 9280
            }).show();                                                                                                 // 9280
          }                                                                                                            // 9281
                                                                                                                       //
          this._updatePosition();                                                                                      // 9283
                                                                                                                       //
          this.$element.hide().css({                                                                                   // 9285
            'visibility': ''                                                                                           // 9285
          });                                                                                                          // 9285
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 9287
            this.$overlay.css({                                                                                        // 9288
              'visibility': ''                                                                                         // 9288
            }).hide();                                                                                                 // 9288
                                                                                                                       //
            if (this.$element.hasClass('fast')) {                                                                      // 9289
              this.$overlay.addClass('fast');                                                                          // 9290
            } else if (this.$element.hasClass('slow')) {                                                               // 9291
              this.$overlay.addClass('slow');                                                                          // 9292
            }                                                                                                          // 9293
          }                                                                                                            // 9294
                                                                                                                       //
          if (!this.options.multipleOpened) {                                                                          // 9296
            /**                                                                                                        // 9297
             * Fires immediately before the modal opens.                                                               //
             * Closes any other modals that are currently open                                                         //
             * @event Reveal#closeme                                                                                   //
             */this.$element.trigger('closeme.zf.reveal', this.id);                                                    //
          }                                                                                                            // 9303
                                                                                                                       //
          var _this = this;                                                                                            // 9305
                                                                                                                       //
          function addRevealOpenClasses() {                                                                            // 9307
            if (_this.isMobile) {                                                                                      // 9308
              if (!_this.originalScrollPos) {                                                                          // 9309
                _this.originalScrollPos = window.pageYOffset;                                                          // 9310
              }                                                                                                        // 9311
                                                                                                                       //
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').addClass('is-reveal-open');                 // 9312
            } else {                                                                                                   // 9313
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-reveal-open');                       // 9314
            }                                                                                                          // 9315
          } // Motion UI method of reveal                                                                              // 9316
                                                                                                                       //
                                                                                                                       //
          if (this.options.animationIn) {                                                                              // 9318
            var afterAnimation = function () {                                                                         // 9319
              _this.$element.attr({                                                                                    // 9320
                'aria-hidden': false,                                                                                  // 9321
                'tabindex': -1                                                                                         // 9322
              }).focus();                                                                                              // 9320
                                                                                                                       //
              addRevealOpenClasses();                                                                                  // 9324
                                                                                                                       //
              __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].trapFocus(_this.$element);   // 9325
            };                                                                                                         // 9326
                                                                                                                       //
            if (this.options.overlay) {                                                                                // 9328
              __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["a" /* Motion */].animateIn(this.$overlay, 'fade-in');
            }                                                                                                          // 9330
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["a" /* Motion */].animateIn(this.$element, this.options.animationIn, function () {
              if (_this4.$element) {                                                                                   // 9332
                // protect against object having been removed                                                          // 9333
                _this4.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].findFocusable(_this4.$element);
                afterAnimation();                                                                                      // 9335
              }                                                                                                        // 9336
            });                                                                                                        // 9337
          } // jQuery method of reveal                                                                                 // 9338
          else {                                                                                                       // 9318
              if (this.options.overlay) {                                                                              // 9341
                this.$overlay.show(0);                                                                                 // 9342
              }                                                                                                        // 9343
                                                                                                                       //
              this.$element.show(this.options.showDelay);                                                              // 9344
            } // handle accessibility                                                                                  // 9345
                                                                                                                       //
                                                                                                                       //
          this.$element.attr({                                                                                         // 9348
            'aria-hidden': false,                                                                                      // 9349
            'tabindex': -1                                                                                             // 9350
          }).focus();                                                                                                  // 9348
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].trapFocus(this.$element);        // 9352
                                                                                                                       //
          addRevealOpenClasses();                                                                                      // 9354
                                                                                                                       //
          this._extraHandlers(); /**                                                                                   // 9356
                                  * Fires when the modal has successfully opened.                                      //
                                  * @event Reveal#open                                                                 //
                                  */                                                                                   //
                                                                                                                       //
          this.$element.trigger('open.zf.reveal');                                                                     // 9362
        }                                                                                                              // 9363
                                                                                                                       //
        return open;                                                                                                   // 9257
      }() /**                                                                                                          // 9257
           * Adds extra event handlers for the body and window if necessary.                                           //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9255
      key: '_extraHandlers',                                                                                           // 9371
      value: function () {                                                                                             // 9372
        function _extraHandlers() {                                                                                    // 9372
          var _this = this;                                                                                            // 9373
                                                                                                                       //
          if (!this.$element) {                                                                                        // 9374
            return;                                                                                                    // 9375
          } // If we're in the middle of cleanup, don't freak out                                                      // 9376
                                                                                                                       //
                                                                                                                       //
          this.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].findFocusable(this.$element);
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {                        // 9379
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').on('click.zf.reveal', function (e) {                // 9380
              if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {
                return;                                                                                                // 9382
              }                                                                                                        // 9383
                                                                                                                       //
              _this.close();                                                                                           // 9384
            });                                                                                                        // 9385
          }                                                                                                            // 9386
                                                                                                                       //
          if (this.options.closeOnEsc) {                                                                               // 9388
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('keydown.zf.reveal', function (e) {              // 9389
              __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Reveal', {     // 9390
                close: function () {                                                                                   // 9391
                  if (_this.options.closeOnEsc) {                                                                      // 9392
                    _this.close();                                                                                     // 9393
                  }                                                                                                    // 9394
                }                                                                                                      // 9395
              });                                                                                                      // 9390
            });                                                                                                        // 9397
          }                                                                                                            // 9398
        }                                                                                                              // 9399
                                                                                                                       //
        return _extraHandlers;                                                                                         // 9372
      }() /**                                                                                                          // 9372
           * Closes the modal.                                                                                         //
           * @function                                                                                                 //
           * @fires Reveal#closed                                                                                      //
           */                                                                                                          //
    }, {                                                                                                               // 9370
      key: 'close',                                                                                                    // 9408
      value: function () {                                                                                             // 9409
        function close() {                                                                                             // 9409
          if (!this.isActive || !this.$element.is(':visible')) {                                                       // 9410
            return false;                                                                                              // 9411
          }                                                                                                            // 9412
                                                                                                                       //
          var _this = this; // Motion UI method of hiding                                                              // 9413
                                                                                                                       //
                                                                                                                       //
          if (this.options.animationOut) {                                                                             // 9416
            if (this.options.overlay) {                                                                                // 9417
              __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["a" /* Motion */].animateOut(this.$overlay, 'fade-out');
            }                                                                                                          // 9419
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["a" /* Motion */].animateOut(this.$element, this.options.animationOut, finishUp);
          } // jQuery method of hiding                                                                                 // 9422
          else {                                                                                                       // 9416
              this.$element.hide(this.options.hideDelay);                                                              // 9425
                                                                                                                       //
              if (this.options.overlay) {                                                                              // 9427
                this.$overlay.hide(0, finishUp);                                                                       // 9428
              } else {                                                                                                 // 9429
                finishUp();                                                                                            // 9430
              }                                                                                                        // 9431
            } // Conditionals to remove extra event listeners added on open                                            // 9432
                                                                                                                       //
                                                                                                                       //
          if (this.options.closeOnEsc) {                                                                               // 9435
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('keydown.zf.reveal');                           // 9436
          }                                                                                                            // 9437
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick) {                                                    // 9439
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').off('click.zf.reveal');                             // 9440
          }                                                                                                            // 9441
                                                                                                                       //
          this.$element.off('keydown.zf.reveal');                                                                      // 9443
                                                                                                                       //
          function finishUp() {                                                                                        // 9445
            if (_this.isMobile) {                                                                                      // 9446
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {                    // 9447
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').removeClass('is-reveal-open');            // 9448
              }                                                                                                        // 9449
                                                                                                                       //
              if (_this.originalScrollPos) {                                                                           // 9450
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').scrollTop(_this.originalScrollPos);             // 9451
                                                                                                                       //
                _this.originalScrollPos = null;                                                                        // 9452
              }                                                                                                        // 9453
            } else {                                                                                                   // 9454
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {                    // 9455
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-reveal-open');                  // 9456
              }                                                                                                        // 9457
            }                                                                                                          // 9458
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].releaseFocus(_this.$element);  // 9460
                                                                                                                       //
            _this.$element.attr('aria-hidden', true); /**                                                              // 9462
                                                      * Fires when the modal is done closing.                          //
                                                      * @event Reveal#closed                                           //
                                                      */                                                               //
                                                                                                                       //
            _this.$element.trigger('closed.zf.reveal');                                                                // 9468
          } /**                                                                                                        // 9469
            * Resets the modal content                                                                                 //
            * This prevents a running video to keep going in the background                                            //
            */                                                                                                         //
                                                                                                                       //
          if (this.options.resetOnClose) {                                                                             // 9475
            this.$element.html(this.$element.html());                                                                  // 9476
          }                                                                                                            // 9477
                                                                                                                       //
          this.isActive = false;                                                                                       // 9479
                                                                                                                       //
          if (_this.options.deepLink) {                                                                                // 9480
            if (window.history.replaceState) {                                                                         // 9481
              window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));        // 9482
            } else {                                                                                                   // 9483
              window.location.hash = '';                                                                               // 9484
            }                                                                                                          // 9485
          }                                                                                                            // 9486
                                                                                                                       //
          this.$anchor.focus();                                                                                        // 9488
        }                                                                                                              // 9489
                                                                                                                       //
        return close;                                                                                                  // 9409
      }() /**                                                                                                          // 9409
           * Toggles the open/closed state of a modal.                                                                 //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 9407
      key: 'toggle',                                                                                                   // 9497
      value: function () {                                                                                             // 9498
        function toggle() {                                                                                            // 9498
          if (this.isActive) {                                                                                         // 9499
            this.close();                                                                                              // 9500
          } else {                                                                                                     // 9501
            this.open();                                                                                               // 9502
          }                                                                                                            // 9503
        }                                                                                                              // 9504
                                                                                                                       //
        return toggle;                                                                                                 // 9498
      }()                                                                                                              // 9498
    }, {                                                                                                               // 9496
      key: '_destroy',                                                                                                 // 9506
      /**                                                                                                              // 9509
       * Destroys an instance of a modal.                                                                              //
       * @function                                                                                                     //
       */value: function () {                                                                                          //
        function _destroy() {                                                                                          // 9513
          if (this.options.overlay) {                                                                                  // 9514
            this.$element.appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
                                                                                                                       //
            this.$overlay.hide().off().remove();                                                                       // 9516
          }                                                                                                            // 9517
                                                                                                                       //
          this.$element.hide().off();                                                                                  // 9518
          this.$anchor.off('.zf');                                                                                     // 9519
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.reveal:' + this.id);                         // 9520
        }                                                                                                              // 9521
                                                                                                                       //
        return _destroy;                                                                                               // 9513
      }()                                                                                                              // 9513
    }]);                                                                                                               // 9505
                                                                                                                       //
    return Reveal;                                                                                                     // 9524
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["a" /* Plugin */]);                                               // 9525
                                                                                                                       //
  Reveal.defaults = {                                                                                                  // 9527
    /**                                                                                                                // 9528
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */animationIn: '',                                                                                                //
    /**                                                                                                                // 9535
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */animationOut: '',                                                                                               //
    /**                                                                                                                // 9542
     * Time, in ms, to delay the opening of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */showDelay: 0,                                                                                                   //
    /**                                                                                                                // 9549
     * Time, in ms, to delay the closing of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */hideDelay: 0,                                                                                                   //
    /**                                                                                                                // 9556
     * Allows a click on the body/overlay to close the modal.                                                          //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */closeOnClick: true,                                                                                             //
    /**                                                                                                                // 9563
     * Allows the modal to close if the user presses the `ESCAPE` key.                                                 //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */closeOnEsc: true,                                                                                               //
    /**                                                                                                                // 9570
     * If true, allows multiple modals to be displayed at once.                                                        //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */multipleOpened: false,                                                                                          //
    /**                                                                                                                // 9577
     * Distance, in pixels, the modal should push down from the top of the screen.                                     //
     * @option                                                                                                         //
     * @type {number|string}                                                                                           //
     * @default auto                                                                                                   //
     */vOffset: 'auto',                                                                                                //
    /**                                                                                                                // 9584
     * Distance, in pixels, the modal should push in from the side of the screen.                                      //
     * @option                                                                                                         //
     * @type {number|string}                                                                                           //
     * @default auto                                                                                                   //
     */hOffset: 'auto',                                                                                                //
    /**                                                                                                                // 9591
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */fullScreen: false,                                                                                              //
    /**                                                                                                                // 9598
     * Percentage of screen height the modal should push up from the bottom of the view.                               //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 10                                                                                                     //
     */btmOffsetPct: 10,                                                                                               //
    /**                                                                                                                // 9605
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.                        //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */overlay: true,                                                                                                  //
    /**                                                                                                                // 9612
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */resetOnClose: false,                                                                                            //
    /**                                                                                                                // 9619
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */deepLink: false,                                                                                                //
    /**                                                                                                                // 9626
     * Update the browser history with the open modal                                                                  //
     * @option                                                                                                         //
     * @default false                                                                                                  //
     */updateHistory: false,                                                                                           //
    /**                                                                                                                // 9632
    * Allows the modal to append to custom div.                                                                        //
    * @option                                                                                                          //
    * @type {string}                                                                                                   //
    * @default "body"                                                                                                  //
    */appendTo: "body",                                                                                                //
    /**                                                                                                                // 9639
     * Allows adding additional class names to the reveal overlay.                                                     //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */additionalOverlayClasses: ''                                                                                    //
  };                                                                                                                   // 9527
                                                                                                                       //
  function iPhoneSniff() {                                                                                             // 9648
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)                                                      // 9649
    );                                                                                                                 // 9649
  }                                                                                                                    // 9651
                                                                                                                       //
  function androidSniff() {                                                                                            // 9653
    return (/Android/.test(window.navigator.userAgent)                                                                 // 9654
    );                                                                                                                 // 9654
  }                                                                                                                    // 9656
                                                                                                                       //
  function mobileSniff() {                                                                                             // 9658
    return iPhoneSniff() || androidSniff();                                                                            // 9659
  } /***/                                                                                                              // 9660
}, /* 32 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 9664
  "use strict"; /* harmony export (binding) */                                                                         // 9668
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 9669
    return Slider;                                                                                                     // 9669
  }); /* harmony import */                                                                                             // 9669
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 9670
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3); /* harmony import */           // 9672
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 9673
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 9674
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 9675
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__ = __webpack_require__(10); /* harmony import */             // 9676
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__ = __webpack_require__(5);                                // 9677
                                                                                                                       //
  var _createClass = function () {                                                                                     // 9680
    function defineProperties(target, props) {                                                                         // 9680
      for (var i = 0; i < props.length; i++) {                                                                         // 9680
        var descriptor = props[i];                                                                                     // 9680
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 9680
        descriptor.configurable = true;                                                                                // 9680
        if ("value" in descriptor) descriptor.writable = true;                                                         // 9680
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 9680
      }                                                                                                                // 9680
    }                                                                                                                  // 9680
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 9680
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 9680
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 9680
      return Constructor;                                                                                              // 9680
    };                                                                                                                 // 9680
  }();                                                                                                                 // 9680
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 9682
    if (!(instance instanceof Constructor)) {                                                                          // 9682
      throw new TypeError("Cannot call a class as a function");                                                        // 9682
    }                                                                                                                  // 9682
  }                                                                                                                    // 9682
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 9684
    if (!self) {                                                                                                       // 9684
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 9684
    }                                                                                                                  // 9684
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 9684
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 9686
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 9686
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 9686
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 9686
      constructor: {                                                                                                   // 9686
        value: subClass,                                                                                               // 9686
        enumerable: false,                                                                                             // 9686
        writable: true,                                                                                                // 9686
        configurable: true                                                                                             // 9686
      }                                                                                                                // 9686
    });                                                                                                                // 9686
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 9686
     * Slider module.                                                                                                  //
     * @module foundation.slider                                                                                       //
     * @requires foundation.util.motion                                                                                //
     * @requires foundation.util.triggers                                                                              //
     * @requires foundation.util.keyboard                                                                              //
     * @requires foundation.util.touch                                                                                 //
     */                                                                                                                //
                                                                                                                       //
  var Slider = function (_Plugin) {                                                                                    // 9707
    _inherits(Slider, _Plugin);                                                                                        // 9708
                                                                                                                       //
    function Slider() {                                                                                                // 9710
      _classCallCheck(this, Slider);                                                                                   // 9711
                                                                                                                       //
      return _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).apply(this, arguments));
    }                                                                                                                  // 9714
                                                                                                                       //
    _createClass(Slider, [{                                                                                            // 9716
      key: '_setup',                                                                                                   // 9717
      /**                                                                                                              // 9719
       * Creates a new instance of a slider control.                                                                   //
       * @class                                                                                                        //
       * @name Slider                                                                                                  //
       * @param {jQuery} element - jQuery object to make into a slider control.                                        //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 9726
          this.$element = element;                                                                                     // 9727
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Slider.defaults, this.$element.data(), options);
          this.className = 'Slider'; // ie9 back compat                                                                // 9729
          // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.                       // 9731
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__["a" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          this._init();                                                                                                // 9735
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].register('Slider', {             // 9737
            'ltr': {                                                                                                   // 9738
              'ARROW_RIGHT': 'increase',                                                                               // 9739
              'ARROW_UP': 'increase',                                                                                  // 9740
              'ARROW_DOWN': 'decrease',                                                                                // 9741
              'ARROW_LEFT': 'decrease',                                                                                // 9742
              'SHIFT_ARROW_RIGHT': 'increase_fast',                                                                    // 9743
              'SHIFT_ARROW_UP': 'increase_fast',                                                                       // 9744
              'SHIFT_ARROW_DOWN': 'decrease_fast',                                                                     // 9745
              'SHIFT_ARROW_LEFT': 'decrease_fast',                                                                     // 9746
              'HOME': 'min',                                                                                           // 9747
              'END': 'max'                                                                                             // 9748
            },                                                                                                         // 9738
            'rtl': {                                                                                                   // 9750
              'ARROW_LEFT': 'increase',                                                                                // 9751
              'ARROW_RIGHT': 'decrease',                                                                               // 9752
              'SHIFT_ARROW_LEFT': 'increase_fast',                                                                     // 9753
              'SHIFT_ARROW_RIGHT': 'decrease_fast'                                                                     // 9754
            }                                                                                                          // 9750
          });                                                                                                          // 9737
        }                                                                                                              // 9757
                                                                                                                       //
        return _setup;                                                                                                 // 9726
      }() /**                                                                                                          // 9726
           * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 9716
      key: '_init',                                                                                                    // 9766
      value: function () {                                                                                             // 9767
        function _init() {                                                                                             // 9767
          this.inputs = this.$element.find('input');                                                                   // 9768
          this.handles = this.$element.find('[data-slider-handle]');                                                   // 9769
          this.$handle = this.handles.eq(0);                                                                           // 9771
          this.$input = this.inputs.length ? this.inputs.eq(0) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle.attr('aria-controls'));
          this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);    // 9773
                                                                                                                       //
          var isDbl = false,                                                                                           // 9775
              _this = this;                                                                                            // 9775
                                                                                                                       //
          if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {                           // 9777
            this.options.disabled = true;                                                                              // 9778
            this.$element.addClass(this.options.disabledClass);                                                        // 9779
          }                                                                                                            // 9780
                                                                                                                       //
          if (!this.inputs.length) {                                                                                   // 9781
            this.inputs = __WEBPACK_IMPORTED_MODULE_0_jquery___default()().add(this.$input);                           // 9782
            this.options.binding = true;                                                                               // 9783
          }                                                                                                            // 9784
                                                                                                                       //
          this._setInitAttr(0);                                                                                        // 9786
                                                                                                                       //
          if (this.handles[1]) {                                                                                       // 9788
            this.options.doubleSided = true;                                                                           // 9789
            this.$handle2 = this.handles.eq(1);                                                                        // 9790
            this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle2.attr('aria-controls'));
                                                                                                                       //
            if (!this.inputs[1]) {                                                                                     // 9793
              this.inputs = this.inputs.add(this.$input2);                                                             // 9794
            }                                                                                                          // 9795
                                                                                                                       //
            isDbl = true; // this.$handle.triggerHandler('click.zf.slider');                                           // 9796
                                                                                                                       //
            this._setInitAttr(1);                                                                                      // 9799
          } // Set handle positions                                                                                    // 9800
                                                                                                                       //
                                                                                                                       //
          this.setHandles();                                                                                           // 9803
                                                                                                                       //
          this._events();                                                                                              // 9805
        }                                                                                                              // 9806
                                                                                                                       //
        return _init;                                                                                                  // 9767
      }()                                                                                                              // 9767
    }, {                                                                                                               // 9765
      key: 'setHandles',                                                                                               // 9808
      value: function () {                                                                                             // 9809
        function setHandles() {                                                                                        // 9809
          var _this3 = this;                                                                                           // 9810
                                                                                                                       //
          if (this.handles[1]) {                                                                                       // 9812
            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {                              // 9813
              _this3._setHandlePos(_this3.$handle2, _this3.inputs.eq(1).val(), true);                                  // 9814
            });                                                                                                        // 9815
          } else {                                                                                                     // 9816
            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);                                           // 9817
          }                                                                                                            // 9818
        }                                                                                                              // 9819
                                                                                                                       //
        return setHandles;                                                                                             // 9809
      }()                                                                                                              // 9809
    }, {                                                                                                               // 9807
      key: '_reflow',                                                                                                  // 9821
      value: function () {                                                                                             // 9822
        function _reflow() {                                                                                           // 9822
          this.setHandles();                                                                                           // 9823
        }                                                                                                              // 9824
                                                                                                                       //
        return _reflow;                                                                                                // 9822
      }() /**                                                                                                          // 9822
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
          */                                                                                                           //
    }, {                                                                                                               // 9820
      key: '_pctOfBar',                                                                                                // 9832
      value: function () {                                                                                             // 9833
        function _pctOfBar(value) {                                                                                    // 9833
          var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);                   // 9834
                                                                                                                       //
          switch (this.options.positionValueFunction) {                                                                // 9836
            case "pow":                                                                                                // 9837
              pctOfBar = this._logTransform(pctOfBar);                                                                 // 9838
              break;                                                                                                   // 9839
                                                                                                                       //
            case "log":                                                                                                // 9840
              pctOfBar = this._powTransform(pctOfBar);                                                                 // 9841
              break;                                                                                                   // 9842
          }                                                                                                            // 9836
                                                                                                                       //
          return pctOfBar.toFixed(2);                                                                                  // 9845
        }                                                                                                              // 9846
                                                                                                                       //
        return _pctOfBar;                                                                                              // 9833
      }() /**                                                                                                          // 9833
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
          */                                                                                                           //
    }, {                                                                                                               // 9831
      key: '_value',                                                                                                   // 9855
      value: function () {                                                                                             // 9856
        function _value(pctOfBar) {                                                                                    // 9856
          switch (this.options.positionValueFunction) {                                                                // 9857
            case "pow":                                                                                                // 9858
              pctOfBar = this._powTransform(pctOfBar);                                                                 // 9859
              break;                                                                                                   // 9860
                                                                                                                       //
            case "log":                                                                                                // 9861
              pctOfBar = this._logTransform(pctOfBar);                                                                 // 9862
              break;                                                                                                   // 9863
          }                                                                                                            // 9857
                                                                                                                       //
          var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;                         // 9865
          return value;                                                                                                // 9867
        }                                                                                                              // 9868
                                                                                                                       //
        return _value;                                                                                                 // 9856
      }() /**                                                                                                          // 9856
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function    //
          */                                                                                                           //
    }, {                                                                                                               // 9854
      key: '_logTransform',                                                                                            // 9877
      value: function () {                                                                                             // 9878
        function _logTransform(value) {                                                                                // 9878
          return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);                    // 9879
        }                                                                                                              // 9880
                                                                                                                       //
        return _logTransform;                                                                                          // 9878
      }() /**                                                                                                          // 9878
          * @function                                                                                                  //
          * @private                                                                                                   //
          * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function  //
          */                                                                                                           //
    }, {                                                                                                               // 9876
      key: '_powTransform',                                                                                            // 9889
      value: function () {                                                                                             // 9890
        function _powTransform(value) {                                                                                // 9890
          return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);                 // 9891
        }                                                                                                              // 9892
                                                                                                                       //
        return _powTransform;                                                                                          // 9890
      }() /**                                                                                                          // 9890
           * Sets the position of the selected handle and fill bar.                                                    //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {jQuery} $hndl - the selected handle to move.                                                      //
           * @param {Number} location - floating point between the start and end values of the slider bar.             //
           * @param {Function} cb - callback function to fire on completion.                                           //
           * @fires Slider#moved                                                                                       //
           * @fires Slider#changed                                                                                     //
           */                                                                                                          //
    }, {                                                                                                               // 9888
      key: '_setHandlePos',                                                                                            // 9906
      value: function () {                                                                                             // 9907
        function _setHandlePos($hndl, location, noInvert, cb) {                                                        // 9907
          // don't move if the slider has been disabled since its initialization                                       // 9908
          if (this.$element.hasClass(this.options.disabledClass)) {                                                    // 9909
            return;                                                                                                    // 9910
          } //might need to alter that slightly for bars that will have odd number selections.                         // 9911
                                                                                                                       //
                                                                                                                       //
          location = parseFloat(location); //on input change events, convert string to number...grumble.               // 9913
          // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
                                                                                                                       //
          if (location < this.options.start) {                                                                         // 9916
            location = this.options.start;                                                                             // 9917
          } else if (location > this.options.end) {                                                                    // 9918
            location = this.options.end;                                                                               // 9919
          }                                                                                                            // 9920
                                                                                                                       //
          var isDbl = this.options.doubleSided;                                                                        // 9922
                                                                                                                       //
          if (isDbl) {                                                                                                 // 9924
            //this block is to prevent 2 handles from crossing eachother. Could/should be improved.                    // 9925
            if (this.handles.index($hndl) === 0) {                                                                     // 9926
              var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));                                             // 9927
              location = location >= h2Val ? h2Val - this.options.step : location;                                     // 9928
            } else {                                                                                                   // 9929
              var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));                                              // 9930
              location = location <= h1Val ? h1Val + this.options.step : location;                                     // 9931
            }                                                                                                          // 9932
          } //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
          //for click and drag events, it's weird due to the scale(-1, 1) css property                                 // 9936
                                                                                                                       //
                                                                                                                       //
          if (this.options.vertical && !noInvert) {                                                                    // 9937
            location = this.options.end - location;                                                                    // 9938
          }                                                                                                            // 9939
                                                                                                                       //
          var _this = this,                                                                                            // 9941
              vert = this.options.vertical,                                                                            // 9941
              hOrW = vert ? 'height' : 'width',                                                                        // 9941
              lOrT = vert ? 'top' : 'left',                                                                            // 9941
              handleDim = $hndl[0].getBoundingClientRect()[hOrW],                                                      // 9941
              elemDim = this.$element[0].getBoundingClientRect()[hOrW],                                                // 9941
              //percentage of bar min/max value based on click or drag point                                           // 9941
          pctOfBar = this._pctOfBar(location),                                                                         // 9949
              //number of actual pixels to shift the handle, based on the percentage obtained above                    // 9941
          pxToMove = (elemDim - handleDim) * pctOfBar,                                                                 // 9952
              //percentage of bar to shift the handle                                                                  // 9941
          movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal); //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
                                                                                                                       //
                                                                                                                       //
          location = parseFloat(location.toFixed(this.options.decimal)); // declare empty object for css adjustments, only used with 2 handled-sliders
                                                                                                                       //
          var css = {};                                                                                                // 9959
                                                                                                                       //
          this._setValues($hndl, location); // TODO update to calculate based on values set to respective inputs??     // 9961
                                                                                                                       //
                                                                                                                       //
          if (isDbl) {                                                                                                 // 9964
            var isLeftHndl = this.handles.index($hndl) === 0,                                                          // 9965
                //empty variable, will be used for min-height/width for fill bar                                       // 9965
            dim,                                                                                                       // 9968
                //percentage w/h of the handle compared to the slider bar                                              // 9965
            handlePct = ~~(percent(handleDim, elemDim) * 100); //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
                                                                                                                       //
            if (isLeftHndl) {                                                                                          // 9973
              //left or top percentage value to apply to the fill bar.                                                 // 9974
              css[lOrT] = movement + '%'; //calculate the new min-height/width for the fill bar.                       // 9975
                                                                                                                       //
              dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct; //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
              //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.                        // 9979
                                                                                                                       //
              if (cb && typeof cb === 'function') {                                                                    // 9980
                cb();                                                                                                  // 9981
              } //this is only needed for the initialization of 2 handled sliders                                      // 9982
                                                                                                                       //
            } else {                                                                                                   // 9983
              //just caching the value of the left/bottom handle's left/top property                                   // 9984
              var handlePos = parseFloat(this.$handle[0].style[lOrT]); //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
              //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
                                                                                                                       //
              dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
            } // assign the min-height/width to our css object                                                         // 9989
                                                                                                                       //
                                                                                                                       //
            css['min-' + hOrW] = dim + '%';                                                                            // 9991
          }                                                                                                            // 9992
                                                                                                                       //
          this.$element.one('finished.zf.animate', function () {                                                       // 9994
            /**                                                                                                        // 9995
             * Fires when the handle is done moving.                                                                   //
             * @event Slider#moved                                                                                     //
             */_this.$element.trigger('moved.zf.slider', [$hndl]);                                                     //
          }); //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
                                                                                                                       //
          var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;                           // 10003
                                                                                                                       //
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["b" /* Move */])(moveTime, $hndl, function () {
            // adjusting the left/top property of the handle, based on the percentage calculated above                 // 10006
            // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,           // 10007
            // fall back to next best guess.                                                                           // 10008
            if (isNaN(movement)) {                                                                                     // 10009
              $hndl.css(lOrT, pctOfBar * 100 + '%');                                                                   // 10010
            } else {                                                                                                   // 10011
              $hndl.css(lOrT, movement + '%');                                                                         // 10012
            }                                                                                                          // 10013
                                                                                                                       //
            if (!_this.options.doubleSided) {                                                                          // 10015
              //if single-handled, a simple method to expand the fill bar                                              // 10016
              _this.$fill.css(hOrW, pctOfBar * 100 + '%');                                                             // 10017
            } else {                                                                                                   // 10018
              //otherwise, use the css object we created above                                                         // 10019
              _this.$fill.css(css);                                                                                    // 10020
            }                                                                                                          // 10021
          }); /**                                                                                                      // 10022
               * Fires when the value has not been change for a given time.                                            //
               * @event Slider#changed                                                                                 //
               */                                                                                                      //
                                                                                                                       //
          clearTimeout(_this.timeout);                                                                                 // 10028
          _this.timeout = setTimeout(function () {                                                                     // 10029
            _this.$element.trigger('changed.zf.slider', [$hndl]);                                                      // 10030
          }, _this.options.changedDelay);                                                                              // 10031
        }                                                                                                              // 10032
                                                                                                                       //
        return _setHandlePos;                                                                                          // 9907
      }() /**                                                                                                          // 9907
           * Sets the initial attribute for the slider element.                                                        //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {Number} idx - index of the current handle/input to use.                                           //
           */                                                                                                          //
    }, {                                                                                                               // 9905
      key: '_setInitAttr',                                                                                             // 10042
      value: function () {                                                                                             // 10043
        function _setInitAttr(idx) {                                                                                   // 10043
          var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;                               // 10044
                                                                                                                       //
          var id = this.inputs.eq(idx).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["b" /* GetYoDigits */])(6, 'slider');
                                                                                                                       //
          this.inputs.eq(idx).attr({                                                                                   // 10046
            'id': id,                                                                                                  // 10047
            'max': this.options.end,                                                                                   // 10048
            'min': this.options.start,                                                                                 // 10049
            'step': this.options.step                                                                                  // 10050
          });                                                                                                          // 10046
          this.inputs.eq(idx).val(initVal);                                                                            // 10052
          this.handles.eq(idx).attr({                                                                                  // 10053
            'role': 'slider',                                                                                          // 10054
            'aria-controls': id,                                                                                       // 10055
            'aria-valuemax': this.options.end,                                                                         // 10056
            'aria-valuemin': this.options.start,                                                                       // 10057
            'aria-valuenow': initVal,                                                                                  // 10058
            'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',                                     // 10059
            'tabindex': 0                                                                                              // 10060
          });                                                                                                          // 10053
        }                                                                                                              // 10062
                                                                                                                       //
        return _setInitAttr;                                                                                           // 10043
      }() /**                                                                                                          // 10043
           * Sets the input and `aria-valuenow` values for the slider element.                                         //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {jQuery} $handle - the currently selected handle.                                                  //
           * @param {Number} val - floating point of the new value.                                                    //
           */                                                                                                          //
    }, {                                                                                                               // 10041
      key: '_setValues',                                                                                               // 10073
      value: function () {                                                                                             // 10074
        function _setValues($handle, val) {                                                                            // 10074
          var idx = this.options.doubleSided ? this.handles.index($handle) : 0;                                        // 10075
          this.inputs.eq(idx).val(val);                                                                                // 10076
          $handle.attr('aria-valuenow', val);                                                                          // 10077
        }                                                                                                              // 10078
                                                                                                                       //
        return _setValues;                                                                                             // 10074
      }() /**                                                                                                          // 10074
           * Handles events on the slider element.                                                                     //
           * Calculates the new location of the current handle.                                                        //
           * If there are two handles and the bar was clicked, it determines which handle to move.                     //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {Object} e - the `event` object passed from the listener.                                          //
           * @param {jQuery} $handle - the current handle to calculate for, if selected.                               //
           * @param {Number} val - floating point number for the new value of the slider.                              //
           * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.                 //
           */                                                                                                          //
    }, {                                                                                                               // 10072
      key: '_handleEvent',                                                                                             // 10093
      value: function () {                                                                                             // 10094
        function _handleEvent(e, $handle, val) {                                                                       // 10094
          var value, hasVal;                                                                                           // 10095
                                                                                                                       //
          if (!val) {                                                                                                  // 10096
            //click or drag events                                                                                     // 10097
            e.preventDefault();                                                                                        // 10098
                                                                                                                       //
            var _this = this,                                                                                          // 10099
                vertical = this.options.vertical,                                                                      // 10099
                param = vertical ? 'height' : 'width',                                                                 // 10099
                direction = vertical ? 'top' : 'left',                                                                 // 10099
                eventOffset = vertical ? e.pageY : e.pageX,                                                            // 10099
                halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,                                     // 10099
                barDim = this.$element[0].getBoundingClientRect()[param],                                              // 10099
                windowScroll = vertical ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollTop() : __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollLeft();
                                                                                                                       //
            var elemOffset = this.$element.offset()[direction]; // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
            // best way to guess this is simulated is if clientY == pageY                                              // 10111
                                                                                                                       //
            if (e.clientY === e.pageY) {                                                                               // 10112
              eventOffset = eventOffset + windowScroll;                                                                // 10113
            }                                                                                                          // 10114
                                                                                                                       //
            var eventFromBar = eventOffset - elemOffset;                                                               // 10115
            var barXY;                                                                                                 // 10116
                                                                                                                       //
            if (eventFromBar < 0) {                                                                                    // 10117
              barXY = 0;                                                                                               // 10118
            } else if (eventFromBar > barDim) {                                                                        // 10119
              barXY = barDim;                                                                                          // 10120
            } else {                                                                                                   // 10121
              barXY = eventFromBar;                                                                                    // 10122
            }                                                                                                          // 10123
                                                                                                                       //
            var offsetPct = percent(barXY, barDim);                                                                    // 10124
            value = this._value(offsetPct); // turn everything around for RTL, yay math!                               // 10126
                                                                                                                       //
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["a" /* rtl */])() && !this.options.vertical) {
              value = this.options.end - value;                                                                        // 10130
            }                                                                                                          // 10131
                                                                                                                       //
            value = _this._adjustValue(null, value); //boolean flag for the setHandlePos fn, specifically for vertical sliders
                                                                                                                       //
            hasVal = false;                                                                                            // 10135
                                                                                                                       //
            if (!$handle) {                                                                                            // 10137
              //figure out which handle it is, pass it to the next function.                                           // 10138
              var firstHndlPos = absPosition(this.$handle, direction, barXY, param),                                   // 10139
                  secndHndlPos = absPosition(this.$handle2, direction, barXY, param);                                  // 10139
              $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;                                   // 10141
            }                                                                                                          // 10142
          } else {                                                                                                     // 10143
            //change event on input                                                                                    // 10144
            value = this._adjustValue(null, val);                                                                      // 10145
            hasVal = true;                                                                                             // 10146
          }                                                                                                            // 10147
                                                                                                                       //
          this._setHandlePos($handle, value, hasVal);                                                                  // 10149
        }                                                                                                              // 10150
                                                                                                                       //
        return _handleEvent;                                                                                           // 10094
      }() /**                                                                                                          // 10094
           * Adjustes value for handle in regard to step value. returns adjusted value                                 //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {jQuery} $handle - the selected handle.                                                            //
           * @param {Number} value - value to adjust. used if $handle is falsy                                         //
           */                                                                                                          //
    }, {                                                                                                               // 10092
      key: '_adjustValue',                                                                                             // 10161
      value: function () {                                                                                             // 10162
        function _adjustValue($handle, value) {                                                                        // 10162
          var val,                                                                                                     // 10163
              step = this.options.step,                                                                                // 10163
              div = parseFloat(step / 2),                                                                              // 10163
              left,                                                                                                    // 10163
              prev_val,                                                                                                // 10163
              next_val;                                                                                                // 10163
                                                                                                                       //
          if (!!$handle) {                                                                                             // 10169
            val = parseFloat($handle.attr('aria-valuenow'));                                                           // 10170
          } else {                                                                                                     // 10171
            val = value;                                                                                               // 10172
          }                                                                                                            // 10173
                                                                                                                       //
          left = val % step;                                                                                           // 10174
          prev_val = val - left;                                                                                       // 10175
          next_val = prev_val + step;                                                                                  // 10176
                                                                                                                       //
          if (left === 0) {                                                                                            // 10177
            return val;                                                                                                // 10178
          }                                                                                                            // 10179
                                                                                                                       //
          val = val >= prev_val + div ? next_val : prev_val;                                                           // 10180
          return val;                                                                                                  // 10181
        }                                                                                                              // 10182
                                                                                                                       //
        return _adjustValue;                                                                                           // 10162
      }() /**                                                                                                          // 10162
           * Adds event listeners to the slider elements.                                                              //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10160
      key: '_events',                                                                                                  // 10191
      value: function () {                                                                                             // 10192
        function _events() {                                                                                           // 10192
          this._eventsForHandle(this.$handle);                                                                         // 10193
                                                                                                                       //
          if (this.handles[1]) {                                                                                       // 10194
            this._eventsForHandle(this.$handle2);                                                                      // 10195
          }                                                                                                            // 10196
        }                                                                                                              // 10197
                                                                                                                       //
        return _events;                                                                                                // 10192
      }() /**                                                                                                          // 10192
           * Adds event listeners a particular handle                                                                  //
           * @function                                                                                                 //
           * @private                                                                                                  //
           * @param {jQuery} $handle - the current handle to apply listeners to.                                       //
           */                                                                                                          //
    }, {                                                                                                               // 10190
      key: '_eventsForHandle',                                                                                         // 10207
      value: function () {                                                                                             // 10208
        function _eventsForHandle($handle) {                                                                           // 10208
          var _this = this,                                                                                            // 10209
              curHandle,                                                                                               // 10209
              timer;                                                                                                   // 10209
                                                                                                                       //
          this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {                                    // 10213
            var idx = _this.inputs.index(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));                        // 10214
                                                                                                                       //
            _this._handleEvent(e, _this.handles.eq(idx), __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val());  // 10215
          });                                                                                                          // 10216
                                                                                                                       //
          if (this.options.clickSelect) {                                                                              // 10218
            this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {                                  // 10219
              if (_this.$element.data('dragging')) {                                                                   // 10220
                return false;                                                                                          // 10221
              }                                                                                                        // 10222
                                                                                                                       //
              if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is('[data-slider-handle]')) {              // 10224
                if (_this.options.doubleSided) {                                                                       // 10225
                  _this._handleEvent(e);                                                                               // 10226
                } else {                                                                                               // 10227
                  _this._handleEvent(e, _this.$handle);                                                                // 10228
                }                                                                                                      // 10229
              }                                                                                                        // 10230
            });                                                                                                        // 10231
          }                                                                                                            // 10232
                                                                                                                       //
          if (this.options.draggable) {                                                                                // 10234
            this.handles.addTouch();                                                                                   // 10235
                                                                                                                       //
            var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');                                        // 10237
                                                                                                                       //
            $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {                                // 10238
              $handle.addClass('is-dragging');                                                                         // 10239
                                                                                                                       //
              _this.$fill.addClass('is-dragging'); //                                                                  // 10240
                                                                                                                       //
                                                                                                                       //
              _this.$element.data('dragging', true);                                                                   // 10241
                                                                                                                       //
              curHandle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.currentTarget);                             // 10243
              $body.on('mousemove.zf.slider', function (e) {                                                           // 10245
                e.preventDefault();                                                                                    // 10246
                                                                                                                       //
                _this._handleEvent(e, curHandle);                                                                      // 10247
              }).on('mouseup.zf.slider', function (e) {                                                                // 10248
                _this._handleEvent(e, curHandle);                                                                      // 10249
                                                                                                                       //
                $handle.removeClass('is-dragging');                                                                    // 10251
                                                                                                                       //
                _this.$fill.removeClass('is-dragging');                                                                // 10252
                                                                                                                       //
                _this.$element.data('dragging', false);                                                                // 10253
                                                                                                                       //
                $body.off('mousemove.zf.slider mouseup.zf.slider');                                                    // 10255
              });                                                                                                      // 10256
            }) // prevent events triggered by touch                                                                    // 10257
            .on('selectstart.zf.slider touchmove.zf.slider', function (e) {                                            // 10238
              e.preventDefault();                                                                                      // 10260
            });                                                                                                        // 10261
          }                                                                                                            // 10262
                                                                                                                       //
          $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {                                      // 10264
            var _$handle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),                                       // 10265
                idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,                                   // 10265
                oldValue = parseFloat(_this.inputs.eq(idx).val()),                                                     // 10265
                newValue; // handle keyboard event with keyboard util                                                  // 10265
                                                                                                                       //
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */].handleKey(e, 'Slider', {       // 10271
              decrease: function () {                                                                                  // 10272
                newValue = oldValue - _this.options.step;                                                              // 10273
              },                                                                                                       // 10274
              increase: function () {                                                                                  // 10275
                newValue = oldValue + _this.options.step;                                                              // 10276
              },                                                                                                       // 10277
              decrease_fast: function () {                                                                             // 10278
                newValue = oldValue - _this.options.step * 10;                                                         // 10279
              },                                                                                                       // 10280
              increase_fast: function () {                                                                             // 10281
                newValue = oldValue + _this.options.step * 10;                                                         // 10282
              },                                                                                                       // 10283
              min: function () {                                                                                       // 10284
                newValue = _this.options.start;                                                                        // 10285
              },                                                                                                       // 10286
              max: function () {                                                                                       // 10287
                newValue = _this.options.end;                                                                          // 10288
              },                                                                                                       // 10289
              handled: function () {                                                                                   // 10290
                // only set handle pos when event was handled specially                                                // 10291
                e.preventDefault();                                                                                    // 10292
                                                                                                                       //
                _this._setHandlePos(_$handle, newValue, true);                                                         // 10293
              }                                                                                                        // 10294
            }); /*if (newValue) { // if pressed key has special function, update value                                 // 10271
                  e.preventDefault();                                                                                  //
                  _this._setHandlePos(_$handle, newValue);                                                             //
                }*/                                                                                                    //
          });                                                                                                          // 10300
        }                                                                                                              // 10301
                                                                                                                       //
        return _eventsForHandle;                                                                                       // 10208
      }() /**                                                                                                          // 10208
           * Destroys the slider plugin.                                                                               //
           */                                                                                                          //
    }, {                                                                                                               // 10206
      key: '_destroy',                                                                                                 // 10308
      value: function () {                                                                                             // 10309
        function _destroy() {                                                                                          // 10309
          this.handles.off('.zf.slider');                                                                              // 10310
          this.inputs.off('.zf.slider');                                                                               // 10311
          this.$element.off('.zf.slider');                                                                             // 10312
          clearTimeout(this.timeout);                                                                                  // 10314
        }                                                                                                              // 10315
                                                                                                                       //
        return _destroy;                                                                                               // 10309
      }()                                                                                                              // 10309
    }]);                                                                                                               // 10307
                                                                                                                       //
    return Slider;                                                                                                     // 10318
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["a" /* Plugin */]);                                               // 10319
                                                                                                                       //
  Slider.defaults = {                                                                                                  // 10321
    /**                                                                                                                // 10322
     * Minimum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */start: 0,                                                                                                       //
    /**                                                                                                                // 10329
     * Maximum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 100                                                                                                    //
     */end: 100,                                                                                                       //
    /**                                                                                                                // 10336
     * Minimum value change per change event.                                                                          //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 1                                                                                                      //
     */step: 1,                                                                                                        //
    /**                                                                                                                // 10343
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.                 //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */initialStart: 0,                                                                                                //
    /**                                                                                                                // 10350
     * Value at which the right handle/second input should be set to on initialization.                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 100                                                                                                    //
     */initialEnd: 100,                                                                                                //
    /**                                                                                                                // 10357
     * Allows the input to be located outside the container and visible. Set to by the JS                              //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */binding: false,                                                                                                 //
    /**                                                                                                                // 10364
     * Allows the user to click/tap on the slider bar to select a value.                                               //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */clickSelect: true,                                                                                              //
    /**                                                                                                                // 10371
     * Set to true and use the `vertical` class to change alignment to vertical.                                       //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */vertical: false,                                                                                                //
    /**                                                                                                                // 10378
     * Allows the user to drag the slider handle(s) to select a value.                                                 //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */draggable: true,                                                                                                //
    /**                                                                                                                // 10385
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */disabled: false,                                                                                                //
    /**                                                                                                                // 10392
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.                           //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */doubleSided: false,                                                                                             //
    /**                                                                                                                // 10399
     * Potential future feature.                                                                                       //
     */ // steps: 100,                                                                                                 //
    /**                                                                                                                // 10403
     * Number of decimal places the plugin should go to for floating point precision.                                  //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 2                                                                                                      //
     */decimal: 2,                                                                                                     //
    /**                                                                                                                // 10410
     * Time delay for dragged elements.                                                                                //
     */ // dragDelay: 0,                                                                                               //
    /**                                                                                                                // 10414
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 200                                                                                                    //
     */moveTime: 200,                                                                                                  //
    //update this if changing the transition time in the sass                                                          // 10420
    /**                                                                                                                // 10421
     * Class applied to disabled sliders.                                                                              //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'disabled'                                                                                             //
     */disabledClass: 'disabled',                                                                                      //
    /**                                                                                                                // 10428
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.    //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */invertVertical: false,                                                                                          //
    /**                                                                                                                // 10435
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.                              //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 500                                                                                                    //
     */changedDelay: 500,                                                                                              //
    /**                                                                                                                // 10442
    * Basevalue for non-linear sliders                                                                                 //
    * @option                                                                                                          //
    * @type {number}                                                                                                   //
    * @default 5                                                                                                       //
    */nonLinearBase: 5,                                                                                                //
    /**                                                                                                                // 10449
    * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
    * @option                                                                                                          //
    * @type {string}                                                                                                   //
    * @default 'linear'                                                                                                //
    */positionValueFunction: 'linear'                                                                                  //
  };                                                                                                                   // 10321
                                                                                                                       //
  function percent(frac, num) {                                                                                        // 10458
    return frac / num;                                                                                                 // 10459
  }                                                                                                                    // 10460
                                                                                                                       //
  function absPosition($handle, dir, clickPos, param) {                                                                // 10461
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);                                        // 10462
  }                                                                                                                    // 10463
                                                                                                                       //
  function baseLog(base, value) {                                                                                      // 10464
    return Math.log(value) / Math.log(base);                                                                           // 10465
  } /***/                                                                                                              // 10466
}, /* 33 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 10470
  "use strict"; /* harmony export (binding) */                                                                         // 10474
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 10475
    return Sticky;                                                                                                     // 10475
  }); /* harmony import */                                                                                             // 10475
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 10476
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 10478
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 10479
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 10480
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(5);                                // 10481
                                                                                                                       //
  var _createClass = function () {                                                                                     // 10484
    function defineProperties(target, props) {                                                                         // 10484
      for (var i = 0; i < props.length; i++) {                                                                         // 10484
        var descriptor = props[i];                                                                                     // 10484
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 10484
        descriptor.configurable = true;                                                                                // 10484
        if ("value" in descriptor) descriptor.writable = true;                                                         // 10484
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 10484
      }                                                                                                                // 10484
    }                                                                                                                  // 10484
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 10484
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 10484
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 10484
      return Constructor;                                                                                              // 10484
    };                                                                                                                 // 10484
  }();                                                                                                                 // 10484
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 10486
    if (!(instance instanceof Constructor)) {                                                                          // 10486
      throw new TypeError("Cannot call a class as a function");                                                        // 10486
    }                                                                                                                  // 10486
  }                                                                                                                    // 10486
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 10488
    if (!self) {                                                                                                       // 10488
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 10488
    }                                                                                                                  // 10488
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 10488
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 10490
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 10490
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 10490
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 10490
      constructor: {                                                                                                   // 10490
        value: subClass,                                                                                               // 10490
        enumerable: false,                                                                                             // 10490
        writable: true,                                                                                                // 10490
        configurable: true                                                                                             // 10490
      }                                                                                                                // 10490
    });                                                                                                                // 10490
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 10490
     * Sticky module.                                                                                                  //
     * @module foundation.sticky                                                                                       //
     * @requires foundation.util.triggers                                                                              //
     * @requires foundation.util.mediaQuery                                                                            //
     */                                                                                                                //
                                                                                                                       //
  var Sticky = function (_Plugin) {                                                                                    // 10505
    _inherits(Sticky, _Plugin);                                                                                        // 10506
                                                                                                                       //
    function Sticky() {                                                                                                // 10508
      _classCallCheck(this, Sticky);                                                                                   // 10509
                                                                                                                       //
      return _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).apply(this, arguments));
    }                                                                                                                  // 10512
                                                                                                                       //
    _createClass(Sticky, [{                                                                                            // 10514
      key: '_setup',                                                                                                   // 10515
      /**                                                                                                              // 10517
       * Creates a new instance of a sticky thing.                                                                     //
       * @class                                                                                                        //
       * @name Sticky                                                                                                  //
       * @param {jQuery} element - jQuery object to make sticky.                                                       //
       * @param {Object} options - options object passed when creating the element programmatically.                   //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 10524
          this.$element = element;                                                                                     // 10525
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Sticky.defaults, this.$element.data(), options);
          this.className = 'Sticky'; // ie9 back compat                                                                // 10527
          // Triggers init is idempotent, just need to make sure it is initialized                                     // 10529
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          this._init();                                                                                                // 10532
        }                                                                                                              // 10533
                                                                                                                       //
        return _setup;                                                                                                 // 10524
      }() /**                                                                                                          // 10524
           * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes  //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10514
      key: '_init',                                                                                                    // 10542
      value: function () {                                                                                             // 10543
        function _init() {                                                                                             // 10543
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 10544
                                                                                                                       //
          var $parent = this.$element.parent('[data-sticky-container]'),                                               // 10546
              id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, 'sticky'),
              _this = this;                                                                                            // 10546
                                                                                                                       //
          if ($parent.length) {                                                                                        // 10550
            this.$container = $parent;                                                                                 // 10551
          } else {                                                                                                     // 10552
            this.wasWrapped = true;                                                                                    // 10553
            this.$element.wrap(this.options.container);                                                                // 10554
            this.$container = this.$element.parent();                                                                  // 10555
          }                                                                                                            // 10556
                                                                                                                       //
          this.$container.addClass(this.options.containerClass);                                                       // 10557
          this.$element.addClass(this.options.stickyClass).attr({                                                      // 10559
            'data-resize': id,                                                                                         // 10559
            'data-mutate': id                                                                                          // 10559
          });                                                                                                          // 10559
                                                                                                                       //
          if (this.options.anchor !== '') {                                                                            // 10560
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor).attr({                          // 10561
              'data-mutate': id                                                                                        // 10561
            });                                                                                                        // 10561
          }                                                                                                            // 10562
                                                                                                                       //
          this.scrollCount = this.options.checkEvery;                                                                  // 10564
          this.isStuck = false;                                                                                        // 10565
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.sticky', function () {                   // 10566
            //We calculate the container height to have correct values for anchor points offset calculation.           // 10567
            _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
                                                                                                                       //
            _this.$container.css('height', _this.containerHeight);                                                     // 10569
                                                                                                                       //
            _this.elemHeight = _this.containerHeight;                                                                  // 10570
                                                                                                                       //
            if (_this.options.anchor !== '') {                                                                         // 10571
              _this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor);              // 10572
            } else {                                                                                                   // 10573
              _this._parsePoints();                                                                                    // 10574
            }                                                                                                          // 10575
                                                                                                                       //
            _this._setSizes(function () {                                                                              // 10577
              var scroll = window.pageYOffset;                                                                         // 10578
                                                                                                                       //
              _this._calc(false, scroll); //Unstick the element will ensure that proper classes are set.               // 10579
                                                                                                                       //
                                                                                                                       //
              if (!_this.isStuck) {                                                                                    // 10581
                _this._removeSticky(scroll >= _this.topPoint ? false : true);                                          // 10582
              }                                                                                                        // 10583
            });                                                                                                        // 10584
                                                                                                                       //
            _this._events(id.split('-').reverse().join('-'));                                                          // 10585
          });                                                                                                          // 10586
        }                                                                                                              // 10587
                                                                                                                       //
        return _init;                                                                                                  // 10543
      }() /**                                                                                                          // 10543
           * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10541
      key: '_parsePoints',                                                                                             // 10596
      value: function () {                                                                                             // 10597
        function _parsePoints() {                                                                                      // 10597
          var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,                                         // 10598
              btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,     // 10598
              pts = [top, btm],                                                                                        // 10598
              breaks = {};                                                                                             // 10598
                                                                                                                       //
          for (var i = 0, len = pts.length; i < len && pts[i]; i++) {                                                  // 10602
            var pt;                                                                                                    // 10603
                                                                                                                       //
            if (typeof pts[i] === 'number') {                                                                          // 10604
              pt = pts[i];                                                                                             // 10605
            } else {                                                                                                   // 10606
              var place = pts[i].split(':'),                                                                           // 10607
                  anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + place[0]);                             // 10607
                                                                                                                       //
              pt = anchor.offset().top;                                                                                // 10610
                                                                                                                       //
              if (place[1] && place[1].toLowerCase() === 'bottom') {                                                   // 10611
                pt += anchor[0].getBoundingClientRect().height;                                                        // 10612
              }                                                                                                        // 10613
            }                                                                                                          // 10614
                                                                                                                       //
            breaks[i] = pt;                                                                                            // 10615
          }                                                                                                            // 10616
                                                                                                                       //
          this.points = breaks;                                                                                        // 10618
          return;                                                                                                      // 10619
        }                                                                                                              // 10620
                                                                                                                       //
        return _parsePoints;                                                                                           // 10597
      }() /**                                                                                                          // 10597
           * Adds event handlers for the scrolling element.                                                            //
           * @private                                                                                                  //
           * @param {String} id - pseudo-random id for unique scroll event listener.                                   //
           */                                                                                                          //
    }, {                                                                                                               // 10595
      key: '_events',                                                                                                  // 10629
      value: function () {                                                                                             // 10630
        function _events(id) {                                                                                         // 10630
          var _this = this,                                                                                            // 10631
              scrollListener = this.scrollListener = 'scroll.zf.' + id;                                                // 10631
                                                                                                                       //
          if (this.isOn) {                                                                                             // 10633
            return;                                                                                                    // 10634
          }                                                                                                            // 10635
                                                                                                                       //
          if (this.canStick) {                                                                                         // 10636
            this.isOn = true;                                                                                          // 10637
                                                                                                                       //
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener).on(scrollListener, function (e) {
              if (_this.scrollCount === 0) {                                                                           // 10639
                _this.scrollCount = _this.options.checkEvery;                                                          // 10640
                                                                                                                       //
                _this._setSizes(function () {                                                                          // 10641
                  _this._calc(false, window.pageYOffset);                                                              // 10642
                });                                                                                                    // 10643
              } else {                                                                                                 // 10644
                _this.scrollCount--;                                                                                   // 10645
                                                                                                                       //
                _this._calc(false, window.pageYOffset);                                                                // 10646
              }                                                                                                        // 10647
            });                                                                                                        // 10648
          }                                                                                                            // 10649
                                                                                                                       //
          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {                        // 10651
            _this._eventsHandler(id);                                                                                  // 10652
          });                                                                                                          // 10653
          this.$element.on('mutateme.zf.trigger', function (e, el) {                                                   // 10655
            _this._eventsHandler(id);                                                                                  // 10656
          });                                                                                                          // 10657
                                                                                                                       //
          if (this.$anchor) {                                                                                          // 10659
            this.$anchor.on('mutateme.zf.trigger', function (e, el) {                                                  // 10660
              _this._eventsHandler(id);                                                                                // 10661
            });                                                                                                        // 10662
          }                                                                                                            // 10663
        }                                                                                                              // 10664
                                                                                                                       //
        return _events;                                                                                                // 10630
      }() /**                                                                                                          // 10630
           * Handler for events.                                                                                       //
           * @private                                                                                                  //
           * @param {String} id - pseudo-random id for unique scroll event listener.                                   //
           */                                                                                                          //
    }, {                                                                                                               // 10628
      key: '_eventsHandler',                                                                                           // 10673
      value: function () {                                                                                             // 10674
        function _eventsHandler(id) {                                                                                  // 10674
          var _this = this,                                                                                            // 10675
              scrollListener = this.scrollListener = 'scroll.zf.' + id;                                                // 10675
                                                                                                                       //
          _this._setSizes(function () {                                                                                // 10678
            _this._calc(false);                                                                                        // 10679
                                                                                                                       //
            if (_this.canStick) {                                                                                      // 10680
              if (!_this.isOn) {                                                                                       // 10681
                _this._events(id);                                                                                     // 10682
              }                                                                                                        // 10683
            } else if (_this.isOn) {                                                                                   // 10684
              _this._pauseListeners(scrollListener);                                                                   // 10685
            }                                                                                                          // 10686
          });                                                                                                          // 10687
        }                                                                                                              // 10688
                                                                                                                       //
        return _eventsHandler;                                                                                         // 10674
      }() /**                                                                                                          // 10674
           * Removes event handlers for scroll and change events on anchor.                                            //
           * @fires Sticky#pause                                                                                       //
           * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`                  //
           */                                                                                                          //
    }, {                                                                                                               // 10672
      key: '_pauseListeners',                                                                                          // 10697
      value: function () {                                                                                             // 10698
        function _pauseListeners(scrollListener) {                                                                     // 10698
          this.isOn = false;                                                                                           // 10699
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener); /**                              // 10700
                                                                                       * Fires when the plugin is paused due to resize event shrinking the view.
                                                                                       * @event Sticky#pause           //
                                                                                       * @private                      //
                                                                                       */                              //
                                                                                                                       //
          this.$element.trigger('pause.zf.sticky');                                                                    // 10707
        }                                                                                                              // 10708
                                                                                                                       //
        return _pauseListeners;                                                                                        // 10698
      }() /**                                                                                                          // 10698
           * Called on every `scroll` event and on `_init`                                                             //
           * fires functions based on booleans and cached values                                                       //
           * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.                    //
           * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
           */                                                                                                          //
    }, {                                                                                                               // 10696
      key: '_calc',                                                                                                    // 10718
      value: function () {                                                                                             // 10719
        function _calc(checkSizes, scroll) {                                                                           // 10719
          if (checkSizes) {                                                                                            // 10720
            this._setSizes();                                                                                          // 10721
          }                                                                                                            // 10722
                                                                                                                       //
          if (!this.canStick) {                                                                                        // 10724
            if (this.isStuck) {                                                                                        // 10725
              this._removeSticky(true);                                                                                // 10726
            }                                                                                                          // 10727
                                                                                                                       //
            return false;                                                                                              // 10728
          }                                                                                                            // 10729
                                                                                                                       //
          if (!scroll) {                                                                                               // 10731
            scroll = window.pageYOffset;                                                                               // 10732
          }                                                                                                            // 10733
                                                                                                                       //
          if (scroll >= this.topPoint) {                                                                               // 10735
            if (scroll <= this.bottomPoint) {                                                                          // 10736
              if (!this.isStuck) {                                                                                     // 10737
                this._setSticky();                                                                                     // 10738
              }                                                                                                        // 10739
            } else {                                                                                                   // 10740
              if (this.isStuck) {                                                                                      // 10741
                this._removeSticky(false);                                                                             // 10742
              }                                                                                                        // 10743
            }                                                                                                          // 10744
          } else {                                                                                                     // 10745
            if (this.isStuck) {                                                                                        // 10746
              this._removeSticky(true);                                                                                // 10747
            }                                                                                                          // 10748
          }                                                                                                            // 10749
        }                                                                                                              // 10750
                                                                                                                       //
        return _calc;                                                                                                  // 10719
      }() /**                                                                                                          // 10719
           * Causes the $element to become stuck.                                                                      //
           * Adds `position: fixed;`, and helper classes.                                                              //
           * @fires Sticky#stuckto                                                                                     //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10717
      key: '_setSticky',                                                                                               // 10761
      value: function () {                                                                                             // 10762
        function _setSticky() {                                                                                        // 10762
          var _this = this,                                                                                            // 10763
              stickTo = this.options.stickTo,                                                                          // 10763
              mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',                                                 // 10763
              notStuckTo = stickTo === 'top' ? 'bottom' : 'top',                                                       // 10763
              css = {};                                                                                                // 10763
                                                                                                                       //
          css[mrgn] = this.options[mrgn] + 'em';                                                                       // 10769
          css[stickTo] = 0;                                                                                            // 10770
          css[notStuckTo] = 'auto';                                                                                    // 10771
          this.isStuck = true;                                                                                         // 10772
          this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css) /**
                                                                                                                       * Fires when the $element has become `position: fixed;`
                                                                                                                       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
                                                                                                                       * @event Sticky#stuckto
                                                                                                                       */.trigger('sticky.zf.stuckto:' + stickTo);
          this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
            _this._setSizes();                                                                                         // 10781
          });                                                                                                          // 10782
        }                                                                                                              // 10783
                                                                                                                       //
        return _setSticky;                                                                                             // 10762
      }() /**                                                                                                          // 10762
           * Causes the $element to become unstuck.                                                                    //
           * Removes `position: fixed;`, and helper classes.                                                           //
           * Adds other helper classes.                                                                                //
           * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
           * @fires Sticky#unstuckfrom                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10760
      key: '_removeSticky',                                                                                            // 10795
      value: function () {                                                                                             // 10796
        function _removeSticky(isTop) {                                                                                // 10796
          var stickTo = this.options.stickTo,                                                                          // 10797
              stickToTop = stickTo === 'top',                                                                          // 10797
              css = {},                                                                                                // 10797
              anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,        // 10797
              mrgn = stickToTop ? 'marginTop' : 'marginBottom',                                                        // 10797
              notStuckTo = stickToTop ? 'bottom' : 'top',                                                              // 10797
              topOrBottom = isTop ? 'top' : 'bottom';                                                                  // 10797
          css[mrgn] = 0;                                                                                               // 10805
          css['bottom'] = 'auto';                                                                                      // 10807
                                                                                                                       //
          if (isTop) {                                                                                                 // 10808
            css['top'] = 0;                                                                                            // 10809
          } else {                                                                                                     // 10810
            css['top'] = anchorPt;                                                                                     // 10811
          }                                                                                                            // 10812
                                                                                                                       //
          this.isStuck = false;                                                                                        // 10814
          this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css) /**
                                                                                                                        * Fires when the $element has become anchored.
                                                                                                                        * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
                                                                                                                        * @event Sticky#unstuckfrom
                                                                                                                        */.trigger('sticky.zf.unstuckfrom:' + topOrBottom);
        }                                                                                                              // 10822
                                                                                                                       //
        return _removeSticky;                                                                                          // 10796
      }() /**                                                                                                          // 10796
           * Sets the $element and $container sizes for plugin.                                                        //
           * Calls `_setBreakPoints`.                                                                                  //
           * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10794
      key: '_setSizes',                                                                                                // 10832
      value: function () {                                                                                             // 10833
        function _setSizes(cb) {                                                                                       // 10833
          this.canStick = __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */].is(this.options.stickyOn);
                                                                                                                       //
          if (!this.canStick) {                                                                                        // 10835
            if (cb && typeof cb === 'function') {                                                                      // 10836
              cb();                                                                                                    // 10837
            }                                                                                                          // 10838
          }                                                                                                            // 10839
                                                                                                                       //
          var _this = this,                                                                                            // 10840
              newElemWidth = this.$container[0].getBoundingClientRect().width,                                         // 10840
              comp = window.getComputedStyle(this.$container[0]),                                                      // 10840
              pdngl = parseInt(comp['padding-left'], 10),                                                              // 10840
              pdngr = parseInt(comp['padding-right'], 10);                                                             // 10840
                                                                                                                       //
          if (this.$anchor && this.$anchor.length) {                                                                   // 10846
            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;                                        // 10847
          } else {                                                                                                     // 10848
            this._parsePoints();                                                                                       // 10849
          }                                                                                                            // 10850
                                                                                                                       //
          this.$element.css({                                                                                          // 10852
            'max-width': newElemWidth - pdngl - pdngr + 'px'                                                           // 10853
          });                                                                                                          // 10852
          var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;            // 10856
                                                                                                                       //
          if (this.$element.css("display") == "none") {                                                                // 10857
            newContainerHeight = 0;                                                                                    // 10858
          }                                                                                                            // 10859
                                                                                                                       //
          this.containerHeight = newContainerHeight;                                                                   // 10860
          this.$container.css({                                                                                        // 10861
            height: newContainerHeight                                                                                 // 10862
          });                                                                                                          // 10861
          this.elemHeight = newContainerHeight;                                                                        // 10864
                                                                                                                       //
          if (!this.isStuck) {                                                                                         // 10866
            if (this.$element.hasClass('is-at-bottom')) {                                                              // 10867
              var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
              this.$element.css('top', anchorPt);                                                                      // 10869
            }                                                                                                          // 10870
          }                                                                                                            // 10871
                                                                                                                       //
          this._setBreakPoints(newContainerHeight, function () {                                                       // 10873
            if (cb && typeof cb === 'function') {                                                                      // 10874
              cb();                                                                                                    // 10875
            }                                                                                                          // 10876
          });                                                                                                          // 10877
        }                                                                                                              // 10878
                                                                                                                       //
        return _setSizes;                                                                                              // 10833
      }() /**                                                                                                          // 10833
           * Sets the upper and lower breakpoints for the element to become sticky/unsticky.                           //
           * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.              //
           * @param {Function} cb - optional callback function to be called on completion.                             //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 10831
      key: '_setBreakPoints',                                                                                          // 10888
      value: function () {                                                                                             // 10889
        function _setBreakPoints(elemHeight, cb) {                                                                     // 10889
          if (!this.canStick) {                                                                                        // 10890
            if (cb && typeof cb === 'function') {                                                                      // 10891
              cb();                                                                                                    // 10892
            } else {                                                                                                   // 10893
              return false;                                                                                            // 10894
            }                                                                                                          // 10895
          }                                                                                                            // 10896
                                                                                                                       //
          var mTop = emCalc(this.options.marginTop),                                                                   // 10897
              mBtm = emCalc(this.options.marginBottom),                                                                // 10897
              topPoint = this.points ? this.points[0] : this.$anchor.offset().top,                                     // 10897
              bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,                               // 10897
              // topPoint = this.$anchor.offset().top || this.points[0],                                               // 10897
          // bottomPoint = topPoint + this.anchorHeight || this.points[1],                                             // 10903
          winHeight = window.innerHeight;                                                                              // 10904
                                                                                                                       //
          if (this.options.stickTo === 'top') {                                                                        // 10906
            topPoint -= mTop;                                                                                          // 10907
            bottomPoint -= elemHeight + mTop;                                                                          // 10908
          } else if (this.options.stickTo === 'bottom') {                                                              // 10909
            topPoint -= winHeight - (elemHeight + mBtm);                                                               // 10910
            bottomPoint -= winHeight - mBtm;                                                                           // 10911
          } else {//this would be the stickTo: both option... tricky                                                   // 10912
          }                                                                                                            // 10914
                                                                                                                       //
          this.topPoint = topPoint;                                                                                    // 10916
          this.bottomPoint = bottomPoint;                                                                              // 10917
                                                                                                                       //
          if (cb && typeof cb === 'function') {                                                                        // 10919
            cb();                                                                                                      // 10920
          }                                                                                                            // 10921
        }                                                                                                              // 10922
                                                                                                                       //
        return _setBreakPoints;                                                                                        // 10889
      }() /**                                                                                                          // 10889
           * Destroys the current sticky element.                                                                      //
           * Resets the element to the top position first.                                                             //
           * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 10887
      key: '_destroy',                                                                                                 // 10932
      value: function () {                                                                                             // 10933
        function _destroy() {                                                                                          // 10933
          this._removeSticky(true);                                                                                    // 10934
                                                                                                                       //
          this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({                         // 10936
            height: '',                                                                                                // 10937
            top: '',                                                                                                   // 10938
            bottom: '',                                                                                                // 10939
            'max-width': ''                                                                                            // 10940
          }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');                                                    // 10936
                                                                                                                       //
          if (this.$anchor && this.$anchor.length) {                                                                   // 10942
            this.$anchor.off('change.zf.sticky');                                                                      // 10943
          }                                                                                                            // 10944
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(this.scrollListener);                             // 10945
                                                                                                                       //
          if (this.wasWrapped) {                                                                                       // 10947
            this.$element.unwrap();                                                                                    // 10948
          } else {                                                                                                     // 10949
            this.$container.removeClass(this.options.containerClass).css({                                             // 10950
              height: ''                                                                                               // 10951
            });                                                                                                        // 10950
          }                                                                                                            // 10953
        }                                                                                                              // 10954
                                                                                                                       //
        return _destroy;                                                                                               // 10933
      }()                                                                                                              // 10933
    }]);                                                                                                               // 10931
                                                                                                                       //
    return Sticky;                                                                                                     // 10957
  }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */]);                                               // 10958
                                                                                                                       //
  Sticky.defaults = {                                                                                                  // 10960
    /**                                                                                                                // 10961
     * Customizable container template. Add your own classes for styling and sizing.                                   //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'                                                        //
     */container: '<div data-sticky-container></div>',                                                                 //
    /**                                                                                                                // 10968
     * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.                                       //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'top'                                                                                                  //
     */stickTo: 'top',                                                                                                 //
    /**                                                                                                                // 10975
     * If anchored to a single element, the id of that element.                                                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */anchor: '',                                                                                                     //
    /**                                                                                                                // 10982
     * If using more than one element as anchor points, the id of the top anchor.                                      //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */topAnchor: '',                                                                                                  //
    /**                                                                                                                // 10989
     * If using more than one element as anchor points, the id of the bottom anchor.                                   //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */btmAnchor: '',                                                                                                  //
    /**                                                                                                                // 10996
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.                                    //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 1                                                                                                      //
     */marginTop: 1,                                                                                                   //
    /**                                                                                                                // 11003
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.                                 //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 1                                                                                                      //
     */marginBottom: 1,                                                                                                //
    /**                                                                                                                // 11010
     * Breakpoint string that is the minimum screen size an element should become sticky.                              //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'medium'                                                                                               //
     */stickyOn: 'medium',                                                                                             //
    /**                                                                                                                // 11017
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.                   //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'sticky'                                                                                               //
     */stickyClass: 'sticky',                                                                                          //
    /**                                                                                                                // 11024
     * Class applied to sticky container. Foundation defaults to `sticky-container`.                                   //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'sticky-container'                                                                                     //
     */containerClass: 'sticky-container',                                                                             //
    /**                                                                                                                // 11031
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default -1                                                                                                     //
     */checkEvery: -1                                                                                                  //
  }; /**                                                                                                               // 10960
      * Helper function to calculate em values                                                                         //
      * @param Number {em} - number of em's to calculate into pixels                                                   //
      */                                                                                                               //
                                                                                                                       //
  function emCalc(em) {                                                                                                // 11044
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;                                   // 11045
  } /***/                                                                                                              // 11046
}, /* 34 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 11050
  "use strict"; /* harmony export (binding) */                                                                         // 11054
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 11055
    return Toggler;                                                                                                    // 11055
  }); /* harmony import */                                                                                             // 11055
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 11056
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(6); /* harmony import */             // 11058
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2); /* harmony import */                  // 11059
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(5);                                // 11060
                                                                                                                       //
  var _createClass = function () {                                                                                     // 11063
    function defineProperties(target, props) {                                                                         // 11063
      for (var i = 0; i < props.length; i++) {                                                                         // 11063
        var descriptor = props[i];                                                                                     // 11063
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 11063
        descriptor.configurable = true;                                                                                // 11063
        if ("value" in descriptor) descriptor.writable = true;                                                         // 11063
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 11063
      }                                                                                                                // 11063
    }                                                                                                                  // 11063
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 11063
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 11063
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 11063
      return Constructor;                                                                                              // 11063
    };                                                                                                                 // 11063
  }();                                                                                                                 // 11063
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 11065
    if (!(instance instanceof Constructor)) {                                                                          // 11065
      throw new TypeError("Cannot call a class as a function");                                                        // 11065
    }                                                                                                                  // 11065
  }                                                                                                                    // 11065
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 11067
    if (!self) {                                                                                                       // 11067
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 11067
    }                                                                                                                  // 11067
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 11067
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 11069
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 11069
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 11069
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 11069
      constructor: {                                                                                                   // 11069
        value: subClass,                                                                                               // 11069
        enumerable: false,                                                                                             // 11069
        writable: true,                                                                                                // 11069
        configurable: true                                                                                             // 11069
      }                                                                                                                // 11069
    });                                                                                                                // 11069
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 11069
     * Toggler module.                                                                                                 //
     * @module foundation.toggler                                                                                      //
     * @requires foundation.util.motion                                                                                //
     * @requires foundation.util.triggers                                                                              //
     */                                                                                                                //
                                                                                                                       //
  var Toggler = function (_Plugin) {                                                                                   // 11083
    _inherits(Toggler, _Plugin);                                                                                       // 11084
                                                                                                                       //
    function Toggler() {                                                                                               // 11086
      _classCallCheck(this, Toggler);                                                                                  // 11087
                                                                                                                       //
      return _possibleConstructorReturn(this, (Toggler.__proto__ || Object.getPrototypeOf(Toggler)).apply(this, arguments));
    }                                                                                                                  // 11090
                                                                                                                       //
    _createClass(Toggler, [{                                                                                           // 11092
      key: '_setup',                                                                                                   // 11093
      /**                                                                                                              // 11095
       * Creates a new instance of Toggler.                                                                            //
       * @class                                                                                                        //
       * @name Toggler                                                                                                 //
       * @fires Toggler#init                                                                                           //
       * @param {Object} element - jQuery object to add the trigger to.                                                //
       * @param {Object} options - Overrides to the default plugin settings.                                           //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 11103
          this.$element = element;                                                                                     // 11104
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Toggler.defaults, element.data(), options);
          this.className = '';                                                                                         // 11106
          this.className = 'Toggler'; // ie9 back compat                                                               // 11107
          // Triggers init is idempotent, just need to make sure it is initialized                                     // 11109
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          this._init();                                                                                                // 11112
                                                                                                                       //
          this._events();                                                                                              // 11113
        }                                                                                                              // 11114
                                                                                                                       //
        return _setup;                                                                                                 // 11103
      }() /**                                                                                                          // 11103
           * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11092
      key: '_init',                                                                                                    // 11123
      value: function () {                                                                                             // 11124
        function _init() {                                                                                             // 11124
          var input; // Parse animation classes if they were set                                                       // 11125
                                                                                                                       //
          if (this.options.animate) {                                                                                  // 11127
            input = this.options.animate.split(' ');                                                                   // 11128
            this.animationIn = input[0];                                                                               // 11130
            this.animationOut = input[1] || null;                                                                      // 11131
          } // Otherwise, parse toggle class                                                                           // 11132
          else {                                                                                                       // 11127
              input = this.$element.data('toggler'); // Allow for a . at the beginning of the string                   // 11135
                                                                                                                       //
              this.className = input[0] === '.' ? input.slice(1) : input;                                              // 11137
            } // Add ARIA attributes to triggers                                                                       // 11138
                                                                                                                       //
                                                                                                                       //
          var id = this.$element[0].id;                                                                                // 11141
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id); // If the target is hidden, add aria-hidden
                                                                                                                       //
                                                                                                                       //
          this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);                             // 11144
        }                                                                                                              // 11145
                                                                                                                       //
        return _init;                                                                                                  // 11124
      }() /**                                                                                                          // 11124
           * Initializes events for the toggle trigger.                                                                //
           * @function                                                                                                 //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11122
      key: '_events',                                                                                                  // 11154
      value: function () {                                                                                             // 11155
        function _events() {                                                                                           // 11155
          this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));                      // 11156
        }                                                                                                              // 11157
                                                                                                                       //
        return _events;                                                                                                // 11155
      }() /**                                                                                                          // 11155
           * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
           * @function                                                                                                 //
           * @fires Toggler#on                                                                                         //
           * @fires Toggler#off                                                                                        //
           */                                                                                                          //
    }, {                                                                                                               // 11153
      key: 'toggle',                                                                                                   // 11167
      value: function () {                                                                                             // 11168
        function toggle() {                                                                                            // 11168
          this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();                                            // 11169
        }                                                                                                              // 11170
                                                                                                                       //
        return toggle;                                                                                                 // 11168
      }()                                                                                                              // 11168
    }, {                                                                                                               // 11166
      key: '_toggleClass',                                                                                             // 11172
      value: function () {                                                                                             // 11173
        function _toggleClass() {                                                                                      // 11173
          this.$element.toggleClass(this.className);                                                                   // 11174
          var isOn = this.$element.hasClass(this.className);                                                           // 11176
                                                                                                                       //
          if (isOn) {                                                                                                  // 11177
            /**                                                                                                        // 11178
             * Fires if the target element has the class after a toggle.                                               //
             * @event Toggler#on                                                                                       //
             */this.$element.trigger('on.zf.toggler');                                                                 //
          } else {                                                                                                     // 11183
            /**                                                                                                        // 11184
             * Fires if the target element does not have the class after a toggle.                                     //
             * @event Toggler#off                                                                                      //
             */this.$element.trigger('off.zf.toggler');                                                                //
          }                                                                                                            // 11189
                                                                                                                       //
          this._updateARIA(isOn);                                                                                      // 11191
                                                                                                                       //
          this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');                                          // 11192
        }                                                                                                              // 11193
                                                                                                                       //
        return _toggleClass;                                                                                           // 11173
      }()                                                                                                              // 11173
    }, {                                                                                                               // 11171
      key: '_toggleAnimate',                                                                                           // 11195
      value: function () {                                                                                             // 11196
        function _toggleAnimate() {                                                                                    // 11196
          var _this = this;                                                                                            // 11197
                                                                                                                       //
          if (this.$element.is(':hidden')) {                                                                           // 11199
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["a" /* Motion */].animateIn(this.$element, this.animationIn, function () {
              _this._updateARIA(true);                                                                                 // 11201
                                                                                                                       //
              this.trigger('on.zf.toggler');                                                                           // 11202
              this.find('[data-mutate]').trigger('mutateme.zf.trigger');                                               // 11203
            });                                                                                                        // 11204
          } else {                                                                                                     // 11205
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["a" /* Motion */].animateOut(this.$element, this.animationOut, function () {
              _this._updateARIA(false);                                                                                // 11207
                                                                                                                       //
              this.trigger('off.zf.toggler');                                                                          // 11208
              this.find('[data-mutate]').trigger('mutateme.zf.trigger');                                               // 11209
            });                                                                                                        // 11210
          }                                                                                                            // 11211
        }                                                                                                              // 11212
                                                                                                                       //
        return _toggleAnimate;                                                                                         // 11196
      }()                                                                                                              // 11196
    }, {                                                                                                               // 11194
      key: '_updateARIA',                                                                                              // 11214
      value: function () {                                                                                             // 11215
        function _updateARIA(isOn) {                                                                                   // 11215
          this.$element.attr('aria-expanded', isOn ? true : false);                                                    // 11216
        }                                                                                                              // 11217
                                                                                                                       //
        return _updateARIA;                                                                                            // 11215
      }() /**                                                                                                          // 11215
           * Destroys the instance of Toggler on the element.                                                          //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 11213
      key: '_destroy',                                                                                                 // 11225
      value: function () {                                                                                             // 11226
        function _destroy() {                                                                                          // 11226
          this.$element.off('.zf.toggler');                                                                            // 11227
        }                                                                                                              // 11228
                                                                                                                       //
        return _destroy;                                                                                               // 11226
      }()                                                                                                              // 11226
    }]);                                                                                                               // 11224
                                                                                                                       //
    return Toggler;                                                                                                    // 11231
  }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["a" /* Plugin */]);                                               // 11232
                                                                                                                       //
  Toggler.defaults = {                                                                                                 // 11234
    /**                                                                                                                // 11235
     * Tells the plugin if the element should animated when toggled.                                                   //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */animate: false                                                                                                  //
  }; /***/                                                                                                             // 11234
}, /* 35 */ /***/function (module, __webpack_exports__, __webpack_require__) {                                         // 11246
  "use strict"; /* harmony export (binding) */                                                                         // 11250
                                                                                                                       //
  __webpack_require__.d(__webpack_exports__, "a", function () {                                                        // 11251
    return Tooltip;                                                                                                    // 11251
  }); /* harmony import */                                                                                             // 11251
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0); /* harmony import */                              // 11252
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__); /* harmony import */
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1); /* harmony import */               // 11254
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4); /* harmony import */         // 11255
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(5); /* harmony import */           // 11256
                                                                                                                       //
  var __WEBPACK_IMPORTED_MODULE_4__foundation_positionable__ = __webpack_require__(15);                                // 11257
                                                                                                                       //
  var _createClass = function () {                                                                                     // 11260
    function defineProperties(target, props) {                                                                         // 11260
      for (var i = 0; i < props.length; i++) {                                                                         // 11260
        var descriptor = props[i];                                                                                     // 11260
        descriptor.enumerable = descriptor.enumerable || false;                                                        // 11260
        descriptor.configurable = true;                                                                                // 11260
        if ("value" in descriptor) descriptor.writable = true;                                                         // 11260
        Object.defineProperty(target, descriptor.key, descriptor);                                                     // 11260
      }                                                                                                                // 11260
    }                                                                                                                  // 11260
                                                                                                                       //
    return function (Constructor, protoProps, staticProps) {                                                           // 11260
      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                             // 11260
      if (staticProps) defineProperties(Constructor, staticProps);                                                     // 11260
      return Constructor;                                                                                              // 11260
    };                                                                                                                 // 11260
  }();                                                                                                                 // 11260
                                                                                                                       //
  var _get = function () {                                                                                             // 11262
    function get(object, property, receiver) {                                                                         // 11262
      if (object === null) object = Function.prototype;                                                                // 11262
      var desc = Object.getOwnPropertyDescriptor(object, property);                                                    // 11262
                                                                                                                       //
      if (desc === undefined) {                                                                                        // 11262
        var parent = Object.getPrototypeOf(object);                                                                    // 11262
                                                                                                                       //
        if (parent === null) {                                                                                         // 11262
          return undefined;                                                                                            // 11262
        } else {                                                                                                       // 11262
          return get(parent, property, receiver);                                                                      // 11262
        }                                                                                                              // 11262
      } else if ("value" in desc) {                                                                                    // 11262
        return desc.value;                                                                                             // 11262
      } else {                                                                                                         // 11262
        var getter = desc.get;                                                                                         // 11262
                                                                                                                       //
        if (getter === undefined) {                                                                                    // 11262
          return undefined;                                                                                            // 11262
        }                                                                                                              // 11262
                                                                                                                       //
        return getter.call(receiver);                                                                                  // 11262
      }                                                                                                                // 11262
    }                                                                                                                  // 11262
                                                                                                                       //
    return get;                                                                                                        // 11262
  }();                                                                                                                 // 11262
                                                                                                                       //
  function _classCallCheck(instance, Constructor) {                                                                    // 11264
    if (!(instance instanceof Constructor)) {                                                                          // 11264
      throw new TypeError("Cannot call a class as a function");                                                        // 11264
    }                                                                                                                  // 11264
  }                                                                                                                    // 11264
                                                                                                                       //
  function _possibleConstructorReturn(self, call) {                                                                    // 11266
    if (!self) {                                                                                                       // 11266
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                           // 11266
    }                                                                                                                  // 11266
                                                                                                                       //
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  }                                                                                                                    // 11266
                                                                                                                       //
  function _inherits(subClass, superClass) {                                                                           // 11268
    if (typeof superClass !== "function" && superClass !== null) {                                                     // 11268
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }                                                                                                                  // 11268
                                                                                                                       //
    subClass.prototype = Object.create(superClass && superClass.prototype, {                                           // 11268
      constructor: {                                                                                                   // 11268
        value: subClass,                                                                                               // 11268
        enumerable: false,                                                                                             // 11268
        writable: true,                                                                                                // 11268
        configurable: true                                                                                             // 11268
      }                                                                                                                // 11268
    });                                                                                                                // 11268
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  } /**                                                                                                                // 11268
     * Tooltip module.                                                                                                 //
     * @module foundation.tooltip                                                                                      //
     * @requires foundation.util.box                                                                                   //
     * @requires foundation.util.mediaQuery                                                                            //
     * @requires foundation.util.triggers                                                                              //
     */                                                                                                                //
                                                                                                                       //
  var Tooltip = function (_Positionable) {                                                                             // 11285
    _inherits(Tooltip, _Positionable);                                                                                 // 11286
                                                                                                                       //
    function Tooltip() {                                                                                               // 11288
      _classCallCheck(this, Tooltip);                                                                                  // 11289
                                                                                                                       //
      return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
    }                                                                                                                  // 11292
                                                                                                                       //
    _createClass(Tooltip, [{                                                                                           // 11294
      key: '_setup',                                                                                                   // 11295
      /**                                                                                                              // 11297
       * Creates a new instance of a Tooltip.                                                                          //
       * @class                                                                                                        //
       * @name Tooltip                                                                                                 //
       * @fires Tooltip#init                                                                                           //
       * @param {jQuery} element - jQuery object to attach a tooltip to.                                               //
       * @param {Object} options - object to extend the default configuration.                                         //
       */value: function () {                                                                                          //
        function _setup(element, options) {                                                                            // 11305
          this.$element = element;                                                                                     // 11306
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tooltip.defaults, this.$element.data(), options);
          this.className = 'Tooltip'; // ie9 back compat                                                               // 11308
                                                                                                                       //
          this.isActive = false;                                                                                       // 11310
          this.isClick = false; // Triggers init is idempotent, just need to make sure it is initialized               // 11311
                                                                                                                       //
          __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
                                                                                                                       //
          this._init();                                                                                                // 11316
        }                                                                                                              // 11317
                                                                                                                       //
        return _setup;                                                                                                 // 11305
      }() /**                                                                                                          // 11305
           * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11294
      key: '_init',                                                                                                    // 11325
      value: function () {                                                                                             // 11326
        function _init() {                                                                                             // 11326
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();                     // 11327
                                                                                                                       //
          var elemId = this.$element.attr('aria-describedby') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, 'tooltip');
                                                                                                                       //
          this.options.tipText = this.options.tipText || this.$element.attr('title');                                  // 11330
          this.template = this.options.template ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.template) : this._buildTemplate(elemId);
                                                                                                                       //
          if (this.options.allowHtml) {                                                                                // 11333
            this.template.appendTo(document.body).html(this.options.tipText).hide();                                   // 11334
          } else {                                                                                                     // 11335
            this.template.appendTo(document.body).text(this.options.tipText).hide();                                   // 11336
          }                                                                                                            // 11337
                                                                                                                       //
          this.$element.attr({                                                                                         // 11339
            'title': '',                                                                                               // 11340
            'aria-describedby': elemId,                                                                                // 11341
            'data-yeti-box': elemId,                                                                                   // 11342
            'data-toggle': elemId,                                                                                     // 11343
            'data-resize': elemId                                                                                      // 11344
          }).addClass(this.options.triggerClass);                                                                      // 11339
                                                                                                                       //
          _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_init', this).call(this);     // 11347
                                                                                                                       //
          this._events();                                                                                              // 11348
        }                                                                                                              // 11349
                                                                                                                       //
        return _init;                                                                                                  // 11326
      }()                                                                                                              // 11326
    }, {                                                                                                               // 11324
      key: '_getDefaultPosition',                                                                                      // 11351
      value: function () {                                                                                             // 11352
        function _getDefaultPosition() {                                                                               // 11352
          // handle legacy classnames                                                                                  // 11353
          var position = this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);                             // 11354
          return position ? position[0] : 'top';                                                                       // 11355
        }                                                                                                              // 11356
                                                                                                                       //
        return _getDefaultPosition;                                                                                    // 11352
      }()                                                                                                              // 11352
    }, {                                                                                                               // 11350
      key: '_getDefaultAlignment',                                                                                     // 11358
      value: function () {                                                                                             // 11359
        function _getDefaultAlignment() {                                                                              // 11359
          return 'center';                                                                                             // 11360
        }                                                                                                              // 11361
                                                                                                                       //
        return _getDefaultAlignment;                                                                                   // 11359
      }()                                                                                                              // 11359
    }, {                                                                                                               // 11357
      key: '_getHOffset',                                                                                              // 11363
      value: function () {                                                                                             // 11364
        function _getHOffset() {                                                                                       // 11364
          if (this.position === 'left' || this.position === 'right') {                                                 // 11365
            return this.options.hOffset + this.options.tooltipWidth;                                                   // 11366
          } else {                                                                                                     // 11367
            return this.options.hOffset;                                                                               // 11368
          }                                                                                                            // 11369
        }                                                                                                              // 11370
                                                                                                                       //
        return _getHOffset;                                                                                            // 11364
      }()                                                                                                              // 11364
    }, {                                                                                                               // 11362
      key: '_getVOffset',                                                                                              // 11372
      value: function () {                                                                                             // 11373
        function _getVOffset() {                                                                                       // 11373
          if (this.position === 'top' || this.position === 'bottom') {                                                 // 11374
            return this.options.vOffset + this.options.tooltipHeight;                                                  // 11375
          } else {                                                                                                     // 11376
            return this.options.vOffset;                                                                               // 11377
          }                                                                                                            // 11378
        }                                                                                                              // 11379
                                                                                                                       //
        return _getVOffset;                                                                                            // 11373
      }() /**                                                                                                          // 11373
           * builds the tooltip element, adds attributes, and returns the template.                                    //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11371
      key: '_buildTemplate',                                                                                           // 11387
      value: function () {                                                                                             // 11388
        function _buildTemplate(id) {                                                                                  // 11388
          var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
                                                                                                                       //
          var $template = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass(templateClasses).attr({
            'role': 'tooltip',                                                                                         // 11391
            'aria-hidden': true,                                                                                       // 11392
            'data-is-active': false,                                                                                   // 11393
            'data-is-focus': false,                                                                                    // 11394
            'id': id                                                                                                   // 11395
          });                                                                                                          // 11390
                                                                                                                       //
          return $template;                                                                                            // 11397
        }                                                                                                              // 11398
                                                                                                                       //
        return _buildTemplate;                                                                                         // 11388
      }() /**                                                                                                          // 11388
           * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
           * if the tooltip is larger than the screen width, default to full width - any user selected margin          //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11386
      key: '_setPosition',                                                                                             // 11407
      value: function () {                                                                                             // 11408
        function _setPosition() {                                                                                      // 11408
          _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_setPosition', this).call(this, this.$element, this.template);
        }                                                                                                              // 11410
                                                                                                                       //
        return _setPosition;                                                                                           // 11408
      }() /**                                                                                                          // 11408
           * reveals the tooltip, and fires an event to close any other open tooltips on the page                      //
           * @fires Tooltip#closeme                                                                                    //
           * @fires Tooltip#show                                                                                       //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 11406
      key: 'show',                                                                                                     // 11420
      value: function () {                                                                                             // 11421
        function show() {                                                                                              // 11421
          if (this.options.showOn !== 'all' && !__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */].is(this.options.showOn)) {
            // console.error('The screen is too small to display this tooltip');                                       // 11423
            return false;                                                                                              // 11424
          }                                                                                                            // 11425
                                                                                                                       //
          var _this = this;                                                                                            // 11427
                                                                                                                       //
          this.template.css('visibility', 'hidden').show();                                                            // 11428
                                                                                                                       //
          this._setPosition();                                                                                         // 11429
                                                                                                                       //
          this.template.removeClass('top bottom left right').addClass(this.position);                                  // 11430
          this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment); /**
                                                                                                                                        * Fires to close all other open tooltips on the page
                                                                                                                                        * @event Closeme#tooltip
                                                                                                                                        */
          this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));                                       // 11437
          this.template.attr({                                                                                         // 11439
            'data-is-active': true,                                                                                    // 11440
            'aria-hidden': false                                                                                       // 11441
          });                                                                                                          // 11439
          _this.isActive = true; // console.log(this.template);                                                        // 11443
                                                                                                                       //
          this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {//maybe do stuff?
          }); /**                                                                                                      // 11447
               * Fires when the tooltip is shown                                                                       //
               * @event Tooltip#show                                                                                   //
               */                                                                                                      //
          this.$element.trigger('show.zf.tooltip');                                                                    // 11452
        }                                                                                                              // 11453
                                                                                                                       //
        return show;                                                                                                   // 11421
      }() /**                                                                                                          // 11421
           * Hides the current tooltip, and resets the positioning class if it was changed due to collision            //
           * @fires Tooltip#hide                                                                                       //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 11419
      key: 'hide',                                                                                                     // 11462
      value: function () {                                                                                             // 11463
        function hide() {                                                                                              // 11463
          // console.log('hiding', this.$element.data('yeti-box'));                                                    // 11464
          var _this = this;                                                                                            // 11465
                                                                                                                       //
          this.template.stop().attr({                                                                                  // 11466
            'aria-hidden': true,                                                                                       // 11467
            'data-is-active': false                                                                                    // 11468
          }).fadeOut(this.options.fadeOutDuration, function () {                                                       // 11466
            _this.isActive = false;                                                                                    // 11470
            _this.isClick = false;                                                                                     // 11471
          }); /**                                                                                                      // 11472
               * fires when the tooltip is hidden                                                                      //
               * @event Tooltip#hide                                                                                   //
               */                                                                                                      //
          this.$element.trigger('hide.zf.tooltip');                                                                    // 11477
        }                                                                                                              // 11478
                                                                                                                       //
        return hide;                                                                                                   // 11463
      }() /**                                                                                                          // 11463
           * adds event listeners for the tooltip and its anchor                                                       //
           * TODO combine some of the listeners like focus and mouseenter, etc.                                        //
           * @private                                                                                                  //
           */                                                                                                          //
    }, {                                                                                                               // 11461
      key: '_events',                                                                                                  // 11487
      value: function () {                                                                                             // 11488
        function _events() {                                                                                           // 11488
          var _this = this;                                                                                            // 11489
                                                                                                                       //
          var $template = this.template;                                                                               // 11490
          var isFocus = false;                                                                                         // 11491
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 11493
            this.$element.on('mouseenter.zf.tooltip', function (e) {                                                   // 11495
              if (!_this.isActive) {                                                                                   // 11496
                _this.timeout = setTimeout(function () {                                                               // 11497
                  _this.show();                                                                                        // 11498
                }, _this.options.hoverDelay);                                                                          // 11499
              }                                                                                                        // 11500
            }).on('mouseleave.zf.tooltip', function (e) {                                                              // 11501
              clearTimeout(_this.timeout);                                                                             // 11502
                                                                                                                       //
              if (!isFocus || _this.isClick && !_this.options.clickOpen) {                                             // 11503
                _this.hide();                                                                                          // 11504
              }                                                                                                        // 11505
            });                                                                                                        // 11506
          }                                                                                                            // 11507
                                                                                                                       //
          if (this.options.clickOpen) {                                                                                // 11509
            this.$element.on('mousedown.zf.tooltip', function (e) {                                                    // 11510
              e.stopImmediatePropagation();                                                                            // 11511
                                                                                                                       //
              if (_this.isClick) {//_this.hide();                                                                      // 11512
                // _this.isClick = false;                                                                              // 11514
              } else {                                                                                                 // 11515
                _this.isClick = true;                                                                                  // 11516
                                                                                                                       //
                if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {             // 11517
                  _this.show();                                                                                        // 11518
                }                                                                                                      // 11519
              }                                                                                                        // 11520
            });                                                                                                        // 11521
          } else {                                                                                                     // 11522
            this.$element.on('mousedown.zf.tooltip', function (e) {                                                    // 11523
              e.stopImmediatePropagation();                                                                            // 11524
              _this.isClick = true;                                                                                    // 11525
            });                                                                                                        // 11526
          }                                                                                                            // 11527
                                                                                                                       //
          if (!this.options.disableForTouch) {                                                                         // 11529
            this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {                                      // 11530
              _this.isActive ? _this.hide() : _this.show();                                                            // 11531
            });                                                                                                        // 11532
          }                                                                                                            // 11533
                                                                                                                       //
          this.$element.on({                                                                                           // 11535
            // 'toggle.zf.trigger': this.toggle.bind(this),                                                            // 11536
            // 'close.zf.trigger': this.hide.bind(this)                                                                // 11537
            'close.zf.trigger': this.hide.bind(this)                                                                   // 11538
          });                                                                                                          // 11535
          this.$element.on('focus.zf.tooltip', function (e) {                                                          // 11541
            isFocus = true;                                                                                            // 11542
                                                                                                                       //
            if (_this.isClick) {                                                                                       // 11543
              // If we're not showing open on clicks, we need to pretend a click-launched focus isn't                  // 11544
              // a real focus, otherwise on hover and come back we get bad behavior                                    // 11545
              if (!_this.options.clickOpen) {                                                                          // 11546
                isFocus = false;                                                                                       // 11547
              }                                                                                                        // 11548
                                                                                                                       //
              return false;                                                                                            // 11549
            } else {                                                                                                   // 11550
              _this.show();                                                                                            // 11551
            }                                                                                                          // 11552
          }).on('focusout.zf.tooltip', function (e) {                                                                  // 11553
            isFocus = false;                                                                                           // 11554
            _this.isClick = false;                                                                                     // 11555
                                                                                                                       //
            _this.hide();                                                                                              // 11556
          }).on('resizeme.zf.trigger', function () {                                                                   // 11557
            if (_this.isActive) {                                                                                      // 11558
              _this._setPosition();                                                                                    // 11559
            }                                                                                                          // 11560
          });                                                                                                          // 11561
        }                                                                                                              // 11562
                                                                                                                       //
        return _events;                                                                                                // 11488
      }() /**                                                                                                          // 11488
           * adds a toggle method, in addition to the static show() & hide() functions                                 //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 11486
      key: 'toggle',                                                                                                   // 11570
      value: function () {                                                                                             // 11571
        function toggle() {                                                                                            // 11571
          if (this.isActive) {                                                                                         // 11572
            this.hide();                                                                                               // 11573
          } else {                                                                                                     // 11574
            this.show();                                                                                               // 11575
          }                                                                                                            // 11576
        }                                                                                                              // 11577
                                                                                                                       //
        return toggle;                                                                                                 // 11571
      }() /**                                                                                                          // 11571
           * Destroys an instance of tooltip, removes template element from the view.                                  //
           * @function                                                                                                 //
           */                                                                                                          //
    }, {                                                                                                               // 11569
      key: '_destroy',                                                                                                 // 11585
      value: function () {                                                                                             // 11586
        function _destroy() {                                                                                          // 11586
          this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');
          this.template.remove();                                                                                      // 11589
        }                                                                                                              // 11590
                                                                                                                       //
        return _destroy;                                                                                               // 11586
      }()                                                                                                              // 11586
    }]);                                                                                                               // 11584
                                                                                                                       //
    return Tooltip;                                                                                                    // 11593
  }(__WEBPACK_IMPORTED_MODULE_4__foundation_positionable__["a" /* Positionable */]);                                   // 11594
                                                                                                                       //
  Tooltip.defaults = {                                                                                                 // 11596
    disableForTouch: false,                                                                                            // 11597
    /**                                                                                                                // 11598
     * Time, in ms, before a tooltip should open on hover.                                                             //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 200                                                                                                    //
     */hoverDelay: 200,                                                                                                //
    /**                                                                                                                // 11605
     * Time, in ms, a tooltip should take to fade into view.                                                           //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 150                                                                                                    //
     */fadeInDuration: 150,                                                                                            //
    /**                                                                                                                // 11612
     * Time, in ms, a tooltip should take to fade out of view.                                                         //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 150                                                                                                    //
     */fadeOutDuration: 150,                                                                                           //
    /**                                                                                                                // 11619
     * Disables hover events from opening the tooltip if set to true                                                   //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */disableHover: false,                                                                                            //
    /**                                                                                                                // 11626
     * Optional addtional classes to apply to the tooltip template on init.                                            //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */templateClasses: '',                                                                                            //
    /**                                                                                                                // 11633
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.                                 //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'tooltip'                                                                                              //
     */tooltipClass: 'tooltip',                                                                                        //
    /**                                                                                                                // 11640
     * Class applied to the tooltip anchor element.                                                                    //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'has-tip'                                                                                              //
     */triggerClass: 'has-tip',                                                                                        //
    /**                                                                                                                // 11647
     * Minimum breakpoint size at which to open the tooltip.                                                           //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'small'                                                                                                //
     */showOn: 'small',                                                                                                //
    /**                                                                                                                // 11654
     * Custom template to be used to generate markup for tooltip.                                                      //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */template: '',                                                                                                   //
    /**                                                                                                                // 11661
     * Text displayed in the tooltip template on open.                                                                 //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */tipText: '',                                                                                                    //
    touchCloseText: 'Tap to close.',                                                                                   // 11668
    /**                                                                                                                // 11669
     * Allows the tooltip to remain open if triggered with a click or touch event.                                     //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default true                                                                                                   //
     */clickOpen: true,                                                                                                //
    /**                                                                                                                // 11676
     * DEPRECATED Additional positioning classes, set by the JS                                                        //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default ''                                                                                                     //
     */positionClass: '',                                                                                              //
    /**                                                                                                                // 11683
     * Position of tooltip. Can be left, right, bottom, top, or auto.                                                  //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */position: 'auto',                                                                                               //
    /**                                                                                                                // 11690
     * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.                      //
     * @option                                                                                                         //
     * @type {string}                                                                                                  //
     * @default 'auto'                                                                                                 //
     */alignment: 'auto',                                                                                              //
    /**                                                                                                                // 11697
     * Allow overlap of container/window. If false, tooltip will first try to                                          //
     * position as defined by data-position and data-alignment, but reposition if                                      //
     * it would cause an overflow.  @option                                                                            //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */allowOverlap: false,                                                                                            //
    /**                                                                                                                // 11705
     * Allow overlap of only the bottom of the container. This is the most common                                      //
     * behavior for dropdowns, allowing the dropdown to extend the bottom of the                                       //
     * screen but not otherwise influence or break out of the container.                                               //
     * Less common for tooltips.                                                                                       //
     * @option                                                                                                         //
     * @type {boolean}                                                                                                 //
     * @default false                                                                                                  //
     */allowBottomOverlap: false,                                                                                      //
    /**                                                                                                                // 11715
     * Distance, in pixels, the template should push away from the anchor on the Y axis.                               //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */vOffset: 0,                                                                                                     //
    /**                                                                                                                // 11722
     * Distance, in pixels, the template should push away from the anchor on the X axis                                //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 0                                                                                                      //
     */hOffset: 0,                                                                                                     //
    /**                                                                                                                // 11729
     * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip                                    //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 14                                                                                                     //
     */tooltipHeight: 14,                                                                                              //
    /**                                                                                                                // 11736
     * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip                                  //
     * @option                                                                                                         //
     * @type {number}                                                                                                  //
     * @default 12                                                                                                     //
     */tooltipWidth: 12,                                                                                               //
    /**                                                                                                                // 11743
    * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,                         //
    * allowing HTML may open yourself up to XSS attacks.                                                               //
    * @option                                                                                                          //
    * @type {boolean}                                                                                                  //
    * @default false                                                                                                   //
    */allowHtml: false                                                                                                 //
  }; /**                                                                                                               // 11596
      * TODO utilize resize event trigger                                                                              //
      */ /***/                                                                                                         //
}, /* 36 */ /***/function (module, exports, __webpack_require__) {                                                     // 11759
  module.exports = __webpack_require__(19); /***/                                                                      // 11763
}] /******/);                                                                                                          // 11766
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".scss",
    ".css"
  ]
});
require("./node_modules/meteor/zurb:foundation-sites/dist/js/foundation.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['zurb:foundation-sites'] = {};

})();
